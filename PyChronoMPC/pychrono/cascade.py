# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _cascade
else:
    import _cascade

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SHARED_PTR_DISOWN = _cascade.SHARED_PTR_DISOWN

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cascade.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _cascade.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _cascade.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _cascade.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _cascade.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _cascade.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _cascade.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _cascade.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _cascade.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _cascade.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _cascade.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _cascade.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _cascade.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _cascade.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _cascade.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _cascade.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _cascade.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _cascade:
_cascade.SwigPyIterator_swigregister(SwigPyIterator)

class int_ptr(object):
    r"""Proxy of C++ int_ptr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(int_ptr self) -> int_ptr"""
        _cascade.int_ptr_swiginit(self, _cascade.new_int_ptr())
    __swig_destroy__ = _cascade.delete_int_ptr

    def assign(self, value):
        r"""assign(int_ptr self, int value)"""
        return _cascade.int_ptr_assign(self, value)

    def value(self):
        r"""value(int_ptr self) -> int"""
        return _cascade.int_ptr_value(self)

    def cast(self):
        r"""cast(int_ptr self) -> int *"""
        return _cascade.int_ptr_cast(self)

    @staticmethod
    def frompointer(t):
        r"""frompointer(int * t) -> int_ptr"""
        return _cascade.int_ptr_frompointer(t)

# Register int_ptr in _cascade:
_cascade.int_ptr_swigregister(int_ptr)

def int_ptr_frompointer(t):
    r"""int_ptr_frompointer(int * t) -> int_ptr"""
    return _cascade.int_ptr_frompointer(t)

class double_ptr(object):
    r"""Proxy of C++ double_ptr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(double_ptr self) -> double_ptr"""
        _cascade.double_ptr_swiginit(self, _cascade.new_double_ptr())
    __swig_destroy__ = _cascade.delete_double_ptr

    def assign(self, value):
        r"""assign(double_ptr self, double value)"""
        return _cascade.double_ptr_assign(self, value)

    def value(self):
        r"""value(double_ptr self) -> double"""
        return _cascade.double_ptr_value(self)

    def cast(self):
        r"""cast(double_ptr self) -> double *"""
        return _cascade.double_ptr_cast(self)

    @staticmethod
    def frompointer(t):
        r"""frompointer(double * t) -> double_ptr"""
        return _cascade.double_ptr_frompointer(t)

# Register double_ptr in _cascade:
_cascade.double_ptr_swigregister(double_ptr)

def double_ptr_frompointer(t):
    r"""double_ptr_frompointer(double * t) -> double_ptr"""
    return _cascade.double_ptr_frompointer(t)

class float_ptr(object):
    r"""Proxy of C++ float_ptr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(float_ptr self) -> float_ptr"""
        _cascade.float_ptr_swiginit(self, _cascade.new_float_ptr())
    __swig_destroy__ = _cascade.delete_float_ptr

    def assign(self, value):
        r"""assign(float_ptr self, float value)"""
        return _cascade.float_ptr_assign(self, value)

    def value(self):
        r"""value(float_ptr self) -> float"""
        return _cascade.float_ptr_value(self)

    def cast(self):
        r"""cast(float_ptr self) -> float *"""
        return _cascade.float_ptr_cast(self)

    @staticmethod
    def frompointer(t):
        r"""frompointer(float * t) -> float_ptr"""
        return _cascade.float_ptr_frompointer(t)

# Register float_ptr in _cascade:
_cascade.float_ptr_swigregister(float_ptr)

def float_ptr_frompointer(t):
    r"""float_ptr_frompointer(float * t) -> float_ptr"""
    return _cascade.float_ptr_frompointer(t)

class vector_ChLinePath(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_ChLinePath self) -> SwigPyIterator"""
        return _cascade.vector_ChLinePath_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_ChLinePath self) -> bool"""
        return _cascade.vector_ChLinePath___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_ChLinePath self) -> bool"""
        return _cascade.vector_ChLinePath___bool__(self)

    def __len__(self):
        r"""__len__(vector_ChLinePath self) -> std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::size_type"""
        return _cascade.vector_ChLinePath___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vector_ChLinePath self, std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::difference_type i, std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::difference_type j) -> vector_ChLinePath"""
        return _cascade.vector_ChLinePath___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_ChLinePath self, std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::difference_type i, std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::difference_type j)
        __setslice__(vector_ChLinePath self, std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::difference_type i, std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::difference_type j, vector_ChLinePath v)
        """
        return _cascade.vector_ChLinePath___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vector_ChLinePath self, std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::difference_type i, std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::difference_type j)"""
        return _cascade.vector_ChLinePath___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_ChLinePath self, std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::difference_type i)
        __delitem__(vector_ChLinePath self, PySliceObject * slice)
        """
        return _cascade.vector_ChLinePath___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_ChLinePath self, PySliceObject * slice) -> vector_ChLinePath
        __getitem__(vector_ChLinePath self, std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::difference_type i) -> std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::value_type const &
        """
        return _cascade.vector_ChLinePath___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_ChLinePath self, PySliceObject * slice, vector_ChLinePath v)
        __setitem__(vector_ChLinePath self, PySliceObject * slice)
        __setitem__(vector_ChLinePath self, std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::difference_type i, std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::value_type const & x)
        """
        return _cascade.vector_ChLinePath___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_ChLinePath self) -> std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::value_type"""
        return _cascade.vector_ChLinePath_pop(self)

    def append(self, x):
        r"""append(vector_ChLinePath self, std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::value_type const & x)"""
        return _cascade.vector_ChLinePath_append(self, x)

    def empty(self):
        r"""empty(vector_ChLinePath self) -> bool"""
        return _cascade.vector_ChLinePath_empty(self)

    def size(self):
        r"""size(vector_ChLinePath self) -> std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::size_type"""
        return _cascade.vector_ChLinePath_size(self)

    def swap(self, v):
        r"""swap(vector_ChLinePath self, vector_ChLinePath v)"""
        return _cascade.vector_ChLinePath_swap(self, v)

    def begin(self):
        r"""begin(vector_ChLinePath self) -> std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::iterator"""
        return _cascade.vector_ChLinePath_begin(self)

    def end(self):
        r"""end(vector_ChLinePath self) -> std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::iterator"""
        return _cascade.vector_ChLinePath_end(self)

    def rbegin(self):
        r"""rbegin(vector_ChLinePath self) -> std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::reverse_iterator"""
        return _cascade.vector_ChLinePath_rbegin(self)

    def rend(self):
        r"""rend(vector_ChLinePath self) -> std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::reverse_iterator"""
        return _cascade.vector_ChLinePath_rend(self)

    def clear(self):
        r"""clear(vector_ChLinePath self)"""
        return _cascade.vector_ChLinePath_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_ChLinePath self) -> std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::allocator_type"""
        return _cascade.vector_ChLinePath_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_ChLinePath self)"""
        return _cascade.vector_ChLinePath_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_ChLinePath self, std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::iterator pos) -> std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::iterator
        erase(vector_ChLinePath self, std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::iterator first, std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::iterator last) -> std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::iterator
        """
        return _cascade.vector_ChLinePath_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_ChLinePath self) -> vector_ChLinePath
        __init__(vector_ChLinePath self, vector_ChLinePath other) -> vector_ChLinePath
        __init__(vector_ChLinePath self, std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::size_type size) -> vector_ChLinePath
        __init__(vector_ChLinePath self, std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::size_type size, std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::value_type const & value) -> vector_ChLinePath
        """
        _cascade.vector_ChLinePath_swiginit(self, _cascade.new_vector_ChLinePath(*args))

    def push_back(self, x):
        r"""push_back(vector_ChLinePath self, std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::value_type const & x)"""
        return _cascade.vector_ChLinePath_push_back(self, x)

    def front(self):
        r"""front(vector_ChLinePath self) -> std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::value_type const &"""
        return _cascade.vector_ChLinePath_front(self)

    def back(self):
        r"""back(vector_ChLinePath self) -> std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::value_type const &"""
        return _cascade.vector_ChLinePath_back(self)

    def assign(self, n, x):
        r"""assign(vector_ChLinePath self, std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::size_type n, std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::value_type const & x)"""
        return _cascade.vector_ChLinePath_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_ChLinePath self, std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::size_type new_size)
        resize(vector_ChLinePath self, std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::size_type new_size, std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::value_type const & x)
        """
        return _cascade.vector_ChLinePath_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_ChLinePath self, std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::iterator pos, std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::value_type const & x) -> std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::iterator
        insert(vector_ChLinePath self, std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::iterator pos, std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::size_type n, std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::value_type const & x)
        """
        return _cascade.vector_ChLinePath_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vector_ChLinePath self, std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::size_type n)"""
        return _cascade.vector_ChLinePath_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_ChLinePath self) -> std::vector< std::shared_ptr< ::chrono::geometry::ChLinePath > >::size_type"""
        return _cascade.vector_ChLinePath_capacity(self)
    __swig_destroy__ = _cascade.delete_vector_ChLinePath

# Register vector_ChLinePath in _cascade:
_cascade.vector_ChLinePath_swigregister(vector_ChLinePath)

import pychrono.core
class ChCascadeTriangulate(object):
    r"""Proxy of C++ chrono::cascade::ChCascadeTriangulate class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, defl=0.05, is_rel=False, ang=0.5):
        r"""__init__(ChCascadeTriangulate self, double defl=0.05, bool is_rel=False, double ang=0.5) -> ChCascadeTriangulate"""
        _cascade.ChCascadeTriangulate_swiginit(self, _cascade.new_ChCascadeTriangulate(defl, is_rel, ang))
    deflection_is_relative = property(_cascade.ChCascadeTriangulate_deflection_is_relative_get, _cascade.ChCascadeTriangulate_deflection_is_relative_set, doc=r"""deflection_is_relative : bool""")
    deflection = property(_cascade.ChCascadeTriangulate_deflection_get, _cascade.ChCascadeTriangulate_deflection_set, doc=r"""deflection : double""")
    angular_deflection = property(_cascade.ChCascadeTriangulate_angular_deflection_get, _cascade.ChCascadeTriangulate_angular_deflection_set, doc=r"""angular_deflection : double""")
    __swig_destroy__ = _cascade.delete_ChCascadeTriangulate

# Register ChCascadeTriangulate in _cascade:
_cascade.ChCascadeTriangulate_swigregister(ChCascadeTriangulate)

class ChCascadeVisualShape(pychrono.core.ChVisualShape):
    r"""Proxy of C++ chrono::cascade::ChCascadeVisualShape class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChCascadeVisualShape self) -> ChCascadeVisualShape
        __init__(ChCascadeVisualShape self, TopoDS_Shape const & ms) -> ChCascadeVisualShape
        """
        _cascade.ChCascadeVisualShape_swiginit(self, _cascade.new_ChCascadeVisualShape(*args))
    __swig_destroy__ = _cascade.delete_ChCascadeVisualShape

    def Shape(self):
        r"""Shape(ChCascadeVisualShape self) -> TopoDS_Shape &"""
        return _cascade.ChCascadeVisualShape_Shape(self)

    def ArchiveOut(self, marchive):
        r"""ArchiveOut(ChCascadeVisualShape self, chrono::ChArchiveOut & marchive)"""
        return _cascade.ChCascadeVisualShape_ArchiveOut(self, marchive)

    def ArchiveIn(self, marchive):
        r"""ArchiveIn(ChCascadeVisualShape self, chrono::ChArchiveIn & marchive)"""
        return _cascade.ChCascadeVisualShape_ArchiveIn(self, marchive)

# Register ChCascadeVisualShape in _cascade:
_cascade.ChCascadeVisualShape_swigregister(ChCascadeVisualShape)

class ChCascadeBodyEasy(pychrono.core.ChBodyAuxRef):
    r"""Proxy of C++ chrono::cascade::ChCascadeBodyEasy class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChCascadeBodyEasy self, TopoDS_Shape & shape, double density, std::shared_ptr< chrono::cascade::ChCascadeTriangulate > vis_params, bool collide=False, std::shared_ptr< chrono::ChMaterialSurface > mat=0) -> ChCascadeBodyEasy
        __init__(ChCascadeBodyEasy self, TopoDS_Shape & shape, double density, bool visualize=True, bool collide=False, std::shared_ptr< chrono::ChMaterialSurface > mat=0) -> ChCascadeBodyEasy
        """
        _cascade.ChCascadeBodyEasy_swiginit(self, _cascade.new_ChCascadeBodyEasy(*args))
    topods_shape = property(_cascade.ChCascadeBodyEasy_topods_shape_get, _cascade.ChCascadeBodyEasy_topods_shape_set, doc=r"""topods_shape : TopoDS_Shape""")
    __swig_destroy__ = _cascade.delete_ChCascadeBodyEasy

# Register ChCascadeBodyEasy in _cascade:
_cascade.ChCascadeBodyEasy_swigregister(ChCascadeBodyEasy)

class ChCascadeBodyEasyProfile(pychrono.core.ChBodyAuxRef):
    r"""Proxy of C++ chrono::cascade::ChCascadeBodyEasyProfile class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, wires, holes, thickness, density, vis_params, collide=False, mat=0):
        r"""__init__(ChCascadeBodyEasyProfile self, vector_ChLinePath wires, vector_ChLinePath holes, double thickness, double density, std::shared_ptr< chrono::cascade::ChCascadeTriangulate > vis_params, bool collide=False, std::shared_ptr< chrono::ChMaterialSurface > mat=0) -> ChCascadeBodyEasyProfile"""
        _cascade.ChCascadeBodyEasyProfile_swiginit(self, _cascade.new_ChCascadeBodyEasyProfile(wires, holes, thickness, density, vis_params, collide, mat))

    def AddProfile(self, wires, holes, mhickness, density, vis_params, collide=False, mat=0):
        r"""AddProfile(ChCascadeBodyEasyProfile self, vector_ChLinePath wires, vector_ChLinePath holes, double mhickness, double density, std::shared_ptr< chrono::cascade::ChCascadeTriangulate > vis_params, bool collide=False, std::shared_ptr< chrono::ChMaterialSurface > mat=0)"""
        return _cascade.ChCascadeBodyEasyProfile_AddProfile(self, wires, holes, mhickness, density, vis_params, collide, mat)

    def ClearProfiles(self):
        r"""ClearProfiles(ChCascadeBodyEasyProfile self)"""
        return _cascade.ChCascadeBodyEasyProfile_ClearProfiles(self)

    def UpdateCollisionAndVisualizationShapes(self):
        r"""UpdateCollisionAndVisualizationShapes(ChCascadeBodyEasyProfile self)"""
        return _cascade.ChCascadeBodyEasyProfile_UpdateCollisionAndVisualizationShapes(self)
    topods_shape = property(_cascade.ChCascadeBodyEasyProfile_topods_shape_get, _cascade.ChCascadeBodyEasyProfile_topods_shape_set, doc=r"""topods_shape : TopoDS_Shape""")
    __swig_destroy__ = _cascade.delete_ChCascadeBodyEasyProfile

# Register ChCascadeBodyEasyProfile in _cascade:
_cascade.ChCascadeBodyEasyProfile_swigregister(ChCascadeBodyEasyProfile)

class ChCascadeDoc(object):
    r"""Proxy of C++ chrono::cascade::ChCascadeDoc class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChCascadeDoc self) -> ChCascadeDoc"""
        _cascade.ChCascadeDoc_swiginit(self, _cascade.new_ChCascadeDoc())
    __swig_destroy__ = _cascade.delete_ChCascadeDoc

    def Load_STEP(self, filename):
        r"""Load_STEP(ChCascadeDoc self, char const * filename) -> bool"""
        return _cascade.ChCascadeDoc_Load_STEP(self, filename)

    def Dump(self, mstream):
        r"""Dump(ChCascadeDoc self, ChStreamOutAscii & mstream)"""
        return _cascade.ChCascadeDoc_Dump(self, mstream)

    def GetRootShape(self, mshape, num=1):
        r"""GetRootShape(ChCascadeDoc self, TopoDS_Shape & mshape, int const num=1) -> bool"""
        return _cascade.ChCascadeDoc_GetRootShape(self, mshape, num)

    def GetNamedShape(self, mshape, name, set_location_to_root=True, get_multiple=False):
        r"""GetNamedShape(ChCascadeDoc self, TopoDS_Shape & mshape, char * name, bool set_location_to_root=True, bool get_multiple=False) -> bool"""
        return _cascade.ChCascadeDoc_GetNamedShape(self, mshape, name, set_location_to_root, get_multiple)

    @staticmethod
    def GetVolumeProperties(mshape, density, center_position, inertiaXX, inertiaXY, volume, mass):
        r"""GetVolumeProperties(TopoDS_Shape const & mshape, double const density, ChVectorD center_position, ChVectorD inertiaXX, ChVectorD inertiaXY, double & volume, double & mass) -> bool"""
        return _cascade.ChCascadeDoc_GetVolumeProperties(mshape, density, center_position, inertiaXX, inertiaXY, volume, mass)

    def ScanCascadeShapes(self, mcallback):
        r"""ScanCascadeShapes(ChCascadeDoc self, chrono::cascade::ChCascadeDoc::callback_CascadeDoc & mcallback)"""
        return _cascade.ChCascadeDoc_ScanCascadeShapes(self, mcallback)

    @staticmethod
    def FromCascadeToChrono(from_coord, to_coord):
        r"""FromCascadeToChrono(TopLoc_Location const & from_coord, ChFrameD to_coord)"""
        return _cascade.ChCascadeDoc_FromCascadeToChrono(from_coord, to_coord)

    @staticmethod
    def FromChronoToCascade(from_coord, to_coord):
        r"""FromChronoToCascade(ChFrameD from_coord, TopLoc_Location & to_coord)"""
        return _cascade.ChCascadeDoc_FromChronoToCascade(from_coord, to_coord)

# Register ChCascadeDoc in _cascade:
_cascade.ChCascadeDoc_swigregister(ChCascadeDoc)

def ChCascadeDoc_GetVolumeProperties(mshape, density, center_position, inertiaXX, inertiaXY, volume, mass):
    r"""ChCascadeDoc_GetVolumeProperties(TopoDS_Shape const & mshape, double const density, ChVectorD center_position, ChVectorD inertiaXX, ChVectorD inertiaXY, double & volume, double & mass) -> bool"""
    return _cascade.ChCascadeDoc_GetVolumeProperties(mshape, density, center_position, inertiaXX, inertiaXY, volume, mass)

def ChCascadeDoc_FromCascadeToChrono(from_coord, to_coord):
    r"""ChCascadeDoc_FromCascadeToChrono(TopLoc_Location const & from_coord, ChFrameD to_coord)"""
    return _cascade.ChCascadeDoc_FromCascadeToChrono(from_coord, to_coord)

def ChCascadeDoc_FromChronoToCascade(from_coord, to_coord):
    r"""ChCascadeDoc_FromChronoToCascade(ChFrameD from_coord, TopLoc_Location & to_coord)"""
    return _cascade.ChCascadeDoc_FromChronoToCascade(from_coord, to_coord)



