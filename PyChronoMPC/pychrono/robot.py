# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _robot
else:
    import _robot

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SHARED_PTR_DISOWN = _robot.SHARED_PTR_DISOWN

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _robot.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _robot.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _robot.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _robot.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _robot.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _robot.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _robot.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _robot.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _robot.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _robot.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _robot.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _robot.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _robot.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _robot.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _robot.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _robot.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _robot.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _robot:
_robot.SwigPyIterator_swigregister(SwigPyIterator)

class int_ptr(object):
    r"""Proxy of C++ int_ptr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(int_ptr self) -> int_ptr"""
        _robot.int_ptr_swiginit(self, _robot.new_int_ptr())
    __swig_destroy__ = _robot.delete_int_ptr

    def assign(self, value):
        r"""assign(int_ptr self, int value)"""
        return _robot.int_ptr_assign(self, value)

    def value(self):
        r"""value(int_ptr self) -> int"""
        return _robot.int_ptr_value(self)

    def cast(self):
        r"""cast(int_ptr self) -> int *"""
        return _robot.int_ptr_cast(self)

    @staticmethod
    def frompointer(t):
        r"""frompointer(int * t) -> int_ptr"""
        return _robot.int_ptr_frompointer(t)

# Register int_ptr in _robot:
_robot.int_ptr_swigregister(int_ptr)

def int_ptr_frompointer(t):
    r"""int_ptr_frompointer(int * t) -> int_ptr"""
    return _robot.int_ptr_frompointer(t)

class double_ptr(object):
    r"""Proxy of C++ double_ptr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(double_ptr self) -> double_ptr"""
        _robot.double_ptr_swiginit(self, _robot.new_double_ptr())
    __swig_destroy__ = _robot.delete_double_ptr

    def assign(self, value):
        r"""assign(double_ptr self, double value)"""
        return _robot.double_ptr_assign(self, value)

    def value(self):
        r"""value(double_ptr self) -> double"""
        return _robot.double_ptr_value(self)

    def cast(self):
        r"""cast(double_ptr self) -> double *"""
        return _robot.double_ptr_cast(self)

    @staticmethod
    def frompointer(t):
        r"""frompointer(double * t) -> double_ptr"""
        return _robot.double_ptr_frompointer(t)

# Register double_ptr in _robot:
_robot.double_ptr_swigregister(double_ptr)

def double_ptr_frompointer(t):
    r"""double_ptr_frompointer(double * t) -> double_ptr"""
    return _robot.double_ptr_frompointer(t)

class float_ptr(object):
    r"""Proxy of C++ float_ptr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(float_ptr self) -> float_ptr"""
        _robot.float_ptr_swiginit(self, _robot.new_float_ptr())
    __swig_destroy__ = _robot.delete_float_ptr

    def assign(self, value):
        r"""assign(float_ptr self, float value)"""
        return _robot.float_ptr_assign(self, value)

    def value(self):
        r"""value(float_ptr self) -> float"""
        return _robot.float_ptr_value(self)

    def cast(self):
        r"""cast(float_ptr self) -> float *"""
        return _robot.float_ptr_cast(self)

    @staticmethod
    def frompointer(t):
        r"""frompointer(float * t) -> float_ptr"""
        return _robot.float_ptr_frompointer(t)

# Register float_ptr in _robot:
_robot.float_ptr_swigregister(float_ptr)

def float_ptr_frompointer(t):
    r"""float_ptr_frompointer(float * t) -> float_ptr"""
    return _robot.float_ptr_frompointer(t)

class vector_int(object):
    r"""Proxy of C++ std::vector< int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_int self) -> SwigPyIterator"""
        return _robot.vector_int_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_int self) -> bool"""
        return _robot.vector_int___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_int self) -> bool"""
        return _robot.vector_int___bool__(self)

    def __len__(self):
        r"""__len__(vector_int self) -> std::vector< int >::size_type"""
        return _robot.vector_int___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vector_int self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> vector_int"""
        return _robot.vector_int___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_int self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)
        __setslice__(vector_int self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, vector_int v)
        """
        return _robot.vector_int___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vector_int self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)"""
        return _robot.vector_int___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_int self, std::vector< int >::difference_type i)
        __delitem__(vector_int self, PySliceObject * slice)
        """
        return _robot.vector_int___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_int self, PySliceObject * slice) -> vector_int
        __getitem__(vector_int self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &
        """
        return _robot.vector_int___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_int self, PySliceObject * slice, vector_int v)
        __setitem__(vector_int self, PySliceObject * slice)
        __setitem__(vector_int self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)
        """
        return _robot.vector_int___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_int self) -> std::vector< int >::value_type"""
        return _robot.vector_int_pop(self)

    def append(self, x):
        r"""append(vector_int self, std::vector< int >::value_type const & x)"""
        return _robot.vector_int_append(self, x)

    def empty(self):
        r"""empty(vector_int self) -> bool"""
        return _robot.vector_int_empty(self)

    def size(self):
        r"""size(vector_int self) -> std::vector< int >::size_type"""
        return _robot.vector_int_size(self)

    def swap(self, v):
        r"""swap(vector_int self, vector_int v)"""
        return _robot.vector_int_swap(self, v)

    def begin(self):
        r"""begin(vector_int self) -> std::vector< int >::iterator"""
        return _robot.vector_int_begin(self)

    def end(self):
        r"""end(vector_int self) -> std::vector< int >::iterator"""
        return _robot.vector_int_end(self)

    def rbegin(self):
        r"""rbegin(vector_int self) -> std::vector< int >::reverse_iterator"""
        return _robot.vector_int_rbegin(self)

    def rend(self):
        r"""rend(vector_int self) -> std::vector< int >::reverse_iterator"""
        return _robot.vector_int_rend(self)

    def clear(self):
        r"""clear(vector_int self)"""
        return _robot.vector_int_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_int self) -> std::vector< int >::allocator_type"""
        return _robot.vector_int_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_int self)"""
        return _robot.vector_int_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_int self, std::vector< int >::iterator pos) -> std::vector< int >::iterator
        erase(vector_int self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator
        """
        return _robot.vector_int_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_int self) -> vector_int
        __init__(vector_int self, vector_int other) -> vector_int
        __init__(vector_int self, std::vector< int >::size_type size) -> vector_int
        __init__(vector_int self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> vector_int
        """
        _robot.vector_int_swiginit(self, _robot.new_vector_int(*args))

    def push_back(self, x):
        r"""push_back(vector_int self, std::vector< int >::value_type const & x)"""
        return _robot.vector_int_push_back(self, x)

    def front(self):
        r"""front(vector_int self) -> std::vector< int >::value_type const &"""
        return _robot.vector_int_front(self)

    def back(self):
        r"""back(vector_int self) -> std::vector< int >::value_type const &"""
        return _robot.vector_int_back(self)

    def assign(self, n, x):
        r"""assign(vector_int self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)"""
        return _robot.vector_int_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_int self, std::vector< int >::size_type new_size)
        resize(vector_int self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)
        """
        return _robot.vector_int_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_int self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator
        insert(vector_int self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)
        """
        return _robot.vector_int_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vector_int self, std::vector< int >::size_type n)"""
        return _robot.vector_int_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_int self) -> std::vector< int >::size_type"""
        return _robot.vector_int_capacity(self)
    __swig_destroy__ = _robot.delete_vector_int

# Register vector_int in _robot:
_robot.vector_int_swigregister(vector_int)

class limb_data(object):
    r"""Proxy of C++ std::array< double,8 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(limb_data self) -> SwigPyIterator"""
        return _robot.limb_data_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(limb_data self) -> bool"""
        return _robot.limb_data___nonzero__(self)

    def __bool__(self):
        r"""__bool__(limb_data self) -> bool"""
        return _robot.limb_data___bool__(self)

    def __len__(self):
        r"""__len__(limb_data self) -> std::array< double,8 >::size_type"""
        return _robot.limb_data___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(limb_data self, std::array< double,8 >::difference_type i, std::array< double,8 >::difference_type j) -> limb_data"""
        return _robot.limb_data___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(limb_data self, std::array< double,8 >::difference_type i, std::array< double,8 >::difference_type j)
        __setslice__(limb_data self, std::array< double,8 >::difference_type i, std::array< double,8 >::difference_type j, limb_data v)
        """
        return _robot.limb_data___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(limb_data self, std::array< double,8 >::difference_type i, std::array< double,8 >::difference_type j)"""
        return _robot.limb_data___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(limb_data self, std::array< double,8 >::difference_type i)
        __delitem__(limb_data self, PySliceObject * slice)
        """
        return _robot.limb_data___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(limb_data self, PySliceObject * slice) -> limb_data
        __getitem__(limb_data self, std::array< double,8 >::difference_type i) -> std::array< double,8 >::value_type const &
        """
        return _robot.limb_data___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(limb_data self, PySliceObject * slice, limb_data v)
        __setitem__(limb_data self, PySliceObject * slice)
        __setitem__(limb_data self, std::array< double,8 >::difference_type i, std::array< double,8 >::value_type const & x)
        """
        return _robot.limb_data___setitem__(self, *args)

    def __init__(self, *args):
        r"""
        __init__(limb_data self) -> limb_data
        __init__(limb_data self, limb_data other) -> limb_data
        """
        _robot.limb_data_swiginit(self, _robot.new_limb_data(*args))

    def empty(self):
        r"""empty(limb_data self) -> bool"""
        return _robot.limb_data_empty(self)

    def size(self):
        r"""size(limb_data self) -> std::array< double,8 >::size_type"""
        return _robot.limb_data_size(self)

    def swap(self, v):
        r"""swap(limb_data self, limb_data v)"""
        return _robot.limb_data_swap(self, v)

    def begin(self):
        r"""begin(limb_data self) -> std::array< double,8 >::iterator"""
        return _robot.limb_data_begin(self)

    def end(self):
        r"""end(limb_data self) -> std::array< double,8 >::iterator"""
        return _robot.limb_data_end(self)

    def rbegin(self):
        r"""rbegin(limb_data self) -> std::array< double,8 >::reverse_iterator"""
        return _robot.limb_data_rbegin(self)

    def rend(self):
        r"""rend(limb_data self) -> std::array< double,8 >::reverse_iterator"""
        return _robot.limb_data_rend(self)

    def front(self):
        r"""front(limb_data self) -> std::array< double,8 >::value_type const &"""
        return _robot.limb_data_front(self)

    def back(self):
        r"""back(limb_data self) -> std::array< double,8 >::value_type const &"""
        return _robot.limb_data_back(self)

    def fill(self, u):
        r"""fill(limb_data self, std::array< double,8 >::value_type const & u)"""
        return _robot.limb_data_fill(self, u)
    __swig_destroy__ = _robot.delete_limb_data

# Register limb_data in _robot:
_robot.limb_data_swigregister(limb_data)

class Actuation(object):
    r"""Proxy of C++ std::array< std::array< double,8 >,4 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Actuation self) -> SwigPyIterator"""
        return _robot.Actuation_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Actuation self) -> bool"""
        return _robot.Actuation___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Actuation self) -> bool"""
        return _robot.Actuation___bool__(self)

    def __len__(self):
        r"""__len__(Actuation self) -> std::array< std::array< double,8 >,4 >::size_type"""
        return _robot.Actuation___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(Actuation self, std::array< std::array< double,8 >,4 >::difference_type i, std::array< std::array< double,8 >,4 >::difference_type j) -> Actuation"""
        return _robot.Actuation___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Actuation self, std::array< std::array< double,8 >,4 >::difference_type i, std::array< std::array< double,8 >,4 >::difference_type j)
        __setslice__(Actuation self, std::array< std::array< double,8 >,4 >::difference_type i, std::array< std::array< double,8 >,4 >::difference_type j, Actuation v)
        """
        return _robot.Actuation___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(Actuation self, std::array< std::array< double,8 >,4 >::difference_type i, std::array< std::array< double,8 >,4 >::difference_type j)"""
        return _robot.Actuation___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Actuation self, std::array< std::array< double,8 >,4 >::difference_type i)
        __delitem__(Actuation self, PySliceObject * slice)
        """
        return _robot.Actuation___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Actuation self, PySliceObject * slice) -> Actuation
        __getitem__(Actuation self, std::array< std::array< double,8 >,4 >::difference_type i) -> limb_data
        """
        return _robot.Actuation___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Actuation self, PySliceObject * slice, Actuation v)
        __setitem__(Actuation self, PySliceObject * slice)
        __setitem__(Actuation self, std::array< std::array< double,8 >,4 >::difference_type i, limb_data x)
        """
        return _robot.Actuation___setitem__(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Actuation self) -> Actuation
        __init__(Actuation self, Actuation other) -> Actuation
        """
        _robot.Actuation_swiginit(self, _robot.new_Actuation(*args))

    def empty(self):
        r"""empty(Actuation self) -> bool"""
        return _robot.Actuation_empty(self)

    def size(self):
        r"""size(Actuation self) -> std::array< std::array< double,8 >,4 >::size_type"""
        return _robot.Actuation_size(self)

    def swap(self, v):
        r"""swap(Actuation self, Actuation v)"""
        return _robot.Actuation_swap(self, v)

    def begin(self):
        r"""begin(Actuation self) -> std::array< std::array< double,8 >,4 >::iterator"""
        return _robot.Actuation_begin(self)

    def end(self):
        r"""end(Actuation self) -> std::array< std::array< double,8 >,4 >::iterator"""
        return _robot.Actuation_end(self)

    def rbegin(self):
        r"""rbegin(Actuation self) -> std::array< std::array< double,8 >,4 >::reverse_iterator"""
        return _robot.Actuation_rbegin(self)

    def rend(self):
        r"""rend(Actuation self) -> std::array< std::array< double,8 >,4 >::reverse_iterator"""
        return _robot.Actuation_rend(self)

    def front(self):
        r"""front(Actuation self) -> limb_data"""
        return _robot.Actuation_front(self)

    def back(self):
        r"""back(Actuation self) -> limb_data"""
        return _robot.Actuation_back(self)

    def fill(self, u):
        r"""fill(Actuation self, limb_data u)"""
        return _robot.Actuation_fill(self, u)
    __swig_destroy__ = _robot.delete_Actuation

# Register Actuation in _robot:
_robot.Actuation_swigregister(Actuation)

import pychrono.core
FR = _robot.FR

RR = _robot.RR

RL = _robot.RL

FL = _robot.FL

VisualizationType_VisualizationType_NONE = _robot.VisualizationType_VisualizationType_NONE

VisualizationType_VisualizationType_COLLISION = _robot.VisualizationType_VisualizationType_COLLISION

VisualizationType_VisualizationType_MESH = _robot.VisualizationType_VisualizationType_MESH

LIMB_FR = _robot.LIMB_FR

LIMB_RR = _robot.LIMB_RR

LIMB_RL = _robot.LIMB_RL

LIMB_FL = _robot.LIMB_FL

CollisionFamily_CHASSIS = _robot.CollisionFamily_CHASSIS

CollisionFamily_SLED = _robot.CollisionFamily_SLED

WHEEL_DD = _robot.WHEEL_DD

NONE = _robot.NONE

CollisionFlags_COLLISION = _robot.CollisionFlags_COLLISION

SLED = _robot.SLED

LIMBS = _robot.LIMBS

WHEELS = _robot.WHEELS

ALL = _robot.ALL

ActuationMode_ANGLE = _robot.ActuationMode_ANGLE

ActuationMode_SPEED = _robot.ActuationMode_SPEED

LocomotionMode_WALK = _robot.LocomotionMode_WALK

LocomotionMode_SCULL = _robot.LocomotionMode_SCULL

LocomotionMode_INCHWORM = _robot.LocomotionMode_INCHWORM

LocomotionMode_DRIVE = _robot.LocomotionMode_DRIVE

class BoxShape(object):
    r"""Proxy of C++ chrono::robosimian::BoxShape class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, pos, rot, dims):
        r"""__init__(BoxShape self, ChVectorD pos, ChQuaternionD rot, ChVectorD dims) -> BoxShape"""
        _robot.BoxShape_swiginit(self, _robot.new_BoxShape(pos, rot, dims))
    m_pos = property(_robot.BoxShape_m_pos_get, _robot.BoxShape_m_pos_set, doc=r"""m_pos : chrono::ChVector<(double)>""")
    m_rot = property(_robot.BoxShape_m_rot_get, _robot.BoxShape_m_rot_set, doc=r"""m_rot : chrono::ChQuaternion<(double)>""")
    m_dims = property(_robot.BoxShape_m_dims_get, _robot.BoxShape_m_dims_set, doc=r"""m_dims : chrono::ChVector<(double)>""")
    __swig_destroy__ = _robot.delete_BoxShape

# Register BoxShape in _robot:
_robot.BoxShape_swigregister(BoxShape)

class SphereShape(object):
    r"""Proxy of C++ chrono::robosimian::SphereShape class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, pos, radius):
        r"""__init__(SphereShape self, ChVectorD pos, double radius) -> SphereShape"""
        _robot.SphereShape_swiginit(self, _robot.new_SphereShape(pos, radius))
    m_pos = property(_robot.SphereShape_m_pos_get, _robot.SphereShape_m_pos_set, doc=r"""m_pos : chrono::ChVector<(double)>""")
    m_radius = property(_robot.SphereShape_m_radius_get, _robot.SphereShape_m_radius_set, doc=r"""m_radius : double""")
    __swig_destroy__ = _robot.delete_SphereShape

# Register SphereShape in _robot:
_robot.SphereShape_swigregister(SphereShape)

class CylinderShape(object):
    r"""Proxy of C++ chrono::robosimian::CylinderShape class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, pos, rot, radius, length):
        r"""__init__(CylinderShape self, ChVectorD pos, ChQuaternionD rot, double radius, double length) -> CylinderShape"""
        _robot.CylinderShape_swiginit(self, _robot.new_CylinderShape(pos, rot, radius, length))
    m_pos = property(_robot.CylinderShape_m_pos_get, _robot.CylinderShape_m_pos_set, doc=r"""m_pos : chrono::ChVector<(double)>""")
    m_rot = property(_robot.CylinderShape_m_rot_get, _robot.CylinderShape_m_rot_set, doc=r"""m_rot : chrono::ChQuaternion<(double)>""")
    m_radius = property(_robot.CylinderShape_m_radius_get, _robot.CylinderShape_m_radius_set, doc=r"""m_radius : double""")
    m_length = property(_robot.CylinderShape_m_length_get, _robot.CylinderShape_m_length_set, doc=r"""m_length : double""")
    __swig_destroy__ = _robot.delete_CylinderShape

# Register CylinderShape in _robot:
_robot.CylinderShape_swigregister(CylinderShape)

class MeshShape(object):
    r"""Proxy of C++ chrono::robosimian::MeshShape class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Type_CONVEX_HULL = _robot.MeshShape_Type_CONVEX_HULL
    
    Type_TRIANGLE_SOUP = _robot.MeshShape_Type_TRIANGLE_SOUP
    
    Type_NODE_CLOUD = _robot.MeshShape_Type_NODE_CLOUD
    

    def __init__(self, pos, rot, name, type):
        r"""__init__(MeshShape self, ChVectorD pos, ChQuaternionD rot, std::string const & name, chrono::robosimian::MeshShape::Type type) -> MeshShape"""
        _robot.MeshShape_swiginit(self, _robot.new_MeshShape(pos, rot, name, type))
    m_pos = property(_robot.MeshShape_m_pos_get, _robot.MeshShape_m_pos_set, doc=r"""m_pos : chrono::ChVector<(double)>""")
    m_rot = property(_robot.MeshShape_m_rot_get, _robot.MeshShape_m_rot_set, doc=r"""m_rot : chrono::ChQuaternion<(double)>""")
    m_name = property(_robot.MeshShape_m_name_get, _robot.MeshShape_m_name_set, doc=r"""m_name : std::string""")
    m_type = property(_robot.MeshShape_m_type_get, _robot.MeshShape_m_type_set, doc=r"""m_type : chrono::robosimian::MeshShape::Type""")
    __swig_destroy__ = _robot.delete_MeshShape

# Register MeshShape in _robot:
_robot.MeshShape_swigregister(MeshShape)

class RS_Part(object):
    r"""Proxy of C++ chrono::robosimian::RS_Part class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, mat, system):
        r"""__init__(RS_Part self, std::string const & name, std::shared_ptr< chrono::ChMaterialSurface > mat, ChSystem system) -> RS_Part"""
        _robot.RS_Part_swiginit(self, _robot.new_RS_Part(name, mat, system))
    __swig_destroy__ = _robot.delete_RS_Part

    def GetName(self):
        r"""GetName(RS_Part self) -> std::string const &"""
        return _robot.RS_Part_GetName(self)

    def SetName(self, name):
        r"""SetName(RS_Part self, std::string const & name)"""
        return _robot.RS_Part_SetName(self, name)

    def SetVisualizationType(self, vis):
        r"""SetVisualizationType(RS_Part self, chrono::robosimian::VisualizationType vis)"""
        return _robot.RS_Part_SetVisualizationType(self, vis)

    def GetBody(self):
        r"""GetBody(RS_Part self) -> std::shared_ptr< chrono::ChBodyAuxRef >"""
        return _robot.RS_Part_GetBody(self)

    def GetPos(self):
        r"""GetPos(RS_Part self) -> ChVectorD"""
        return _robot.RS_Part_GetPos(self)

    def GetRot(self):
        r"""GetRot(RS_Part self) -> ChQuaternionD"""
        return _robot.RS_Part_GetRot(self)

# Register RS_Part in _robot:
_robot.RS_Part_swigregister(RS_Part)

class RS_Chassis(RS_Part):
    r"""Proxy of C++ chrono::robosimian::RS_Chassis class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, fixed, mat, system):
        r"""__init__(RS_Chassis self, std::string const & name, bool fixed, std::shared_ptr< chrono::ChMaterialSurface > mat, ChSystem system) -> RS_Chassis"""
        _robot.RS_Chassis_swiginit(self, _robot.new_RS_Chassis(name, fixed, mat, system))
    __swig_destroy__ = _robot.delete_RS_Chassis

    def Initialize(self, pos):
        r"""Initialize(RS_Chassis self, ChCoordsysD pos)"""
        return _robot.RS_Chassis_Initialize(self, pos)

    def SetCollide(self, state):
        r"""SetCollide(RS_Chassis self, bool state)"""
        return _robot.RS_Chassis_SetCollide(self, state)

# Register RS_Chassis in _robot:
_robot.RS_Chassis_swigregister(RS_Chassis)

class RS_Sled(RS_Part):
    r"""Proxy of C++ chrono::robosimian::RS_Sled class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, mat, system):
        r"""__init__(RS_Sled self, std::string const & name, std::shared_ptr< chrono::ChMaterialSurface > mat, ChSystem system) -> RS_Sled"""
        _robot.RS_Sled_swiginit(self, _robot.new_RS_Sled(name, mat, system))
    __swig_destroy__ = _robot.delete_RS_Sled

    def Initialize(self, chassis, xyz, rpy):
        r"""Initialize(RS_Sled self, std::shared_ptr< chrono::ChBodyAuxRef > chassis, ChVectorD xyz, ChVectorD rpy)"""
        return _robot.RS_Sled_Initialize(self, chassis, xyz, rpy)

    def SetCollide(self, state):
        r"""SetCollide(RS_Sled self, bool state)"""
        return _robot.RS_Sled_SetCollide(self, state)

# Register RS_Sled in _robot:
_robot.RS_Sled_swigregister(RS_Sled)

class RS_WheelDD(RS_Part):
    r"""Proxy of C++ chrono::robosimian::RS_WheelDD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, id, mat, system):
        r"""__init__(RS_WheelDD self, std::string const & name, int id, std::shared_ptr< chrono::ChMaterialSurface > mat, ChSystem system) -> RS_WheelDD"""
        _robot.RS_WheelDD_swiginit(self, _robot.new_RS_WheelDD(name, id, mat, system))
    __swig_destroy__ = _robot.delete_RS_WheelDD

    def Initialize(self, chassis, xyz, rpy):
        r"""Initialize(RS_WheelDD self, std::shared_ptr< chrono::ChBodyAuxRef > chassis, ChVectorD xyz, ChVectorD rpy)"""
        return _robot.RS_WheelDD_Initialize(self, chassis, xyz, rpy)

# Register RS_WheelDD in _robot:
_robot.RS_WheelDD_swigregister(RS_WheelDD)

class Link(object):
    r"""Proxy of C++ chrono::robosimian::Link class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesh_name, offset, color, mass, com, inertia_xx, inertia_xy, shapes):
        r"""__init__(Link self, std::string const & mesh_name, ChVectorD offset, chrono::ChColor const & color, double mass, ChVectorD com, ChVectorD inertia_xx, ChVectorD inertia_xy, std::vector< chrono::robosimian::CylinderShape,std::allocator< chrono::robosimian::CylinderShape > > const & shapes) -> Link"""
        _robot.Link_swiginit(self, _robot.new_Link(mesh_name, offset, color, mass, com, inertia_xx, inertia_xy, shapes))
    __swig_destroy__ = _robot.delete_Link

# Register Link in _robot:
_robot.Link_swigregister(Link)

class LinkData(object):
    r"""Proxy of C++ chrono::robosimian::LinkData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, myname, mylink, inc):
        r"""__init__(LinkData self, std::string myname, Link mylink, bool inc) -> LinkData"""
        _robot.LinkData_swiginit(self, _robot.new_LinkData(myname, mylink, inc))
    name = property(_robot.LinkData_name_get, _robot.LinkData_name_set, doc=r"""name : std::string""")
    link = property(_robot.LinkData_link_get, _robot.LinkData_link_set, doc=r"""link : chrono::robosimian::Link""")
    include = property(_robot.LinkData_include_get, _robot.LinkData_include_set, doc=r"""include : bool""")
    __swig_destroy__ = _robot.delete_LinkData

# Register LinkData in _robot:
_robot.LinkData_swigregister(LinkData)

class JointData(object):
    r"""Proxy of C++ chrono::robosimian::JointData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_robot.JointData_name_get, _robot.JointData_name_set, doc=r"""name : std::string""")
    linkA = property(_robot.JointData_linkA_get, _robot.JointData_linkA_set, doc=r"""linkA : std::string""")
    linkB = property(_robot.JointData_linkB_get, _robot.JointData_linkB_set, doc=r"""linkB : std::string""")
    fixed = property(_robot.JointData_fixed_get, _robot.JointData_fixed_set, doc=r"""fixed : bool""")
    xyz = property(_robot.JointData_xyz_get, _robot.JointData_xyz_set, doc=r"""xyz : chrono::ChVector<(double)>""")
    rpy = property(_robot.JointData_rpy_get, _robot.JointData_rpy_set, doc=r"""rpy : chrono::ChVector<(double)>""")
    axis = property(_robot.JointData_axis_get, _robot.JointData_axis_set, doc=r"""axis : chrono::ChVector<(double)>""")

    def __init__(self):
        r"""__init__(JointData self) -> JointData"""
        _robot.JointData_swiginit(self, _robot.new_JointData())
    __swig_destroy__ = _robot.delete_JointData

# Register JointData in _robot:
_robot.JointData_swigregister(JointData)

class RS_Limb(object):
    r"""Proxy of C++ chrono::robosimian::RS_Limb class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, id, data, wheel_mat, link_mat, system):
        r"""__init__(RS_Limb self, std::string const & name, chrono::robosimian::LimbID id, LinkData data, std::shared_ptr< chrono::ChMaterialSurface > wheel_mat, std::shared_ptr< chrono::ChMaterialSurface > link_mat, ChSystem system) -> RS_Limb"""
        _robot.RS_Limb_swiginit(self, _robot.new_RS_Limb(name, id, data, wheel_mat, link_mat, system))
    __swig_destroy__ = _robot.delete_RS_Limb

    def Initialize(self, chassis, xyz, rpy, collision_family, wheel_mode):
        r"""Initialize(RS_Limb self, std::shared_ptr< chrono::ChBodyAuxRef > chassis, ChVectorD xyz, ChVectorD rpy, chrono::robosimian::CollisionFamily::Enum collision_family, chrono::robosimian::ActuationMode wheel_mode)"""
        return _robot.RS_Limb_Initialize(self, chassis, xyz, rpy, collision_family, wheel_mode)

    def SetVisualizationType(self, vis):
        r"""SetVisualizationType(RS_Limb self, chrono::robosimian::VisualizationType vis)"""
        return _robot.RS_Limb_SetVisualizationType(self, vis)

    def SetCollideLinks(self, state):
        r"""SetCollideLinks(RS_Limb self, bool state)"""
        return _robot.RS_Limb_SetCollideLinks(self, state)

    def SetCollideWheel(self, state):
        r"""SetCollideWheel(RS_Limb self, bool state)"""
        return _robot.RS_Limb_SetCollideWheel(self, state)

    def GetMass(self):
        r"""GetMass(RS_Limb self) -> double"""
        return _robot.RS_Limb_GetMass(self)

    def GetWheelBody(self):
        r"""GetWheelBody(RS_Limb self) -> std::shared_ptr< chrono::ChBodyAuxRef >"""
        return _robot.RS_Limb_GetWheelBody(self)

    def GetWheelPos(self):
        r"""GetWheelPos(RS_Limb self) -> ChVectorD"""
        return _robot.RS_Limb_GetWheelPos(self)

    def GetWheelAngVelocity(self):
        r"""GetWheelAngVelocity(RS_Limb self) -> ChVectorD"""
        return _robot.RS_Limb_GetWheelAngVelocity(self)

    def GetWheelAngle(self):
        r"""GetWheelAngle(RS_Limb self) -> double"""
        return _robot.RS_Limb_GetWheelAngle(self)

    def GetWheelOmega(self):
        r"""GetWheelOmega(RS_Limb self) -> double"""
        return _robot.RS_Limb_GetWheelOmega(self)

    def GetMotorAngle(self, motor_name):
        r"""GetMotorAngle(RS_Limb self, std::string const & motor_name) -> double"""
        return _robot.RS_Limb_GetMotorAngle(self, motor_name)

    def GetMotorOmega(self, motor_name):
        r"""GetMotorOmega(RS_Limb self, std::string const & motor_name) -> double"""
        return _robot.RS_Limb_GetMotorOmega(self, motor_name)

    def GetMotorTorque(self, motor_name):
        r"""GetMotorTorque(RS_Limb self, std::string const & motor_name) -> double"""
        return _robot.RS_Limb_GetMotorTorque(self, motor_name)

    def GetMotorAngles(self):
        r"""GetMotorAngles(RS_Limb self) -> limb_data"""
        return _robot.RS_Limb_GetMotorAngles(self)

    def GetMotorOmegas(self):
        r"""GetMotorOmegas(RS_Limb self) -> limb_data"""
        return _robot.RS_Limb_GetMotorOmegas(self)

    def GetMotorTorques(self):
        r"""GetMotorTorques(RS_Limb self) -> limb_data"""
        return _robot.RS_Limb_GetMotorTorques(self)

    def GetMotorActuations(self, angles, speeds):
        r"""GetMotorActuations(RS_Limb self, limb_data angles, limb_data speeds)"""
        return _robot.RS_Limb_GetMotorActuations(self, angles, speeds)

    def Activate(self, *args):
        r"""
        Activate(RS_Limb self, std::string const & motor_name, double time, double val)
        Activate(RS_Limb self, double time, limb_data vals)
        """
        return _robot.RS_Limb_Activate(self, *args)

# Register RS_Limb in _robot:
_robot.RS_Limb_swigregister(RS_Limb)

class RoboSimian(object):
    r"""Proxy of C++ chrono::robosimian::RoboSimian class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RoboSimian self, chrono::ChContactMethod contact_method, bool has_sled=False, bool fixed=False) -> RoboSimian
        __init__(RoboSimian self, ChSystem system, bool has_sled=False, bool fixed=False) -> RoboSimian
        """
        _robot.RoboSimian_swiginit(self, _robot.new_RoboSimian(*args))
    __swig_destroy__ = _robot.delete_RoboSimian

    def GetSystem(self):
        r"""GetSystem(RoboSimian self) -> ChSystem"""
        return _robot.RoboSimian_GetSystem(self)

    def SetMotorActuationMode(self, mode):
        r"""SetMotorActuationMode(RoboSimian self, chrono::robosimian::ActuationMode mode)"""
        return _robot.RoboSimian_SetMotorActuationMode(self, mode)

    def SetCollide(self, flags):
        r"""SetCollide(RoboSimian self, int flags)"""
        return _robot.RoboSimian_SetCollide(self, flags)

    def SetFrictionCoefficients(self, sled_friction, wheel_friction):
        r"""SetFrictionCoefficients(RoboSimian self, float sled_friction, float wheel_friction)"""
        return _robot.RoboSimian_SetFrictionCoefficients(self, sled_friction, wheel_friction)

    def SetDriver(self, driver):
        r"""SetDriver(RoboSimian self, std::shared_ptr< chrono::robosimian::RS_Driver > driver)"""
        return _robot.RoboSimian_SetDriver(self, driver)

    def SetVisualizationTypeChassis(self, vis):
        r"""SetVisualizationTypeChassis(RoboSimian self, chrono::robosimian::VisualizationType vis)"""
        return _robot.RoboSimian_SetVisualizationTypeChassis(self, vis)

    def SetVisualizationTypeSled(self, vis):
        r"""SetVisualizationTypeSled(RoboSimian self, chrono::robosimian::VisualizationType vis)"""
        return _robot.RoboSimian_SetVisualizationTypeSled(self, vis)

    def SetVisualizationTypeLimbs(self, vis):
        r"""SetVisualizationTypeLimbs(RoboSimian self, chrono::robosimian::VisualizationType vis)"""
        return _robot.RoboSimian_SetVisualizationTypeLimbs(self, vis)

    def SetVisualizationTypeLimb(self, id, vis):
        r"""SetVisualizationTypeLimb(RoboSimian self, chrono::robosimian::LimbID id, chrono::robosimian::VisualizationType vis)"""
        return _robot.RoboSimian_SetVisualizationTypeLimb(self, id, vis)

    def SetVisualizationTypeWheels(self, vis):
        r"""SetVisualizationTypeWheels(RoboSimian self, chrono::robosimian::VisualizationType vis)"""
        return _robot.RoboSimian_SetVisualizationTypeWheels(self, vis)

    def SetOutputDirectory(self, *args):
        r"""SetOutputDirectory(RoboSimian self, std::string const & outdir, std::string const & root="results")"""
        return _robot.RoboSimian_SetOutputDirectory(self, *args)

    def GetMass(self):
        r"""GetMass(RoboSimian self) -> double"""
        return _robot.RoboSimian_GetMass(self)

    def GetChassis(self):
        r"""GetChassis(RoboSimian self) -> std::shared_ptr< chrono::robosimian::RS_Chassis >"""
        return _robot.RoboSimian_GetChassis(self)

    def GetChassisBody(self):
        r"""GetChassisBody(RoboSimian self) -> std::shared_ptr< chrono::ChBodyAuxRef >"""
        return _robot.RoboSimian_GetChassisBody(self)

    def GetChassisPos(self):
        r"""GetChassisPos(RoboSimian self) -> ChVectorD"""
        return _robot.RoboSimian_GetChassisPos(self)

    def GetChassisRot(self):
        r"""GetChassisRot(RoboSimian self) -> ChQuaternionD"""
        return _robot.RoboSimian_GetChassisRot(self)

    def GetSled(self):
        r"""GetSled(RoboSimian self) -> std::shared_ptr< chrono::robosimian::RS_Sled >"""
        return _robot.RoboSimian_GetSled(self)

    def GetSledBody(self):
        r"""GetSledBody(RoboSimian self) -> std::shared_ptr< chrono::ChBodyAuxRef >"""
        return _robot.RoboSimian_GetSledBody(self)

    def GetLimb(self, id):
        r"""GetLimb(RoboSimian self, chrono::robosimian::LimbID id) -> std::shared_ptr< chrono::robosimian::RS_Limb >"""
        return _robot.RoboSimian_GetLimb(self, id)

    def GetWheelBody(self, id):
        r"""GetWheelBody(RoboSimian self, chrono::robosimian::LimbID id) -> std::shared_ptr< chrono::ChBodyAuxRef >"""
        return _robot.RoboSimian_GetWheelBody(self, id)

    def GetWheelPos(self, id):
        r"""GetWheelPos(RoboSimian self, chrono::robosimian::LimbID id) -> ChVectorD"""
        return _robot.RoboSimian_GetWheelPos(self, id)

    def GetWheelAngVelocity(self, id):
        r"""GetWheelAngVelocity(RoboSimian self, chrono::robosimian::LimbID id) -> ChVectorD"""
        return _robot.RoboSimian_GetWheelAngVelocity(self, id)

    def GetWheelAngle(self, id):
        r"""GetWheelAngle(RoboSimian self, chrono::robosimian::LimbID id) -> double"""
        return _robot.RoboSimian_GetWheelAngle(self, id)

    def GetWheelOmega(self, id):
        r"""GetWheelOmega(RoboSimian self, chrono::robosimian::LimbID id) -> double"""
        return _robot.RoboSimian_GetWheelOmega(self, id)

    def GetMotorAngles(self, id):
        r"""GetMotorAngles(RoboSimian self, chrono::robosimian::LimbID id) -> limb_data"""
        return _robot.RoboSimian_GetMotorAngles(self, id)

    def GetMotorOmegas(self, id):
        r"""GetMotorOmegas(RoboSimian self, chrono::robosimian::LimbID id) -> limb_data"""
        return _robot.RoboSimian_GetMotorOmegas(self, id)

    def GetMotorTorques(self, id):
        r"""GetMotorTorques(RoboSimian self, chrono::robosimian::LimbID id) -> limb_data"""
        return _robot.RoboSimian_GetMotorTorques(self, id)

    def GetChassisContactMaterial(self):
        r"""GetChassisContactMaterial(RoboSimian self) -> std::shared_ptr< chrono::ChMaterialSurface >"""
        return _robot.RoboSimian_GetChassisContactMaterial(self)

    def GetSledContactMaterial(self):
        r"""GetSledContactMaterial(RoboSimian self) -> std::shared_ptr< chrono::ChMaterialSurface >"""
        return _robot.RoboSimian_GetSledContactMaterial(self)

    def GetWheelContactMaterial(self):
        r"""GetWheelContactMaterial(RoboSimian self) -> std::shared_ptr< chrono::ChMaterialSurface >"""
        return _robot.RoboSimian_GetWheelContactMaterial(self)

    def GetWheelDDContactMaterial(self):
        r"""GetWheelDDContactMaterial(RoboSimian self) -> std::shared_ptr< chrono::ChMaterialSurface >"""
        return _robot.RoboSimian_GetWheelDDContactMaterial(self)

    def GetLinkContactMaterial(self):
        r"""GetLinkContactMaterial(RoboSimian self) -> std::shared_ptr< chrono::ChMaterialSurface >"""
        return _robot.RoboSimian_GetLinkContactMaterial(self)

    def Initialize(self, pos):
        r"""Initialize(RoboSimian self, ChCoordsysD pos)"""
        return _robot.RoboSimian_Initialize(self, pos)

    def Activate(self, id, motor_name, time, val):
        r"""Activate(RoboSimian self, chrono::robosimian::LimbID id, std::string const & motor_name, double time, double val)"""
        return _robot.RoboSimian_Activate(self, id, motor_name, time, val)

    def DoStepDynamics(self, step):
        r"""DoStepDynamics(RoboSimian self, double step)"""
        return _robot.RoboSimian_DoStepDynamics(self, step)

    def Translate(self, shift):
        r"""Translate(RoboSimian self, ChVectorD shift)"""
        return _robot.RoboSimian_Translate(self, shift)

    def Output(self):
        r"""Output(RoboSimian self)"""
        return _robot.RoboSimian_Output(self)

    def ReportContacts(self):
        r"""ReportContacts(RoboSimian self)"""
        return _robot.RoboSimian_ReportContacts(self)

# Register RoboSimian in _robot:
_robot.RoboSimian_swigregister(RoboSimian)

class RS_Driver(object):
    r"""Proxy of C++ chrono::robosimian::RS_Driver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    POSE = _robot.RS_Driver_POSE
    
    HOLD = _robot.RS_Driver_HOLD
    
    START = _robot.RS_Driver_START
    
    CYCLE = _robot.RS_Driver_CYCLE
    
    STOP = _robot.RS_Driver_STOP
    

    def __init__(self, filename_start, filename_cycle, filename_stop, repeat=False):
        r"""__init__(RS_Driver self, std::string const & filename_start, std::string const & filename_cycle, std::string const & filename_stop, bool repeat=False) -> RS_Driver"""
        _robot.RS_Driver_swiginit(self, _robot.new_RS_Driver(filename_start, filename_cycle, filename_stop, repeat))
    __swig_destroy__ = _robot.delete_RS_Driver

    def SetTimeOffsets(self, time_pose, time_hold):
        r"""SetTimeOffsets(RS_Driver self, double time_pose, double time_hold)"""
        return _robot.RS_Driver_SetTimeOffsets(self, time_pose, time_hold)

    def GetActuation(self):
        r"""GetActuation(RS_Driver self) -> Actuation"""
        return _robot.RS_Driver_GetActuation(self)

    def SetActuation(self, ext_act):
        r"""SetActuation(RS_Driver self, Actuation ext_act)"""
        return _robot.RS_Driver_SetActuation(self, ext_act)

    def SetDrivingMode(self, drivemode):
        r"""SetDrivingMode(RS_Driver self, bool drivemode)"""
        return _robot.RS_Driver_SetDrivingMode(self, drivemode)

    def UseTorqueMotors(self, use_tm):
        r"""UseTorqueMotors(RS_Driver self, bool use_tm)"""
        return _robot.RS_Driver_UseTorqueMotors(self, use_tm)

    def RegisterPhaseChangeCallback(self, callback):
        r"""RegisterPhaseChangeCallback(RS_Driver self, PhaseChangeCallback callback)"""
        return _robot.RS_Driver_RegisterPhaseChangeCallback(self, callback)

# Register RS_Driver in _robot:
_robot.RS_Driver_swigregister(RS_Driver)

class PhaseChangeCallback(object):
    r"""Proxy of C++ chrono::robosimian::RS_Driver::PhaseChangeCallback class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _robot.delete_PhaseChangeCallback

    def OnPhaseChange(self, old_phase, new_phase):
        r"""OnPhaseChange(PhaseChangeCallback self, chrono::robosimian::RS_Driver::Phase old_phase, chrono::robosimian::RS_Driver::Phase new_phase)"""
        return _robot.PhaseChangeCallback_OnPhaseChange(self, old_phase, new_phase)

    def __init__(self):
        r"""__init__(PhaseChangeCallback self) -> PhaseChangeCallback"""
        if self.__class__ == PhaseChangeCallback:
            _self = None
        else:
            _self = self
        _robot.PhaseChangeCallback_swiginit(self, _robot.new_PhaseChangeCallback(_self, ))
    def __disown__(self):
        self.this.disown()
        _robot.disown_PhaseChangeCallback(self)
        return weakref.proxy(self)

# Register PhaseChangeCallback in _robot:
_robot.PhaseChangeCallback_swigregister(PhaseChangeCallback)

class RS_DriverCallback(PhaseChangeCallback):
    r"""Proxy of C++ chrono::robosimian::RS_DriverCallback class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, robot):
        r"""__init__(RS_DriverCallback self, RoboSimian robot) -> RS_DriverCallback"""
        _robot.RS_DriverCallback_swiginit(self, _robot.new_RS_DriverCallback(robot))

    def OnPhaseChange(self, old_phase, new_phase):
        r"""OnPhaseChange(RS_DriverCallback self, chrono::robosimian::RS_Driver::Phase old_phase, chrono::robosimian::RS_Driver::Phase new_phase)"""
        return _robot.RS_DriverCallback_OnPhaseChange(self, old_phase, new_phase)

    def GetDistance(self):
        r"""GetDistance(RS_DriverCallback self) -> double"""
        return _robot.RS_DriverCallback_GetDistance(self)

    def GetDuration(self):
        r"""GetDuration(RS_DriverCallback self) -> double"""
        return _robot.RS_DriverCallback_GetDuration(self)

    def GetAvgSpeed(self):
        r"""GetAvgSpeed(RS_DriverCallback self) -> double"""
        return _robot.RS_DriverCallback_GetAvgSpeed(self)
    m_start_x = property(_robot.RS_DriverCallback_m_start_x_get, _robot.RS_DriverCallback_m_start_x_set, doc=r"""m_start_x : double""")
    m_start_time = property(_robot.RS_DriverCallback_m_start_time_get, _robot.RS_DriverCallback_m_start_time_set, doc=r"""m_start_time : double""")
    __swig_destroy__ = _robot.delete_RS_DriverCallback

# Register RS_DriverCallback in _robot:
_robot.RS_DriverCallback_swigregister(RS_DriverCallback)

V_LF = _robot.V_LF

V_RF = _robot.V_RF

V_LB = _robot.V_LB

V_RB = _robot.V_RB

ViperWheelType_RealWheel = _robot.ViperWheelType_RealWheel

ViperWheelType_SimpleWheel = _robot.ViperWheelType_SimpleWheel

ViperWheelType_CylWheel = _robot.ViperWheelType_CylWheel

class ViperPart(object):
    r"""Proxy of C++ chrono::viper::ViperPart class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, rel_pos, mat, collide):
        r"""__init__(ViperPart self, std::string const & name, chrono::ChFrame< > const & rel_pos, std::shared_ptr< chrono::ChMaterialSurface > mat, bool collide) -> ViperPart"""
        _robot.ViperPart_swiginit(self, _robot.new_ViperPart(name, rel_pos, mat, collide))
    __swig_destroy__ = _robot.delete_ViperPart

    def GetName(self):
        r"""GetName(ViperPart self) -> std::string const &"""
        return _robot.ViperPart_GetName(self)

    def SetName(self, name):
        r"""SetName(ViperPart self, std::string const & name)"""
        return _robot.ViperPart_SetName(self, name)

    def SetVisualize(self, state):
        r"""SetVisualize(ViperPart self, bool state)"""
        return _robot.ViperPart_SetVisualize(self, state)

    def SetCollide(self, state):
        r"""SetCollide(ViperPart self, bool state)"""
        return _robot.ViperPart_SetCollide(self, state)

    def Initialize(self, chassis):
        r"""Initialize(ViperPart self, std::shared_ptr< chrono::ChBodyAuxRef > chassis)"""
        return _robot.ViperPart_Initialize(self, chassis)

    def GetBody(self):
        r"""GetBody(ViperPart self) -> std::shared_ptr< chrono::ChBodyAuxRef >"""
        return _robot.ViperPart_GetBody(self)

    def GetPos(self):
        r"""GetPos(ViperPart self) -> ChVectorD"""
        return _robot.ViperPart_GetPos(self)

    def GetRot(self):
        r"""GetRot(ViperPart self) -> ChQuaternionD"""
        return _robot.ViperPart_GetRot(self)

    def GetLinVel(self):
        r"""GetLinVel(ViperPart self) -> ChVectorD"""
        return _robot.ViperPart_GetLinVel(self)

    def GetAngVel(self):
        r"""GetAngVel(ViperPart self) -> ChVectorD"""
        return _robot.ViperPart_GetAngVel(self)

    def GetLinAcc(self):
        r"""GetLinAcc(ViperPart self) -> ChVectorD"""
        return _robot.ViperPart_GetLinAcc(self)

    def GetAngAcc(self):
        r"""GetAngAcc(ViperPart self) -> ChVectorD"""
        return _robot.ViperPart_GetAngAcc(self)

# Register ViperPart in _robot:
_robot.ViperPart_swigregister(ViperPart)

class ViperChassis(ViperPart):
    r"""Proxy of C++ chrono::viper::ViperChassis class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, mat):
        r"""__init__(ViperChassis self, std::string const & name, std::shared_ptr< chrono::ChMaterialSurface > mat) -> ViperChassis"""
        _robot.ViperChassis_swiginit(self, _robot.new_ViperChassis(name, mat))
    __swig_destroy__ = _robot.delete_ViperChassis

    def Initialize(self, system, pos):
        r"""Initialize(ViperChassis self, ChSystem system, chrono::ChFrame< > const & pos)"""
        return _robot.ViperChassis_Initialize(self, system, pos)

# Register ViperChassis in _robot:
_robot.ViperChassis_swigregister(ViperChassis)

class ViperWheel(ViperPart):
    r"""Proxy of C++ chrono::viper::ViperWheel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, rel_pos, mat, wheel_type):
        r"""__init__(ViperWheel self, std::string const & name, chrono::ChFrame< > const & rel_pos, std::shared_ptr< chrono::ChMaterialSurface > mat, chrono::viper::ViperWheelType wheel_type) -> ViperWheel"""
        _robot.ViperWheel_swiginit(self, _robot.new_ViperWheel(name, rel_pos, mat, wheel_type))
    __swig_destroy__ = _robot.delete_ViperWheel

# Register ViperWheel in _robot:
_robot.ViperWheel_swigregister(ViperWheel)

class ViperUpperArm(ViperPart):
    r"""Proxy of C++ chrono::viper::ViperUpperArm class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, rel_pos, mat, side):
        r"""__init__(ViperUpperArm self, std::string const & name, chrono::ChFrame< > const & rel_pos, std::shared_ptr< chrono::ChMaterialSurface > mat, int const & side) -> ViperUpperArm"""
        _robot.ViperUpperArm_swiginit(self, _robot.new_ViperUpperArm(name, rel_pos, mat, side))
    __swig_destroy__ = _robot.delete_ViperUpperArm

# Register ViperUpperArm in _robot:
_robot.ViperUpperArm_swigregister(ViperUpperArm)

class ViperLowerArm(ViperPart):
    r"""Proxy of C++ chrono::viper::ViperLowerArm class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, rel_pos, mat, side):
        r"""__init__(ViperLowerArm self, std::string const & name, chrono::ChFrame< > const & rel_pos, std::shared_ptr< chrono::ChMaterialSurface > mat, int const & side) -> ViperLowerArm"""
        _robot.ViperLowerArm_swiginit(self, _robot.new_ViperLowerArm(name, rel_pos, mat, side))
    __swig_destroy__ = _robot.delete_ViperLowerArm

# Register ViperLowerArm in _robot:
_robot.ViperLowerArm_swigregister(ViperLowerArm)

class ViperUpright(ViperPart):
    r"""Proxy of C++ chrono::viper::ViperUpright class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, rel_pos, mat, side):
        r"""__init__(ViperUpright self, std::string const & name, chrono::ChFrame< > const & rel_pos, std::shared_ptr< chrono::ChMaterialSurface > mat, int const & side) -> ViperUpright"""
        _robot.ViperUpright_swiginit(self, _robot.new_ViperUpright(name, rel_pos, mat, side))
    __swig_destroy__ = _robot.delete_ViperUpright

# Register ViperUpright in _robot:
_robot.ViperUpright_swigregister(ViperUpright)

class Viper(object):
    r"""Proxy of C++ chrono::viper::Viper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _robot.delete_Viper

    def GetSystem(self):
        r"""GetSystem(Viper self) -> ChSystem"""
        return _robot.Viper_GetSystem(self)

    def SetDriver(self, driver):
        r"""SetDriver(Viper self, std::shared_ptr< chrono::viper::ViperDriver > driver)"""
        return _robot.Viper_SetDriver(self, driver)

    def SetWheelContactMaterial(self, mat):
        r"""SetWheelContactMaterial(Viper self, std::shared_ptr< chrono::ChMaterialSurface > mat)"""
        return _robot.Viper_SetWheelContactMaterial(self, mat)

    def SetChassisFixed(self, fixed):
        r"""SetChassisFixed(Viper self, bool fixed)"""
        return _robot.Viper_SetChassisFixed(self, fixed)

    def SetChassisVisualization(self, state):
        r"""SetChassisVisualization(Viper self, bool state)"""
        return _robot.Viper_SetChassisVisualization(self, state)

    def SetWheelVisualization(self, state):
        r"""SetWheelVisualization(Viper self, bool state)"""
        return _robot.Viper_SetWheelVisualization(self, state)

    def SetSuspensionVisualization(self, state):
        r"""SetSuspensionVisualization(Viper self, bool state)"""
        return _robot.Viper_SetSuspensionVisualization(self, state)

    def Initialize(self, pos):
        r"""Initialize(Viper self, chrono::ChFrame< > const & pos)"""
        return _robot.Viper_Initialize(self, pos)

    def GetChassis(self):
        r"""GetChassis(Viper self) -> std::shared_ptr< chrono::viper::ViperChassis >"""
        return _robot.Viper_GetChassis(self)

    def GetWheels(self):
        r"""GetWheels(Viper self) -> std::array< std::shared_ptr< chrono::viper::ViperWheel >,4 >"""
        return _robot.Viper_GetWheels(self)

    def GetWheel(self, id):
        r"""GetWheel(Viper self, chrono::viper::ViperWheelID id) -> std::shared_ptr< chrono::viper::ViperWheel >"""
        return _robot.Viper_GetWheel(self, id)

    def GetUpright(self, id):
        r"""GetUpright(Viper self, chrono::viper::ViperWheelID id) -> std::shared_ptr< chrono::viper::ViperUpright >"""
        return _robot.Viper_GetUpright(self, id)

    def GetUpperArm(self, id):
        r"""GetUpperArm(Viper self, chrono::viper::ViperWheelID id) -> std::shared_ptr< chrono::viper::ViperUpperArm >"""
        return _robot.Viper_GetUpperArm(self, id)

    def GetLowerArm(self, id):
        r"""GetLowerArm(Viper self, chrono::viper::ViperWheelID id) -> std::shared_ptr< chrono::viper::ViperLowerArm >"""
        return _robot.Viper_GetLowerArm(self, id)

    def GetDriveshaft(self, id):
        r"""GetDriveshaft(Viper self, chrono::viper::ViperWheelID id) -> std::shared_ptr< ChShaft >"""
        return _robot.Viper_GetDriveshaft(self, id)

    def GetChassisPos(self):
        r"""GetChassisPos(Viper self) -> ChVectorD"""
        return _robot.Viper_GetChassisPos(self)

    def GetChassisRot(self):
        r"""GetChassisRot(Viper self) -> ChQuaternionD"""
        return _robot.Viper_GetChassisRot(self)

    def GetChassisVel(self):
        r"""GetChassisVel(Viper self) -> ChVectorD"""
        return _robot.Viper_GetChassisVel(self)

    def GetChassisAcc(self):
        r"""GetChassisAcc(Viper self) -> ChVectorD"""
        return _robot.Viper_GetChassisAcc(self)

    def GetWheelLinVel(self, id):
        r"""GetWheelLinVel(Viper self, chrono::viper::ViperWheelID id) -> ChVectorD"""
        return _robot.Viper_GetWheelLinVel(self, id)

    def GetWheelAngVel(self, id):
        r"""GetWheelAngVel(Viper self, chrono::viper::ViperWheelID id) -> ChVectorD"""
        return _robot.Viper_GetWheelAngVel(self, id)

    def GetWheelContactForce(self, id):
        r"""GetWheelContactForce(Viper self, chrono::viper::ViperWheelID id) -> ChVectorD"""
        return _robot.Viper_GetWheelContactForce(self, id)

    def GetWheelContactTorque(self, id):
        r"""GetWheelContactTorque(Viper self, chrono::viper::ViperWheelID id) -> ChVectorD"""
        return _robot.Viper_GetWheelContactTorque(self, id)

    def GetWheelAppliedForce(self, id):
        r"""GetWheelAppliedForce(Viper self, chrono::viper::ViperWheelID id) -> ChVectorD"""
        return _robot.Viper_GetWheelAppliedForce(self, id)

    def GetWheelTracTorque(self, id):
        r"""GetWheelTracTorque(Viper self, chrono::viper::ViperWheelID id) -> double"""
        return _robot.Viper_GetWheelTracTorque(self, id)

    def GetWheelAppliedTorque(self, id):
        r"""GetWheelAppliedTorque(Viper self, chrono::viper::ViperWheelID id) -> ChVectorD"""
        return _robot.Viper_GetWheelAppliedTorque(self, id)

    def GetRoverMass(self):
        r"""GetRoverMass(Viper self) -> double"""
        return _robot.Viper_GetRoverMass(self)

    def GetWheelMass(self):
        r"""GetWheelMass(Viper self) -> double"""
        return _robot.Viper_GetWheelMass(self)

    def GetDriveMotorFunc(self, id):
        r"""GetDriveMotorFunc(Viper self, chrono::viper::ViperWheelID id) -> std::shared_ptr< ChFunction_Setpoint >"""
        return _robot.Viper_GetDriveMotorFunc(self, id)

    def GetSteerMotorFunc(self, id):
        r"""GetSteerMotorFunc(Viper self, chrono::viper::ViperWheelID id) -> std::shared_ptr< ChFunction_Const >"""
        return _robot.Viper_GetSteerMotorFunc(self, id)

    def GetDriveMotor(self, id):
        r"""GetDriveMotor(Viper self, chrono::viper::ViperWheelID id) -> std::shared_ptr< ChLinkMotorRotation >"""
        return _robot.Viper_GetDriveMotor(self, id)

    def GetSteerMotor(self, id):
        r"""GetSteerMotor(Viper self, chrono::viper::ViperWheelID id) -> std::shared_ptr< ChLinkMotorRotation >"""
        return _robot.Viper_GetSteerMotor(self, id)

    def Update(self):
        r"""Update(Viper self)"""
        return _robot.Viper_Update(self)

    def __init__(self, *args):
        r"""
        __init__(Viper self, ChSystem system, chrono::viper::ViperWheelType wheel_type=RealWheel) -> Viper
        __init__(Viper self, ChSystem system) -> Viper
        """
        _robot.Viper_swiginit(self, _robot.new_Viper(*args))

# Register Viper in _robot:
_robot.Viper_swigregister(Viper)

class ViperDriver(object):
    r"""Proxy of C++ chrono::viper::ViperDriver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    DriveMotorType_SPEED = _robot.ViperDriver_DriveMotorType_SPEED
    
    DriveMotorType_TORQUE = _robot.ViperDriver_DriveMotorType_TORQUE
    
    __swig_destroy__ = _robot.delete_ViperDriver

    def GetDriveMotorType(self):
        r"""GetDriveMotorType(ViperDriver self) -> chrono::viper::ViperDriver::DriveMotorType"""
        return _robot.ViperDriver_GetDriveMotorType(self)

    def SetSteering(self, *args):
        r"""
        SetSteering(ViperDriver self, double angle)
        SetSteering(ViperDriver self, double angle, chrono::viper::ViperWheelID id)
        """
        return _robot.ViperDriver_SetSteering(self, *args)

    def SetLifting(self, angle):
        r"""SetLifting(ViperDriver self, double angle)"""
        return _robot.ViperDriver_SetLifting(self, angle)

# Register ViperDriver in _robot:
_robot.ViperDriver_swigregister(ViperDriver)

class ViperDCMotorControl(ViperDriver):
    r"""Proxy of C++ chrono::viper::ViperDCMotorControl class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ViperDCMotorControl self) -> ViperDCMotorControl"""
        _robot.ViperDCMotorControl_swiginit(self, _robot.new_ViperDCMotorControl())
    __swig_destroy__ = _robot.delete_ViperDCMotorControl

    def SetMotorStallTorque(self, torque, id):
        r"""SetMotorStallTorque(ViperDCMotorControl self, double torque, chrono::viper::ViperWheelID id)"""
        return _robot.ViperDCMotorControl_SetMotorStallTorque(self, torque, id)

    def SetMotorNoLoadSpeed(self, speed, id):
        r"""SetMotorNoLoadSpeed(ViperDCMotorControl self, double speed, chrono::viper::ViperWheelID id)"""
        return _robot.ViperDCMotorControl_SetMotorNoLoadSpeed(self, speed, id)

# Register ViperDCMotorControl in _robot:
_robot.ViperDCMotorControl_swigregister(ViperDCMotorControl)

class ViperSpeedDriver(ViperDriver):
    r"""Proxy of C++ chrono::viper::ViperSpeedDriver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, time_ramp, speed):
        r"""__init__(ViperSpeedDriver self, double time_ramp, double speed) -> ViperSpeedDriver"""
        _robot.ViperSpeedDriver_swiginit(self, _robot.new_ViperSpeedDriver(time_ramp, speed))
    __swig_destroy__ = _robot.delete_ViperSpeedDriver

# Register ViperSpeedDriver in _robot:
_robot.ViperSpeedDriver_swigregister(ViperSpeedDriver)

C_LF = _robot.C_LF

C_RF = _robot.C_RF

C_LM = _robot.C_LM

C_RM = _robot.C_RM

C_LB = _robot.C_LB

C_RB = _robot.C_RB

CuriosityChassisType_FullRover = _robot.CuriosityChassisType_FullRover

CuriosityChassisType_Scarecrow = _robot.CuriosityChassisType_Scarecrow

CuriosityWheelType_RealWheel = _robot.CuriosityWheelType_RealWheel

CuriosityWheelType_SimpleWheel = _robot.CuriosityWheelType_SimpleWheel

CuriosityWheelType_CylWheel = _robot.CuriosityWheelType_CylWheel

class CuriosityPart(object):
    r"""Proxy of C++ chrono::curiosity::CuriosityPart class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, rel_pos, mat, collide):
        r"""__init__(CuriosityPart self, std::string const & name, chrono::ChFrame< > const & rel_pos, std::shared_ptr< chrono::ChMaterialSurface > mat, bool collide) -> CuriosityPart"""
        _robot.CuriosityPart_swiginit(self, _robot.new_CuriosityPart(name, rel_pos, mat, collide))
    __swig_destroy__ = _robot.delete_CuriosityPart

    def GetName(self):
        r"""GetName(CuriosityPart self) -> std::string const &"""
        return _robot.CuriosityPart_GetName(self)

    def SetName(self, name):
        r"""SetName(CuriosityPart self, std::string const & name)"""
        return _robot.CuriosityPart_SetName(self, name)

    def SetVisualize(self, state):
        r"""SetVisualize(CuriosityPart self, bool state)"""
        return _robot.CuriosityPart_SetVisualize(self, state)

    def SetCollide(self, state):
        r"""SetCollide(CuriosityPart self, bool state)"""
        return _robot.CuriosityPart_SetCollide(self, state)

    def GetBody(self):
        r"""GetBody(CuriosityPart self) -> std::shared_ptr< chrono::ChBodyAuxRef >"""
        return _robot.CuriosityPart_GetBody(self)

    def GetPos(self):
        r"""GetPos(CuriosityPart self) -> ChVectorD"""
        return _robot.CuriosityPart_GetPos(self)

    def GetRot(self):
        r"""GetRot(CuriosityPart self) -> ChQuaternionD"""
        return _robot.CuriosityPart_GetRot(self)

    def GetLinVel(self):
        r"""GetLinVel(CuriosityPart self) -> ChVectorD"""
        return _robot.CuriosityPart_GetLinVel(self)

    def GetAngVel(self):
        r"""GetAngVel(CuriosityPart self) -> ChVectorD"""
        return _robot.CuriosityPart_GetAngVel(self)

    def GetLinAcc(self):
        r"""GetLinAcc(CuriosityPart self) -> ChVectorD"""
        return _robot.CuriosityPart_GetLinAcc(self)

    def GetAngAcc(self):
        r"""GetAngAcc(CuriosityPart self) -> ChVectorD"""
        return _robot.CuriosityPart_GetAngAcc(self)

    def Initialize(self, chassis):
        r"""Initialize(CuriosityPart self, std::shared_ptr< chrono::ChBodyAuxRef > chassis)"""
        return _robot.CuriosityPart_Initialize(self, chassis)

# Register CuriosityPart in _robot:
_robot.CuriosityPart_swigregister(CuriosityPart)

class CuriosityChassis(CuriosityPart):
    r"""Proxy of C++ chrono::curiosity::CuriosityChassis class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, chassis_type, mat):
        r"""__init__(CuriosityChassis self, std::string const & name, chrono::curiosity::CuriosityChassisType chassis_type, std::shared_ptr< chrono::ChMaterialSurface > mat) -> CuriosityChassis"""
        _robot.CuriosityChassis_swiginit(self, _robot.new_CuriosityChassis(name, chassis_type, mat))
    __swig_destroy__ = _robot.delete_CuriosityChassis

    def Initialize(self, system, pos):
        r"""Initialize(CuriosityChassis self, ChSystem system, chrono::ChFrame< > const & pos)"""
        return _robot.CuriosityChassis_Initialize(self, system, pos)

# Register CuriosityChassis in _robot:
_robot.CuriosityChassis_swigregister(CuriosityChassis)

class CuriosityWheel(CuriosityPart):
    r"""Proxy of C++ chrono::curiosity::CuriosityWheel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, rel_pos, mat, wheel_type):
        r"""__init__(CuriosityWheel self, std::string const & name, chrono::ChFrame< > const & rel_pos, std::shared_ptr< chrono::ChMaterialSurface > mat, chrono::curiosity::CuriosityWheelType wheel_type) -> CuriosityWheel"""
        _robot.CuriosityWheel_swiginit(self, _robot.new_CuriosityWheel(name, rel_pos, mat, wheel_type))
    __swig_destroy__ = _robot.delete_CuriosityWheel

# Register CuriosityWheel in _robot:
_robot.CuriosityWheel_swigregister(CuriosityWheel)

class CuriosityRocker(CuriosityPart):
    r"""Proxy of C++ chrono::curiosity::CuriosityRocker class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, rel_pos, mat, side):
        r"""__init__(CuriosityRocker self, std::string const & name, chrono::ChFrame< > const & rel_pos, std::shared_ptr< chrono::ChMaterialSurface > mat, int side) -> CuriosityRocker"""
        _robot.CuriosityRocker_swiginit(self, _robot.new_CuriosityRocker(name, rel_pos, mat, side))
    __swig_destroy__ = _robot.delete_CuriosityRocker

# Register CuriosityRocker in _robot:
_robot.CuriosityRocker_swigregister(CuriosityRocker)

class CuriosityBogie(CuriosityPart):
    r"""Proxy of C++ chrono::curiosity::CuriosityBogie class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, rel_pos, mat, side):
        r"""__init__(CuriosityBogie self, std::string const & name, chrono::ChFrame< > const & rel_pos, std::shared_ptr< chrono::ChMaterialSurface > mat, int side) -> CuriosityBogie"""
        _robot.CuriosityBogie_swiginit(self, _robot.new_CuriosityBogie(name, rel_pos, mat, side))
    __swig_destroy__ = _robot.delete_CuriosityBogie

# Register CuriosityBogie in _robot:
_robot.CuriosityBogie_swigregister(CuriosityBogie)

class CuriosityUpright(CuriosityPart):
    r"""Proxy of C++ chrono::curiosity::CuriosityUpright class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, rel_pos, mat):
        r"""__init__(CuriosityUpright self, std::string const & name, chrono::ChFrame< > const & rel_pos, std::shared_ptr< chrono::ChMaterialSurface > mat) -> CuriosityUpright"""
        _robot.CuriosityUpright_swiginit(self, _robot.new_CuriosityUpright(name, rel_pos, mat))
    __swig_destroy__ = _robot.delete_CuriosityUpright

# Register CuriosityUpright in _robot:
_robot.CuriosityUpright_swigregister(CuriosityUpright)

class CuriosityDifferentialBar(CuriosityPart):
    r"""Proxy of C++ chrono::curiosity::CuriosityDifferentialBar class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, rel_pos, mat):
        r"""__init__(CuriosityDifferentialBar self, std::string const & name, chrono::ChFrame< > const & rel_pos, std::shared_ptr< chrono::ChMaterialSurface > mat) -> CuriosityDifferentialBar"""
        _robot.CuriosityDifferentialBar_swiginit(self, _robot.new_CuriosityDifferentialBar(name, rel_pos, mat))
    __swig_destroy__ = _robot.delete_CuriosityDifferentialBar

# Register CuriosityDifferentialBar in _robot:
_robot.CuriosityDifferentialBar_swigregister(CuriosityDifferentialBar)

class CuriosityDifferentialLink(CuriosityPart):
    r"""Proxy of C++ chrono::curiosity::CuriosityDifferentialLink class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, rel_pos, mat, side):
        r"""__init__(CuriosityDifferentialLink self, std::string const & name, chrono::ChFrame< > const & rel_pos, std::shared_ptr< chrono::ChMaterialSurface > mat, int side) -> CuriosityDifferentialLink"""
        _robot.CuriosityDifferentialLink_swiginit(self, _robot.new_CuriosityDifferentialLink(name, rel_pos, mat, side))
    __swig_destroy__ = _robot.delete_CuriosityDifferentialLink

# Register CuriosityDifferentialLink in _robot:
_robot.CuriosityDifferentialLink_swigregister(CuriosityDifferentialLink)

class Curiosity(object):
    r"""Proxy of C++ chrono::curiosity::Curiosity class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _robot.delete_Curiosity

    def GetSystem(self):
        r"""GetSystem(Curiosity self) -> ChSystem"""
        return _robot.Curiosity_GetSystem(self)

    def SetDriver(self, driver):
        r"""SetDriver(Curiosity self, std::shared_ptr< chrono::curiosity::CuriosityDriver > driver)"""
        return _robot.Curiosity_SetDriver(self, driver)

    def SetWheelContactMaterial(self, mat):
        r"""SetWheelContactMaterial(Curiosity self, std::shared_ptr< chrono::ChMaterialSurface > mat)"""
        return _robot.Curiosity_SetWheelContactMaterial(self, mat)

    def FixChassis(self, fixed):
        r"""FixChassis(Curiosity self, bool fixed)"""
        return _robot.Curiosity_FixChassis(self, fixed)

    def FixSuspension(self, fixed):
        r"""FixSuspension(Curiosity self, bool fixed)"""
        return _robot.Curiosity_FixSuspension(self, fixed)

    def SetChassisVisualization(self, state):
        r"""SetChassisVisualization(Curiosity self, bool state)"""
        return _robot.Curiosity_SetChassisVisualization(self, state)

    def SetWheelVisualization(self, state):
        r"""SetWheelVisualization(Curiosity self, bool state)"""
        return _robot.Curiosity_SetWheelVisualization(self, state)

    def SetSuspensionVisualization(self, state):
        r"""SetSuspensionVisualization(Curiosity self, bool state)"""
        return _robot.Curiosity_SetSuspensionVisualization(self, state)

    def Initialize(self, pos):
        r"""Initialize(Curiosity self, chrono::ChFrame< > const & pos)"""
        return _robot.Curiosity_Initialize(self, pos)

    def Update(self):
        r"""Update(Curiosity self)"""
        return _robot.Curiosity_Update(self)

    def GetChassis(self):
        r"""GetChassis(Curiosity self) -> std::shared_ptr< chrono::curiosity::CuriosityChassis >"""
        return _robot.Curiosity_GetChassis(self)

    def GetWheel(self, id):
        r"""GetWheel(Curiosity self, chrono::curiosity::CuriosityWheelID id) -> std::shared_ptr< chrono::curiosity::CuriosityWheel >"""
        return _robot.Curiosity_GetWheel(self, id)

    def GetWheels(self):
        r"""GetWheels(Curiosity self) -> std::array< std::shared_ptr< chrono::curiosity::CuriosityWheel >,6 >"""
        return _robot.Curiosity_GetWheels(self)

    def GetDriveshaft(self, id):
        r"""GetDriveshaft(Curiosity self, chrono::curiosity::CuriosityWheelID id) -> std::shared_ptr< ChShaft >"""
        return _robot.Curiosity_GetDriveshaft(self, id)

    def GetChassisPos(self):
        r"""GetChassisPos(Curiosity self) -> ChVectorD"""
        return _robot.Curiosity_GetChassisPos(self)

    def GetChassisRot(self):
        r"""GetChassisRot(Curiosity self) -> ChQuaternionD"""
        return _robot.Curiosity_GetChassisRot(self)

    def GetChassisVel(self):
        r"""GetChassisVel(Curiosity self) -> ChVectorD"""
        return _robot.Curiosity_GetChassisVel(self)

    def GetChassisAcc(self):
        r"""GetChassisAcc(Curiosity self) -> ChVectorD"""
        return _robot.Curiosity_GetChassisAcc(self)

    def GetWheelLinVel(self, id):
        r"""GetWheelLinVel(Curiosity self, chrono::curiosity::CuriosityWheelID id) -> ChVectorD"""
        return _robot.Curiosity_GetWheelLinVel(self, id)

    def GetWheelAngVel(self, id):
        r"""GetWheelAngVel(Curiosity self, chrono::curiosity::CuriosityWheelID id) -> ChVectorD"""
        return _robot.Curiosity_GetWheelAngVel(self, id)

    def GetWheelContactForce(self, id):
        r"""GetWheelContactForce(Curiosity self, chrono::curiosity::CuriosityWheelID id) -> ChVectorD"""
        return _robot.Curiosity_GetWheelContactForce(self, id)

    def GetWheelContactTorque(self, id):
        r"""GetWheelContactTorque(Curiosity self, chrono::curiosity::CuriosityWheelID id) -> ChVectorD"""
        return _robot.Curiosity_GetWheelContactTorque(self, id)

    def GetWheelAppliedForce(self, id):
        r"""GetWheelAppliedForce(Curiosity self, chrono::curiosity::CuriosityWheelID id) -> ChVectorD"""
        return _robot.Curiosity_GetWheelAppliedForce(self, id)

    def GetWheelAppliedTorque(self, id):
        r"""GetWheelAppliedTorque(Curiosity self, chrono::curiosity::CuriosityWheelID id) -> ChVectorD"""
        return _robot.Curiosity_GetWheelAppliedTorque(self, id)

    def GetWheelTracTorque(self, id):
        r"""GetWheelTracTorque(Curiosity self, chrono::curiosity::CuriosityWheelID id) -> double"""
        return _robot.Curiosity_GetWheelTracTorque(self, id)

    def GetRoverMass(self):
        r"""GetRoverMass(Curiosity self) -> double"""
        return _robot.Curiosity_GetRoverMass(self)

    def GetWheelMass(self):
        r"""GetWheelMass(Curiosity self) -> double"""
        return _robot.Curiosity_GetWheelMass(self)

    def GetDriveMotorFunc(self, id):
        r"""GetDriveMotorFunc(Curiosity self, chrono::curiosity::CuriosityWheelID id) -> std::shared_ptr< ChFunction_Setpoint >"""
        return _robot.Curiosity_GetDriveMotorFunc(self, id)

    def GetRockerSteerMotorFunc(self, side):
        r"""GetRockerSteerMotorFunc(Curiosity self, int side) -> std::shared_ptr< ChFunction_Const >"""
        return _robot.Curiosity_GetRockerSteerMotorFunc(self, side)

    def GetBogieSteerMotorFunc(self, side):
        r"""GetBogieSteerMotorFunc(Curiosity self, int side) -> std::shared_ptr< ChFunction_Const >"""
        return _robot.Curiosity_GetBogieSteerMotorFunc(self, side)

    def GetDriveMotor(self, id):
        r"""GetDriveMotor(Curiosity self, chrono::curiosity::CuriosityWheelID id) -> std::shared_ptr< ChLinkMotorRotation >"""
        return _robot.Curiosity_GetDriveMotor(self, id)

    def GetRockerSteerMotor(self, side):
        r"""GetRockerSteerMotor(Curiosity self, int side) -> std::shared_ptr< ChLinkMotorRotation >"""
        return _robot.Curiosity_GetRockerSteerMotor(self, side)

    def GetBogieSteerMotor(self, side):
        r"""GetBogieSteerMotor(Curiosity self, int side) -> std::shared_ptr< ChLinkMotorRotation >"""
        return _robot.Curiosity_GetBogieSteerMotor(self, side)

    def __init__(self, *args):
        r"""
        __init__(Curiosity self, ChSystem system, chrono::curiosity::CuriosityChassisType chassis_type=FullRover, chrono::curiosity::CuriosityWheelType wheel_type=RealWheel) -> Curiosity
        __init__(Curiosity self, ChSystem system) -> Curiosity
        """
        _robot.Curiosity_swiginit(self, _robot.new_Curiosity(*args))

# Register Curiosity in _robot:
_robot.Curiosity_swigregister(Curiosity)

class CuriosityDriver(object):
    r"""Proxy of C++ chrono::curiosity::CuriosityDriver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    DriveMotorType_SPEED = _robot.CuriosityDriver_DriveMotorType_SPEED
    
    DriveMotorType_TORQUE = _robot.CuriosityDriver_DriveMotorType_TORQUE
    
    __swig_destroy__ = _robot.delete_CuriosityDriver

    def SetSteering(self, *args):
        r"""
        SetSteering(CuriosityDriver self, double angle)
        SetSteering(CuriosityDriver self, double angle, chrono::curiosity::CuriosityWheelID id)
        """
        return _robot.CuriosityDriver_SetSteering(self, *args)

    def GetDriveMotorType(self):
        r"""GetDriveMotorType(CuriosityDriver self) -> chrono::curiosity::CuriosityDriver::DriveMotorType"""
        return _robot.CuriosityDriver_GetDriveMotorType(self)

# Register CuriosityDriver in _robot:
_robot.CuriosityDriver_swigregister(CuriosityDriver)

class CuriosityDCMotorControl(CuriosityDriver):
    r"""Proxy of C++ chrono::curiosity::CuriosityDCMotorControl class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CuriosityDCMotorControl self) -> CuriosityDCMotorControl"""
        _robot.CuriosityDCMotorControl_swiginit(self, _robot.new_CuriosityDCMotorControl())
    __swig_destroy__ = _robot.delete_CuriosityDCMotorControl

    def SetMotorStallTorque(self, torque, id):
        r"""SetMotorStallTorque(CuriosityDCMotorControl self, double torque, chrono::curiosity::CuriosityWheelID id)"""
        return _robot.CuriosityDCMotorControl_SetMotorStallTorque(self, torque, id)

    def SetMotorNoLoadSpeed(self, speed, id):
        r"""SetMotorNoLoadSpeed(CuriosityDCMotorControl self, double speed, chrono::curiosity::CuriosityWheelID id)"""
        return _robot.CuriosityDCMotorControl_SetMotorNoLoadSpeed(self, speed, id)

# Register CuriosityDCMotorControl in _robot:
_robot.CuriosityDCMotorControl_swigregister(CuriosityDCMotorControl)

class CuriositySpeedDriver(CuriosityDriver):
    r"""Proxy of C++ chrono::curiosity::CuriositySpeedDriver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, time_ramp, speed):
        r"""__init__(CuriositySpeedDriver self, double time_ramp, double speed) -> CuriositySpeedDriver"""
        _robot.CuriositySpeedDriver_swiginit(self, _robot.new_CuriositySpeedDriver(time_ramp, speed))
    __swig_destroy__ = _robot.delete_CuriositySpeedDriver

# Register CuriositySpeedDriver in _robot:
_robot.CuriositySpeedDriver_swigregister(CuriositySpeedDriver)

CHASSIS = _robot.CHASSIS

ACTIVE_WHEEL = _robot.ACTIVE_WHEEL

PASSIVE_WHEEL = _robot.PASSIVE_WHEEL

ROD = _robot.ROD

BOTTOM_PLATE = _robot.BOTTOM_PLATE

MIDDLE_PLATE = _robot.MIDDLE_PLATE

TOP_PLATE = _robot.TOP_PLATE

LD = _robot.LD

RD = _robot.RD

class Turtlebot_Part(object):
    r"""Proxy of C++ chrono::turtlebot::Turtlebot_Part class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, fixed, mat, system, body_pos, body_rot, chassis_body, collide):
        r"""__init__(Turtlebot_Part self, std::string const & name, bool fixed, std::shared_ptr< chrono::ChMaterialSurface > mat, ChSystem system, ChVectorD body_pos, ChQuaternionD body_rot, std::shared_ptr< chrono::ChBodyAuxRef > chassis_body, bool collide) -> Turtlebot_Part"""
        _robot.Turtlebot_Part_swiginit(self, _robot.new_Turtlebot_Part(name, fixed, mat, system, body_pos, body_rot, chassis_body, collide))
    __swig_destroy__ = _robot.delete_Turtlebot_Part

    def GetName(self):
        r"""GetName(Turtlebot_Part self) -> std::string const &"""
        return _robot.Turtlebot_Part_GetName(self)

    def SetName(self, name):
        r"""SetName(Turtlebot_Part self, std::string const & name)"""
        return _robot.Turtlebot_Part_SetName(self, name)

    def GetBody(self):
        r"""GetBody(Turtlebot_Part self) -> std::shared_ptr< chrono::ChBodyAuxRef >"""
        return _robot.Turtlebot_Part_GetBody(self)

    def GetChassis(self):
        r"""GetChassis(Turtlebot_Part self) -> std::shared_ptr< chrono::ChBodyAuxRef >"""
        return _robot.Turtlebot_Part_GetChassis(self)

    def GetPos(self):
        r"""GetPos(Turtlebot_Part self) -> ChVectorD"""
        return _robot.Turtlebot_Part_GetPos(self)

    def GetRot(self):
        r"""GetRot(Turtlebot_Part self) -> ChQuaternionD"""
        return _robot.Turtlebot_Part_GetRot(self)

# Register Turtlebot_Part in _robot:
_robot.Turtlebot_Part_swigregister(Turtlebot_Part)

class Turtlebot_Chassis(Turtlebot_Part):
    r"""Proxy of C++ chrono::turtlebot::Turtlebot_Chassis class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, fixed, mat, system, body_pos, body_rot, collide):
        r"""__init__(Turtlebot_Chassis self, std::string const & name, bool fixed, std::shared_ptr< chrono::ChMaterialSurface > mat, ChSystem system, ChVectorD body_pos, ChQuaternionD body_rot, bool collide) -> Turtlebot_Chassis"""
        _robot.Turtlebot_Chassis_swiginit(self, _robot.new_Turtlebot_Chassis(name, fixed, mat, system, body_pos, body_rot, collide))
    __swig_destroy__ = _robot.delete_Turtlebot_Chassis

    def Initialize(self):
        r"""Initialize(Turtlebot_Chassis self)"""
        return _robot.Turtlebot_Chassis_Initialize(self)

    def SetCollide(self, state):
        r"""SetCollide(Turtlebot_Chassis self, bool state)"""
        return _robot.Turtlebot_Chassis_SetCollide(self, state)

# Register Turtlebot_Chassis in _robot:
_robot.Turtlebot_Chassis_swigregister(Turtlebot_Chassis)

class Turtlebot_ActiveWheel(Turtlebot_Part):
    r"""Proxy of C++ chrono::turtlebot::Turtlebot_ActiveWheel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, fixed, mat, system, body_pos, body_rot, chassis, collide):
        r"""__init__(Turtlebot_ActiveWheel self, std::string const & name, bool fixed, std::shared_ptr< chrono::ChMaterialSurface > mat, ChSystem system, ChVectorD body_pos, ChQuaternionD body_rot, std::shared_ptr< chrono::ChBodyAuxRef > chassis, bool collide) -> Turtlebot_ActiveWheel"""
        _robot.Turtlebot_ActiveWheel_swiginit(self, _robot.new_Turtlebot_ActiveWheel(name, fixed, mat, system, body_pos, body_rot, chassis, collide))
    __swig_destroy__ = _robot.delete_Turtlebot_ActiveWheel

    def Initialize(self):
        r"""Initialize(Turtlebot_ActiveWheel self)"""
        return _robot.Turtlebot_ActiveWheel_Initialize(self)

    def SetCollide(self, state):
        r"""SetCollide(Turtlebot_ActiveWheel self, bool state)"""
        return _robot.Turtlebot_ActiveWheel_SetCollide(self, state)

# Register Turtlebot_ActiveWheel in _robot:
_robot.Turtlebot_ActiveWheel_swigregister(Turtlebot_ActiveWheel)

class Turtlebot_PassiveWheel(Turtlebot_Part):
    r"""Proxy of C++ chrono::turtlebot::Turtlebot_PassiveWheel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, fixed, mat, system, body_pos, body_rot, chassis, collide):
        r"""__init__(Turtlebot_PassiveWheel self, std::string const & name, bool fixed, std::shared_ptr< chrono::ChMaterialSurface > mat, ChSystem system, ChVectorD body_pos, ChQuaternionD body_rot, std::shared_ptr< chrono::ChBodyAuxRef > chassis, bool collide) -> Turtlebot_PassiveWheel"""
        _robot.Turtlebot_PassiveWheel_swiginit(self, _robot.new_Turtlebot_PassiveWheel(name, fixed, mat, system, body_pos, body_rot, chassis, collide))
    __swig_destroy__ = _robot.delete_Turtlebot_PassiveWheel

    def Initialize(self):
        r"""Initialize(Turtlebot_PassiveWheel self)"""
        return _robot.Turtlebot_PassiveWheel_Initialize(self)

    def SetCollide(self, state):
        r"""SetCollide(Turtlebot_PassiveWheel self, bool state)"""
        return _robot.Turtlebot_PassiveWheel_SetCollide(self, state)

# Register Turtlebot_PassiveWheel in _robot:
_robot.Turtlebot_PassiveWheel_swigregister(Turtlebot_PassiveWheel)

class Turtlebot_Rod_Short(Turtlebot_Part):
    r"""Proxy of C++ chrono::turtlebot::Turtlebot_Rod_Short class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, fixed, mat, system, body_pos, body_rot, chassis, collide):
        r"""__init__(Turtlebot_Rod_Short self, std::string const & name, bool fixed, std::shared_ptr< chrono::ChMaterialSurface > mat, ChSystem system, ChVectorD body_pos, ChQuaternionD body_rot, std::shared_ptr< chrono::ChBodyAuxRef > chassis, bool collide) -> Turtlebot_Rod_Short"""
        _robot.Turtlebot_Rod_Short_swiginit(self, _robot.new_Turtlebot_Rod_Short(name, fixed, mat, system, body_pos, body_rot, chassis, collide))
    __swig_destroy__ = _robot.delete_Turtlebot_Rod_Short

    def Initialize(self):
        r"""Initialize(Turtlebot_Rod_Short self)"""
        return _robot.Turtlebot_Rod_Short_Initialize(self)

    def SetCollide(self, state):
        r"""SetCollide(Turtlebot_Rod_Short self, bool state)"""
        return _robot.Turtlebot_Rod_Short_SetCollide(self, state)

# Register Turtlebot_Rod_Short in _robot:
_robot.Turtlebot_Rod_Short_swigregister(Turtlebot_Rod_Short)

class Turtlebot_BottomPlate(Turtlebot_Part):
    r"""Proxy of C++ chrono::turtlebot::Turtlebot_BottomPlate class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, fixed, mat, system, body_pos, body_rot, chassis, collide):
        r"""__init__(Turtlebot_BottomPlate self, std::string const & name, bool fixed, std::shared_ptr< chrono::ChMaterialSurface > mat, ChSystem system, ChVectorD body_pos, ChQuaternionD body_rot, std::shared_ptr< chrono::ChBodyAuxRef > chassis, bool collide) -> Turtlebot_BottomPlate"""
        _robot.Turtlebot_BottomPlate_swiginit(self, _robot.new_Turtlebot_BottomPlate(name, fixed, mat, system, body_pos, body_rot, chassis, collide))
    __swig_destroy__ = _robot.delete_Turtlebot_BottomPlate

    def Initialize(self):
        r"""Initialize(Turtlebot_BottomPlate self)"""
        return _robot.Turtlebot_BottomPlate_Initialize(self)

    def SetCollide(self, state):
        r"""SetCollide(Turtlebot_BottomPlate self, bool state)"""
        return _robot.Turtlebot_BottomPlate_SetCollide(self, state)

# Register Turtlebot_BottomPlate in _robot:
_robot.Turtlebot_BottomPlate_swigregister(Turtlebot_BottomPlate)

class Turtlebot_MiddlePlate(Turtlebot_Part):
    r"""Proxy of C++ chrono::turtlebot::Turtlebot_MiddlePlate class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, fixed, mat, system, body_pos, body_rot, chassis, collide):
        r"""__init__(Turtlebot_MiddlePlate self, std::string const & name, bool fixed, std::shared_ptr< chrono::ChMaterialSurface > mat, ChSystem system, ChVectorD body_pos, ChQuaternionD body_rot, std::shared_ptr< chrono::ChBodyAuxRef > chassis, bool collide) -> Turtlebot_MiddlePlate"""
        _robot.Turtlebot_MiddlePlate_swiginit(self, _robot.new_Turtlebot_MiddlePlate(name, fixed, mat, system, body_pos, body_rot, chassis, collide))
    __swig_destroy__ = _robot.delete_Turtlebot_MiddlePlate

    def Initialize(self):
        r"""Initialize(Turtlebot_MiddlePlate self)"""
        return _robot.Turtlebot_MiddlePlate_Initialize(self)

    def SetCollide(self, state):
        r"""SetCollide(Turtlebot_MiddlePlate self, bool state)"""
        return _robot.Turtlebot_MiddlePlate_SetCollide(self, state)

# Register Turtlebot_MiddlePlate in _robot:
_robot.Turtlebot_MiddlePlate_swigregister(Turtlebot_MiddlePlate)

class Turtlebot_TopPlate(Turtlebot_Part):
    r"""Proxy of C++ chrono::turtlebot::Turtlebot_TopPlate class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, fixed, mat, system, body_pos, body_rot, chassis, collide):
        r"""__init__(Turtlebot_TopPlate self, std::string const & name, bool fixed, std::shared_ptr< chrono::ChMaterialSurface > mat, ChSystem system, ChVectorD body_pos, ChQuaternionD body_rot, std::shared_ptr< chrono::ChBodyAuxRef > chassis, bool collide) -> Turtlebot_TopPlate"""
        _robot.Turtlebot_TopPlate_swiginit(self, _robot.new_Turtlebot_TopPlate(name, fixed, mat, system, body_pos, body_rot, chassis, collide))
    __swig_destroy__ = _robot.delete_Turtlebot_TopPlate

    def Initialize(self):
        r"""Initialize(Turtlebot_TopPlate self)"""
        return _robot.Turtlebot_TopPlate_Initialize(self)

    def SetCollide(self, state):
        r"""SetCollide(Turtlebot_TopPlate self, bool state)"""
        return _robot.Turtlebot_TopPlate_SetCollide(self, state)

# Register Turtlebot_TopPlate in _robot:
_robot.Turtlebot_TopPlate_swigregister(Turtlebot_TopPlate)

class Turtlebot_Rod_Long(Turtlebot_Part):
    r"""Proxy of C++ chrono::turtlebot::Turtlebot_Rod_Long class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, fixed, mat, system, body_pos, body_rot, chassis, collide):
        r"""__init__(Turtlebot_Rod_Long self, std::string const & name, bool fixed, std::shared_ptr< chrono::ChMaterialSurface > mat, ChSystem system, ChVectorD body_pos, ChQuaternionD body_rot, std::shared_ptr< chrono::ChBodyAuxRef > chassis, bool collide) -> Turtlebot_Rod_Long"""
        _robot.Turtlebot_Rod_Long_swiginit(self, _robot.new_Turtlebot_Rod_Long(name, fixed, mat, system, body_pos, body_rot, chassis, collide))
    __swig_destroy__ = _robot.delete_Turtlebot_Rod_Long

    def Initialize(self):
        r"""Initialize(Turtlebot_Rod_Long self)"""
        return _robot.Turtlebot_Rod_Long_Initialize(self)

    def SetCollide(self, state):
        r"""SetCollide(Turtlebot_Rod_Long self, bool state)"""
        return _robot.Turtlebot_Rod_Long_SetCollide(self, state)

# Register Turtlebot_Rod_Long in _robot:
_robot.Turtlebot_Rod_Long_swigregister(Turtlebot_Rod_Long)

class TurtleBot(object):
    r"""Proxy of C++ chrono::turtlebot::TurtleBot class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _robot.delete_TurtleBot

    def Initialize(self):
        r"""Initialize(TurtleBot self)"""
        return _robot.TurtleBot_Initialize(self)

    def SetMotorSpeed(self, rad_speed, id):
        r"""SetMotorSpeed(TurtleBot self, double rad_speed, chrono::turtlebot::WheelID id)"""
        return _robot.TurtleBot_SetMotorSpeed(self, rad_speed, id)

    def GetActiveWheelSpeed(self, id):
        r"""GetActiveWheelSpeed(TurtleBot self, chrono::turtlebot::WheelID id) -> ChVectorD"""
        return _robot.TurtleBot_GetActiveWheelSpeed(self, id)

    def GetActiveWheelAngVel(self, id):
        r"""GetActiveWheelAngVel(TurtleBot self, chrono::turtlebot::WheelID id) -> ChVectorD"""
        return _robot.TurtleBot_GetActiveWheelAngVel(self, id)

    def __init__(self, *args):
        r"""
        __init__(TurtleBot self, ChSystem system, ChVectorD robot_pos, ChQuaternionD robot_rot, std::shared_ptr< chrono::ChMaterialSurface > wheel_mat=0) -> TurtleBot
        __init__(TurtleBot self, ChSystem system, ChVectorD robot_pos, ChQuaternionD robot_rot) -> TurtleBot
        """
        _robot.TurtleBot_swiginit(self, _robot.new_TurtleBot(*args))

# Register TurtleBot in _robot:
_robot.TurtleBot_swigregister(TurtleBot)

class ChCopter6(object):
    r"""Proxy of C++ chrono::copter::Copter< 6 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sys, cpos, ppos, clockwise, are_prop_pos_rel=True, z_up=False):
        r"""__init__(ChCopter6 self, ChSystem sys, ChVectorD cpos, vector_ChVectorD ppos, bool const [] clockwise, bool are_prop_pos_rel=True, bool z_up=False) -> ChCopter6"""
        _robot.ChCopter6_swiginit(self, _robot.new_ChCopter6(sys, cpos, ppos, clockwise, are_prop_pos_rel, z_up))
    __swig_destroy__ = _robot.delete_ChCopter6

    def GetChassis(self):
        r"""GetChassis(ChCopter6 self) -> std::shared_ptr< chrono::ChBody >"""
        return _robot.ChCopter6_GetChassis(self)

    def SetPropellerData(self, mass, inerXX, diam, thrust_coeff, power_coeff, max_rpm):
        r"""SetPropellerData(ChCopter6 self, double mass, ChVectorD inerXX, double diam, double thrust_coeff, double power_coeff, double max_rpm)"""
        return _robot.ChCopter6_SetPropellerData(self, mass, inerXX, diam, thrust_coeff, power_coeff, max_rpm)

    def SetLinearDragCoeff(self, ldc):
        r"""SetLinearDragCoeff(ChCopter6 self, double ldc)"""
        return _robot.ChCopter6_SetLinearDragCoeff(self, ldc)

    def GetLinearDragCoeff(self):
        r"""GetLinearDragCoeff(ChCopter6 self) -> double"""
        return _robot.ChCopter6_GetLinearDragCoeff(self)

    def SetLinearDragSurf(self, dsurf):
        r"""SetLinearDragSurf(ChCopter6 self, double dsurf)"""
        return _robot.ChCopter6_SetLinearDragSurf(self, dsurf)

    def GetLinearDragSurf(self):
        r"""GetLinearDragSurf(ChCopter6 self) -> double"""
        return _robot.ChCopter6_GetLinearDragSurf(self)

    def AddVisualizationAssets(self, chassismesh, propellermesh, cor_m1, cor_m2):
        r"""AddVisualizationAssets(ChCopter6 self, std::string const & chassismesh, std::string const & propellermesh, chrono::ChFrame< > const & cor_m1, chrono::ChFrame< > const & cor_m2)"""
        return _robot.ChCopter6_AddVisualizationAssets(self, chassismesh, propellermesh, cor_m1, cor_m2)

    def ControlIncremental(self, inputs):
        r"""ControlIncremental(ChCopter6 self, double [6] inputs)"""
        return _robot.ChCopter6_ControlIncremental(self, inputs)

    def ControlAbsolute(self, inputs):
        r"""ControlAbsolute(ChCopter6 self, double [6] inputs)"""
        return _robot.ChCopter6_ControlAbsolute(self, inputs)

    def Update(self, timestep):
        r"""Update(ChCopter6 self, double timestep)"""
        return _robot.ChCopter6_Update(self, timestep)

    def SetGroundAirDensity(self, rho):
        r"""SetGroundAirDensity(ChCopter6 self, double rho)"""
        return _robot.ChCopter6_SetGroundAirDensity(self, rho)

    def GetAirPressure(self):
        r"""GetAirPressure(ChCopter6 self) -> double"""
        return _robot.ChCopter6_GetAirPressure(self)

    def GetGroundAirPressure(self):
        r"""GetGroundAirPressure(ChCopter6 self) -> double"""
        return _robot.ChCopter6_GetGroundAirPressure(self)

    def SetGroundPressure(self, p0):
        r"""SetGroundPressure(ChCopter6 self, double p0)"""
        return _robot.ChCopter6_SetGroundPressure(self, p0)

    def GetGroundAirDensity(self):
        r"""GetGroundAirDensity(ChCopter6 self) -> double"""
        return _robot.ChCopter6_GetGroundAirDensity(self)

    def GetAirDensity(self):
        r"""GetAirDensity(ChCopter6 self) -> double"""
        return _robot.ChCopter6_GetAirDensity(self)

    def GetAltitude(self):
        r"""GetAltitude(ChCopter6 self) -> double"""
        return _robot.ChCopter6_GetAltitude(self)

    def GetInitAltitude(self):
        r"""GetInitAltitude(ChCopter6 self) -> double"""
        return _robot.ChCopter6_GetInitAltitude(self)

    def SetInitAltitude(self, alt):
        r"""SetInitAltitude(ChCopter6 self, double alt)"""
        return _robot.ChCopter6_SetInitAltitude(self, alt)

    def GetTemperature(self):
        r"""GetTemperature(ChCopter6 self) -> double"""
        return _robot.ChCopter6_GetTemperature(self)

    def SetTemperature(self, temp):
        r"""SetTemperature(ChCopter6 self, double temp)"""
        return _robot.ChCopter6_SetTemperature(self, temp)

    def GetGroundTemperature(self):
        r"""GetGroundTemperature(ChCopter6 self) -> double"""
        return _robot.ChCopter6_GetGroundTemperature(self)

    def SetGroundTemperature(self, temp):
        r"""SetGroundTemperature(ChCopter6 self, double temp)"""
        return _robot.ChCopter6_SetGroundTemperature(self, temp)

    def GetNumProps(self):
        r"""GetNumProps(ChCopter6 self) -> int"""
        return _robot.ChCopter6_GetNumProps(self)

    def GetProps(self):
        r"""GetProps(ChCopter6 self) -> vector_ChBody"""
        return _robot.ChCopter6_GetProps(self)

    def GetChassisMeshFilename(self):
        r"""GetChassisMeshFilename(ChCopter6 self) -> std::string const &"""
        return _robot.ChCopter6_GetChassisMeshFilename(self)

    def GetPropellerMeshFilename(self):
        r"""GetPropellerMeshFilename(ChCopter6 self) -> std::string const &"""
        return _robot.ChCopter6_GetPropellerMeshFilename(self)

    def RotateCopter(self, A):
        r"""RotateCopter(ChCopter6 self, ChMatrix33D A)"""
        return _robot.ChCopter6_RotateCopter(self, A)

# Register ChCopter6 in _robot:
_robot.ChCopter6_swigregister(ChCopter6)

class ChCopter4(object):
    r"""Proxy of C++ chrono::copter::Copter< 4 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sys, cpos, ppos, clockwise, are_prop_pos_rel=True, z_up=False):
        r"""__init__(ChCopter4 self, ChSystem sys, ChVectorD cpos, vector_ChVectorD ppos, bool const [] clockwise, bool are_prop_pos_rel=True, bool z_up=False) -> ChCopter4"""
        _robot.ChCopter4_swiginit(self, _robot.new_ChCopter4(sys, cpos, ppos, clockwise, are_prop_pos_rel, z_up))
    __swig_destroy__ = _robot.delete_ChCopter4

    def GetChassis(self):
        r"""GetChassis(ChCopter4 self) -> std::shared_ptr< chrono::ChBody >"""
        return _robot.ChCopter4_GetChassis(self)

    def SetPropellerData(self, mass, inerXX, diam, thrust_coeff, power_coeff, max_rpm):
        r"""SetPropellerData(ChCopter4 self, double mass, ChVectorD inerXX, double diam, double thrust_coeff, double power_coeff, double max_rpm)"""
        return _robot.ChCopter4_SetPropellerData(self, mass, inerXX, diam, thrust_coeff, power_coeff, max_rpm)

    def SetLinearDragCoeff(self, ldc):
        r"""SetLinearDragCoeff(ChCopter4 self, double ldc)"""
        return _robot.ChCopter4_SetLinearDragCoeff(self, ldc)

    def GetLinearDragCoeff(self):
        r"""GetLinearDragCoeff(ChCopter4 self) -> double"""
        return _robot.ChCopter4_GetLinearDragCoeff(self)

    def SetLinearDragSurf(self, dsurf):
        r"""SetLinearDragSurf(ChCopter4 self, double dsurf)"""
        return _robot.ChCopter4_SetLinearDragSurf(self, dsurf)

    def GetLinearDragSurf(self):
        r"""GetLinearDragSurf(ChCopter4 self) -> double"""
        return _robot.ChCopter4_GetLinearDragSurf(self)

    def AddVisualizationAssets(self, chassismesh, propellermesh, cor_m1, cor_m2):
        r"""AddVisualizationAssets(ChCopter4 self, std::string const & chassismesh, std::string const & propellermesh, chrono::ChFrame< > const & cor_m1, chrono::ChFrame< > const & cor_m2)"""
        return _robot.ChCopter4_AddVisualizationAssets(self, chassismesh, propellermesh, cor_m1, cor_m2)

    def ControlIncremental(self, inputs):
        r"""ControlIncremental(ChCopter4 self, double [4] inputs)"""
        return _robot.ChCopter4_ControlIncremental(self, inputs)

    def ControlAbsolute(self, inputs):
        r"""ControlAbsolute(ChCopter4 self, double [4] inputs)"""
        return _robot.ChCopter4_ControlAbsolute(self, inputs)

    def Update(self, timestep):
        r"""Update(ChCopter4 self, double timestep)"""
        return _robot.ChCopter4_Update(self, timestep)

    def SetGroundAirDensity(self, rho):
        r"""SetGroundAirDensity(ChCopter4 self, double rho)"""
        return _robot.ChCopter4_SetGroundAirDensity(self, rho)

    def GetAirPressure(self):
        r"""GetAirPressure(ChCopter4 self) -> double"""
        return _robot.ChCopter4_GetAirPressure(self)

    def GetGroundAirPressure(self):
        r"""GetGroundAirPressure(ChCopter4 self) -> double"""
        return _robot.ChCopter4_GetGroundAirPressure(self)

    def SetGroundPressure(self, p0):
        r"""SetGroundPressure(ChCopter4 self, double p0)"""
        return _robot.ChCopter4_SetGroundPressure(self, p0)

    def GetGroundAirDensity(self):
        r"""GetGroundAirDensity(ChCopter4 self) -> double"""
        return _robot.ChCopter4_GetGroundAirDensity(self)

    def GetAirDensity(self):
        r"""GetAirDensity(ChCopter4 self) -> double"""
        return _robot.ChCopter4_GetAirDensity(self)

    def GetAltitude(self):
        r"""GetAltitude(ChCopter4 self) -> double"""
        return _robot.ChCopter4_GetAltitude(self)

    def GetInitAltitude(self):
        r"""GetInitAltitude(ChCopter4 self) -> double"""
        return _robot.ChCopter4_GetInitAltitude(self)

    def SetInitAltitude(self, alt):
        r"""SetInitAltitude(ChCopter4 self, double alt)"""
        return _robot.ChCopter4_SetInitAltitude(self, alt)

    def GetTemperature(self):
        r"""GetTemperature(ChCopter4 self) -> double"""
        return _robot.ChCopter4_GetTemperature(self)

    def SetTemperature(self, temp):
        r"""SetTemperature(ChCopter4 self, double temp)"""
        return _robot.ChCopter4_SetTemperature(self, temp)

    def GetGroundTemperature(self):
        r"""GetGroundTemperature(ChCopter4 self) -> double"""
        return _robot.ChCopter4_GetGroundTemperature(self)

    def SetGroundTemperature(self, temp):
        r"""SetGroundTemperature(ChCopter4 self, double temp)"""
        return _robot.ChCopter4_SetGroundTemperature(self, temp)

    def GetNumProps(self):
        r"""GetNumProps(ChCopter4 self) -> int"""
        return _robot.ChCopter4_GetNumProps(self)

    def GetProps(self):
        r"""GetProps(ChCopter4 self) -> vector_ChBody"""
        return _robot.ChCopter4_GetProps(self)

    def GetChassisMeshFilename(self):
        r"""GetChassisMeshFilename(ChCopter4 self) -> std::string const &"""
        return _robot.ChCopter4_GetChassisMeshFilename(self)

    def GetPropellerMeshFilename(self):
        r"""GetPropellerMeshFilename(ChCopter4 self) -> std::string const &"""
        return _robot.ChCopter4_GetPropellerMeshFilename(self)

    def RotateCopter(self, A):
        r"""RotateCopter(ChCopter4 self, ChMatrix33D A)"""
        return _robot.ChCopter4_RotateCopter(self, A)

# Register ChCopter4 in _robot:
_robot.ChCopter4_swigregister(ChCopter4)

class Little_Hexy(ChCopter6):
    r"""Proxy of C++ chrono::copter::Little_Hexy class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sys, cpos):
        r"""__init__(Little_Hexy self, ChSystem sys, ChVectorD cpos) -> Little_Hexy"""
        _robot.Little_Hexy_swiginit(self, _robot.new_Little_Hexy(sys, cpos))

    def AddVisualizationAssets(self):
        r"""AddVisualizationAssets(Little_Hexy self)"""
        return _robot.Little_Hexy_AddVisualizationAssets(self)

    def AddCollisionShapes(self, material):
        r"""AddCollisionShapes(Little_Hexy self, std::shared_ptr< chrono::ChMaterialSurface > material)"""
        return _robot.Little_Hexy_AddCollisionShapes(self, material)

    def Pitch_Down(self, delta):
        r"""Pitch_Down(Little_Hexy self, double delta)"""
        return _robot.Little_Hexy_Pitch_Down(self, delta)

    def Pitch_Up(self, delta):
        r"""Pitch_Up(Little_Hexy self, double delta)"""
        return _robot.Little_Hexy_Pitch_Up(self, delta)

    def Roll_Right(self, delta):
        r"""Roll_Right(Little_Hexy self, double delta)"""
        return _robot.Little_Hexy_Roll_Right(self, delta)

    def Roll_Left(self, delta):
        r"""Roll_Left(Little_Hexy self, double delta)"""
        return _robot.Little_Hexy_Roll_Left(self, delta)

    def Yaw_Right(self, delta):
        r"""Yaw_Right(Little_Hexy self, double delta)"""
        return _robot.Little_Hexy_Yaw_Right(self, delta)

    def Yaw_Left(self, delta):
        r"""Yaw_Left(Little_Hexy self, double delta)"""
        return _robot.Little_Hexy_Yaw_Left(self, delta)

    def Throttle(self, delta):
        r"""Throttle(Little_Hexy self, double delta)"""
        return _robot.Little_Hexy_Throttle(self, delta)

    def GetChassisMeshFilename(self):
        r"""GetChassisMeshFilename(Little_Hexy self) -> std::string const &"""
        return _robot.Little_Hexy_GetChassisMeshFilename(self)

    def GetPropellerMeshFilename(self):
        r"""GetPropellerMeshFilename(Little_Hexy self) -> std::string const &"""
        return _robot.Little_Hexy_GetPropellerMeshFilename(self)
    __swig_destroy__ = _robot.delete_Little_Hexy

# Register Little_Hexy in _robot:
_robot.Little_Hexy_swigregister(Little_Hexy)



