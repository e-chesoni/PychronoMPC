# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _vehicle
else:
    import _vehicle

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SHARED_PTR_DISOWN = _vehicle.SHARED_PTR_DISOWN

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _vehicle.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _vehicle.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _vehicle.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _vehicle.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _vehicle.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _vehicle.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _vehicle.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _vehicle.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _vehicle.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _vehicle.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _vehicle.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _vehicle.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _vehicle.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _vehicle.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _vehicle.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _vehicle.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _vehicle:
_vehicle.SwigPyIterator_swigregister(SwigPyIterator)

class int_ptr(object):
    r"""Proxy of C++ int_ptr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(int_ptr self) -> int_ptr"""
        _vehicle.int_ptr_swiginit(self, _vehicle.new_int_ptr())
    __swig_destroy__ = _vehicle.delete_int_ptr

    def assign(self, value):
        r"""assign(int_ptr self, int value)"""
        return _vehicle.int_ptr_assign(self, value)

    def value(self):
        r"""value(int_ptr self) -> int"""
        return _vehicle.int_ptr_value(self)

    def cast(self):
        r"""cast(int_ptr self) -> int *"""
        return _vehicle.int_ptr_cast(self)

    @staticmethod
    def frompointer(t):
        r"""frompointer(int * t) -> int_ptr"""
        return _vehicle.int_ptr_frompointer(t)

# Register int_ptr in _vehicle:
_vehicle.int_ptr_swigregister(int_ptr)

def int_ptr_frompointer(t):
    r"""int_ptr_frompointer(int * t) -> int_ptr"""
    return _vehicle.int_ptr_frompointer(t)

class double_ptr(object):
    r"""Proxy of C++ double_ptr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(double_ptr self) -> double_ptr"""
        _vehicle.double_ptr_swiginit(self, _vehicle.new_double_ptr())
    __swig_destroy__ = _vehicle.delete_double_ptr

    def assign(self, value):
        r"""assign(double_ptr self, double value)"""
        return _vehicle.double_ptr_assign(self, value)

    def value(self):
        r"""value(double_ptr self) -> double"""
        return _vehicle.double_ptr_value(self)

    def cast(self):
        r"""cast(double_ptr self) -> double *"""
        return _vehicle.double_ptr_cast(self)

    @staticmethod
    def frompointer(t):
        r"""frompointer(double * t) -> double_ptr"""
        return _vehicle.double_ptr_frompointer(t)

# Register double_ptr in _vehicle:
_vehicle.double_ptr_swigregister(double_ptr)

def double_ptr_frompointer(t):
    r"""double_ptr_frompointer(double * t) -> double_ptr"""
    return _vehicle.double_ptr_frompointer(t)

class float_ptr(object):
    r"""Proxy of C++ float_ptr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(float_ptr self) -> float_ptr"""
        _vehicle.float_ptr_swiginit(self, _vehicle.new_float_ptr())
    __swig_destroy__ = _vehicle.delete_float_ptr

    def assign(self, value):
        r"""assign(float_ptr self, float value)"""
        return _vehicle.float_ptr_assign(self, value)

    def value(self):
        r"""value(float_ptr self) -> float"""
        return _vehicle.float_ptr_value(self)

    def cast(self):
        r"""cast(float_ptr self) -> float *"""
        return _vehicle.float_ptr_cast(self)

    @staticmethod
    def frompointer(t):
        r"""frompointer(float * t) -> float_ptr"""
        return _vehicle.float_ptr_frompointer(t)

# Register float_ptr in _vehicle:
_vehicle.float_ptr_swigregister(float_ptr)

def float_ptr_frompointer(t):
    r"""float_ptr_frompointer(float * t) -> float_ptr"""
    return _vehicle.float_ptr_frompointer(t)

class char_ptr(object):
    r"""Proxy of C++ char_ptr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(char_ptr self) -> char_ptr"""
        _vehicle.char_ptr_swiginit(self, _vehicle.new_char_ptr())
    __swig_destroy__ = _vehicle.delete_char_ptr

    def assign(self, value):
        r"""assign(char_ptr self, char value)"""
        return _vehicle.char_ptr_assign(self, value)

    def value(self):
        r"""value(char_ptr self) -> char"""
        return _vehicle.char_ptr_value(self)

    def cast(self):
        r"""cast(char_ptr self) -> char *"""
        return _vehicle.char_ptr_cast(self)

    @staticmethod
    def frompointer(t):
        r"""frompointer(char * t) -> char_ptr"""
        return _vehicle.char_ptr_frompointer(t)

# Register char_ptr in _vehicle:
_vehicle.char_ptr_swigregister(char_ptr)

def char_ptr_frompointer(t):
    r"""char_ptr_frompointer(char * t) -> char_ptr"""
    return _vehicle.char_ptr_frompointer(t)

class vector_int(object):
    r"""Proxy of C++ std::vector< int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_int self) -> SwigPyIterator"""
        return _vehicle.vector_int_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_int self) -> bool"""
        return _vehicle.vector_int___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_int self) -> bool"""
        return _vehicle.vector_int___bool__(self)

    def __len__(self):
        r"""__len__(vector_int self) -> std::vector< int >::size_type"""
        return _vehicle.vector_int___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vector_int self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> vector_int"""
        return _vehicle.vector_int___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_int self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)
        __setslice__(vector_int self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, vector_int v)
        """
        return _vehicle.vector_int___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vector_int self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)"""
        return _vehicle.vector_int___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_int self, std::vector< int >::difference_type i)
        __delitem__(vector_int self, PySliceObject * slice)
        """
        return _vehicle.vector_int___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_int self, PySliceObject * slice) -> vector_int
        __getitem__(vector_int self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &
        """
        return _vehicle.vector_int___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_int self, PySliceObject * slice, vector_int v)
        __setitem__(vector_int self, PySliceObject * slice)
        __setitem__(vector_int self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)
        """
        return _vehicle.vector_int___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_int self) -> std::vector< int >::value_type"""
        return _vehicle.vector_int_pop(self)

    def append(self, x):
        r"""append(vector_int self, std::vector< int >::value_type const & x)"""
        return _vehicle.vector_int_append(self, x)

    def empty(self):
        r"""empty(vector_int self) -> bool"""
        return _vehicle.vector_int_empty(self)

    def size(self):
        r"""size(vector_int self) -> std::vector< int >::size_type"""
        return _vehicle.vector_int_size(self)

    def swap(self, v):
        r"""swap(vector_int self, vector_int v)"""
        return _vehicle.vector_int_swap(self, v)

    def begin(self):
        r"""begin(vector_int self) -> std::vector< int >::iterator"""
        return _vehicle.vector_int_begin(self)

    def end(self):
        r"""end(vector_int self) -> std::vector< int >::iterator"""
        return _vehicle.vector_int_end(self)

    def rbegin(self):
        r"""rbegin(vector_int self) -> std::vector< int >::reverse_iterator"""
        return _vehicle.vector_int_rbegin(self)

    def rend(self):
        r"""rend(vector_int self) -> std::vector< int >::reverse_iterator"""
        return _vehicle.vector_int_rend(self)

    def clear(self):
        r"""clear(vector_int self)"""
        return _vehicle.vector_int_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_int self) -> std::vector< int >::allocator_type"""
        return _vehicle.vector_int_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_int self)"""
        return _vehicle.vector_int_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_int self, std::vector< int >::iterator pos) -> std::vector< int >::iterator
        erase(vector_int self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator
        """
        return _vehicle.vector_int_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_int self) -> vector_int
        __init__(vector_int self, vector_int other) -> vector_int
        __init__(vector_int self, std::vector< int >::size_type size) -> vector_int
        __init__(vector_int self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> vector_int
        """
        _vehicle.vector_int_swiginit(self, _vehicle.new_vector_int(*args))

    def push_back(self, x):
        r"""push_back(vector_int self, std::vector< int >::value_type const & x)"""
        return _vehicle.vector_int_push_back(self, x)

    def front(self):
        r"""front(vector_int self) -> std::vector< int >::value_type const &"""
        return _vehicle.vector_int_front(self)

    def back(self):
        r"""back(vector_int self) -> std::vector< int >::value_type const &"""
        return _vehicle.vector_int_back(self)

    def assign(self, n, x):
        r"""assign(vector_int self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)"""
        return _vehicle.vector_int_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_int self, std::vector< int >::size_type new_size)
        resize(vector_int self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)
        """
        return _vehicle.vector_int_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_int self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator
        insert(vector_int self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)
        """
        return _vehicle.vector_int_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vector_int self, std::vector< int >::size_type n)"""
        return _vehicle.vector_int_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_int self) -> std::vector< int >::size_type"""
        return _vehicle.vector_int_capacity(self)
    __swig_destroy__ = _vehicle.delete_vector_int

# Register vector_int in _vehicle:
_vehicle.vector_int_swigregister(vector_int)

class vector_double(object):
    r"""Proxy of C++ std::vector< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_double self) -> SwigPyIterator"""
        return _vehicle.vector_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_double self) -> bool"""
        return _vehicle.vector_double___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_double self) -> bool"""
        return _vehicle.vector_double___bool__(self)

    def __len__(self):
        r"""__len__(vector_double self) -> std::vector< double >::size_type"""
        return _vehicle.vector_double___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vector_double self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> vector_double"""
        return _vehicle.vector_double___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_double self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)
        __setslice__(vector_double self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, vector_double v)
        """
        return _vehicle.vector_double___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vector_double self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)"""
        return _vehicle.vector_double___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_double self, std::vector< double >::difference_type i)
        __delitem__(vector_double self, PySliceObject * slice)
        """
        return _vehicle.vector_double___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_double self, PySliceObject * slice) -> vector_double
        __getitem__(vector_double self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &
        """
        return _vehicle.vector_double___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_double self, PySliceObject * slice, vector_double v)
        __setitem__(vector_double self, PySliceObject * slice)
        __setitem__(vector_double self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)
        """
        return _vehicle.vector_double___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_double self) -> std::vector< double >::value_type"""
        return _vehicle.vector_double_pop(self)

    def append(self, x):
        r"""append(vector_double self, std::vector< double >::value_type const & x)"""
        return _vehicle.vector_double_append(self, x)

    def empty(self):
        r"""empty(vector_double self) -> bool"""
        return _vehicle.vector_double_empty(self)

    def size(self):
        r"""size(vector_double self) -> std::vector< double >::size_type"""
        return _vehicle.vector_double_size(self)

    def swap(self, v):
        r"""swap(vector_double self, vector_double v)"""
        return _vehicle.vector_double_swap(self, v)

    def begin(self):
        r"""begin(vector_double self) -> std::vector< double >::iterator"""
        return _vehicle.vector_double_begin(self)

    def end(self):
        r"""end(vector_double self) -> std::vector< double >::iterator"""
        return _vehicle.vector_double_end(self)

    def rbegin(self):
        r"""rbegin(vector_double self) -> std::vector< double >::reverse_iterator"""
        return _vehicle.vector_double_rbegin(self)

    def rend(self):
        r"""rend(vector_double self) -> std::vector< double >::reverse_iterator"""
        return _vehicle.vector_double_rend(self)

    def clear(self):
        r"""clear(vector_double self)"""
        return _vehicle.vector_double_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_double self) -> std::vector< double >::allocator_type"""
        return _vehicle.vector_double_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_double self)"""
        return _vehicle.vector_double_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_double self, std::vector< double >::iterator pos) -> std::vector< double >::iterator
        erase(vector_double self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator
        """
        return _vehicle.vector_double_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_double self) -> vector_double
        __init__(vector_double self, vector_double other) -> vector_double
        __init__(vector_double self, std::vector< double >::size_type size) -> vector_double
        __init__(vector_double self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> vector_double
        """
        _vehicle.vector_double_swiginit(self, _vehicle.new_vector_double(*args))

    def push_back(self, x):
        r"""push_back(vector_double self, std::vector< double >::value_type const & x)"""
        return _vehicle.vector_double_push_back(self, x)

    def front(self):
        r"""front(vector_double self) -> std::vector< double >::value_type const &"""
        return _vehicle.vector_double_front(self)

    def back(self):
        r"""back(vector_double self) -> std::vector< double >::value_type const &"""
        return _vehicle.vector_double_back(self)

    def assign(self, n, x):
        r"""assign(vector_double self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)"""
        return _vehicle.vector_double_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_double self, std::vector< double >::size_type new_size)
        resize(vector_double self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)
        """
        return _vehicle.vector_double_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_double self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator
        insert(vector_double self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)
        """
        return _vehicle.vector_double_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vector_double self, std::vector< double >::size_type n)"""
        return _vehicle.vector_double_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_double self) -> std::vector< double >::size_type"""
        return _vehicle.vector_double_capacity(self)
    __swig_destroy__ = _vehicle.delete_vector_double

# Register vector_double in _vehicle:
_vehicle.vector_double_swigregister(vector_double)

class TerrainForces(object):
    r"""Proxy of C++ std::vector< chrono::vehicle::TerrainForce > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(TerrainForces self) -> SwigPyIterator"""
        return _vehicle.TerrainForces_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(TerrainForces self) -> bool"""
        return _vehicle.TerrainForces___nonzero__(self)

    def __bool__(self):
        r"""__bool__(TerrainForces self) -> bool"""
        return _vehicle.TerrainForces___bool__(self)

    def __len__(self):
        r"""__len__(TerrainForces self) -> std::vector< chrono::vehicle::TerrainForce >::size_type"""
        return _vehicle.TerrainForces___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(TerrainForces self, std::vector< chrono::vehicle::TerrainForce >::difference_type i, std::vector< chrono::vehicle::TerrainForce >::difference_type j) -> TerrainForces"""
        return _vehicle.TerrainForces___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(TerrainForces self, std::vector< chrono::vehicle::TerrainForce >::difference_type i, std::vector< chrono::vehicle::TerrainForce >::difference_type j)
        __setslice__(TerrainForces self, std::vector< chrono::vehicle::TerrainForce >::difference_type i, std::vector< chrono::vehicle::TerrainForce >::difference_type j, TerrainForces v)
        """
        return _vehicle.TerrainForces___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(TerrainForces self, std::vector< chrono::vehicle::TerrainForce >::difference_type i, std::vector< chrono::vehicle::TerrainForce >::difference_type j)"""
        return _vehicle.TerrainForces___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(TerrainForces self, std::vector< chrono::vehicle::TerrainForce >::difference_type i)
        __delitem__(TerrainForces self, PySliceObject * slice)
        """
        return _vehicle.TerrainForces___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(TerrainForces self, PySliceObject * slice) -> TerrainForces
        __getitem__(TerrainForces self, std::vector< chrono::vehicle::TerrainForce >::difference_type i) -> TerrainForce
        """
        return _vehicle.TerrainForces___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(TerrainForces self, PySliceObject * slice, TerrainForces v)
        __setitem__(TerrainForces self, PySliceObject * slice)
        __setitem__(TerrainForces self, std::vector< chrono::vehicle::TerrainForce >::difference_type i, TerrainForce x)
        """
        return _vehicle.TerrainForces___setitem__(self, *args)

    def pop(self):
        r"""pop(TerrainForces self) -> TerrainForce"""
        return _vehicle.TerrainForces_pop(self)

    def append(self, x):
        r"""append(TerrainForces self, TerrainForce x)"""
        return _vehicle.TerrainForces_append(self, x)

    def empty(self):
        r"""empty(TerrainForces self) -> bool"""
        return _vehicle.TerrainForces_empty(self)

    def size(self):
        r"""size(TerrainForces self) -> std::vector< chrono::vehicle::TerrainForce >::size_type"""
        return _vehicle.TerrainForces_size(self)

    def swap(self, v):
        r"""swap(TerrainForces self, TerrainForces v)"""
        return _vehicle.TerrainForces_swap(self, v)

    def begin(self):
        r"""begin(TerrainForces self) -> std::vector< chrono::vehicle::TerrainForce >::iterator"""
        return _vehicle.TerrainForces_begin(self)

    def end(self):
        r"""end(TerrainForces self) -> std::vector< chrono::vehicle::TerrainForce >::iterator"""
        return _vehicle.TerrainForces_end(self)

    def rbegin(self):
        r"""rbegin(TerrainForces self) -> std::vector< chrono::vehicle::TerrainForce >::reverse_iterator"""
        return _vehicle.TerrainForces_rbegin(self)

    def rend(self):
        r"""rend(TerrainForces self) -> std::vector< chrono::vehicle::TerrainForce >::reverse_iterator"""
        return _vehicle.TerrainForces_rend(self)

    def clear(self):
        r"""clear(TerrainForces self)"""
        return _vehicle.TerrainForces_clear(self)

    def get_allocator(self):
        r"""get_allocator(TerrainForces self) -> std::vector< chrono::vehicle::TerrainForce >::allocator_type"""
        return _vehicle.TerrainForces_get_allocator(self)

    def pop_back(self):
        r"""pop_back(TerrainForces self)"""
        return _vehicle.TerrainForces_pop_back(self)

    def erase(self, *args):
        r"""
        erase(TerrainForces self, std::vector< chrono::vehicle::TerrainForce >::iterator pos) -> std::vector< chrono::vehicle::TerrainForce >::iterator
        erase(TerrainForces self, std::vector< chrono::vehicle::TerrainForce >::iterator first, std::vector< chrono::vehicle::TerrainForce >::iterator last) -> std::vector< chrono::vehicle::TerrainForce >::iterator
        """
        return _vehicle.TerrainForces_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(TerrainForces self) -> TerrainForces
        __init__(TerrainForces self, TerrainForces other) -> TerrainForces
        __init__(TerrainForces self, std::vector< chrono::vehicle::TerrainForce >::size_type size) -> TerrainForces
        __init__(TerrainForces self, std::vector< chrono::vehicle::TerrainForce >::size_type size, TerrainForce value) -> TerrainForces
        """
        _vehicle.TerrainForces_swiginit(self, _vehicle.new_TerrainForces(*args))

    def push_back(self, x):
        r"""push_back(TerrainForces self, TerrainForce x)"""
        return _vehicle.TerrainForces_push_back(self, x)

    def front(self):
        r"""front(TerrainForces self) -> TerrainForce"""
        return _vehicle.TerrainForces_front(self)

    def back(self):
        r"""back(TerrainForces self) -> TerrainForce"""
        return _vehicle.TerrainForces_back(self)

    def assign(self, n, x):
        r"""assign(TerrainForces self, std::vector< chrono::vehicle::TerrainForce >::size_type n, TerrainForce x)"""
        return _vehicle.TerrainForces_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(TerrainForces self, std::vector< chrono::vehicle::TerrainForce >::size_type new_size)
        resize(TerrainForces self, std::vector< chrono::vehicle::TerrainForce >::size_type new_size, TerrainForce x)
        """
        return _vehicle.TerrainForces_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(TerrainForces self, std::vector< chrono::vehicle::TerrainForce >::iterator pos, TerrainForce x) -> std::vector< chrono::vehicle::TerrainForce >::iterator
        insert(TerrainForces self, std::vector< chrono::vehicle::TerrainForce >::iterator pos, std::vector< chrono::vehicle::TerrainForce >::size_type n, TerrainForce x)
        """
        return _vehicle.TerrainForces_insert(self, *args)

    def reserve(self, n):
        r"""reserve(TerrainForces self, std::vector< chrono::vehicle::TerrainForce >::size_type n)"""
        return _vehicle.TerrainForces_reserve(self, n)

    def capacity(self):
        r"""capacity(TerrainForces self) -> std::vector< chrono::vehicle::TerrainForce >::size_type"""
        return _vehicle.TerrainForces_capacity(self)
    __swig_destroy__ = _vehicle.delete_TerrainForces

# Register TerrainForces in _vehicle:
_vehicle.TerrainForces_swigregister(TerrainForces)

class WheelStates(object):
    r"""Proxy of C++ std::vector< chrono::vehicle::WheelState > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(WheelStates self) -> SwigPyIterator"""
        return _vehicle.WheelStates_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(WheelStates self) -> bool"""
        return _vehicle.WheelStates___nonzero__(self)

    def __bool__(self):
        r"""__bool__(WheelStates self) -> bool"""
        return _vehicle.WheelStates___bool__(self)

    def __len__(self):
        r"""__len__(WheelStates self) -> std::vector< chrono::vehicle::WheelState >::size_type"""
        return _vehicle.WheelStates___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(WheelStates self, std::vector< chrono::vehicle::WheelState >::difference_type i, std::vector< chrono::vehicle::WheelState >::difference_type j) -> WheelStates"""
        return _vehicle.WheelStates___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(WheelStates self, std::vector< chrono::vehicle::WheelState >::difference_type i, std::vector< chrono::vehicle::WheelState >::difference_type j)
        __setslice__(WheelStates self, std::vector< chrono::vehicle::WheelState >::difference_type i, std::vector< chrono::vehicle::WheelState >::difference_type j, WheelStates v)
        """
        return _vehicle.WheelStates___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(WheelStates self, std::vector< chrono::vehicle::WheelState >::difference_type i, std::vector< chrono::vehicle::WheelState >::difference_type j)"""
        return _vehicle.WheelStates___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(WheelStates self, std::vector< chrono::vehicle::WheelState >::difference_type i)
        __delitem__(WheelStates self, PySliceObject * slice)
        """
        return _vehicle.WheelStates___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(WheelStates self, PySliceObject * slice) -> WheelStates
        __getitem__(WheelStates self, std::vector< chrono::vehicle::WheelState >::difference_type i) -> WheelState
        """
        return _vehicle.WheelStates___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(WheelStates self, PySliceObject * slice, WheelStates v)
        __setitem__(WheelStates self, PySliceObject * slice)
        __setitem__(WheelStates self, std::vector< chrono::vehicle::WheelState >::difference_type i, WheelState x)
        """
        return _vehicle.WheelStates___setitem__(self, *args)

    def pop(self):
        r"""pop(WheelStates self) -> WheelState"""
        return _vehicle.WheelStates_pop(self)

    def append(self, x):
        r"""append(WheelStates self, WheelState x)"""
        return _vehicle.WheelStates_append(self, x)

    def empty(self):
        r"""empty(WheelStates self) -> bool"""
        return _vehicle.WheelStates_empty(self)

    def size(self):
        r"""size(WheelStates self) -> std::vector< chrono::vehicle::WheelState >::size_type"""
        return _vehicle.WheelStates_size(self)

    def swap(self, v):
        r"""swap(WheelStates self, WheelStates v)"""
        return _vehicle.WheelStates_swap(self, v)

    def begin(self):
        r"""begin(WheelStates self) -> std::vector< chrono::vehicle::WheelState >::iterator"""
        return _vehicle.WheelStates_begin(self)

    def end(self):
        r"""end(WheelStates self) -> std::vector< chrono::vehicle::WheelState >::iterator"""
        return _vehicle.WheelStates_end(self)

    def rbegin(self):
        r"""rbegin(WheelStates self) -> std::vector< chrono::vehicle::WheelState >::reverse_iterator"""
        return _vehicle.WheelStates_rbegin(self)

    def rend(self):
        r"""rend(WheelStates self) -> std::vector< chrono::vehicle::WheelState >::reverse_iterator"""
        return _vehicle.WheelStates_rend(self)

    def clear(self):
        r"""clear(WheelStates self)"""
        return _vehicle.WheelStates_clear(self)

    def get_allocator(self):
        r"""get_allocator(WheelStates self) -> std::vector< chrono::vehicle::WheelState >::allocator_type"""
        return _vehicle.WheelStates_get_allocator(self)

    def pop_back(self):
        r"""pop_back(WheelStates self)"""
        return _vehicle.WheelStates_pop_back(self)

    def erase(self, *args):
        r"""
        erase(WheelStates self, std::vector< chrono::vehicle::WheelState >::iterator pos) -> std::vector< chrono::vehicle::WheelState >::iterator
        erase(WheelStates self, std::vector< chrono::vehicle::WheelState >::iterator first, std::vector< chrono::vehicle::WheelState >::iterator last) -> std::vector< chrono::vehicle::WheelState >::iterator
        """
        return _vehicle.WheelStates_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(WheelStates self) -> WheelStates
        __init__(WheelStates self, WheelStates other) -> WheelStates
        __init__(WheelStates self, std::vector< chrono::vehicle::WheelState >::size_type size) -> WheelStates
        __init__(WheelStates self, std::vector< chrono::vehicle::WheelState >::size_type size, WheelState value) -> WheelStates
        """
        _vehicle.WheelStates_swiginit(self, _vehicle.new_WheelStates(*args))

    def push_back(self, x):
        r"""push_back(WheelStates self, WheelState x)"""
        return _vehicle.WheelStates_push_back(self, x)

    def front(self):
        r"""front(WheelStates self) -> WheelState"""
        return _vehicle.WheelStates_front(self)

    def back(self):
        r"""back(WheelStates self) -> WheelState"""
        return _vehicle.WheelStates_back(self)

    def assign(self, n, x):
        r"""assign(WheelStates self, std::vector< chrono::vehicle::WheelState >::size_type n, WheelState x)"""
        return _vehicle.WheelStates_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(WheelStates self, std::vector< chrono::vehicle::WheelState >::size_type new_size)
        resize(WheelStates self, std::vector< chrono::vehicle::WheelState >::size_type new_size, WheelState x)
        """
        return _vehicle.WheelStates_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(WheelStates self, std::vector< chrono::vehicle::WheelState >::iterator pos, WheelState x) -> std::vector< chrono::vehicle::WheelState >::iterator
        insert(WheelStates self, std::vector< chrono::vehicle::WheelState >::iterator pos, std::vector< chrono::vehicle::WheelState >::size_type n, WheelState x)
        """
        return _vehicle.WheelStates_insert(self, *args)

    def reserve(self, n):
        r"""reserve(WheelStates self, std::vector< chrono::vehicle::WheelState >::size_type n)"""
        return _vehicle.WheelStates_reserve(self, n)

    def capacity(self):
        r"""capacity(WheelStates self) -> std::vector< chrono::vehicle::WheelState >::size_type"""
        return _vehicle.WheelStates_capacity(self)
    __swig_destroy__ = _vehicle.delete_WheelStates

# Register WheelStates in _vehicle:
_vehicle.WheelStates_swigregister(WheelStates)

class ChWheelList(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(ChWheelList self) -> SwigPyIterator"""
        return _vehicle.ChWheelList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(ChWheelList self) -> bool"""
        return _vehicle.ChWheelList___nonzero__(self)

    def __bool__(self):
        r"""__bool__(ChWheelList self) -> bool"""
        return _vehicle.ChWheelList___bool__(self)

    def __len__(self):
        r"""__len__(ChWheelList self) -> std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::size_type"""
        return _vehicle.ChWheelList___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(ChWheelList self, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::difference_type i, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::difference_type j) -> ChWheelList"""
        return _vehicle.ChWheelList___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(ChWheelList self, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::difference_type i, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::difference_type j)
        __setslice__(ChWheelList self, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::difference_type i, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::difference_type j, ChWheelList v)
        """
        return _vehicle.ChWheelList___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(ChWheelList self, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::difference_type i, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::difference_type j)"""
        return _vehicle.ChWheelList___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(ChWheelList self, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::difference_type i)
        __delitem__(ChWheelList self, PySliceObject * slice)
        """
        return _vehicle.ChWheelList___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(ChWheelList self, PySliceObject * slice) -> ChWheelList
        __getitem__(ChWheelList self, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::difference_type i) -> std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::value_type const &
        """
        return _vehicle.ChWheelList___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(ChWheelList self, PySliceObject * slice, ChWheelList v)
        __setitem__(ChWheelList self, PySliceObject * slice)
        __setitem__(ChWheelList self, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::difference_type i, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::value_type const & x)
        """
        return _vehicle.ChWheelList___setitem__(self, *args)

    def pop(self):
        r"""pop(ChWheelList self) -> std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::value_type"""
        return _vehicle.ChWheelList_pop(self)

    def append(self, x):
        r"""append(ChWheelList self, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::value_type const & x)"""
        return _vehicle.ChWheelList_append(self, x)

    def empty(self):
        r"""empty(ChWheelList self) -> bool"""
        return _vehicle.ChWheelList_empty(self)

    def size(self):
        r"""size(ChWheelList self) -> std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::size_type"""
        return _vehicle.ChWheelList_size(self)

    def swap(self, v):
        r"""swap(ChWheelList self, ChWheelList v)"""
        return _vehicle.ChWheelList_swap(self, v)

    def begin(self):
        r"""begin(ChWheelList self) -> std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::iterator"""
        return _vehicle.ChWheelList_begin(self)

    def end(self):
        r"""end(ChWheelList self) -> std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::iterator"""
        return _vehicle.ChWheelList_end(self)

    def rbegin(self):
        r"""rbegin(ChWheelList self) -> std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::reverse_iterator"""
        return _vehicle.ChWheelList_rbegin(self)

    def rend(self):
        r"""rend(ChWheelList self) -> std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::reverse_iterator"""
        return _vehicle.ChWheelList_rend(self)

    def clear(self):
        r"""clear(ChWheelList self)"""
        return _vehicle.ChWheelList_clear(self)

    def get_allocator(self):
        r"""get_allocator(ChWheelList self) -> std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::allocator_type"""
        return _vehicle.ChWheelList_get_allocator(self)

    def pop_back(self):
        r"""pop_back(ChWheelList self)"""
        return _vehicle.ChWheelList_pop_back(self)

    def erase(self, *args):
        r"""
        erase(ChWheelList self, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::iterator pos) -> std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::iterator
        erase(ChWheelList self, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::iterator first, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::iterator last) -> std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::iterator
        """
        return _vehicle.ChWheelList_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(ChWheelList self) -> ChWheelList
        __init__(ChWheelList self, ChWheelList other) -> ChWheelList
        __init__(ChWheelList self, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::size_type size) -> ChWheelList
        __init__(ChWheelList self, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::size_type size, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::value_type const & value) -> ChWheelList
        """
        _vehicle.ChWheelList_swiginit(self, _vehicle.new_ChWheelList(*args))

    def push_back(self, x):
        r"""push_back(ChWheelList self, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::value_type const & x)"""
        return _vehicle.ChWheelList_push_back(self, x)

    def front(self):
        r"""front(ChWheelList self) -> std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::value_type const &"""
        return _vehicle.ChWheelList_front(self)

    def back(self):
        r"""back(ChWheelList self) -> std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::value_type const &"""
        return _vehicle.ChWheelList_back(self)

    def assign(self, n, x):
        r"""assign(ChWheelList self, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::size_type n, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::value_type const & x)"""
        return _vehicle.ChWheelList_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(ChWheelList self, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::size_type new_size)
        resize(ChWheelList self, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::size_type new_size, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::value_type const & x)
        """
        return _vehicle.ChWheelList_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(ChWheelList self, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::iterator pos, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::value_type const & x) -> std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::iterator
        insert(ChWheelList self, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::iterator pos, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::size_type n, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::value_type const & x)
        """
        return _vehicle.ChWheelList_insert(self, *args)

    def reserve(self, n):
        r"""reserve(ChWheelList self, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::size_type n)"""
        return _vehicle.ChWheelList_reserve(self, n)

    def capacity(self):
        r"""capacity(ChWheelList self) -> std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::size_type"""
        return _vehicle.ChWheelList_capacity(self)
    __swig_destroy__ = _vehicle.delete_ChWheelList

# Register ChWheelList in _vehicle:
_vehicle.ChWheelList_swigregister(ChWheelList)

class ChAxleList(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(ChAxleList self) -> SwigPyIterator"""
        return _vehicle.ChAxleList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(ChAxleList self) -> bool"""
        return _vehicle.ChAxleList___nonzero__(self)

    def __bool__(self):
        r"""__bool__(ChAxleList self) -> bool"""
        return _vehicle.ChAxleList___bool__(self)

    def __len__(self):
        r"""__len__(ChAxleList self) -> std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::size_type"""
        return _vehicle.ChAxleList___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(ChAxleList self, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::difference_type i, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::difference_type j) -> ChAxleList"""
        return _vehicle.ChAxleList___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(ChAxleList self, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::difference_type i, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::difference_type j)
        __setslice__(ChAxleList self, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::difference_type i, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::difference_type j, ChAxleList v)
        """
        return _vehicle.ChAxleList___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(ChAxleList self, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::difference_type i, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::difference_type j)"""
        return _vehicle.ChAxleList___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(ChAxleList self, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::difference_type i)
        __delitem__(ChAxleList self, PySliceObject * slice)
        """
        return _vehicle.ChAxleList___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(ChAxleList self, PySliceObject * slice) -> ChAxleList
        __getitem__(ChAxleList self, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::difference_type i) -> std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::value_type const &
        """
        return _vehicle.ChAxleList___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(ChAxleList self, PySliceObject * slice, ChAxleList v)
        __setitem__(ChAxleList self, PySliceObject * slice)
        __setitem__(ChAxleList self, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::difference_type i, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::value_type const & x)
        """
        return _vehicle.ChAxleList___setitem__(self, *args)

    def pop(self):
        r"""pop(ChAxleList self) -> std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::value_type"""
        return _vehicle.ChAxleList_pop(self)

    def append(self, x):
        r"""append(ChAxleList self, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::value_type const & x)"""
        return _vehicle.ChAxleList_append(self, x)

    def empty(self):
        r"""empty(ChAxleList self) -> bool"""
        return _vehicle.ChAxleList_empty(self)

    def size(self):
        r"""size(ChAxleList self) -> std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::size_type"""
        return _vehicle.ChAxleList_size(self)

    def swap(self, v):
        r"""swap(ChAxleList self, ChAxleList v)"""
        return _vehicle.ChAxleList_swap(self, v)

    def begin(self):
        r"""begin(ChAxleList self) -> std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::iterator"""
        return _vehicle.ChAxleList_begin(self)

    def end(self):
        r"""end(ChAxleList self) -> std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::iterator"""
        return _vehicle.ChAxleList_end(self)

    def rbegin(self):
        r"""rbegin(ChAxleList self) -> std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::reverse_iterator"""
        return _vehicle.ChAxleList_rbegin(self)

    def rend(self):
        r"""rend(ChAxleList self) -> std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::reverse_iterator"""
        return _vehicle.ChAxleList_rend(self)

    def clear(self):
        r"""clear(ChAxleList self)"""
        return _vehicle.ChAxleList_clear(self)

    def get_allocator(self):
        r"""get_allocator(ChAxleList self) -> std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::allocator_type"""
        return _vehicle.ChAxleList_get_allocator(self)

    def pop_back(self):
        r"""pop_back(ChAxleList self)"""
        return _vehicle.ChAxleList_pop_back(self)

    def erase(self, *args):
        r"""
        erase(ChAxleList self, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::iterator pos) -> std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::iterator
        erase(ChAxleList self, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::iterator first, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::iterator last) -> std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::iterator
        """
        return _vehicle.ChAxleList_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(ChAxleList self) -> ChAxleList
        __init__(ChAxleList self, ChAxleList other) -> ChAxleList
        __init__(ChAxleList self, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::size_type size) -> ChAxleList
        __init__(ChAxleList self, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::size_type size, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::value_type const & value) -> ChAxleList
        """
        _vehicle.ChAxleList_swiginit(self, _vehicle.new_ChAxleList(*args))

    def push_back(self, x):
        r"""push_back(ChAxleList self, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::value_type const & x)"""
        return _vehicle.ChAxleList_push_back(self, x)

    def front(self):
        r"""front(ChAxleList self) -> std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::value_type const &"""
        return _vehicle.ChAxleList_front(self)

    def back(self):
        r"""back(ChAxleList self) -> std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::value_type const &"""
        return _vehicle.ChAxleList_back(self)

    def assign(self, n, x):
        r"""assign(ChAxleList self, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::size_type n, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::value_type const & x)"""
        return _vehicle.ChAxleList_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(ChAxleList self, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::size_type new_size)
        resize(ChAxleList self, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::size_type new_size, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::value_type const & x)
        """
        return _vehicle.ChAxleList_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(ChAxleList self, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::iterator pos, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::value_type const & x) -> std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::iterator
        insert(ChAxleList self, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::iterator pos, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::size_type n, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::value_type const & x)
        """
        return _vehicle.ChAxleList_insert(self, *args)

    def reserve(self, n):
        r"""reserve(ChAxleList self, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::size_type n)"""
        return _vehicle.ChAxleList_reserve(self, n)

    def capacity(self):
        r"""capacity(ChAxleList self) -> std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::size_type"""
        return _vehicle.ChAxleList_capacity(self)
    __swig_destroy__ = _vehicle.delete_ChAxleList

# Register ChAxleList in _vehicle:
_vehicle.ChAxleList_swigregister(ChAxleList)

import pychrono.core
import pychrono.irrlicht
class ChVehicleVisualSystem(pychrono.core.ChVisualSystem):
    r"""Proxy of C++ chrono::vehicle::ChVehicleVisualSystem class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChVehicleVisualSystem

    def AttachVehicle(self, vehicle):
        r"""AttachVehicle(ChVehicleVisualSystem self, ChVehicle vehicle)"""
        return _vehicle.ChVehicleVisualSystem_AttachVehicle(self, vehicle)

    def SetChaseCamera(self, ptOnChassis, chaseDist, chaseHeight):
        r"""SetChaseCamera(ChVehicleVisualSystem self, ChVectorD ptOnChassis, double chaseDist, double chaseHeight)"""
        return _vehicle.ChVehicleVisualSystem_SetChaseCamera(self, ptOnChassis, chaseDist, chaseHeight)

    def SetStepsize(self, val):
        r"""SetStepsize(ChVehicleVisualSystem self, double val)"""
        return _vehicle.ChVehicleVisualSystem_SetStepsize(self, val)

    def SetChaseCameraState(self, state):
        r"""SetChaseCameraState(ChVehicleVisualSystem self, utils::ChChaseCamera::State state)"""
        return _vehicle.ChVehicleVisualSystem_SetChaseCameraState(self, state)

    def SetChaseCameraPosition(self, pos):
        r"""SetChaseCameraPosition(ChVehicleVisualSystem self, ChVectorD pos)"""
        return _vehicle.ChVehicleVisualSystem_SetChaseCameraPosition(self, pos)

    def SetChaseCameraAngle(self, angle):
        r"""SetChaseCameraAngle(ChVehicleVisualSystem self, double angle)"""
        return _vehicle.ChVehicleVisualSystem_SetChaseCameraAngle(self, angle)

    def SetChaseCameraMultipliers(self, minMult, maxMult):
        r"""SetChaseCameraMultipliers(ChVehicleVisualSystem self, double minMult, double maxMult)"""
        return _vehicle.ChVehicleVisualSystem_SetChaseCameraMultipliers(self, minMult, maxMult)

    def Synchronize(self, time, driver_inputs):
        r"""Synchronize(ChVehicleVisualSystem self, double time, DriverInputs driver_inputs)"""
        return _vehicle.ChVehicleVisualSystem_Synchronize(self, time, driver_inputs)

    def Advance(self, step):
        r"""Advance(ChVehicleVisualSystem self, double step)"""
        return _vehicle.ChVehicleVisualSystem_Advance(self, step)

    def GetSimulationRTF(self):
        r"""GetSimulationRTF(ChVehicleVisualSystem self) -> double"""
        return _vehicle.ChVehicleVisualSystem_GetSimulationRTF(self)

    def GetVehicle(self):
        r"""GetVehicle(ChVehicleVisualSystem self) -> ChVehicle"""
        return _vehicle.ChVehicleVisualSystem_GetVehicle(self)

    def GetChaseCamera(self):
        r"""GetChaseCamera(ChVehicleVisualSystem self) -> ChChaseCamera"""
        return _vehicle.ChVehicleVisualSystem_GetChaseCamera(self)

    def GetSteering(self):
        r"""GetSteering(ChVehicleVisualSystem self) -> double"""
        return _vehicle.ChVehicleVisualSystem_GetSteering(self)

    def GetThrottle(self):
        r"""GetThrottle(ChVehicleVisualSystem self) -> double"""
        return _vehicle.ChVehicleVisualSystem_GetThrottle(self)

    def GetBraking(self):
        r"""GetBraking(ChVehicleVisualSystem self) -> double"""
        return _vehicle.ChVehicleVisualSystem_GetBraking(self)

    def GetClutch(self):
        r"""GetClutch(ChVehicleVisualSystem self) -> double"""
        return _vehicle.ChVehicleVisualSystem_GetClutch(self)

# Register ChVehicleVisualSystem in _vehicle:
_vehicle.ChVehicleVisualSystem_swigregister(ChVehicleVisualSystem)

class ChVehicleVisualSystemIrrlicht(ChVehicleVisualSystem, pychrono.irrlicht.ChVisualSystemIrrlicht):
    r"""Proxy of C++ chrono::vehicle::ChVehicleVisualSystemIrrlicht class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChVehicleVisualSystemIrrlicht self) -> ChVehicleVisualSystemIrrlicht"""
        _vehicle.ChVehicleVisualSystemIrrlicht_swiginit(self, _vehicle.new_ChVehicleVisualSystemIrrlicht())
    __swig_destroy__ = _vehicle.delete_ChVehicleVisualSystemIrrlicht

    def AttachVehicle(self, vehicle):
        r"""AttachVehicle(ChVehicleVisualSystemIrrlicht self, ChVehicle vehicle)"""
        return _vehicle.ChVehicleVisualSystemIrrlicht_AttachVehicle(self, vehicle)

    def SetHUDLocation(self, HUD_x, HUD_y):
        r"""SetHUDLocation(ChVehicleVisualSystemIrrlicht self, int HUD_x, int HUD_y)"""
        return _vehicle.ChVehicleVisualSystemIrrlicht_SetHUDLocation(self, HUD_x, HUD_y)

    def EnableStats(self, val):
        r"""EnableStats(ChVehicleVisualSystemIrrlicht self, bool val)"""
        return _vehicle.ChVehicleVisualSystemIrrlicht_EnableStats(self, val)

    def EnableSound(self, sound):
        r"""EnableSound(ChVehicleVisualSystemIrrlicht self, bool sound)"""
        return _vehicle.ChVehicleVisualSystemIrrlicht_EnableSound(self, sound)

    def Initialize(self):
        r"""Initialize(ChVehicleVisualSystemIrrlicht self)"""
        return _vehicle.ChVehicleVisualSystemIrrlicht_Initialize(self)

    def Render(self):
        r"""Render(ChVehicleVisualSystemIrrlicht self)"""
        return _vehicle.ChVehicleVisualSystemIrrlicht_Render(self)

    def Advance(self, step):
        r"""Advance(ChVehicleVisualSystemIrrlicht self, double step)"""
        return _vehicle.ChVehicleVisualSystemIrrlicht_Advance(self, step)

# Register ChVehicleVisualSystemIrrlicht in _vehicle:
_vehicle.ChVehicleVisualSystemIrrlicht_swigregister(ChVehicleVisualSystemIrrlicht)

class ChTrackedVehicleVisualSystemIrrlicht(ChVehicleVisualSystemIrrlicht):
    r"""Proxy of C++ chrono::vehicle::ChTrackedVehicleVisualSystemIrrlicht class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChTrackedVehicleVisualSystemIrrlicht self) -> ChTrackedVehicleVisualSystemIrrlicht"""
        _vehicle.ChTrackedVehicleVisualSystemIrrlicht_swiginit(self, _vehicle.new_ChTrackedVehicleVisualSystemIrrlicht())
    __swig_destroy__ = _vehicle.delete_ChTrackedVehicleVisualSystemIrrlicht

    def AttachVehicle(self, vehicle):
        r"""AttachVehicle(ChTrackedVehicleVisualSystemIrrlicht self, ChVehicle vehicle)"""
        return _vehicle.ChTrackedVehicleVisualSystemIrrlicht_AttachVehicle(self, vehicle)

    def RenderTrackShoeFrames(self, side, state, axis_length=1):
        r"""RenderTrackShoeFrames(ChTrackedVehicleVisualSystemIrrlicht self, VehicleSide side, bool state, double axis_length=1)"""
        return _vehicle.ChTrackedVehicleVisualSystemIrrlicht_RenderTrackShoeFrames(self, side, state, axis_length)

    def RenderSprocketFrame(self, side, state, axis_length=1):
        r"""RenderSprocketFrame(ChTrackedVehicleVisualSystemIrrlicht self, VehicleSide side, bool state, double axis_length=1)"""
        return _vehicle.ChTrackedVehicleVisualSystemIrrlicht_RenderSprocketFrame(self, side, state, axis_length)

    def RenderIdlerFrame(self, side, state, axis_length=1):
        r"""RenderIdlerFrame(ChTrackedVehicleVisualSystemIrrlicht self, VehicleSide side, bool state, double axis_length=1)"""
        return _vehicle.ChTrackedVehicleVisualSystemIrrlicht_RenderIdlerFrame(self, side, state, axis_length)

# Register ChTrackedVehicleVisualSystemIrrlicht in _vehicle:
_vehicle.ChTrackedVehicleVisualSystemIrrlicht_swigregister(ChTrackedVehicleVisualSystemIrrlicht)

class ChWheeledVehicleVisualSystemIrrlicht(ChVehicleVisualSystemIrrlicht):
    r"""Proxy of C++ chrono::vehicle::ChWheeledVehicleVisualSystemIrrlicht class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChWheeledVehicleVisualSystemIrrlicht self) -> ChWheeledVehicleVisualSystemIrrlicht"""
        _vehicle.ChWheeledVehicleVisualSystemIrrlicht_swiginit(self, _vehicle.new_ChWheeledVehicleVisualSystemIrrlicht())
    __swig_destroy__ = _vehicle.delete_ChWheeledVehicleVisualSystemIrrlicht

    def AttachVehicle(self, vehicle):
        r"""AttachVehicle(ChWheeledVehicleVisualSystemIrrlicht self, ChVehicle vehicle)"""
        return _vehicle.ChWheeledVehicleVisualSystemIrrlicht_AttachVehicle(self, vehicle)

# Register ChWheeledVehicleVisualSystemIrrlicht in _vehicle:
_vehicle.ChWheeledVehicleVisualSystemIrrlicht_swigregister(ChWheeledVehicleVisualSystemIrrlicht)


def CastToChTrackedVehicleVisualSystemIrrlicht(in_obj):
    r"""CastToChTrackedVehicleVisualSystemIrrlicht(std::shared_ptr< chrono::vehicle::ChVehicleVisualSystem > in_obj) -> std::shared_ptr< chrono::vehicle::ChTrackedVehicleVisualSystemIrrlicht >"""
    return _vehicle.CastToChTrackedVehicleVisualSystemIrrlicht(in_obj)

def CastToChWheeledVehicleVisualSystemIrrlicht(in_obj):
    r"""CastToChWheeledVehicleVisualSystemIrrlicht(std::shared_ptr< chrono::vehicle::ChVehicleVisualSystem > in_obj) -> std::shared_ptr< chrono::vehicle::ChWheeledVehicleVisualSystemIrrlicht >"""
    return _vehicle.CastToChWheeledVehicleVisualSystemIrrlicht(in_obj)
LEFT = _vehicle.LEFT

RIGHT = _vehicle.RIGHT

SINGLE = _vehicle.SINGLE

INNER = _vehicle.INNER

OUTER = _vehicle.OUTER

class BodyState(object):
    r"""Proxy of C++ chrono::vehicle::BodyState class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pos = property(_vehicle.BodyState_pos_get, _vehicle.BodyState_pos_set, doc=r"""pos : chrono::ChVector<()>""")
    rot = property(_vehicle.BodyState_rot_get, _vehicle.BodyState_rot_set, doc=r"""rot : chrono::ChQuaternion<()>""")
    lin_vel = property(_vehicle.BodyState_lin_vel_get, _vehicle.BodyState_lin_vel_set, doc=r"""lin_vel : chrono::ChVector<()>""")
    ang_vel = property(_vehicle.BodyState_ang_vel_get, _vehicle.BodyState_ang_vel_set, doc=r"""ang_vel : chrono::ChVector<()>""")

    def __init__(self):
        r"""__init__(BodyState self) -> BodyState"""
        _vehicle.BodyState_swiginit(self, _vehicle.new_BodyState())
    __swig_destroy__ = _vehicle.delete_BodyState

# Register BodyState in _vehicle:
_vehicle.BodyState_swigregister(BodyState)

class WheelState(object):
    r"""Proxy of C++ chrono::vehicle::WheelState class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pos = property(_vehicle.WheelState_pos_get, _vehicle.WheelState_pos_set, doc=r"""pos : chrono::ChVector<()>""")
    rot = property(_vehicle.WheelState_rot_get, _vehicle.WheelState_rot_set, doc=r"""rot : chrono::ChQuaternion<()>""")
    lin_vel = property(_vehicle.WheelState_lin_vel_get, _vehicle.WheelState_lin_vel_set, doc=r"""lin_vel : chrono::ChVector<()>""")
    ang_vel = property(_vehicle.WheelState_ang_vel_get, _vehicle.WheelState_ang_vel_set, doc=r"""ang_vel : chrono::ChVector<()>""")
    omega = property(_vehicle.WheelState_omega_get, _vehicle.WheelState_omega_set, doc=r"""omega : double""")

    def __init__(self):
        r"""__init__(WheelState self) -> WheelState"""
        _vehicle.WheelState_swiginit(self, _vehicle.new_WheelState())
    __swig_destroy__ = _vehicle.delete_WheelState

# Register WheelState in _vehicle:
_vehicle.WheelState_swigregister(WheelState)

class TerrainForce(object):
    r"""Proxy of C++ chrono::vehicle::TerrainForce class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(TerrainForce self) -> TerrainForce"""
        _vehicle.TerrainForce_swiginit(self, _vehicle.new_TerrainForce())
    force = property(_vehicle.TerrainForce_force_get, _vehicle.TerrainForce_force_set, doc=r"""force : chrono::ChVector<()>""")
    point = property(_vehicle.TerrainForce_point_get, _vehicle.TerrainForce_point_set, doc=r"""point : chrono::ChVector<()>""")
    moment = property(_vehicle.TerrainForce_moment_get, _vehicle.TerrainForce_moment_set, doc=r"""moment : chrono::ChVector<()>""")
    __swig_destroy__ = _vehicle.delete_TerrainForce

# Register TerrainForce in _vehicle:
_vehicle.TerrainForce_swigregister(TerrainForce)

class DriverInputs(object):
    r"""Proxy of C++ chrono::vehicle::DriverInputs class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_steering = property(_vehicle.DriverInputs_m_steering_get, _vehicle.DriverInputs_m_steering_set, doc=r"""m_steering : double""")
    m_throttle = property(_vehicle.DriverInputs_m_throttle_get, _vehicle.DriverInputs_m_throttle_set, doc=r"""m_throttle : double""")
    m_braking = property(_vehicle.DriverInputs_m_braking_get, _vehicle.DriverInputs_m_braking_set, doc=r"""m_braking : double""")
    m_clutch = property(_vehicle.DriverInputs_m_clutch_get, _vehicle.DriverInputs_m_clutch_set, doc=r"""m_clutch : double""")

    def __init__(self):
        r"""__init__(DriverInputs self) -> DriverInputs"""
        _vehicle.DriverInputs_swiginit(self, _vehicle.new_DriverInputs())
    __swig_destroy__ = _vehicle.delete_DriverInputs

# Register DriverInputs in _vehicle:
_vehicle.DriverInputs_swigregister(DriverInputs)

class SpringForce(pychrono.core.ForceFunctor):
    r"""Proxy of C++ chrono::vehicle::SpringForce class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def enable_stops(self, min_length, max_length):
        r"""enable_stops(SpringForce self, double min_length, double max_length)"""
        return _vehicle.SpringForce_enable_stops(self, min_length, max_length)

    def set_stops(self, *args):
        r"""
        set_stops(SpringForce self, std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > const & data_bump, std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > const & data_rebound)
        set_stops(SpringForce self, double bump_coefficient, double rebound_coefficient)
        """
        return _vehicle.SpringForce_set_stops(self, *args)

    def evaluate_stops(self, length):
        r"""evaluate_stops(SpringForce self, double length) -> double"""
        return _vehicle.SpringForce_evaluate_stops(self, length)
    __swig_destroy__ = _vehicle.delete_SpringForce

# Register SpringForce in _vehicle:
_vehicle.SpringForce_swigregister(SpringForce)

class LinearSpringForce(SpringForce):
    r"""Proxy of C++ chrono::vehicle::LinearSpringForce class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, k, preload=0):
        r"""__init__(LinearSpringForce self, double k, double preload=0) -> LinearSpringForce"""
        _vehicle.LinearSpringForce_swiginit(self, _vehicle.new_LinearSpringForce(k, preload))

    def evaluate(self, time, rest_length, length, vel, link):
        r"""evaluate(LinearSpringForce self, double time, double rest_length, double length, double vel, ChLinkTSDA link) -> double"""
        return _vehicle.LinearSpringForce_evaluate(self, time, rest_length, length, vel, link)
    __swig_destroy__ = _vehicle.delete_LinearSpringForce

# Register LinearSpringForce in _vehicle:
_vehicle.LinearSpringForce_swigregister(LinearSpringForce)

class NonlinearSpringForce(SpringForce):
    r"""Proxy of C++ chrono::vehicle::NonlinearSpringForce class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(NonlinearSpringForce self, double preload=0) -> NonlinearSpringForce
        __init__(NonlinearSpringForce self, std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > const & dataK, double preload=0) -> NonlinearSpringForce
        """
        _vehicle.NonlinearSpringForce_swiginit(self, _vehicle.new_NonlinearSpringForce(*args))

    def add_pointK(self, x, y):
        r"""add_pointK(NonlinearSpringForce self, double x, double y)"""
        return _vehicle.NonlinearSpringForce_add_pointK(self, x, y)

    def evaluate(self, time, rest_length, length, vel, link):
        r"""evaluate(NonlinearSpringForce self, double time, double rest_length, double length, double vel, ChLinkTSDA link) -> double"""
        return _vehicle.NonlinearSpringForce_evaluate(self, time, rest_length, length, vel, link)
    __swig_destroy__ = _vehicle.delete_NonlinearSpringForce

# Register NonlinearSpringForce in _vehicle:
_vehicle.NonlinearSpringForce_swigregister(NonlinearSpringForce)

class LinearDamperForce(pychrono.core.ForceFunctor):
    r"""Proxy of C++ chrono::vehicle::LinearDamperForce class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, c, preload=0):
        r"""__init__(LinearDamperForce self, double c, double preload=0) -> LinearDamperForce"""
        _vehicle.LinearDamperForce_swiginit(self, _vehicle.new_LinearDamperForce(c, preload))

    def evaluate(self, time, rest_length, length, vel, link):
        r"""evaluate(LinearDamperForce self, double time, double rest_length, double length, double vel, ChLinkTSDA link) -> double"""
        return _vehicle.LinearDamperForce_evaluate(self, time, rest_length, length, vel, link)
    __swig_destroy__ = _vehicle.delete_LinearDamperForce

# Register LinearDamperForce in _vehicle:
_vehicle.LinearDamperForce_swigregister(LinearDamperForce)

class NonlinearDamperForce(pychrono.core.ForceFunctor):
    r"""Proxy of C++ chrono::vehicle::NonlinearDamperForce class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(NonlinearDamperForce self) -> NonlinearDamperForce
        __init__(NonlinearDamperForce self, std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > const & dataC) -> NonlinearDamperForce
        """
        _vehicle.NonlinearDamperForce_swiginit(self, _vehicle.new_NonlinearDamperForce(*args))

    def add_pointC(self, x, y):
        r"""add_pointC(NonlinearDamperForce self, double x, double y)"""
        return _vehicle.NonlinearDamperForce_add_pointC(self, x, y)

    def evaluate(self, time, rest_length, length, vel, link):
        r"""evaluate(NonlinearDamperForce self, double time, double rest_length, double length, double vel, ChLinkTSDA link) -> double"""
        return _vehicle.NonlinearDamperForce_evaluate(self, time, rest_length, length, vel, link)
    __swig_destroy__ = _vehicle.delete_NonlinearDamperForce

# Register NonlinearDamperForce in _vehicle:
_vehicle.NonlinearDamperForce_swigregister(NonlinearDamperForce)

class DegressiveDamperForce(pychrono.core.ForceFunctor):
    r"""Proxy of C++ chrono::vehicle::DegressiveDamperForce class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DegressiveDamperForce self, double c_compression) -> DegressiveDamperForce
        __init__(DegressiveDamperForce self, double c_compression, double c_expansion) -> DegressiveDamperForce
        __init__(DegressiveDamperForce self, double c_compression, double degr_compression, double degr_expansion) -> DegressiveDamperForce
        __init__(DegressiveDamperForce self, double c_compression, double degr_compression, double c_expansion, double degr_expansion) -> DegressiveDamperForce
        """
        _vehicle.DegressiveDamperForce_swiginit(self, _vehicle.new_DegressiveDamperForce(*args))

    def evaluate(self, time, rest_length, length, vel, link):
        r"""evaluate(DegressiveDamperForce self, double time, double rest_length, double length, double vel, ChLinkTSDA link) -> double"""
        return _vehicle.DegressiveDamperForce_evaluate(self, time, rest_length, length, vel, link)
    __swig_destroy__ = _vehicle.delete_DegressiveDamperForce

# Register DegressiveDamperForce in _vehicle:
_vehicle.DegressiveDamperForce_swigregister(DegressiveDamperForce)

class LinearSpringDamperForce(SpringForce):
    r"""Proxy of C++ chrono::vehicle::LinearSpringDamperForce class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, k, c, preload=0):
        r"""__init__(LinearSpringDamperForce self, double k, double c, double preload=0) -> LinearSpringDamperForce"""
        _vehicle.LinearSpringDamperForce_swiginit(self, _vehicle.new_LinearSpringDamperForce(k, c, preload))

    def evaluate(self, time, rest_length, length, vel, link):
        r"""evaluate(LinearSpringDamperForce self, double time, double rest_length, double length, double vel, ChLinkTSDA link) -> double"""
        return _vehicle.LinearSpringDamperForce_evaluate(self, time, rest_length, length, vel, link)
    __swig_destroy__ = _vehicle.delete_LinearSpringDamperForce

# Register LinearSpringDamperForce in _vehicle:
_vehicle.LinearSpringDamperForce_swigregister(LinearSpringDamperForce)

class NonlinearSpringDamperForce(SpringForce):
    r"""Proxy of C++ chrono::vehicle::NonlinearSpringDamperForce class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(NonlinearSpringDamperForce self, double preload=0) -> NonlinearSpringDamperForce
        __init__(NonlinearSpringDamperForce self, std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > const & dataK, std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > const & dataC, double preload=0) -> NonlinearSpringDamperForce
        """
        _vehicle.NonlinearSpringDamperForce_swiginit(self, _vehicle.new_NonlinearSpringDamperForce(*args))

    def add_pointK(self, x, y):
        r"""add_pointK(NonlinearSpringDamperForce self, double x, double y)"""
        return _vehicle.NonlinearSpringDamperForce_add_pointK(self, x, y)

    def add_pointC(self, x, y):
        r"""add_pointC(NonlinearSpringDamperForce self, double x, double y)"""
        return _vehicle.NonlinearSpringDamperForce_add_pointC(self, x, y)

    def evaluate(self, time, rest_length, length, vel, link):
        r"""evaluate(NonlinearSpringDamperForce self, double time, double rest_length, double length, double vel, ChLinkTSDA link) -> double"""
        return _vehicle.NonlinearSpringDamperForce_evaluate(self, time, rest_length, length, vel, link)
    __swig_destroy__ = _vehicle.delete_NonlinearSpringDamperForce

# Register NonlinearSpringDamperForce in _vehicle:
_vehicle.NonlinearSpringDamperForce_swigregister(NonlinearSpringDamperForce)

class MapSpringDamperForce(SpringForce):
    r"""Proxy of C++ chrono::vehicle::MapSpringDamperForce class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MapSpringDamperForce self, double preload=0) -> MapSpringDamperForce
        __init__(MapSpringDamperForce self, vector_double defs, vector_double vels, chrono::ChMatrixConstRef data, double preload=0) -> MapSpringDamperForce
        """
        _vehicle.MapSpringDamperForce_swiginit(self, _vehicle.new_MapSpringDamperForce(*args))

    def set_deformations(self, defs):
        r"""set_deformations(MapSpringDamperForce self, vector_double defs)"""
        return _vehicle.MapSpringDamperForce_set_deformations(self, defs)

    def add_pointC(self, x, y):
        r"""add_pointC(MapSpringDamperForce self, double x, vector_double y)"""
        return _vehicle.MapSpringDamperForce_add_pointC(self, x, y)

    def evaluate(self, time, rest_length, length, vel, link):
        r"""evaluate(MapSpringDamperForce self, double time, double rest_length, double length, double vel, ChLinkTSDA link) -> double"""
        return _vehicle.MapSpringDamperForce_evaluate(self, time, rest_length, length, vel, link)

    def print_data(self):
        r"""print_data(MapSpringDamperForce self)"""
        return _vehicle.MapSpringDamperForce_print_data(self)
    __swig_destroy__ = _vehicle.delete_MapSpringDamperForce

# Register MapSpringDamperForce in _vehicle:
_vehicle.MapSpringDamperForce_swigregister(MapSpringDamperForce)

class LinearSpringTorque(pychrono.core.TorqueFunctor):
    r"""Proxy of C++ chrono::vehicle::LinearSpringTorque class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, k, preload=0):
        r"""__init__(LinearSpringTorque self, double k, double preload=0) -> LinearSpringTorque"""
        _vehicle.LinearSpringTorque_swiginit(self, _vehicle.new_LinearSpringTorque(k, preload))

    def evaluate(self, time, rest_angle, angle, vel, link):
        r"""evaluate(LinearSpringTorque self, double time, double rest_angle, double angle, double vel, ChLinkRSDA link) -> double"""
        return _vehicle.LinearSpringTorque_evaluate(self, time, rest_angle, angle, vel, link)
    __swig_destroy__ = _vehicle.delete_LinearSpringTorque

# Register LinearSpringTorque in _vehicle:
_vehicle.LinearSpringTorque_swigregister(LinearSpringTorque)

class NonlinearSpringTorque(pychrono.core.TorqueFunctor):
    r"""Proxy of C++ chrono::vehicle::NonlinearSpringTorque class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(NonlinearSpringTorque self, double preload=0) -> NonlinearSpringTorque
        __init__(NonlinearSpringTorque self, std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > const & dataK, double preload=0) -> NonlinearSpringTorque
        """
        _vehicle.NonlinearSpringTorque_swiginit(self, _vehicle.new_NonlinearSpringTorque(*args))

    def add_pointK(self, x, y):
        r"""add_pointK(NonlinearSpringTorque self, double x, double y)"""
        return _vehicle.NonlinearSpringTorque_add_pointK(self, x, y)

    def evaluate(self, time, rest_angle, angle, vel, link):
        r"""evaluate(NonlinearSpringTorque self, double time, double rest_angle, double angle, double vel, ChLinkRSDA link) -> double"""
        return _vehicle.NonlinearSpringTorque_evaluate(self, time, rest_angle, angle, vel, link)
    __swig_destroy__ = _vehicle.delete_NonlinearSpringTorque

# Register NonlinearSpringTorque in _vehicle:
_vehicle.NonlinearSpringTorque_swigregister(NonlinearSpringTorque)

class LinearDamperTorque(pychrono.core.TorqueFunctor):
    r"""Proxy of C++ chrono::vehicle::LinearDamperTorque class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, c):
        r"""__init__(LinearDamperTorque self, double c) -> LinearDamperTorque"""
        _vehicle.LinearDamperTorque_swiginit(self, _vehicle.new_LinearDamperTorque(c))

    def evaluate(self, time, rest_angle, angle, vel, link):
        r"""evaluate(LinearDamperTorque self, double time, double rest_angle, double angle, double vel, ChLinkRSDA link) -> double"""
        return _vehicle.LinearDamperTorque_evaluate(self, time, rest_angle, angle, vel, link)
    __swig_destroy__ = _vehicle.delete_LinearDamperTorque

# Register LinearDamperTorque in _vehicle:
_vehicle.LinearDamperTorque_swigregister(LinearDamperTorque)

class NonlinearDamperTorque(pychrono.core.TorqueFunctor):
    r"""Proxy of C++ chrono::vehicle::NonlinearDamperTorque class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(NonlinearDamperTorque self) -> NonlinearDamperTorque
        __init__(NonlinearDamperTorque self, std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > const & dataC) -> NonlinearDamperTorque
        """
        _vehicle.NonlinearDamperTorque_swiginit(self, _vehicle.new_NonlinearDamperTorque(*args))

    def add_pointC(self, x, y):
        r"""add_pointC(NonlinearDamperTorque self, double x, double y)"""
        return _vehicle.NonlinearDamperTorque_add_pointC(self, x, y)

    def evaluate(self, time, rest_angle, angle, vel, link):
        r"""evaluate(NonlinearDamperTorque self, double time, double rest_angle, double angle, double vel, ChLinkRSDA link) -> double"""
        return _vehicle.NonlinearDamperTorque_evaluate(self, time, rest_angle, angle, vel, link)
    __swig_destroy__ = _vehicle.delete_NonlinearDamperTorque

# Register NonlinearDamperTorque in _vehicle:
_vehicle.NonlinearDamperTorque_swigregister(NonlinearDamperTorque)

class LinearSpringDamperTorque(pychrono.core.TorqueFunctor):
    r"""Proxy of C++ chrono::vehicle::LinearSpringDamperTorque class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, k, c, preload=0):
        r"""__init__(LinearSpringDamperTorque self, double k, double c, double preload=0) -> LinearSpringDamperTorque"""
        _vehicle.LinearSpringDamperTorque_swiginit(self, _vehicle.new_LinearSpringDamperTorque(k, c, preload))

    def evaluate(self, time, rest_angle, angle, vel, link):
        r"""evaluate(LinearSpringDamperTorque self, double time, double rest_angle, double angle, double vel, ChLinkRSDA link) -> double"""
        return _vehicle.LinearSpringDamperTorque_evaluate(self, time, rest_angle, angle, vel, link)
    __swig_destroy__ = _vehicle.delete_LinearSpringDamperTorque

# Register LinearSpringDamperTorque in _vehicle:
_vehicle.LinearSpringDamperTorque_swigregister(LinearSpringDamperTorque)

class NonlinearSpringDamperTorque(pychrono.core.TorqueFunctor):
    r"""Proxy of C++ chrono::vehicle::NonlinearSpringDamperTorque class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(NonlinearSpringDamperTorque self, double preload=0) -> NonlinearSpringDamperTorque
        __init__(NonlinearSpringDamperTorque self, std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > const & dataK, std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > const & dataC, double preload=0) -> NonlinearSpringDamperTorque
        """
        _vehicle.NonlinearSpringDamperTorque_swiginit(self, _vehicle.new_NonlinearSpringDamperTorque(*args))

    def add_pointK(self, x, y):
        r"""add_pointK(NonlinearSpringDamperTorque self, double x, double y)"""
        return _vehicle.NonlinearSpringDamperTorque_add_pointK(self, x, y)

    def add_pointC(self, x, y):
        r"""add_pointC(NonlinearSpringDamperTorque self, double x, double y)"""
        return _vehicle.NonlinearSpringDamperTorque_add_pointC(self, x, y)

    def evaluate(self, time, rest_angle, angle, vel, link):
        r"""evaluate(NonlinearSpringDamperTorque self, double time, double rest_angle, double angle, double vel, ChLinkRSDA link) -> double"""
        return _vehicle.NonlinearSpringDamperTorque_evaluate(self, time, rest_angle, angle, vel, link)
    __swig_destroy__ = _vehicle.delete_NonlinearSpringDamperTorque

# Register NonlinearSpringDamperTorque in _vehicle:
_vehicle.NonlinearSpringDamperTorque_swigregister(NonlinearSpringDamperTorque)

VisualizationType_NONE = _vehicle.VisualizationType_NONE

VisualizationType_PRIMITIVES = _vehicle.VisualizationType_PRIMITIVES

VisualizationType_MESH = _vehicle.VisualizationType_MESH

TireModelType_RIGID = _vehicle.TireModelType_RIGID

TireModelType_RIGID_MESH = _vehicle.TireModelType_RIGID_MESH

TireModelType_FIALA = _vehicle.TireModelType_FIALA

TireModelType_ANCF = _vehicle.TireModelType_ANCF

TireModelType_REISSNER = _vehicle.TireModelType_REISSNER

TireModelType_FEA = _vehicle.TireModelType_FEA

TireModelType_PAC89 = _vehicle.TireModelType_PAC89

TireModelType_TMEASY = _vehicle.TireModelType_TMEASY

TireModelType_PAC02 = _vehicle.TireModelType_PAC02

TireModelType_TMSIMPLE = _vehicle.TireModelType_TMSIMPLE

EngineModelType_SHAFTS = _vehicle.EngineModelType_SHAFTS

EngineModelType_SIMPLE_MAP = _vehicle.EngineModelType_SIMPLE_MAP

EngineModelType_SIMPLE = _vehicle.EngineModelType_SIMPLE

TransmissionModelType_SHAFTS = _vehicle.TransmissionModelType_SHAFTS

TransmissionModelType_SIMPLE_MAP = _vehicle.TransmissionModelType_SIMPLE_MAP

SuspensionTypeWV_DOUBLE_WISHBONE = _vehicle.SuspensionTypeWV_DOUBLE_WISHBONE

SuspensionTypeWV_DOUBLE_WISHBONE_REDUCED = _vehicle.SuspensionTypeWV_DOUBLE_WISHBONE_REDUCED

SuspensionTypeWV_HENDRICKSON_PRIMAXX = _vehicle.SuspensionTypeWV_HENDRICKSON_PRIMAXX

SuspensionTypeWV_LEAF_SPRING_AXLE = _vehicle.SuspensionTypeWV_LEAF_SPRING_AXLE

SuspensionTypeWV_SAE_LEAF_SPRING_AXLE = _vehicle.SuspensionTypeWV_SAE_LEAF_SPRING_AXLE

SuspensionTypeWV_MACPHERSON_STRUT = _vehicle.SuspensionTypeWV_MACPHERSON_STRUT

SuspensionTypeWV_MULTI_LINK = _vehicle.SuspensionTypeWV_MULTI_LINK

SuspensionTypeWV_RIGID_PINNED = _vehicle.SuspensionTypeWV_RIGID_PINNED

SuspensionTypeWV_RIGID_SUSPENSION = _vehicle.SuspensionTypeWV_RIGID_SUSPENSION

SuspensionTypeWV_SEMI_TRAILING_ARM = _vehicle.SuspensionTypeWV_SEMI_TRAILING_ARM

SuspensionTypeWV_SOLID_AXLE = _vehicle.SuspensionTypeWV_SOLID_AXLE

SuspensionTypeWV_SOLID_THREE_LINK_AXLE = _vehicle.SuspensionTypeWV_SOLID_THREE_LINK_AXLE

SuspensionTypeWV_SOLID_BELLCRANK_THREE_LINK_AXLE = _vehicle.SuspensionTypeWV_SOLID_BELLCRANK_THREE_LINK_AXLE

SuspensionTypeWV_THREE_LINK_IRS = _vehicle.SuspensionTypeWV_THREE_LINK_IRS

SuspensionTypeWV_TOE_BAR_LEAF_SPRING_AXLE = _vehicle.SuspensionTypeWV_TOE_BAR_LEAF_SPRING_AXLE

SuspensionTypeWV_SAE_TOE_BAR_LEAF_SPRING_AXLE = _vehicle.SuspensionTypeWV_SAE_TOE_BAR_LEAF_SPRING_AXLE

SuspensionTypeWV_PUSHPIPE_AXLE = _vehicle.SuspensionTypeWV_PUSHPIPE_AXLE

SuspensionTypeWV_TOEBAR_PUSHPIPE_AXLE = _vehicle.SuspensionTypeWV_TOEBAR_PUSHPIPE_AXLE

BrakeType_SHAFTS = _vehicle.BrakeType_SHAFTS

BrakeType_SIMPLE = _vehicle.BrakeType_SIMPLE

SteeringTypeWV_PITMAN_ARM = _vehicle.SteeringTypeWV_PITMAN_ARM

SteeringTypeWV_PITMAN_ARM_SHAFTS = _vehicle.SteeringTypeWV_PITMAN_ARM_SHAFTS

SteeringTypeWV_RACK_PINION = _vehicle.SteeringTypeWV_RACK_PINION

DrivelineTypeWV_FWD = _vehicle.DrivelineTypeWV_FWD

DrivelineTypeWV_RWD = _vehicle.DrivelineTypeWV_RWD

DrivelineTypeWV_AWD = _vehicle.DrivelineTypeWV_AWD

DrivelineTypeWV_AWD6 = _vehicle.DrivelineTypeWV_AWD6

DrivelineTypeWV_AWD8 = _vehicle.DrivelineTypeWV_AWD8

DrivelineTypeWV_SIMPLE = _vehicle.DrivelineTypeWV_SIMPLE

DrivelineTypeWV_SIMPLE_XWD = _vehicle.DrivelineTypeWV_SIMPLE_XWD

DrivelineTypeTV_BDS = _vehicle.DrivelineTypeTV_BDS

DrivelineTypeTV_SIMPLE = _vehicle.DrivelineTypeTV_SIMPLE

CHASSIS = _vehicle.CHASSIS

TIRE = _vehicle.TIRE

WHEEL = _vehicle.WHEEL

TrackShoeType_SINGLE_PIN = _vehicle.TrackShoeType_SINGLE_PIN

TrackShoeType_DOUBLE_PIN = _vehicle.TrackShoeType_DOUBLE_PIN

TrackShoeType_BAND_BUSHING = _vehicle.TrackShoeType_BAND_BUSHING

TrackShoeType_BAND_ANCF = _vehicle.TrackShoeType_BAND_ANCF

DoublePinTrackShoeType_TWO_CONNECTORS = _vehicle.DoublePinTrackShoeType_TWO_CONNECTORS

DoublePinTrackShoeType_ONE_CONNECTOR = _vehicle.DoublePinTrackShoeType_ONE_CONNECTOR

GuidePinType_CENTRAL_PIN = _vehicle.GuidePinType_CENTRAL_PIN

GuidePinType_LATERAL_PIN = _vehicle.GuidePinType_LATERAL_PIN

OUT_SPRINGS = _vehicle.OUT_SPRINGS

OUT_SHOCKS = _vehicle.OUT_SHOCKS

OUT_CONSTRAINTS = _vehicle.OUT_CONSTRAINTS

OUT_TESTRIG = _vehicle.OUT_TESTRIG

CHASSIS_BODY = _vehicle.CHASSIS_BODY

SPROCKET_BODY = _vehicle.SPROCKET_BODY

IDLER_BODY = _vehicle.IDLER_BODY

WHEEL_BODY = _vehicle.WHEEL_BODY

ROLER_BODY = _vehicle.ROLER_BODY

SHOE_BODY = _vehicle.SHOE_BODY

CollisionType_NONE = _vehicle.CollisionType_NONE

CollisionType_PRIMITIVES = _vehicle.CollisionType_PRIMITIVES

CollisionType_HULLS = _vehicle.CollisionType_HULLS

CollisionType_MESH = _vehicle.CollisionType_MESH

class ChVehicleOutput(object):
    r"""Proxy of C++ chrono::vehicle::ChVehicleOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ASCII = _vehicle.ChVehicleOutput_ASCII
    
    JSON = _vehicle.ChVehicleOutput_JSON
    
    HDF5 = _vehicle.ChVehicleOutput_HDF5
    
    __swig_destroy__ = _vehicle.delete_ChVehicleOutput

    def WriteTime(self, frame, time):
        r"""WriteTime(ChVehicleOutput self, int frame, double time)"""
        return _vehicle.ChVehicleOutput_WriteTime(self, frame, time)

    def WriteSection(self, name):
        r"""WriteSection(ChVehicleOutput self, std::string const & name)"""
        return _vehicle.ChVehicleOutput_WriteSection(self, name)

    def WriteBodies(self, bodies):
        r"""WriteBodies(ChVehicleOutput self, vector_ChBody bodies)"""
        return _vehicle.ChVehicleOutput_WriteBodies(self, bodies)

    def WriteAuxRefBodies(self, bodies):
        r"""WriteAuxRefBodies(ChVehicleOutput self, std::vector< std::shared_ptr< chrono::ChBodyAuxRef >,std::allocator< std::shared_ptr< chrono::ChBodyAuxRef > > > const & bodies)"""
        return _vehicle.ChVehicleOutput_WriteAuxRefBodies(self, bodies)

    def WriteMarkers(self, markers):
        r"""WriteMarkers(ChVehicleOutput self, ChMarkerList markers)"""
        return _vehicle.ChVehicleOutput_WriteMarkers(self, markers)

    def WriteShafts(self, shafts):
        r"""WriteShafts(ChVehicleOutput self, std::vector< std::shared_ptr< chrono::ChShaft >,std::allocator< std::shared_ptr< chrono::ChShaft > > > const & shafts)"""
        return _vehicle.ChVehicleOutput_WriteShafts(self, shafts)

    def WriteJoints(self, joints):
        r"""WriteJoints(ChVehicleOutput self, vector_ChLink joints)"""
        return _vehicle.ChVehicleOutput_WriteJoints(self, joints)

    def WriteCouples(self, couples):
        r"""WriteCouples(ChVehicleOutput self, std::vector< std::shared_ptr< chrono::ChShaftsCouple >,std::allocator< std::shared_ptr< chrono::ChShaftsCouple > > > const & couples)"""
        return _vehicle.ChVehicleOutput_WriteCouples(self, couples)

    def WriteLinSprings(self, springs):
        r"""WriteLinSprings(ChVehicleOutput self, std::vector< std::shared_ptr< chrono::ChLinkTSDA >,std::allocator< std::shared_ptr< chrono::ChLinkTSDA > > > const & springs)"""
        return _vehicle.ChVehicleOutput_WriteLinSprings(self, springs)

    def WriteRotSprings(self, springs):
        r"""WriteRotSprings(ChVehicleOutput self, std::vector< std::shared_ptr< chrono::ChLinkRSDA >,std::allocator< std::shared_ptr< chrono::ChLinkRSDA > > > const & springs)"""
        return _vehicle.ChVehicleOutput_WriteRotSprings(self, springs)

    def WriteBodyLoads(self, loads):
        r"""WriteBodyLoads(ChVehicleOutput self, std::vector< std::shared_ptr< chrono::ChLoadBodyBody >,std::allocator< std::shared_ptr< chrono::ChLoadBodyBody > > > const & loads)"""
        return _vehicle.ChVehicleOutput_WriteBodyLoads(self, loads)

# Register ChVehicleOutput in _vehicle:
_vehicle.ChVehicleOutput_swigregister(ChVehicleOutput)


def SetDataPath(path):
    r"""SetDataPath(std::string const & path)"""
    return _vehicle.SetDataPath(path)

def GetDataPath():
    r"""GetDataPath() -> std::string const &"""
    return _vehicle.GetDataPath()

def GetDataFile(filename):
    r"""GetDataFile(std::string const & filename) -> std::string"""
    return _vehicle.GetDataFile(filename)
class ChPart(object):
    r"""Proxy of C++ chrono::vehicle::ChPart class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChPart

    def GetName(self):
        r"""GetName(ChPart self) -> std::string const &"""
        return _vehicle.ChPart_GetName(self)

    def SetName(self, name):
        r"""SetName(ChPart self, std::string const & name)"""
        return _vehicle.ChPart_SetName(self, name)

    def GetTemplateName(self):
        r"""GetTemplateName(ChPart self) -> std::string"""
        return _vehicle.ChPart_GetTemplateName(self)

    def IsInitialized(self):
        r"""IsInitialized(ChPart self) -> bool"""
        return _vehicle.ChPart_IsInitialized(self)

    def GetMass(self):
        r"""GetMass(ChPart self) -> double"""
        return _vehicle.ChPart_GetMass(self)

    def GetCOMFrame(self):
        r"""GetCOMFrame(ChPart self) -> chrono::ChFrame< > const &"""
        return _vehicle.ChPart_GetCOMFrame(self)

    def GetInertia(self):
        r"""GetInertia(ChPart self) -> ChMatrix33D"""
        return _vehicle.ChPart_GetInertia(self)

    def GetTransform(self):
        r"""GetTransform(ChPart self) -> chrono::ChFrame< > const &"""
        return _vehicle.ChPart_GetTransform(self)

    def SetVisualizationType(self, vis):
        r"""SetVisualizationType(ChPart self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChPart_SetVisualizationType(self, vis)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChPart self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChPart_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChPart self)"""
        return _vehicle.ChPart_RemoveVisualizationAssets(self)

    def SetOutput(self, state):
        r"""SetOutput(ChPart self, bool state)"""
        return _vehicle.ChPart_SetOutput(self, state)

    def OutputEnabled(self):
        r"""OutputEnabled(ChPart self) -> bool"""
        return _vehicle.ChPart_OutputEnabled(self)

    def ExportComponentList(self, jsonDocument):
        r"""ExportComponentList(ChPart self, rapidjson::Document & jsonDocument)"""
        return _vehicle.ChPart_ExportComponentList(self, jsonDocument)

    def Output(self, database):
        r"""Output(ChPart self, ChVehicleOutput database)"""
        return _vehicle.ChPart_Output(self, database)

    @staticmethod
    def TransformInertiaMatrix(moments, products, vehicle_rot, body_rot):
        r"""TransformInertiaMatrix(ChVectorD moments, ChVectorD products, ChMatrix33D vehicle_rot, ChMatrix33D body_rot) -> ChMatrix33D"""
        return _vehicle.ChPart_TransformInertiaMatrix(moments, products, vehicle_rot, body_rot)

# Register ChPart in _vehicle:
_vehicle.ChPart_swigregister(ChPart)

def ChPart_TransformInertiaMatrix(moments, products, vehicle_rot, body_rot):
    r"""ChPart_TransformInertiaMatrix(ChVectorD moments, ChVectorD products, ChMatrix33D vehicle_rot, ChMatrix33D body_rot) -> ChMatrix33D"""
    return _vehicle.ChPart_TransformInertiaMatrix(moments, products, vehicle_rot, body_rot)

class ChWorldFrame(object):
    r"""Proxy of C++ chrono::vehicle::ChWorldFrame class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Set(rot):
        r"""Set(ChMatrix33D rot)"""
        return _vehicle.ChWorldFrame_Set(rot)

    @staticmethod
    def SetYUP():
        r"""SetYUP()"""
        return _vehicle.ChWorldFrame_SetYUP()

    @staticmethod
    def IsISO():
        r"""IsISO() -> bool"""
        return _vehicle.ChWorldFrame_IsISO()

    @staticmethod
    def Rotation():
        r"""Rotation() -> ChMatrix33D"""
        return _vehicle.ChWorldFrame_Rotation()

    @staticmethod
    def Quaternion():
        r"""Quaternion() -> ChQuaternionD"""
        return _vehicle.ChWorldFrame_Quaternion()

    @staticmethod
    def Vertical():
        r"""Vertical() -> ChVectorD"""
        return _vehicle.ChWorldFrame_Vertical()

    @staticmethod
    def Forward():
        r"""Forward() -> ChVectorD"""
        return _vehicle.ChWorldFrame_Forward()

    @staticmethod
    def ToISO(v):
        r"""ToISO(ChVectorD v) -> ChVectorD"""
        return _vehicle.ChWorldFrame_ToISO(v)

    @staticmethod
    def FromISO(v):
        r"""FromISO(ChVectorD v) -> ChVectorD"""
        return _vehicle.ChWorldFrame_FromISO(v)

    @staticmethod
    def Height(v):
        r"""Height(ChVectorD v) -> double"""
        return _vehicle.ChWorldFrame_Height(v)

    @staticmethod
    def Project(v):
        r"""Project(ChVectorD v)"""
        return _vehicle.ChWorldFrame_Project(v)
    __swig_destroy__ = _vehicle.delete_ChWorldFrame

# Register ChWorldFrame in _vehicle:
_vehicle.ChWorldFrame_swigregister(ChWorldFrame)

def ChWorldFrame_Set(rot):
    r"""ChWorldFrame_Set(ChMatrix33D rot)"""
    return _vehicle.ChWorldFrame_Set(rot)

def ChWorldFrame_SetYUP():
    r"""ChWorldFrame_SetYUP()"""
    return _vehicle.ChWorldFrame_SetYUP()

def ChWorldFrame_IsISO():
    r"""ChWorldFrame_IsISO() -> bool"""
    return _vehicle.ChWorldFrame_IsISO()

def ChWorldFrame_Rotation():
    r"""ChWorldFrame_Rotation() -> ChMatrix33D"""
    return _vehicle.ChWorldFrame_Rotation()

def ChWorldFrame_Quaternion():
    r"""ChWorldFrame_Quaternion() -> ChQuaternionD"""
    return _vehicle.ChWorldFrame_Quaternion()

def ChWorldFrame_Vertical():
    r"""ChWorldFrame_Vertical() -> ChVectorD"""
    return _vehicle.ChWorldFrame_Vertical()

def ChWorldFrame_Forward():
    r"""ChWorldFrame_Forward() -> ChVectorD"""
    return _vehicle.ChWorldFrame_Forward()

def ChWorldFrame_ToISO(v):
    r"""ChWorldFrame_ToISO(ChVectorD v) -> ChVectorD"""
    return _vehicle.ChWorldFrame_ToISO(v)

def ChWorldFrame_FromISO(v):
    r"""ChWorldFrame_FromISO(ChVectorD v) -> ChVectorD"""
    return _vehicle.ChWorldFrame_FromISO(v)

def ChWorldFrame_Height(v):
    r"""ChWorldFrame_Height(ChVectorD v) -> double"""
    return _vehicle.ChWorldFrame_Height(v)

def ChWorldFrame_Project(v):
    r"""ChWorldFrame_Project(ChVectorD v)"""
    return _vehicle.ChWorldFrame_Project(v)

class ChPowertrainAssembly(object):
    r"""Proxy of C++ chrono::vehicle::ChPowertrainAssembly class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, engine, transmission):
        r"""__init__(ChPowertrainAssembly self, std::shared_ptr< ChEngine > engine, std::shared_ptr< ChTransmission > transmission) -> ChPowertrainAssembly"""
        _vehicle.ChPowertrainAssembly_swiginit(self, _vehicle.new_ChPowertrainAssembly(engine, transmission))
    __swig_destroy__ = _vehicle.delete_ChPowertrainAssembly

    def GetEngine(self):
        r"""GetEngine(ChPowertrainAssembly self) -> std::shared_ptr< ChEngine > const"""
        return _vehicle.ChPowertrainAssembly_GetEngine(self)

    def GetTransmission(self):
        r"""GetTransmission(ChPowertrainAssembly self) -> std::shared_ptr< ChTransmission > const"""
        return _vehicle.ChPowertrainAssembly_GetTransmission(self)

    def GetOutputTorque(self):
        r"""GetOutputTorque(ChPowertrainAssembly self) -> double"""
        return _vehicle.ChPowertrainAssembly_GetOutputTorque(self)

    def Initialize(self, chassis):
        r"""Initialize(ChPowertrainAssembly self, std::shared_ptr< chrono::vehicle::ChChassis > chassis)"""
        return _vehicle.ChPowertrainAssembly_Initialize(self, chassis)

    def Synchronize(self, time, driver_inputs, driveshaft_speed):
        r"""Synchronize(ChPowertrainAssembly self, double time, DriverInputs driver_inputs, double driveshaft_speed)"""
        return _vehicle.ChPowertrainAssembly_Synchronize(self, time, driver_inputs, driveshaft_speed)

    def Advance(self, step):
        r"""Advance(ChPowertrainAssembly self, double step)"""
        return _vehicle.ChPowertrainAssembly_Advance(self, step)

# Register ChPowertrainAssembly in _vehicle:
_vehicle.ChPowertrainAssembly_swigregister(ChPowertrainAssembly)

class ChEngineSimple(object):
    r"""Proxy of C++ chrono::vehicle::ChEngineSimple class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChEngineSimple

    def GetTemplateName(self):
        r"""GetTemplateName(ChEngineSimple self) -> std::string"""
        return _vehicle.ChEngineSimple_GetTemplateName(self)

    def GetMotorSpeed(self):
        r"""GetMotorSpeed(ChEngineSimple self) -> double"""
        return _vehicle.ChEngineSimple_GetMotorSpeed(self)

    def GetOutputMotorshaftTorque(self):
        r"""GetOutputMotorshaftTorque(ChEngineSimple self) -> double"""
        return _vehicle.ChEngineSimple_GetOutputMotorshaftTorque(self)

# Register ChEngineSimple in _vehicle:
_vehicle.ChEngineSimple_swigregister(ChEngineSimple)

class ChEngineSimpleMap(object):
    r"""Proxy of C++ chrono::vehicle::ChEngineSimpleMap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChEngineSimpleMap

    def GetTemplateName(self):
        r"""GetTemplateName(ChEngineSimpleMap self) -> std::string"""
        return _vehicle.ChEngineSimpleMap_GetTemplateName(self)

    def GetMotorSpeed(self):
        r"""GetMotorSpeed(ChEngineSimpleMap self) -> double"""
        return _vehicle.ChEngineSimpleMap_GetMotorSpeed(self)

    def GetOutputMotorshaftTorque(self):
        r"""GetOutputMotorshaftTorque(ChEngineSimpleMap self) -> double"""
        return _vehicle.ChEngineSimpleMap_GetOutputMotorshaftTorque(self)

# Register ChEngineSimpleMap in _vehicle:
_vehicle.ChEngineSimpleMap_swigregister(ChEngineSimpleMap)

class ChEngineShafts(object):
    r"""Proxy of C++ chrono::vehicle::ChEngineShafts class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChEngineShafts

    def GetTemplateName(self):
        r"""GetTemplateName(ChEngineShafts self) -> std::string"""
        return _vehicle.ChEngineShafts_GetTemplateName(self)

    def GetMotorSpeed(self):
        r"""GetMotorSpeed(ChEngineShafts self) -> double"""
        return _vehicle.ChEngineShafts_GetMotorSpeed(self)

    def GetOutputMotorshaftTorque(self):
        r"""GetOutputMotorshaftTorque(ChEngineShafts self) -> double"""
        return _vehicle.ChEngineShafts_GetOutputMotorshaftTorque(self)

# Register ChEngineShafts in _vehicle:
_vehicle.ChEngineShafts_swigregister(ChEngineShafts)

class EngineSimple(ChEngineSimple):
    r"""Proxy of C++ chrono::vehicle::EngineSimple class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(EngineSimple self, std::string const & filename) -> EngineSimple
        __init__(EngineSimple self, rapidjson::Document const & d) -> EngineSimple
        """
        _vehicle.EngineSimple_swiginit(self, _vehicle.new_EngineSimple(*args))
    __swig_destroy__ = _vehicle.delete_EngineSimple

    def GetMaxTorque(self):
        r"""GetMaxTorque(EngineSimple self) -> double"""
        return _vehicle.EngineSimple_GetMaxTorque(self)

    def GetMaxPower(self):
        r"""GetMaxPower(EngineSimple self) -> double"""
        return _vehicle.EngineSimple_GetMaxPower(self)

    def GetMaxSpeed(self):
        r"""GetMaxSpeed(EngineSimple self) -> double"""
        return _vehicle.EngineSimple_GetMaxSpeed(self)

# Register EngineSimple in _vehicle:
_vehicle.EngineSimple_swigregister(EngineSimple)

class EngineSimpleMap(ChEngineSimpleMap):
    r"""Proxy of C++ chrono::vehicle::EngineSimpleMap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(EngineSimpleMap self, std::string const & filename) -> EngineSimpleMap
        __init__(EngineSimpleMap self, rapidjson::Document const & d) -> EngineSimpleMap
        """
        _vehicle.EngineSimpleMap_swiginit(self, _vehicle.new_EngineSimpleMap(*args))
    __swig_destroy__ = _vehicle.delete_EngineSimpleMap

    def GetMaxEngineSpeed(self):
        r"""GetMaxEngineSpeed(EngineSimpleMap self) -> double"""
        return _vehicle.EngineSimpleMap_GetMaxEngineSpeed(self)

    def SetEngineTorqueMaps(self, map0, mapF):
        r"""SetEngineTorqueMaps(EngineSimpleMap self, ChFunction_Recorder & map0, ChFunction_Recorder & mapF)"""
        return _vehicle.EngineSimpleMap_SetEngineTorqueMaps(self, map0, mapF)

# Register EngineSimpleMap in _vehicle:
_vehicle.EngineSimpleMap_swigregister(EngineSimpleMap)

class EngineShafts(ChEngineShafts):
    r"""Proxy of C++ chrono::vehicle::EngineShafts class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(EngineShafts self, std::string const & filename) -> EngineShafts
        __init__(EngineShafts self, rapidjson::Document const & d) -> EngineShafts
        """
        _vehicle.EngineShafts_swiginit(self, _vehicle.new_EngineShafts(*args))
    __swig_destroy__ = _vehicle.delete_EngineShafts

    def GetMotorBlockInertia(self):
        r"""GetMotorBlockInertia(EngineShafts self) -> double"""
        return _vehicle.EngineShafts_GetMotorBlockInertia(self)

    def GetMotorshaftInertia(self):
        r"""GetMotorshaftInertia(EngineShafts self) -> double"""
        return _vehicle.EngineShafts_GetMotorshaftInertia(self)

    def SetEngineTorqueMap(self, map):
        r"""SetEngineTorqueMap(EngineShafts self, std::shared_ptr< ChFunction_Recorder > & map)"""
        return _vehicle.EngineShafts_SetEngineTorqueMap(self, map)

    def SetEngineLossesMap(self, map):
        r"""SetEngineLossesMap(EngineShafts self, std::shared_ptr< ChFunction_Recorder > & map)"""
        return _vehicle.EngineShafts_SetEngineLossesMap(self, map)

# Register EngineShafts in _vehicle:
_vehicle.EngineShafts_swigregister(EngineShafts)

class ChAutomaticTransmissionSimpleMap(object):
    r"""Proxy of C++ chrono::vehicle::ChAutomaticTransmissionSimpleMap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChAutomaticTransmissionSimpleMap

    def GetTemplateName(self):
        r"""GetTemplateName(ChAutomaticTransmissionSimpleMap self) -> std::string"""
        return _vehicle.ChAutomaticTransmissionSimpleMap_GetTemplateName(self)

    def HasTorqueConverter(self):
        r"""HasTorqueConverter(ChAutomaticTransmissionSimpleMap self) -> bool"""
        return _vehicle.ChAutomaticTransmissionSimpleMap_HasTorqueConverter(self)

    def GetTorqueConverterSlippage(self):
        r"""GetTorqueConverterSlippage(ChAutomaticTransmissionSimpleMap self) -> double"""
        return _vehicle.ChAutomaticTransmissionSimpleMap_GetTorqueConverterSlippage(self)

    def GetTorqueConverterInputTorque(self):
        r"""GetTorqueConverterInputTorque(ChAutomaticTransmissionSimpleMap self) -> double"""
        return _vehicle.ChAutomaticTransmissionSimpleMap_GetTorqueConverterInputTorque(self)

    def GetTorqueConverterOutputTorque(self):
        r"""GetTorqueConverterOutputTorque(ChAutomaticTransmissionSimpleMap self) -> double"""
        return _vehicle.ChAutomaticTransmissionSimpleMap_GetTorqueConverterOutputTorque(self)

    def GetTorqueConverterOutputSpeed(self):
        r"""GetTorqueConverterOutputSpeed(ChAutomaticTransmissionSimpleMap self) -> double"""
        return _vehicle.ChAutomaticTransmissionSimpleMap_GetTorqueConverterOutputSpeed(self)

    def GetOutputDriveshaftTorque(self):
        r"""GetOutputDriveshaftTorque(ChAutomaticTransmissionSimpleMap self) -> double"""
        return _vehicle.ChAutomaticTransmissionSimpleMap_GetOutputDriveshaftTorque(self)

    def GetOutputMotorshaftSpeed(self):
        r"""GetOutputMotorshaftSpeed(ChAutomaticTransmissionSimpleMap self) -> double"""
        return _vehicle.ChAutomaticTransmissionSimpleMap_GetOutputMotorshaftSpeed(self)

# Register ChAutomaticTransmissionSimpleMap in _vehicle:
_vehicle.ChAutomaticTransmissionSimpleMap_swigregister(ChAutomaticTransmissionSimpleMap)

class ChAutomaticTransmissionShafts(object):
    r"""Proxy of C++ chrono::vehicle::ChAutomaticTransmissionShafts class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChAutomaticTransmissionShafts

    def GetTemplateName(self):
        r"""GetTemplateName(ChAutomaticTransmissionShafts self) -> std::string"""
        return _vehicle.ChAutomaticTransmissionShafts_GetTemplateName(self)

    def HasTorqueConverter(self):
        r"""HasTorqueConverter(ChAutomaticTransmissionShafts self) -> bool"""
        return _vehicle.ChAutomaticTransmissionShafts_HasTorqueConverter(self)

    def GetTorqueConverterSlippage(self):
        r"""GetTorqueConverterSlippage(ChAutomaticTransmissionShafts self) -> double"""
        return _vehicle.ChAutomaticTransmissionShafts_GetTorqueConverterSlippage(self)

    def GetTorqueConverterInputTorque(self):
        r"""GetTorqueConverterInputTorque(ChAutomaticTransmissionShafts self) -> double"""
        return _vehicle.ChAutomaticTransmissionShafts_GetTorqueConverterInputTorque(self)

    def GetTorqueConverterOutputTorque(self):
        r"""GetTorqueConverterOutputTorque(ChAutomaticTransmissionShafts self) -> double"""
        return _vehicle.ChAutomaticTransmissionShafts_GetTorqueConverterOutputTorque(self)

    def GetTorqueConverterOutputSpeed(self):
        r"""GetTorqueConverterOutputSpeed(ChAutomaticTransmissionShafts self) -> double"""
        return _vehicle.ChAutomaticTransmissionShafts_GetTorqueConverterOutputSpeed(self)

    def SetGearShiftLatency(self, ml):
        r"""SetGearShiftLatency(ChAutomaticTransmissionShafts self, double ml)"""
        return _vehicle.ChAutomaticTransmissionShafts_SetGearShiftLatency(self, ml)

    def GetGearShiftLatency(self, ml):
        r"""GetGearShiftLatency(ChAutomaticTransmissionShafts self, double ml) -> double"""
        return _vehicle.ChAutomaticTransmissionShafts_GetGearShiftLatency(self, ml)

    def GetOutputDriveshaftTorque(self):
        r"""GetOutputDriveshaftTorque(ChAutomaticTransmissionShafts self) -> double"""
        return _vehicle.ChAutomaticTransmissionShafts_GetOutputDriveshaftTorque(self)

    def GetOutputMotorshaftSpeed(self):
        r"""GetOutputMotorshaftSpeed(ChAutomaticTransmissionShafts self) -> double"""
        return _vehicle.ChAutomaticTransmissionShafts_GetOutputMotorshaftSpeed(self)

# Register ChAutomaticTransmissionShafts in _vehicle:
_vehicle.ChAutomaticTransmissionShafts_swigregister(ChAutomaticTransmissionShafts)

class AutomaticTransmissionSimpleMap(ChAutomaticTransmissionSimpleMap):
    r"""Proxy of C++ chrono::vehicle::AutomaticTransmissionSimpleMap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(AutomaticTransmissionSimpleMap self, std::string const & filename) -> AutomaticTransmissionSimpleMap
        __init__(AutomaticTransmissionSimpleMap self, rapidjson::Document const & d) -> AutomaticTransmissionSimpleMap
        """
        _vehicle.AutomaticTransmissionSimpleMap_swiginit(self, _vehicle.new_AutomaticTransmissionSimpleMap(*args))
    __swig_destroy__ = _vehicle.delete_AutomaticTransmissionSimpleMap

    def SetGearRatios(self, fwd, rev):
        r"""SetGearRatios(AutomaticTransmissionSimpleMap self, vector_double fwd, double & rev)"""
        return _vehicle.AutomaticTransmissionSimpleMap_SetGearRatios(self, fwd, rev)

    def SetShiftPoints(self, shift_bands):
        r"""SetShiftPoints(AutomaticTransmissionSimpleMap self, std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > & shift_bands)"""
        return _vehicle.AutomaticTransmissionSimpleMap_SetShiftPoints(self, shift_bands)

# Register AutomaticTransmissionSimpleMap in _vehicle:
_vehicle.AutomaticTransmissionSimpleMap_swigregister(AutomaticTransmissionSimpleMap)

class AutomaticTransmissionShafts(ChAutomaticTransmissionShafts):
    r"""Proxy of C++ chrono::vehicle::AutomaticTransmissionShafts class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(AutomaticTransmissionShafts self, std::string const & filename) -> AutomaticTransmissionShafts
        __init__(AutomaticTransmissionShafts self, rapidjson::Document const & d) -> AutomaticTransmissionShafts
        """
        _vehicle.AutomaticTransmissionShafts_swiginit(self, _vehicle.new_AutomaticTransmissionShafts(*args))
    __swig_destroy__ = _vehicle.delete_AutomaticTransmissionShafts

    def SetGearRatios(self, fwd, rev):
        r"""SetGearRatios(AutomaticTransmissionShafts self, vector_double fwd, double & rev)"""
        return _vehicle.AutomaticTransmissionShafts_SetGearRatios(self, fwd, rev)

    def GetTransmissionBlockInertia(self):
        r"""GetTransmissionBlockInertia(AutomaticTransmissionShafts self) -> double"""
        return _vehicle.AutomaticTransmissionShafts_GetTransmissionBlockInertia(self)

    def GetIngearShaftInertia(self):
        r"""GetIngearShaftInertia(AutomaticTransmissionShafts self) -> double"""
        return _vehicle.AutomaticTransmissionShafts_GetIngearShaftInertia(self)

    def GetMotorshaftInertia(self):
        r"""GetMotorshaftInertia(AutomaticTransmissionShafts self) -> double"""
        return _vehicle.AutomaticTransmissionShafts_GetMotorshaftInertia(self)

    def GetDriveshaftInertia(self):
        r"""GetDriveshaftInertia(AutomaticTransmissionShafts self) -> double"""
        return _vehicle.AutomaticTransmissionShafts_GetDriveshaftInertia(self)

    def GetUpshiftRPM(self):
        r"""GetUpshiftRPM(AutomaticTransmissionShafts self) -> double"""
        return _vehicle.AutomaticTransmissionShafts_GetUpshiftRPM(self)

    def GetDownshiftRPM(self):
        r"""GetDownshiftRPM(AutomaticTransmissionShafts self) -> double"""
        return _vehicle.AutomaticTransmissionShafts_GetDownshiftRPM(self)

    def SetTorqueConverterCapacityFactorMap(self, map):
        r"""SetTorqueConverterCapacityFactorMap(AutomaticTransmissionShafts self, std::shared_ptr< ChFunction_Recorder > & map)"""
        return _vehicle.AutomaticTransmissionShafts_SetTorqueConverterCapacityFactorMap(self, map)

    def SetTorqeConverterTorqueRatioMap(self, map):
        r"""SetTorqeConverterTorqueRatioMap(AutomaticTransmissionShafts self, std::shared_ptr< ChFunction_Recorder > & map)"""
        return _vehicle.AutomaticTransmissionShafts_SetTorqeConverterTorqueRatioMap(self, map)

# Register AutomaticTransmissionShafts in _vehicle:
_vehicle.AutomaticTransmissionShafts_swigregister(AutomaticTransmissionShafts)

class Generic_AutomaticTransmissionSimple(ChAutomaticTransmissionSimpleMap):
    r"""Proxy of C++ chrono::vehicle::generic::Generic_AutomaticTransmissionSimple class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Generic_AutomaticTransmissionSimple self, std::string const & name) -> Generic_AutomaticTransmissionSimple"""
        _vehicle.Generic_AutomaticTransmissionSimple_swiginit(self, _vehicle.new_Generic_AutomaticTransmissionSimple(name))

    def SetGearRatios(self, fwd, rev):
        r"""SetGearRatios(Generic_AutomaticTransmissionSimple self, vector_double fwd, double & rev)"""
        return _vehicle.Generic_AutomaticTransmissionSimple_SetGearRatios(self, fwd, rev)

    def SetShiftPoints(self, shift_bands):
        r"""SetShiftPoints(Generic_AutomaticTransmissionSimple self, std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > & shift_bands)"""
        return _vehicle.Generic_AutomaticTransmissionSimple_SetShiftPoints(self, shift_bands)
    __swig_destroy__ = _vehicle.delete_Generic_AutomaticTransmissionSimple

# Register Generic_AutomaticTransmissionSimple in _vehicle:
_vehicle.Generic_AutomaticTransmissionSimple_swigregister(Generic_AutomaticTransmissionSimple)

class Generic_EngineSimple(ChEngineSimple):
    r"""Proxy of C++ chrono::vehicle::generic::Generic_EngineSimple class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Generic_EngineSimple self, std::string const & name) -> Generic_EngineSimple"""
        _vehicle.Generic_EngineSimple_swiginit(self, _vehicle.new_Generic_EngineSimple(name))

    def GetMaxTorque(self):
        r"""GetMaxTorque(Generic_EngineSimple self) -> double"""
        return _vehicle.Generic_EngineSimple_GetMaxTorque(self)

    def GetMaxSpeed(self):
        r"""GetMaxSpeed(Generic_EngineSimple self) -> double"""
        return _vehicle.Generic_EngineSimple_GetMaxSpeed(self)

    def GetMaxPower(self):
        r"""GetMaxPower(Generic_EngineSimple self) -> double"""
        return _vehicle.Generic_EngineSimple_GetMaxPower(self)
    __swig_destroy__ = _vehicle.delete_Generic_EngineSimple

# Register Generic_EngineSimple in _vehicle:
_vehicle.Generic_EngineSimple_swigregister(Generic_EngineSimple)

class Generic_AutomaticTransmissionSimpleMap(ChAutomaticTransmissionSimpleMap):
    r"""Proxy of C++ chrono::vehicle::generic::Generic_AutomaticTransmissionSimpleMap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Generic_AutomaticTransmissionSimpleMap self, std::string const & name) -> Generic_AutomaticTransmissionSimpleMap"""
        _vehicle.Generic_AutomaticTransmissionSimpleMap_swiginit(self, _vehicle.new_Generic_AutomaticTransmissionSimpleMap(name))

    def SetGearRatios(self, fwd, rev):
        r"""SetGearRatios(Generic_AutomaticTransmissionSimpleMap self, vector_double fwd, double & rev)"""
        return _vehicle.Generic_AutomaticTransmissionSimpleMap_SetGearRatios(self, fwd, rev)

    def SetShiftPoints(self, shift_bands):
        r"""SetShiftPoints(Generic_AutomaticTransmissionSimpleMap self, std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > & shift_bands)"""
        return _vehicle.Generic_AutomaticTransmissionSimpleMap_SetShiftPoints(self, shift_bands)
    __swig_destroy__ = _vehicle.delete_Generic_AutomaticTransmissionSimpleMap

# Register Generic_AutomaticTransmissionSimpleMap in _vehicle:
_vehicle.Generic_AutomaticTransmissionSimpleMap_swigregister(Generic_AutomaticTransmissionSimpleMap)

class Generic_EngineSimpleMap(ChEngineSimpleMap):
    r"""Proxy of C++ chrono::vehicle::generic::Generic_EngineSimpleMap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Generic_EngineSimpleMap self, std::string const & name) -> Generic_EngineSimpleMap"""
        _vehicle.Generic_EngineSimpleMap_swiginit(self, _vehicle.new_Generic_EngineSimpleMap(name))

    def GetMaxEngineSpeed(self):
        r"""GetMaxEngineSpeed(Generic_EngineSimpleMap self) -> double"""
        return _vehicle.Generic_EngineSimpleMap_GetMaxEngineSpeed(self)

    def SetEngineTorqueMaps(self, map0, mapF):
        r"""SetEngineTorqueMaps(Generic_EngineSimpleMap self, ChFunction_Recorder & map0, ChFunction_Recorder & mapF)"""
        return _vehicle.Generic_EngineSimpleMap_SetEngineTorqueMaps(self, map0, mapF)
    __swig_destroy__ = _vehicle.delete_Generic_EngineSimpleMap

# Register Generic_EngineSimpleMap in _vehicle:
_vehicle.Generic_EngineSimpleMap_swigregister(Generic_EngineSimpleMap)

class HMMWV_EngineShafts(ChEngineShafts):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_EngineShafts class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(HMMWV_EngineShafts self, std::string const & name) -> HMMWV_EngineShafts"""
        _vehicle.HMMWV_EngineShafts_swiginit(self, _vehicle.new_HMMWV_EngineShafts(name))
    __swig_destroy__ = _vehicle.delete_HMMWV_EngineShafts

    def GetMotorBlockInertia(self):
        r"""GetMotorBlockInertia(HMMWV_EngineShafts self) -> double"""
        return _vehicle.HMMWV_EngineShafts_GetMotorBlockInertia(self)

    def GetMotorshaftInertia(self):
        r"""GetMotorshaftInertia(HMMWV_EngineShafts self) -> double"""
        return _vehicle.HMMWV_EngineShafts_GetMotorshaftInertia(self)

    def SetEngineTorqueMap(self, map):
        r"""SetEngineTorqueMap(HMMWV_EngineShafts self, std::shared_ptr< ChFunction_Recorder > & map)"""
        return _vehicle.HMMWV_EngineShafts_SetEngineTorqueMap(self, map)

    def SetEngineLossesMap(self, map):
        r"""SetEngineLossesMap(HMMWV_EngineShafts self, std::shared_ptr< ChFunction_Recorder > & map)"""
        return _vehicle.HMMWV_EngineShafts_SetEngineLossesMap(self, map)

# Register HMMWV_EngineShafts in _vehicle:
_vehicle.HMMWV_EngineShafts_swigregister(HMMWV_EngineShafts)

class HMMWV_EngineSimpleMap(ChEngineSimpleMap):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_EngineSimpleMap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(HMMWV_EngineSimpleMap self, std::string const & name) -> HMMWV_EngineSimpleMap"""
        _vehicle.HMMWV_EngineSimpleMap_swiginit(self, _vehicle.new_HMMWV_EngineSimpleMap(name))

    def GetMaxEngineSpeed(self):
        r"""GetMaxEngineSpeed(HMMWV_EngineSimpleMap self) -> double"""
        return _vehicle.HMMWV_EngineSimpleMap_GetMaxEngineSpeed(self)

    def SetEngineTorqueMaps(self, map0, mapF):
        r"""SetEngineTorqueMaps(HMMWV_EngineSimpleMap self, ChFunction_Recorder & map0, ChFunction_Recorder & mapF)"""
        return _vehicle.HMMWV_EngineSimpleMap_SetEngineTorqueMaps(self, map0, mapF)
    __swig_destroy__ = _vehicle.delete_HMMWV_EngineSimpleMap

# Register HMMWV_EngineSimpleMap in _vehicle:
_vehicle.HMMWV_EngineSimpleMap_swigregister(HMMWV_EngineSimpleMap)

class HMMWV_EngineSimple(ChEngineSimple):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_EngineSimple class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(HMMWV_EngineSimple self, std::string const & name) -> HMMWV_EngineSimple"""
        _vehicle.HMMWV_EngineSimple_swiginit(self, _vehicle.new_HMMWV_EngineSimple(name))
    __swig_destroy__ = _vehicle.delete_HMMWV_EngineSimple

    def GetMaxTorque(self):
        r"""GetMaxTorque(HMMWV_EngineSimple self) -> double"""
        return _vehicle.HMMWV_EngineSimple_GetMaxTorque(self)

    def GetMaxPower(self):
        r"""GetMaxPower(HMMWV_EngineSimple self) -> double"""
        return _vehicle.HMMWV_EngineSimple_GetMaxPower(self)

    def GetMaxSpeed(self):
        r"""GetMaxSpeed(HMMWV_EngineSimple self) -> double"""
        return _vehicle.HMMWV_EngineSimple_GetMaxSpeed(self)

# Register HMMWV_EngineSimple in _vehicle:
_vehicle.HMMWV_EngineSimple_swigregister(HMMWV_EngineSimple)

class HMMWV_AutomaticTransmissionShafts(ChAutomaticTransmissionShafts):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionShafts class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(HMMWV_AutomaticTransmissionShafts self, std::string const & name) -> HMMWV_AutomaticTransmissionShafts"""
        _vehicle.HMMWV_AutomaticTransmissionShafts_swiginit(self, _vehicle.new_HMMWV_AutomaticTransmissionShafts(name))
    __swig_destroy__ = _vehicle.delete_HMMWV_AutomaticTransmissionShafts

    def SetGearRatios(self, fwd, rev):
        r"""SetGearRatios(HMMWV_AutomaticTransmissionShafts self, vector_double fwd, double & rev)"""
        return _vehicle.HMMWV_AutomaticTransmissionShafts_SetGearRatios(self, fwd, rev)

    def GetTransmissionBlockInertia(self):
        r"""GetTransmissionBlockInertia(HMMWV_AutomaticTransmissionShafts self) -> double"""
        return _vehicle.HMMWV_AutomaticTransmissionShafts_GetTransmissionBlockInertia(self)

    def GetIngearShaftInertia(self):
        r"""GetIngearShaftInertia(HMMWV_AutomaticTransmissionShafts self) -> double"""
        return _vehicle.HMMWV_AutomaticTransmissionShafts_GetIngearShaftInertia(self)

    def GetMotorshaftInertia(self):
        r"""GetMotorshaftInertia(HMMWV_AutomaticTransmissionShafts self) -> double"""
        return _vehicle.HMMWV_AutomaticTransmissionShafts_GetMotorshaftInertia(self)

    def GetDriveshaftInertia(self):
        r"""GetDriveshaftInertia(HMMWV_AutomaticTransmissionShafts self) -> double"""
        return _vehicle.HMMWV_AutomaticTransmissionShafts_GetDriveshaftInertia(self)

    def GetUpshiftRPM(self):
        r"""GetUpshiftRPM(HMMWV_AutomaticTransmissionShafts self) -> double"""
        return _vehicle.HMMWV_AutomaticTransmissionShafts_GetUpshiftRPM(self)

    def GetDownshiftRPM(self):
        r"""GetDownshiftRPM(HMMWV_AutomaticTransmissionShafts self) -> double"""
        return _vehicle.HMMWV_AutomaticTransmissionShafts_GetDownshiftRPM(self)

    def SetTorqueConverterCapacityFactorMap(self, map):
        r"""SetTorqueConverterCapacityFactorMap(HMMWV_AutomaticTransmissionShafts self, std::shared_ptr< ChFunction_Recorder > & map)"""
        return _vehicle.HMMWV_AutomaticTransmissionShafts_SetTorqueConverterCapacityFactorMap(self, map)

    def SetTorqeConverterTorqueRatioMap(self, map):
        r"""SetTorqeConverterTorqueRatioMap(HMMWV_AutomaticTransmissionShafts self, std::shared_ptr< ChFunction_Recorder > & map)"""
        return _vehicle.HMMWV_AutomaticTransmissionShafts_SetTorqeConverterTorqueRatioMap(self, map)

# Register HMMWV_AutomaticTransmissionShafts in _vehicle:
_vehicle.HMMWV_AutomaticTransmissionShafts_swigregister(HMMWV_AutomaticTransmissionShafts)

class HMMWV_AutomaticTransmissionSimpleMap(ChAutomaticTransmissionSimpleMap):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_AutomaticTransmissionSimpleMap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(HMMWV_AutomaticTransmissionSimpleMap self, std::string const & name) -> HMMWV_AutomaticTransmissionSimpleMap"""
        _vehicle.HMMWV_AutomaticTransmissionSimpleMap_swiginit(self, _vehicle.new_HMMWV_AutomaticTransmissionSimpleMap(name))
    __swig_destroy__ = _vehicle.delete_HMMWV_AutomaticTransmissionSimpleMap

    def SetGearRatios(self, fwd, rev):
        r"""SetGearRatios(HMMWV_AutomaticTransmissionSimpleMap self, vector_double fwd, double & rev)"""
        return _vehicle.HMMWV_AutomaticTransmissionSimpleMap_SetGearRatios(self, fwd, rev)

    def SetShiftPoints(self, shift_bands):
        r"""SetShiftPoints(HMMWV_AutomaticTransmissionSimpleMap self, std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > & shift_bands)"""
        return _vehicle.HMMWV_AutomaticTransmissionSimpleMap_SetShiftPoints(self, shift_bands)

# Register HMMWV_AutomaticTransmissionSimpleMap in _vehicle:
_vehicle.HMMWV_AutomaticTransmissionSimpleMap_swigregister(HMMWV_AutomaticTransmissionSimpleMap)

class Sedan_EngineSimpleMap(ChEngineSimpleMap):
    r"""Proxy of C++ chrono::vehicle::sedan::Sedan_EngineSimpleMap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Sedan_EngineSimpleMap self, std::string const & name) -> Sedan_EngineSimpleMap"""
        _vehicle.Sedan_EngineSimpleMap_swiginit(self, _vehicle.new_Sedan_EngineSimpleMap(name))

    def GetMaxEngineSpeed(self):
        r"""GetMaxEngineSpeed(Sedan_EngineSimpleMap self) -> double"""
        return _vehicle.Sedan_EngineSimpleMap_GetMaxEngineSpeed(self)

    def SetEngineTorqueMaps(self, map0, mapF):
        r"""SetEngineTorqueMaps(Sedan_EngineSimpleMap self, ChFunction_Recorder & map0, ChFunction_Recorder & mapF)"""
        return _vehicle.Sedan_EngineSimpleMap_SetEngineTorqueMaps(self, map0, mapF)
    __swig_destroy__ = _vehicle.delete_Sedan_EngineSimpleMap

# Register Sedan_EngineSimpleMap in _vehicle:
_vehicle.Sedan_EngineSimpleMap_swigregister(Sedan_EngineSimpleMap)

class Sedan_AutomaticTransmissionSimpleMap(ChAutomaticTransmissionSimpleMap):
    r"""Proxy of C++ chrono::vehicle::sedan::Sedan_AutomaticTransmissionSimpleMap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Sedan_AutomaticTransmissionSimpleMap self, std::string const & name) -> Sedan_AutomaticTransmissionSimpleMap"""
        _vehicle.Sedan_AutomaticTransmissionSimpleMap_swiginit(self, _vehicle.new_Sedan_AutomaticTransmissionSimpleMap(name))

    def SetGearRatios(self, fwd, rev):
        r"""SetGearRatios(Sedan_AutomaticTransmissionSimpleMap self, vector_double fwd, double & rev)"""
        return _vehicle.Sedan_AutomaticTransmissionSimpleMap_SetGearRatios(self, fwd, rev)

    def SetShiftPoints(self, shift_bands):
        r"""SetShiftPoints(Sedan_AutomaticTransmissionSimpleMap self, std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > & shift_bands)"""
        return _vehicle.Sedan_AutomaticTransmissionSimpleMap_SetShiftPoints(self, shift_bands)
    __swig_destroy__ = _vehicle.delete_Sedan_AutomaticTransmissionSimpleMap

# Register Sedan_AutomaticTransmissionSimpleMap in _vehicle:
_vehicle.Sedan_AutomaticTransmissionSimpleMap_swigregister(Sedan_AutomaticTransmissionSimpleMap)

class CityBus_EngineSimpleMap(ChEngineSimpleMap):
    r"""Proxy of C++ chrono::vehicle::citybus::CityBus_EngineSimpleMap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(CityBus_EngineSimpleMap self, std::string const & name) -> CityBus_EngineSimpleMap"""
        _vehicle.CityBus_EngineSimpleMap_swiginit(self, _vehicle.new_CityBus_EngineSimpleMap(name))

    def GetMaxEngineSpeed(self):
        r"""GetMaxEngineSpeed(CityBus_EngineSimpleMap self) -> double"""
        return _vehicle.CityBus_EngineSimpleMap_GetMaxEngineSpeed(self)

    def SetEngineTorqueMaps(self, map0, mapF):
        r"""SetEngineTorqueMaps(CityBus_EngineSimpleMap self, ChFunction_Recorder & map0, ChFunction_Recorder & mapF)"""
        return _vehicle.CityBus_EngineSimpleMap_SetEngineTorqueMaps(self, map0, mapF)
    __swig_destroy__ = _vehicle.delete_CityBus_EngineSimpleMap

# Register CityBus_EngineSimpleMap in _vehicle:
_vehicle.CityBus_EngineSimpleMap_swigregister(CityBus_EngineSimpleMap)

class CityBus_AutomaticTransmissionSimpleMap(ChAutomaticTransmissionSimpleMap):
    r"""Proxy of C++ chrono::vehicle::citybus::CityBus_AutomaticTransmissionSimpleMap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(CityBus_AutomaticTransmissionSimpleMap self, std::string const & name) -> CityBus_AutomaticTransmissionSimpleMap"""
        _vehicle.CityBus_AutomaticTransmissionSimpleMap_swiginit(self, _vehicle.new_CityBus_AutomaticTransmissionSimpleMap(name))

    def SetGearRatios(self, fwd, rev):
        r"""SetGearRatios(CityBus_AutomaticTransmissionSimpleMap self, vector_double fwd, double & rev)"""
        return _vehicle.CityBus_AutomaticTransmissionSimpleMap_SetGearRatios(self, fwd, rev)

    def SetShiftPoints(self, shift_bands):
        r"""SetShiftPoints(CityBus_AutomaticTransmissionSimpleMap self, std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > & shift_bands)"""
        return _vehicle.CityBus_AutomaticTransmissionSimpleMap_SetShiftPoints(self, shift_bands)
    __swig_destroy__ = _vehicle.delete_CityBus_AutomaticTransmissionSimpleMap

# Register CityBus_AutomaticTransmissionSimpleMap in _vehicle:
_vehicle.CityBus_AutomaticTransmissionSimpleMap_swigregister(CityBus_AutomaticTransmissionSimpleMap)

class MAN_5t_EngineSimple(ChEngineSimple):
    r"""Proxy of C++ chrono::vehicle::man::MAN_5t_EngineSimple class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(MAN_5t_EngineSimple self, std::string const & name) -> MAN_5t_EngineSimple"""
        _vehicle.MAN_5t_EngineSimple_swiginit(self, _vehicle.new_MAN_5t_EngineSimple(name))
    __swig_destroy__ = _vehicle.delete_MAN_5t_EngineSimple

    def GetMaxTorque(self):
        r"""GetMaxTorque(MAN_5t_EngineSimple self) -> double"""
        return _vehicle.MAN_5t_EngineSimple_GetMaxTorque(self)

    def GetMaxPower(self):
        r"""GetMaxPower(MAN_5t_EngineSimple self) -> double"""
        return _vehicle.MAN_5t_EngineSimple_GetMaxPower(self)

    def GetMaxSpeed(self):
        r"""GetMaxSpeed(MAN_5t_EngineSimple self) -> double"""
        return _vehicle.MAN_5t_EngineSimple_GetMaxSpeed(self)

# Register MAN_5t_EngineSimple in _vehicle:
_vehicle.MAN_5t_EngineSimple_swigregister(MAN_5t_EngineSimple)

class MAN_5t_AutomaticTransmissionSimple(ChAutomaticTransmissionSimpleMap):
    r"""Proxy of C++ chrono::vehicle::man::MAN_5t_AutomaticTransmissionSimple class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(MAN_5t_AutomaticTransmissionSimple self, std::string const & name) -> MAN_5t_AutomaticTransmissionSimple"""
        _vehicle.MAN_5t_AutomaticTransmissionSimple_swiginit(self, _vehicle.new_MAN_5t_AutomaticTransmissionSimple(name))

    def SetGearRatios(self, fwd, rev):
        r"""SetGearRatios(MAN_5t_AutomaticTransmissionSimple self, vector_double fwd, double & rev)"""
        return _vehicle.MAN_5t_AutomaticTransmissionSimple_SetGearRatios(self, fwd, rev)

    def SetShiftPoints(self, shift_bands):
        r"""SetShiftPoints(MAN_5t_AutomaticTransmissionSimple self, std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > & shift_bands)"""
        return _vehicle.MAN_5t_AutomaticTransmissionSimple_SetShiftPoints(self, shift_bands)
    __swig_destroy__ = _vehicle.delete_MAN_5t_AutomaticTransmissionSimple

# Register MAN_5t_AutomaticTransmissionSimple in _vehicle:
_vehicle.MAN_5t_AutomaticTransmissionSimple_swigregister(MAN_5t_AutomaticTransmissionSimple)

class MAN_5t_EngineSimpleMap(ChEngineSimpleMap):
    r"""Proxy of C++ chrono::vehicle::man::MAN_5t_EngineSimpleMap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(MAN_5t_EngineSimpleMap self, std::string const & name) -> MAN_5t_EngineSimpleMap"""
        _vehicle.MAN_5t_EngineSimpleMap_swiginit(self, _vehicle.new_MAN_5t_EngineSimpleMap(name))

    def GetMaxEngineSpeed(self):
        r"""GetMaxEngineSpeed(MAN_5t_EngineSimpleMap self) -> double"""
        return _vehicle.MAN_5t_EngineSimpleMap_GetMaxEngineSpeed(self)

    def SetEngineTorqueMaps(self, map0, mapF):
        r"""SetEngineTorqueMaps(MAN_5t_EngineSimpleMap self, ChFunction_Recorder & map0, ChFunction_Recorder & mapF)"""
        return _vehicle.MAN_5t_EngineSimpleMap_SetEngineTorqueMaps(self, map0, mapF)
    __swig_destroy__ = _vehicle.delete_MAN_5t_EngineSimpleMap

# Register MAN_5t_EngineSimpleMap in _vehicle:
_vehicle.MAN_5t_EngineSimpleMap_swigregister(MAN_5t_EngineSimpleMap)

class MAN_5t_AutomaticTransmissionSimpleMap(ChAutomaticTransmissionSimpleMap):
    r"""Proxy of C++ chrono::vehicle::man::MAN_5t_AutomaticTransmissionSimpleMap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(MAN_5t_AutomaticTransmissionSimpleMap self, std::string const & name) -> MAN_5t_AutomaticTransmissionSimpleMap"""
        _vehicle.MAN_5t_AutomaticTransmissionSimpleMap_swiginit(self, _vehicle.new_MAN_5t_AutomaticTransmissionSimpleMap(name))

    def SetGearRatios(self, fwd, rev):
        r"""SetGearRatios(MAN_5t_AutomaticTransmissionSimpleMap self, vector_double fwd, double & rev)"""
        return _vehicle.MAN_5t_AutomaticTransmissionSimpleMap_SetGearRatios(self, fwd, rev)

    def SetShiftPoints(self, shift_bands):
        r"""SetShiftPoints(MAN_5t_AutomaticTransmissionSimpleMap self, std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > & shift_bands)"""
        return _vehicle.MAN_5t_AutomaticTransmissionSimpleMap_SetShiftPoints(self, shift_bands)
    __swig_destroy__ = _vehicle.delete_MAN_5t_AutomaticTransmissionSimpleMap

# Register MAN_5t_AutomaticTransmissionSimpleMap in _vehicle:
_vehicle.MAN_5t_AutomaticTransmissionSimpleMap_swigregister(MAN_5t_AutomaticTransmissionSimpleMap)

class MAN_7t_EngineSimple(ChEngineSimple):
    r"""Proxy of C++ chrono::vehicle::man::MAN_7t_EngineSimple class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(MAN_7t_EngineSimple self, std::string const & name) -> MAN_7t_EngineSimple"""
        _vehicle.MAN_7t_EngineSimple_swiginit(self, _vehicle.new_MAN_7t_EngineSimple(name))
    __swig_destroy__ = _vehicle.delete_MAN_7t_EngineSimple

    def GetMaxTorque(self):
        r"""GetMaxTorque(MAN_7t_EngineSimple self) -> double"""
        return _vehicle.MAN_7t_EngineSimple_GetMaxTorque(self)

    def GetMaxPower(self):
        r"""GetMaxPower(MAN_7t_EngineSimple self) -> double"""
        return _vehicle.MAN_7t_EngineSimple_GetMaxPower(self)

    def GetMaxSpeed(self):
        r"""GetMaxSpeed(MAN_7t_EngineSimple self) -> double"""
        return _vehicle.MAN_7t_EngineSimple_GetMaxSpeed(self)

# Register MAN_7t_EngineSimple in _vehicle:
_vehicle.MAN_7t_EngineSimple_swigregister(MAN_7t_EngineSimple)

class MAN_7t_AutomaticTransmissionSimple(ChAutomaticTransmissionSimpleMap):
    r"""Proxy of C++ chrono::vehicle::man::MAN_7t_AutomaticTransmissionSimple class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(MAN_7t_AutomaticTransmissionSimple self, std::string const & name) -> MAN_7t_AutomaticTransmissionSimple"""
        _vehicle.MAN_7t_AutomaticTransmissionSimple_swiginit(self, _vehicle.new_MAN_7t_AutomaticTransmissionSimple(name))

    def SetGearRatios(self, fwd, rev):
        r"""SetGearRatios(MAN_7t_AutomaticTransmissionSimple self, vector_double fwd, double & rev)"""
        return _vehicle.MAN_7t_AutomaticTransmissionSimple_SetGearRatios(self, fwd, rev)

    def SetShiftPoints(self, shift_bands):
        r"""SetShiftPoints(MAN_7t_AutomaticTransmissionSimple self, std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > & shift_bands)"""
        return _vehicle.MAN_7t_AutomaticTransmissionSimple_SetShiftPoints(self, shift_bands)
    __swig_destroy__ = _vehicle.delete_MAN_7t_AutomaticTransmissionSimple

# Register MAN_7t_AutomaticTransmissionSimple in _vehicle:
_vehicle.MAN_7t_AutomaticTransmissionSimple_swigregister(MAN_7t_AutomaticTransmissionSimple)

class MAN_7t_EngineSimpleMap(ChEngineSimpleMap):
    r"""Proxy of C++ chrono::vehicle::man::MAN_7t_EngineSimpleMap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(MAN_7t_EngineSimpleMap self, std::string const & name) -> MAN_7t_EngineSimpleMap"""
        _vehicle.MAN_7t_EngineSimpleMap_swiginit(self, _vehicle.new_MAN_7t_EngineSimpleMap(name))

    def GetMaxEngineSpeed(self):
        r"""GetMaxEngineSpeed(MAN_7t_EngineSimpleMap self) -> double"""
        return _vehicle.MAN_7t_EngineSimpleMap_GetMaxEngineSpeed(self)

    def SetEngineTorqueMaps(self, map0, mapF):
        r"""SetEngineTorqueMaps(MAN_7t_EngineSimpleMap self, ChFunction_Recorder & map0, ChFunction_Recorder & mapF)"""
        return _vehicle.MAN_7t_EngineSimpleMap_SetEngineTorqueMaps(self, map0, mapF)
    __swig_destroy__ = _vehicle.delete_MAN_7t_EngineSimpleMap

# Register MAN_7t_EngineSimpleMap in _vehicle:
_vehicle.MAN_7t_EngineSimpleMap_swigregister(MAN_7t_EngineSimpleMap)

class MAN_7t_AutomaticTransmissionSimpleMap(ChAutomaticTransmissionSimpleMap):
    r"""Proxy of C++ chrono::vehicle::man::MAN_7t_AutomaticTransmissionSimpleMap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(MAN_7t_AutomaticTransmissionSimpleMap self, std::string const & name) -> MAN_7t_AutomaticTransmissionSimpleMap"""
        _vehicle.MAN_7t_AutomaticTransmissionSimpleMap_swiginit(self, _vehicle.new_MAN_7t_AutomaticTransmissionSimpleMap(name))

    def SetGearRatios(self, fwd, rev):
        r"""SetGearRatios(MAN_7t_AutomaticTransmissionSimpleMap self, vector_double fwd, double & rev)"""
        return _vehicle.MAN_7t_AutomaticTransmissionSimpleMap_SetGearRatios(self, fwd, rev)

    def SetShiftPoints(self, shift_bands):
        r"""SetShiftPoints(MAN_7t_AutomaticTransmissionSimpleMap self, std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > & shift_bands)"""
        return _vehicle.MAN_7t_AutomaticTransmissionSimpleMap_SetShiftPoints(self, shift_bands)
    __swig_destroy__ = _vehicle.delete_MAN_7t_AutomaticTransmissionSimpleMap

# Register MAN_7t_AutomaticTransmissionSimpleMap in _vehicle:
_vehicle.MAN_7t_AutomaticTransmissionSimpleMap_swigregister(MAN_7t_AutomaticTransmissionSimpleMap)

class RCCar_EngineSimpleMap(ChEngineSimpleMap):
    r"""Proxy of C++ chrono::vehicle::rccar::RCCar_EngineSimpleMap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(RCCar_EngineSimpleMap self, std::string const & name) -> RCCar_EngineSimpleMap"""
        _vehicle.RCCar_EngineSimpleMap_swiginit(self, _vehicle.new_RCCar_EngineSimpleMap(name))

    def GetMaxEngineSpeed(self):
        r"""GetMaxEngineSpeed(RCCar_EngineSimpleMap self) -> double"""
        return _vehicle.RCCar_EngineSimpleMap_GetMaxEngineSpeed(self)

    def SetEngineTorqueMaps(self, map0, mapF):
        r"""SetEngineTorqueMaps(RCCar_EngineSimpleMap self, ChFunction_Recorder & map0, ChFunction_Recorder & mapF)"""
        return _vehicle.RCCar_EngineSimpleMap_SetEngineTorqueMaps(self, map0, mapF)
    __swig_destroy__ = _vehicle.delete_RCCar_EngineSimpleMap

# Register RCCar_EngineSimpleMap in _vehicle:
_vehicle.RCCar_EngineSimpleMap_swigregister(RCCar_EngineSimpleMap)

class RCCar_AutomaticTransmissionSimpleMap(ChAutomaticTransmissionSimpleMap):
    r"""Proxy of C++ chrono::vehicle::rccar::RCCar_AutomaticTransmissionSimpleMap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(RCCar_AutomaticTransmissionSimpleMap self, std::string const & name) -> RCCar_AutomaticTransmissionSimpleMap"""
        _vehicle.RCCar_AutomaticTransmissionSimpleMap_swiginit(self, _vehicle.new_RCCar_AutomaticTransmissionSimpleMap(name))

    def SetGearRatios(self, fwd, rev):
        r"""SetGearRatios(RCCar_AutomaticTransmissionSimpleMap self, vector_double fwd, double & rev)"""
        return _vehicle.RCCar_AutomaticTransmissionSimpleMap_SetGearRatios(self, fwd, rev)

    def SetShiftPoints(self, shift_bands):
        r"""SetShiftPoints(RCCar_AutomaticTransmissionSimpleMap self, std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > & shift_bands)"""
        return _vehicle.RCCar_AutomaticTransmissionSimpleMap_SetShiftPoints(self, shift_bands)
    __swig_destroy__ = _vehicle.delete_RCCar_AutomaticTransmissionSimpleMap

# Register RCCar_AutomaticTransmissionSimpleMap in _vehicle:
_vehicle.RCCar_AutomaticTransmissionSimpleMap_swigregister(RCCar_AutomaticTransmissionSimpleMap)

class UAZBUS_EngineSimpleMap(ChEngineSimpleMap):
    r"""Proxy of C++ chrono::vehicle::uaz::UAZBUS_EngineSimpleMap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(UAZBUS_EngineSimpleMap self, std::string const & name) -> UAZBUS_EngineSimpleMap"""
        _vehicle.UAZBUS_EngineSimpleMap_swiginit(self, _vehicle.new_UAZBUS_EngineSimpleMap(name))

    def GetMaxEngineSpeed(self):
        r"""GetMaxEngineSpeed(UAZBUS_EngineSimpleMap self) -> double"""
        return _vehicle.UAZBUS_EngineSimpleMap_GetMaxEngineSpeed(self)

    def SetEngineTorqueMaps(self, map0, mapF):
        r"""SetEngineTorqueMaps(UAZBUS_EngineSimpleMap self, ChFunction_Recorder & map0, ChFunction_Recorder & mapF)"""
        return _vehicle.UAZBUS_EngineSimpleMap_SetEngineTorqueMaps(self, map0, mapF)
    __swig_destroy__ = _vehicle.delete_UAZBUS_EngineSimpleMap

# Register UAZBUS_EngineSimpleMap in _vehicle:
_vehicle.UAZBUS_EngineSimpleMap_swigregister(UAZBUS_EngineSimpleMap)

class UAZBUS_AutomaticTransmissionSimpleMap(ChAutomaticTransmissionSimpleMap):
    r"""Proxy of C++ chrono::vehicle::uaz::UAZBUS_AutomaticTransmissionSimpleMap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(UAZBUS_AutomaticTransmissionSimpleMap self, std::string const & name) -> UAZBUS_AutomaticTransmissionSimpleMap"""
        _vehicle.UAZBUS_AutomaticTransmissionSimpleMap_swiginit(self, _vehicle.new_UAZBUS_AutomaticTransmissionSimpleMap(name))

    def SetGearRatios(self, fwd, rev):
        r"""SetGearRatios(UAZBUS_AutomaticTransmissionSimpleMap self, vector_double fwd, double & rev)"""
        return _vehicle.UAZBUS_AutomaticTransmissionSimpleMap_SetGearRatios(self, fwd, rev)

    def SetShiftPoints(self, shift_bands):
        r"""SetShiftPoints(UAZBUS_AutomaticTransmissionSimpleMap self, std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > & shift_bands)"""
        return _vehicle.UAZBUS_AutomaticTransmissionSimpleMap_SetShiftPoints(self, shift_bands)
    __swig_destroy__ = _vehicle.delete_UAZBUS_AutomaticTransmissionSimpleMap

# Register UAZBUS_AutomaticTransmissionSimpleMap in _vehicle:
_vehicle.UAZBUS_AutomaticTransmissionSimpleMap_swigregister(UAZBUS_AutomaticTransmissionSimpleMap)

class Gator_EngineSimpleMap(ChEngineSimpleMap):
    r"""Proxy of C++ chrono::vehicle::gator::Gator_EngineSimpleMap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Gator_EngineSimpleMap self, std::string const & name) -> Gator_EngineSimpleMap"""
        _vehicle.Gator_EngineSimpleMap_swiginit(self, _vehicle.new_Gator_EngineSimpleMap(name))

    def GetMaxEngineSpeed(self):
        r"""GetMaxEngineSpeed(Gator_EngineSimpleMap self) -> double"""
        return _vehicle.Gator_EngineSimpleMap_GetMaxEngineSpeed(self)

    def SetEngineTorqueMaps(self, map0, mapF):
        r"""SetEngineTorqueMaps(Gator_EngineSimpleMap self, ChFunction_Recorder & map0, ChFunction_Recorder & mapF)"""
        return _vehicle.Gator_EngineSimpleMap_SetEngineTorqueMaps(self, map0, mapF)
    __swig_destroy__ = _vehicle.delete_Gator_EngineSimpleMap

# Register Gator_EngineSimpleMap in _vehicle:
_vehicle.Gator_EngineSimpleMap_swigregister(Gator_EngineSimpleMap)

class Gator_EngineSimple(ChEngineSimple):
    r"""Proxy of C++ chrono::vehicle::gator::Gator_EngineSimple class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Gator_EngineSimple self, std::string const & name) -> Gator_EngineSimple"""
        _vehicle.Gator_EngineSimple_swiginit(self, _vehicle.new_Gator_EngineSimple(name))
    __swig_destroy__ = _vehicle.delete_Gator_EngineSimple

# Register Gator_EngineSimple in _vehicle:
_vehicle.Gator_EngineSimple_swigregister(Gator_EngineSimple)

class Gator_AutomaticTransmissionSimpleMap(ChAutomaticTransmissionSimpleMap):
    r"""Proxy of C++ chrono::vehicle::gator::Gator_AutomaticTransmissionSimpleMap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Gator_AutomaticTransmissionSimpleMap self, std::string const & name) -> Gator_AutomaticTransmissionSimpleMap"""
        _vehicle.Gator_AutomaticTransmissionSimpleMap_swiginit(self, _vehicle.new_Gator_AutomaticTransmissionSimpleMap(name))

    def SetGearRatios(self, fwd, rev):
        r"""SetGearRatios(Gator_AutomaticTransmissionSimpleMap self, vector_double fwd, double & rev)"""
        return _vehicle.Gator_AutomaticTransmissionSimpleMap_SetGearRatios(self, fwd, rev)

    def SetShiftPoints(self, shift_bands):
        r"""SetShiftPoints(Gator_AutomaticTransmissionSimpleMap self, std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > & shift_bands)"""
        return _vehicle.Gator_AutomaticTransmissionSimpleMap_SetShiftPoints(self, shift_bands)
    __swig_destroy__ = _vehicle.delete_Gator_AutomaticTransmissionSimpleMap

# Register Gator_AutomaticTransmissionSimpleMap in _vehicle:
_vehicle.Gator_AutomaticTransmissionSimpleMap_swigregister(Gator_AutomaticTransmissionSimpleMap)

class Gator_AutomaticTransmissionSimple(ChAutomaticTransmissionSimpleMap):
    r"""Proxy of C++ chrono::vehicle::gator::Gator_AutomaticTransmissionSimple class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Gator_AutomaticTransmissionSimple self, std::string const & name) -> Gator_AutomaticTransmissionSimple"""
        _vehicle.Gator_AutomaticTransmissionSimple_swiginit(self, _vehicle.new_Gator_AutomaticTransmissionSimple(name))

    def SetGearRatios(self, fwd, rev):
        r"""SetGearRatios(Gator_AutomaticTransmissionSimple self, vector_double fwd, double & rev)"""
        return _vehicle.Gator_AutomaticTransmissionSimple_SetGearRatios(self, fwd, rev)

    def SetShiftPoints(self, shift_bands):
        r"""SetShiftPoints(Gator_AutomaticTransmissionSimple self, std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > & shift_bands)"""
        return _vehicle.Gator_AutomaticTransmissionSimple_SetShiftPoints(self, shift_bands)
    __swig_destroy__ = _vehicle.delete_Gator_AutomaticTransmissionSimple

# Register Gator_AutomaticTransmissionSimple in _vehicle:
_vehicle.Gator_AutomaticTransmissionSimple_swigregister(Gator_AutomaticTransmissionSimple)

class FEDA_EngineSimpleMap(ChEngineSimpleMap):
    r"""Proxy of C++ chrono::vehicle::feda::FEDA_EngineSimpleMap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(FEDA_EngineSimpleMap self, std::string const & name) -> FEDA_EngineSimpleMap"""
        _vehicle.FEDA_EngineSimpleMap_swiginit(self, _vehicle.new_FEDA_EngineSimpleMap(name))

    def GetMaxEngineSpeed(self):
        r"""GetMaxEngineSpeed(FEDA_EngineSimpleMap self) -> double"""
        return _vehicle.FEDA_EngineSimpleMap_GetMaxEngineSpeed(self)

    def SetEngineTorqueMaps(self, map0, mapF):
        r"""SetEngineTorqueMaps(FEDA_EngineSimpleMap self, ChFunction_Recorder & map0, ChFunction_Recorder & mapF)"""
        return _vehicle.FEDA_EngineSimpleMap_SetEngineTorqueMaps(self, map0, mapF)
    __swig_destroy__ = _vehicle.delete_FEDA_EngineSimpleMap

# Register FEDA_EngineSimpleMap in _vehicle:
_vehicle.FEDA_EngineSimpleMap_swigregister(FEDA_EngineSimpleMap)

class FEDA_AutomaticTransmissionSimpleMap(ChAutomaticTransmissionSimpleMap):
    r"""Proxy of C++ chrono::vehicle::feda::FEDA_AutomaticTransmissionSimpleMap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(FEDA_AutomaticTransmissionSimpleMap self, std::string const & name) -> FEDA_AutomaticTransmissionSimpleMap"""
        _vehicle.FEDA_AutomaticTransmissionSimpleMap_swiginit(self, _vehicle.new_FEDA_AutomaticTransmissionSimpleMap(name))

    def SetGearRatios(self, fwd, rev):
        r"""SetGearRatios(FEDA_AutomaticTransmissionSimpleMap self, vector_double fwd, double & rev)"""
        return _vehicle.FEDA_AutomaticTransmissionSimpleMap_SetGearRatios(self, fwd, rev)

    def SetShiftPoints(self, shift_bands):
        r"""SetShiftPoints(FEDA_AutomaticTransmissionSimpleMap self, std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > & shift_bands)"""
        return _vehicle.FEDA_AutomaticTransmissionSimpleMap_SetShiftPoints(self, shift_bands)
    __swig_destroy__ = _vehicle.delete_FEDA_AutomaticTransmissionSimpleMap

# Register FEDA_AutomaticTransmissionSimpleMap in _vehicle:
_vehicle.FEDA_AutomaticTransmissionSimpleMap_swigregister(FEDA_AutomaticTransmissionSimpleMap)

class M113_AutomaticTransmissionShafts(ChAutomaticTransmissionShafts):
    r"""Proxy of C++ chrono::vehicle::m113::M113_AutomaticTransmissionShafts class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(M113_AutomaticTransmissionShafts self, std::string const & name) -> M113_AutomaticTransmissionShafts"""
        _vehicle.M113_AutomaticTransmissionShafts_swiginit(self, _vehicle.new_M113_AutomaticTransmissionShafts(name))
    __swig_destroy__ = _vehicle.delete_M113_AutomaticTransmissionShafts

    def SetGearRatios(self, fwd, rev):
        r"""SetGearRatios(M113_AutomaticTransmissionShafts self, vector_double fwd, double & rev)"""
        return _vehicle.M113_AutomaticTransmissionShafts_SetGearRatios(self, fwd, rev)

    def GetTransmissionBlockInertia(self):
        r"""GetTransmissionBlockInertia(M113_AutomaticTransmissionShafts self) -> double"""
        return _vehicle.M113_AutomaticTransmissionShafts_GetTransmissionBlockInertia(self)

    def GetIngearShaftInertia(self):
        r"""GetIngearShaftInertia(M113_AutomaticTransmissionShafts self) -> double"""
        return _vehicle.M113_AutomaticTransmissionShafts_GetIngearShaftInertia(self)

    def GetMotorshaftInertia(self):
        r"""GetMotorshaftInertia(M113_AutomaticTransmissionShafts self) -> double"""
        return _vehicle.M113_AutomaticTransmissionShafts_GetMotorshaftInertia(self)

    def GetDriveshaftInertia(self):
        r"""GetDriveshaftInertia(M113_AutomaticTransmissionShafts self) -> double"""
        return _vehicle.M113_AutomaticTransmissionShafts_GetDriveshaftInertia(self)

    def GetUpshiftRPM(self):
        r"""GetUpshiftRPM(M113_AutomaticTransmissionShafts self) -> double"""
        return _vehicle.M113_AutomaticTransmissionShafts_GetUpshiftRPM(self)

    def GetDownshiftRPM(self):
        r"""GetDownshiftRPM(M113_AutomaticTransmissionShafts self) -> double"""
        return _vehicle.M113_AutomaticTransmissionShafts_GetDownshiftRPM(self)

    def SetTorqueConverterCapacityFactorMap(self, map):
        r"""SetTorqueConverterCapacityFactorMap(M113_AutomaticTransmissionShafts self, std::shared_ptr< ChFunction_Recorder > & map)"""
        return _vehicle.M113_AutomaticTransmissionShafts_SetTorqueConverterCapacityFactorMap(self, map)

    def SetTorqeConverterTorqueRatioMap(self, map):
        r"""SetTorqeConverterTorqueRatioMap(M113_AutomaticTransmissionShafts self, std::shared_ptr< ChFunction_Recorder > & map)"""
        return _vehicle.M113_AutomaticTransmissionShafts_SetTorqeConverterTorqueRatioMap(self, map)

# Register M113_AutomaticTransmissionShafts in _vehicle:
_vehicle.M113_AutomaticTransmissionShafts_swigregister(M113_AutomaticTransmissionShafts)

class M113_AutomaticTransmissionSimple(ChAutomaticTransmissionSimpleMap):
    r"""Proxy of C++ chrono::vehicle::m113::M113_AutomaticTransmissionSimple class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(M113_AutomaticTransmissionSimple self, std::string const & name) -> M113_AutomaticTransmissionSimple"""
        _vehicle.M113_AutomaticTransmissionSimple_swiginit(self, _vehicle.new_M113_AutomaticTransmissionSimple(name))
    __swig_destroy__ = _vehicle.delete_M113_AutomaticTransmissionSimple

    def SetGearRatios(self, fwd, rev):
        r"""SetGearRatios(M113_AutomaticTransmissionSimple self, vector_double fwd, double & rev)"""
        return _vehicle.M113_AutomaticTransmissionSimple_SetGearRatios(self, fwd, rev)

    def SetShiftPoints(self, shift_bands):
        r"""SetShiftPoints(M113_AutomaticTransmissionSimple self, std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > & shift_bands)"""
        return _vehicle.M113_AutomaticTransmissionSimple_SetShiftPoints(self, shift_bands)

# Register M113_AutomaticTransmissionSimple in _vehicle:
_vehicle.M113_AutomaticTransmissionSimple_swigregister(M113_AutomaticTransmissionSimple)

class M113_AutomaticTransmissionSimpleMap(ChAutomaticTransmissionSimpleMap):
    r"""Proxy of C++ chrono::vehicle::m113::M113_AutomaticTransmissionSimpleMap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(M113_AutomaticTransmissionSimpleMap self, std::string const & name) -> M113_AutomaticTransmissionSimpleMap"""
        _vehicle.M113_AutomaticTransmissionSimpleMap_swiginit(self, _vehicle.new_M113_AutomaticTransmissionSimpleMap(name))
    __swig_destroy__ = _vehicle.delete_M113_AutomaticTransmissionSimpleMap

    def SetGearRatios(self, fwd, rev):
        r"""SetGearRatios(M113_AutomaticTransmissionSimpleMap self, vector_double fwd, double & rev)"""
        return _vehicle.M113_AutomaticTransmissionSimpleMap_SetGearRatios(self, fwd, rev)

    def SetShiftPoints(self, shift_bands):
        r"""SetShiftPoints(M113_AutomaticTransmissionSimpleMap self, std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > & shift_bands)"""
        return _vehicle.M113_AutomaticTransmissionSimpleMap_SetShiftPoints(self, shift_bands)

# Register M113_AutomaticTransmissionSimpleMap in _vehicle:
_vehicle.M113_AutomaticTransmissionSimpleMap_swigregister(M113_AutomaticTransmissionSimpleMap)

class M113_EngineShafts(ChEngineShafts):
    r"""Proxy of C++ chrono::vehicle::m113::M113_EngineShafts class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(M113_EngineShafts self, std::string const & name) -> M113_EngineShafts"""
        _vehicle.M113_EngineShafts_swiginit(self, _vehicle.new_M113_EngineShafts(name))
    __swig_destroy__ = _vehicle.delete_M113_EngineShafts

    def GetMotorBlockInertia(self):
        r"""GetMotorBlockInertia(M113_EngineShafts self) -> double"""
        return _vehicle.M113_EngineShafts_GetMotorBlockInertia(self)

    def GetMotorshaftInertia(self):
        r"""GetMotorshaftInertia(M113_EngineShafts self) -> double"""
        return _vehicle.M113_EngineShafts_GetMotorshaftInertia(self)

    def SetEngineTorqueMap(self, map):
        r"""SetEngineTorqueMap(M113_EngineShafts self, std::shared_ptr< ChFunction_Recorder > & map)"""
        return _vehicle.M113_EngineShafts_SetEngineTorqueMap(self, map)

    def SetEngineLossesMap(self, map):
        r"""SetEngineLossesMap(M113_EngineShafts self, std::shared_ptr< ChFunction_Recorder > & map)"""
        return _vehicle.M113_EngineShafts_SetEngineLossesMap(self, map)

# Register M113_EngineShafts in _vehicle:
_vehicle.M113_EngineShafts_swigregister(M113_EngineShafts)

class M113_EngineSimple(ChEngineSimple):
    r"""Proxy of C++ chrono::vehicle::m113::M113_EngineSimple class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(M113_EngineSimple self, std::string const & name) -> M113_EngineSimple"""
        _vehicle.M113_EngineSimple_swiginit(self, _vehicle.new_M113_EngineSimple(name))
    __swig_destroy__ = _vehicle.delete_M113_EngineSimple

    def GetMaxTorque(self):
        r"""GetMaxTorque(M113_EngineSimple self) -> double"""
        return _vehicle.M113_EngineSimple_GetMaxTorque(self)

    def GetMaxPower(self):
        r"""GetMaxPower(M113_EngineSimple self) -> double"""
        return _vehicle.M113_EngineSimple_GetMaxPower(self)

    def GetMaxSpeed(self):
        r"""GetMaxSpeed(M113_EngineSimple self) -> double"""
        return _vehicle.M113_EngineSimple_GetMaxSpeed(self)

# Register M113_EngineSimple in _vehicle:
_vehicle.M113_EngineSimple_swigregister(M113_EngineSimple)

class M113_EngineSimpleMap(ChEngineSimpleMap):
    r"""Proxy of C++ chrono::vehicle::m113::M113_EngineSimpleMap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(M113_EngineSimpleMap self, std::string const & name) -> M113_EngineSimpleMap"""
        _vehicle.M113_EngineSimpleMap_swiginit(self, _vehicle.new_M113_EngineSimpleMap(name))

    def GetMaxEngineSpeed(self):
        r"""GetMaxEngineSpeed(M113_EngineSimpleMap self) -> double"""
        return _vehicle.M113_EngineSimpleMap_GetMaxEngineSpeed(self)

    def SetEngineTorqueMaps(self, map0, mapF):
        r"""SetEngineTorqueMaps(M113_EngineSimpleMap self, ChFunction_Recorder & map0, ChFunction_Recorder & mapF)"""
        return _vehicle.M113_EngineSimpleMap_SetEngineTorqueMaps(self, map0, mapF)
    __swig_destroy__ = _vehicle.delete_M113_EngineSimpleMap

# Register M113_EngineSimpleMap in _vehicle:
_vehicle.M113_EngineSimpleMap_swigregister(M113_EngineSimpleMap)

class ChChassis(ChPart):
    r"""Proxy of C++ chrono::vehicle::ChChassis class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChChassis

    def GetLocalDriverCoordsys(self):
        r"""GetLocalDriverCoordsys(ChChassis self) -> ChCoordsysD"""
        return _vehicle.ChChassis_GetLocalDriverCoordsys(self)

    def GetLocalPosRearConnector(self):
        r"""GetLocalPosRearConnector(ChChassis self) -> ChVectorD"""
        return _vehicle.ChChassis_GetLocalPosRearConnector(self)

    def GetBody(self):
        r"""GetBody(ChChassis self) -> std::shared_ptr< chrono::ChBodyAuxRef >"""
        return _vehicle.ChChassis_GetBody(self)

    def GetSystem(self):
        r"""GetSystem(ChChassis self) -> ChSystem"""
        return _vehicle.ChChassis_GetSystem(self)

    def GetPos(self):
        r"""GetPos(ChChassis self) -> ChVectorD"""
        return _vehicle.ChChassis_GetPos(self)

    def GetRot(self):
        r"""GetRot(ChChassis self) -> ChQuaternionD"""
        return _vehicle.ChChassis_GetRot(self)

    def GetDriverPos(self):
        r"""GetDriverPos(ChChassis self) -> ChVectorD"""
        return _vehicle.ChChassis_GetDriverPos(self)

    def GetSpeed(self):
        r"""GetSpeed(ChChassis self) -> double"""
        return _vehicle.ChChassis_GetSpeed(self)

    def GetCOMSpeed(self):
        r"""GetCOMSpeed(ChChassis self) -> double"""
        return _vehicle.ChChassis_GetCOMSpeed(self)

    def GetPointLocation(self, locpos):
        r"""GetPointLocation(ChChassis self, ChVectorD locpos) -> ChVectorD"""
        return _vehicle.ChChassis_GetPointLocation(self, locpos)

    def GetPointVelocity(self, locpos):
        r"""GetPointVelocity(ChChassis self, ChVectorD locpos) -> ChVectorD"""
        return _vehicle.ChChassis_GetPointVelocity(self, locpos)

    def GetPointAcceleration(self, locpos):
        r"""GetPointAcceleration(ChChassis self, ChVectorD locpos) -> ChVectorD"""
        return _vehicle.ChChassis_GetPointAcceleration(self, locpos)

    def Initialize(self, system, chassisPos, chassisFwdVel, collision_family=0):
        r"""Initialize(ChChassis self, ChSystem system, ChCoordsysD chassisPos, double chassisFwdVel, int collision_family=0)"""
        return _vehicle.ChChassis_Initialize(self, system, chassisPos, chassisFwdVel, collision_family)

    def SetCollide(self, state):
        r"""SetCollide(ChChassis self, bool state)"""
        return _vehicle.ChChassis_SetCollide(self, state)

    def SetFixed(self, val):
        r"""SetFixed(ChChassis self, bool val)"""
        return _vehicle.ChChassis_SetFixed(self, val)

    def IsFixed(self):
        r"""IsFixed(ChChassis self) -> bool"""
        return _vehicle.ChChassis_IsFixed(self)

    def HasBushings(self):
        r"""HasBushings(ChChassis self) -> bool"""
        return _vehicle.ChChassis_HasBushings(self)

    def AddMarker(self, name, pos):
        r"""AddMarker(ChChassis self, std::string const & name, ChCoordsysD pos)"""
        return _vehicle.ChChassis_AddMarker(self, name, pos)

    def GetMarkers(self):
        r"""GetMarkers(ChChassis self) -> ChMarkerList"""
        return _vehicle.ChChassis_GetMarkers(self)

    def SetAerodynamicDrag(self, Cd, area, air_density):
        r"""SetAerodynamicDrag(ChChassis self, double Cd, double area, double air_density)"""
        return _vehicle.ChChassis_SetAerodynamicDrag(self, Cd, area, air_density)

    def Synchronize(self, time):
        r"""Synchronize(ChChassis self, double time)"""
        return _vehicle.ChChassis_Synchronize(self, time)

    def AddJoint(self, joint):
        r"""AddJoint(ChChassis self, std::shared_ptr< ChVehicleJoint > joint)"""
        return _vehicle.ChChassis_AddJoint(self, joint)

    @staticmethod
    def RemoveJoint(joint):
        r"""RemoveJoint(std::shared_ptr< ChVehicleJoint > joint)"""
        return _vehicle.ChChassis_RemoveJoint(joint)

    def AddExternalForce(self, force):
        r"""AddExternalForce(ChChassis self, std::shared_ptr< chrono::vehicle::ChChassis::ExternalForce > force)"""
        return _vehicle.ChChassis_AddExternalForce(self, force)

    def InitializeInertiaProperties(self):
        r"""InitializeInertiaProperties(ChChassis self)"""
        return _vehicle.ChChassis_InitializeInertiaProperties(self)

    def UpdateInertiaProperties(self):
        r"""UpdateInertiaProperties(ChChassis self)"""
        return _vehicle.ChChassis_UpdateInertiaProperties(self)

# Register ChChassis in _vehicle:
_vehicle.ChChassis_swigregister(ChChassis)

def ChChassis_RemoveJoint(joint):
    r"""ChChassis_RemoveJoint(std::shared_ptr< ChVehicleJoint > joint)"""
    return _vehicle.ChChassis_RemoveJoint(joint)

class ExternalForce(object):
    r"""Proxy of C++ chrono::vehicle::ChChassis::ExternalForce class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ExternalForce

    def Update(self, time, chassis, force, point):
        r"""Update(ExternalForce self, double time, ChChassis chassis, ChVectorD force, ChVectorD point)"""
        return _vehicle.ExternalForce_Update(self, time, chassis, force, point)

    def __init__(self):
        r"""__init__(ExternalForce self) -> ExternalForce"""
        _vehicle.ExternalForce_swiginit(self, _vehicle.new_ExternalForce())

# Register ExternalForce in _vehicle:
_vehicle.ExternalForce_swigregister(ExternalForce)

class ChChassisRear(ChChassis):
    r"""Proxy of C++ chrono::vehicle::ChChassisRear class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChChassisRear

    def GetLocalPosFrontConnector(self):
        r"""GetLocalPosFrontConnector(ChChassisRear self) -> ChVectorD"""
        return _vehicle.ChChassisRear_GetLocalPosFrontConnector(self)

    def Initialize(self, chassis, collision_family=0):
        r"""Initialize(ChChassisRear self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, int collision_family=0)"""
        return _vehicle.ChChassisRear_Initialize(self, chassis, collision_family)

# Register ChChassisRear in _vehicle:
_vehicle.ChChassisRear_swigregister(ChChassisRear)

class ChChassisConnector(ChPart):
    r"""Proxy of C++ chrono::vehicle::ChChassisConnector class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChChassisConnector

    def Initialize(self, front, rear):
        r"""Initialize(ChChassisConnector self, std::shared_ptr< chrono::vehicle::ChChassis > front, std::shared_ptr< chrono::vehicle::ChChassisRear > rear)"""
        return _vehicle.ChChassisConnector_Initialize(self, front, rear)

    def Synchronize(self, time, driver_inputs):
        r"""Synchronize(ChChassisConnector self, double time, DriverInputs driver_inputs)"""
        return _vehicle.ChChassisConnector_Synchronize(self, time, driver_inputs)

# Register ChChassisConnector in _vehicle:
_vehicle.ChChassisConnector_swigregister(ChChassisConnector)

class ChRigidChassis(ChChassis):
    r"""Proxy of C++ chrono::vehicle::ChRigidChassis class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChRigidChassis

    def GetTemplateName(self):
        r"""GetTemplateName(ChRigidChassis self) -> std::string"""
        return _vehicle.ChRigidChassis_GetTemplateName(self)

    def HasCollision(self):
        r"""HasCollision(ChRigidChassis self) -> bool"""
        return _vehicle.ChRigidChassis_HasCollision(self)

    def HasPrimitives(self):
        r"""HasPrimitives(ChRigidChassis self) -> bool"""
        return _vehicle.ChRigidChassis_HasPrimitives(self)

    def HasMesh(self):
        r"""HasMesh(ChRigidChassis self) -> bool"""
        return _vehicle.ChRigidChassis_HasMesh(self)

    def GetMeshFilename(self):
        r"""GetMeshFilename(ChRigidChassis self) -> std::string const &"""
        return _vehicle.ChRigidChassis_GetMeshFilename(self)

    def Initialize(self, system, chassisPos, chassisFwdVel, collision_family=0):
        r"""Initialize(ChRigidChassis self, ChSystem system, ChCoordsysD chassisPos, double chassisFwdVel, int collision_family=0)"""
        return _vehicle.ChRigidChassis_Initialize(self, system, chassisPos, chassisFwdVel, collision_family)

    def SetCollide(self, state):
        r"""SetCollide(ChRigidChassis self, bool state)"""
        return _vehicle.ChRigidChassis_SetCollide(self, state)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChRigidChassis self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChRigidChassis_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChRigidChassis self)"""
        return _vehicle.ChRigidChassis_RemoveVisualizationAssets(self)

# Register ChRigidChassis in _vehicle:
_vehicle.ChRigidChassis_swigregister(ChRigidChassis)

class ChRigidChassisRear(ChChassisRear):
    r"""Proxy of C++ chrono::vehicle::ChRigidChassisRear class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChRigidChassisRear

    def GetTemplateName(self):
        r"""GetTemplateName(ChRigidChassisRear self) -> std::string"""
        return _vehicle.ChRigidChassisRear_GetTemplateName(self)

    def HasCollision(self):
        r"""HasCollision(ChRigidChassisRear self) -> bool"""
        return _vehicle.ChRigidChassisRear_HasCollision(self)

    def HasPrimitives(self):
        r"""HasPrimitives(ChRigidChassisRear self) -> bool"""
        return _vehicle.ChRigidChassisRear_HasPrimitives(self)

    def HasMesh(self):
        r"""HasMesh(ChRigidChassisRear self) -> bool"""
        return _vehicle.ChRigidChassisRear_HasMesh(self)

    def GetMeshFilename(self):
        r"""GetMeshFilename(ChRigidChassisRear self) -> std::string const &"""
        return _vehicle.ChRigidChassisRear_GetMeshFilename(self)

    def SetCollide(self, state):
        r"""SetCollide(ChRigidChassisRear self, bool state)"""
        return _vehicle.ChRigidChassisRear_SetCollide(self, state)

    def Initialize(self, chassis, collision_family=0):
        r"""Initialize(ChRigidChassisRear self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, int collision_family=0)"""
        return _vehicle.ChRigidChassisRear_Initialize(self, chassis, collision_family)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChRigidChassisRear self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChRigidChassisRear_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChRigidChassisRear self)"""
        return _vehicle.ChRigidChassisRear_RemoveVisualizationAssets(self)

# Register ChRigidChassisRear in _vehicle:
_vehicle.ChRigidChassisRear_swigregister(ChRigidChassisRear)

class ChChassisConnectorArticulated(ChChassisConnector):
    r"""Proxy of C++ chrono::vehicle::ChChassisConnectorArticulated class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChChassisConnectorArticulated

    def GetTemplateName(self):
        r"""GetTemplateName(ChChassisConnectorArticulated self) -> std::string"""
        return _vehicle.ChChassisConnectorArticulated_GetTemplateName(self)

    def Initialize(self, front, rear):
        r"""Initialize(ChChassisConnectorArticulated self, std::shared_ptr< chrono::vehicle::ChChassis > front, std::shared_ptr< chrono::vehicle::ChChassisRear > rear)"""
        return _vehicle.ChChassisConnectorArticulated_Initialize(self, front, rear)

    def Synchronize(self, time, driver_inputs):
        r"""Synchronize(ChChassisConnectorArticulated self, double time, DriverInputs driver_inputs)"""
        return _vehicle.ChChassisConnectorArticulated_Synchronize(self, time, driver_inputs)

# Register ChChassisConnectorArticulated in _vehicle:
_vehicle.ChChassisConnectorArticulated_swigregister(ChChassisConnectorArticulated)

class ChChassisConnectorTorsion(ChChassisConnector):
    r"""Proxy of C++ chrono::vehicle::ChChassisConnectorTorsion class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChChassisConnectorTorsion

    def GetTemplateName(self):
        r"""GetTemplateName(ChChassisConnectorTorsion self) -> std::string"""
        return _vehicle.ChChassisConnectorTorsion_GetTemplateName(self)

    def Initialize(self, front, rear):
        r"""Initialize(ChChassisConnectorTorsion self, std::shared_ptr< chrono::vehicle::ChChassis > front, std::shared_ptr< chrono::vehicle::ChChassisRear > rear)"""
        return _vehicle.ChChassisConnectorTorsion_Initialize(self, front, rear)

# Register ChChassisConnectorTorsion in _vehicle:
_vehicle.ChChassisConnectorTorsion_swigregister(ChChassisConnectorTorsion)

class ChChassisConnectorHitch(ChChassisConnector):
    r"""Proxy of C++ chrono::vehicle::ChChassisConnectorHitch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(ChChassisConnectorHitch self, std::string const & name) -> ChChassisConnectorHitch"""
        _vehicle.ChChassisConnectorHitch_swiginit(self, _vehicle.new_ChChassisConnectorHitch(name))
    __swig_destroy__ = _vehicle.delete_ChChassisConnectorHitch

    def GetTemplateName(self):
        r"""GetTemplateName(ChChassisConnectorHitch self) -> std::string"""
        return _vehicle.ChChassisConnectorHitch_GetTemplateName(self)

    def Initialize(self, front, rear):
        r"""Initialize(ChChassisConnectorHitch self, std::shared_ptr< chrono::vehicle::ChChassis > front, std::shared_ptr< chrono::vehicle::ChChassisRear > rear)"""
        return _vehicle.ChChassisConnectorHitch_Initialize(self, front, rear)

# Register ChChassisConnectorHitch in _vehicle:
_vehicle.ChChassisConnectorHitch_swigregister(ChChassisConnectorHitch)

class RigidChassis(ChRigidChassis):
    r"""Proxy of C++ chrono::vehicle::RigidChassis class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RigidChassis self, std::string const & filename) -> RigidChassis
        __init__(RigidChassis self, rapidjson::Document const & d) -> RigidChassis
        """
        _vehicle.RigidChassis_swiginit(self, _vehicle.new_RigidChassis(*args))
    __swig_destroy__ = _vehicle.delete_RigidChassis

    def GetLocalPosRearConnector(self):
        r"""GetLocalPosRearConnector(RigidChassis self) -> ChVectorD"""
        return _vehicle.RigidChassis_GetLocalPosRearConnector(self)

    def GetLocalDriverCoordsys(self):
        r"""GetLocalDriverCoordsys(RigidChassis self) -> ChCoordsysD"""
        return _vehicle.RigidChassis_GetLocalDriverCoordsys(self)

# Register RigidChassis in _vehicle:
_vehicle.RigidChassis_swigregister(RigidChassis)

class RigidChassisRear(ChRigidChassisRear):
    r"""Proxy of C++ chrono::vehicle::RigidChassisRear class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RigidChassisRear self, std::string const & filename) -> RigidChassisRear
        __init__(RigidChassisRear self, rapidjson::Document const & d) -> RigidChassisRear
        """
        _vehicle.RigidChassisRear_swiginit(self, _vehicle.new_RigidChassisRear(*args))
    __swig_destroy__ = _vehicle.delete_RigidChassisRear

    def GetLocalPosFrontConnector(self):
        r"""GetLocalPosFrontConnector(RigidChassisRear self) -> ChVectorD"""
        return _vehicle.RigidChassisRear_GetLocalPosFrontConnector(self)

    def GetLocalPosRearConnector(self):
        r"""GetLocalPosRearConnector(RigidChassisRear self) -> ChVectorD"""
        return _vehicle.RigidChassisRear_GetLocalPosRearConnector(self)

# Register RigidChassisRear in _vehicle:
_vehicle.RigidChassisRear_swigregister(RigidChassisRear)

class ChassisConnectorArticulated(ChChassisConnectorArticulated):
    r"""Proxy of C++ chrono::vehicle::ChassisConnectorArticulated class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChassisConnectorArticulated self, std::string const & filename) -> ChassisConnectorArticulated
        __init__(ChassisConnectorArticulated self, rapidjson::Document const & d) -> ChassisConnectorArticulated
        """
        _vehicle.ChassisConnectorArticulated_swiginit(self, _vehicle.new_ChassisConnectorArticulated(*args))
    __swig_destroy__ = _vehicle.delete_ChassisConnectorArticulated

    def GetMaxSteeringAngle(self):
        r"""GetMaxSteeringAngle(ChassisConnectorArticulated self) -> double"""
        return _vehicle.ChassisConnectorArticulated_GetMaxSteeringAngle(self)

# Register ChassisConnectorArticulated in _vehicle:
_vehicle.ChassisConnectorArticulated_swigregister(ChassisConnectorArticulated)

class ChassisConnectorHitch(ChChassisConnectorHitch):
    r"""Proxy of C++ chrono::vehicle::ChassisConnectorHitch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChassisConnectorHitch self, std::string const & filename) -> ChassisConnectorHitch
        __init__(ChassisConnectorHitch self, rapidjson::Document const & d) -> ChassisConnectorHitch
        """
        _vehicle.ChassisConnectorHitch_swiginit(self, _vehicle.new_ChassisConnectorHitch(*args))
    __swig_destroy__ = _vehicle.delete_ChassisConnectorHitch

# Register ChassisConnectorHitch in _vehicle:
_vehicle.ChassisConnectorHitch_swigregister(ChassisConnectorHitch)

class ChassisConnectorTorsion(ChChassisConnectorTorsion):
    r"""Proxy of C++ chrono::vehicle::ChassisConnectorTorsion class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChassisConnectorTorsion self, std::string const & filename) -> ChassisConnectorTorsion
        __init__(ChassisConnectorTorsion self, rapidjson::Document const & d) -> ChassisConnectorTorsion
        """
        _vehicle.ChassisConnectorTorsion_swiginit(self, _vehicle.new_ChassisConnectorTorsion(*args))
    __swig_destroy__ = _vehicle.delete_ChassisConnectorTorsion

    def GetTorsionStiffness(self):
        r"""GetTorsionStiffness(ChassisConnectorTorsion self) -> double"""
        return _vehicle.ChassisConnectorTorsion_GetTorsionStiffness(self)

# Register ChassisConnectorTorsion in _vehicle:
_vehicle.ChassisConnectorTorsion_swigregister(ChassisConnectorTorsion)

class Generic_Chassis(ChRigidChassis):
    r"""Proxy of C++ chrono::vehicle::generic::Generic_Chassis class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, fixed=False):
        r"""__init__(Generic_Chassis self, std::string const & name, bool fixed=False) -> Generic_Chassis"""
        _vehicle.Generic_Chassis_swiginit(self, _vehicle.new_Generic_Chassis(name, fixed))
    __swig_destroy__ = _vehicle.delete_Generic_Chassis

    def GetLocalDriverCoordsys(self):
        r"""GetLocalDriverCoordsys(Generic_Chassis self) -> ChCoordsysD"""
        return _vehicle.Generic_Chassis_GetLocalDriverCoordsys(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(Generic_Chassis self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.Generic_Chassis_AddVisualizationAssets(self, vis)

# Register Generic_Chassis in _vehicle:
_vehicle.Generic_Chassis_swigregister(Generic_Chassis)

class HMMWV_Chassis(ChRigidChassis):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_Chassis class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(HMMWV_Chassis self, std::string const & name, bool fixed=False, chrono::vehicle::CollisionType chassis_collision_type=NONE) -> HMMWV_Chassis"""
        _vehicle.HMMWV_Chassis_swiginit(self, _vehicle.new_HMMWV_Chassis(*args))
    __swig_destroy__ = _vehicle.delete_HMMWV_Chassis

    def GetLocalPosRearConnector(self):
        r"""GetLocalPosRearConnector(HMMWV_Chassis self) -> ChVectorD"""
        return _vehicle.HMMWV_Chassis_GetLocalPosRearConnector(self)

    def GetLocalDriverCoordsys(self):
        r"""GetLocalDriverCoordsys(HMMWV_Chassis self) -> ChCoordsysD"""
        return _vehicle.HMMWV_Chassis_GetLocalDriverCoordsys(self)

# Register HMMWV_Chassis in _vehicle:
_vehicle.HMMWV_Chassis_swigregister(HMMWV_Chassis)

class Sedan_Chassis(ChRigidChassis):
    r"""Proxy of C++ chrono::vehicle::sedan::Sedan_Chassis class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Sedan_Chassis self, std::string const & name, bool fixed=False, chrono::vehicle::CollisionType chassis_collision_type=NONE) -> Sedan_Chassis"""
        _vehicle.Sedan_Chassis_swiginit(self, _vehicle.new_Sedan_Chassis(*args))
    __swig_destroy__ = _vehicle.delete_Sedan_Chassis

    def GetLocalPosRearConnector(self):
        r"""GetLocalPosRearConnector(Sedan_Chassis self) -> ChVectorD"""
        return _vehicle.Sedan_Chassis_GetLocalPosRearConnector(self)

    def GetLocalDriverCoordsys(self):
        r"""GetLocalDriverCoordsys(Sedan_Chassis self) -> ChCoordsysD"""
        return _vehicle.Sedan_Chassis_GetLocalDriverCoordsys(self)

# Register Sedan_Chassis in _vehicle:
_vehicle.Sedan_Chassis_swigregister(Sedan_Chassis)

class CityBus_Chassis(ChRigidChassis):
    r"""Proxy of C++ chrono::vehicle::citybus::CityBus_Chassis class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(CityBus_Chassis self, std::string const & name, bool fixed=False, chrono::vehicle::CollisionType chassis_collision_type=NONE) -> CityBus_Chassis"""
        _vehicle.CityBus_Chassis_swiginit(self, _vehicle.new_CityBus_Chassis(*args))
    __swig_destroy__ = _vehicle.delete_CityBus_Chassis

    def GetLocalDriverCoordsys(self):
        r"""GetLocalDriverCoordsys(CityBus_Chassis self) -> ChCoordsysD"""
        return _vehicle.CityBus_Chassis_GetLocalDriverCoordsys(self)

# Register CityBus_Chassis in _vehicle:
_vehicle.CityBus_Chassis_swigregister(CityBus_Chassis)

class MAN_5t_Chassis(ChRigidChassis):
    r"""Proxy of C++ chrono::vehicle::man::MAN_5t_Chassis class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(MAN_5t_Chassis self, std::string const & name, bool fixed=False, chrono::vehicle::CollisionType chassis_collision_type=NONE) -> MAN_5t_Chassis"""
        _vehicle.MAN_5t_Chassis_swiginit(self, _vehicle.new_MAN_5t_Chassis(*args))
    __swig_destroy__ = _vehicle.delete_MAN_5t_Chassis

    def GetLocalDriverCoordsys(self):
        r"""GetLocalDriverCoordsys(MAN_5t_Chassis self) -> ChCoordsysD"""
        return _vehicle.MAN_5t_Chassis_GetLocalDriverCoordsys(self)

# Register MAN_5t_Chassis in _vehicle:
_vehicle.MAN_5t_Chassis_swigregister(MAN_5t_Chassis)

class MAN_7t_Chassis(ChRigidChassis):
    r"""Proxy of C++ chrono::vehicle::man::MAN_7t_Chassis class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(MAN_7t_Chassis self, std::string const & name, bool fixed=False, chrono::vehicle::CollisionType chassis_collision_type=NONE) -> MAN_7t_Chassis"""
        _vehicle.MAN_7t_Chassis_swiginit(self, _vehicle.new_MAN_7t_Chassis(*args))
    __swig_destroy__ = _vehicle.delete_MAN_7t_Chassis

    def GetLocalDriverCoordsys(self):
        r"""GetLocalDriverCoordsys(MAN_7t_Chassis self) -> ChCoordsysD"""
        return _vehicle.MAN_7t_Chassis_GetLocalDriverCoordsys(self)

# Register MAN_7t_Chassis in _vehicle:
_vehicle.MAN_7t_Chassis_swigregister(MAN_7t_Chassis)

class MAN_10t_Chassis(ChRigidChassis):
    r"""Proxy of C++ chrono::vehicle::man::MAN_10t_Chassis class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(MAN_10t_Chassis self, std::string const & name, bool fixed=False, chrono::vehicle::CollisionType chassis_collision_type=NONE) -> MAN_10t_Chassis"""
        _vehicle.MAN_10t_Chassis_swiginit(self, _vehicle.new_MAN_10t_Chassis(*args))
    __swig_destroy__ = _vehicle.delete_MAN_10t_Chassis

    def GetLocalDriverCoordsys(self):
        r"""GetLocalDriverCoordsys(MAN_10t_Chassis self) -> ChCoordsysD"""
        return _vehicle.MAN_10t_Chassis_GetLocalDriverCoordsys(self)

# Register MAN_10t_Chassis in _vehicle:
_vehicle.MAN_10t_Chassis_swigregister(MAN_10t_Chassis)

class UAZBUS_Chassis(ChRigidChassis):
    r"""Proxy of C++ chrono::vehicle::uaz::UAZBUS_Chassis class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(UAZBUS_Chassis self, std::string const & name, bool fixed=False, chrono::vehicle::CollisionType chassis_collision_type=NONE) -> UAZBUS_Chassis"""
        _vehicle.UAZBUS_Chassis_swiginit(self, _vehicle.new_UAZBUS_Chassis(*args))
    __swig_destroy__ = _vehicle.delete_UAZBUS_Chassis

    def GetLocalPosRearConnector(self):
        r"""GetLocalPosRearConnector(UAZBUS_Chassis self) -> ChVectorD"""
        return _vehicle.UAZBUS_Chassis_GetLocalPosRearConnector(self)

    def GetLocalDriverCoordsys(self):
        r"""GetLocalDriverCoordsys(UAZBUS_Chassis self) -> ChCoordsysD"""
        return _vehicle.UAZBUS_Chassis_GetLocalDriverCoordsys(self)

# Register UAZBUS_Chassis in _vehicle:
_vehicle.UAZBUS_Chassis_swigregister(UAZBUS_Chassis)

class Gator_Chassis(ChRigidChassis):
    r"""Proxy of C++ chrono::vehicle::gator::Gator_Chassis class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Gator_Chassis self, std::string const & name, bool fixed=False, chrono::vehicle::CollisionType chassis_collision_type=NONE) -> Gator_Chassis"""
        _vehicle.Gator_Chassis_swiginit(self, _vehicle.new_Gator_Chassis(*args))
    __swig_destroy__ = _vehicle.delete_Gator_Chassis

    def GetLocalDriverCoordsys(self):
        r"""GetLocalDriverCoordsys(Gator_Chassis self) -> ChCoordsysD"""
        return _vehicle.Gator_Chassis_GetLocalDriverCoordsys(self)

# Register Gator_Chassis in _vehicle:
_vehicle.Gator_Chassis_swigregister(Gator_Chassis)

class RCCar_Chassis(ChRigidChassis):
    r"""Proxy of C++ chrono::vehicle::rccar::RCCar_Chassis class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(RCCar_Chassis self, std::string const & name, bool fixed=False, chrono::vehicle::CollisionType chassis_collision_type=NONE) -> RCCar_Chassis"""
        _vehicle.RCCar_Chassis_swiginit(self, _vehicle.new_RCCar_Chassis(*args))
    __swig_destroy__ = _vehicle.delete_RCCar_Chassis

    def GetLocalDriverCoordsys(self):
        r"""GetLocalDriverCoordsys(RCCar_Chassis self) -> ChCoordsysD"""
        return _vehicle.RCCar_Chassis_GetLocalDriverCoordsys(self)

# Register RCCar_Chassis in _vehicle:
_vehicle.RCCar_Chassis_swigregister(RCCar_Chassis)

class FEDA_Chassis(ChRigidChassis):
    r"""Proxy of C++ chrono::vehicle::feda::FEDA_Chassis class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(FEDA_Chassis self, std::string const & name, bool fixed=False, chrono::vehicle::CollisionType chassis_collision_type=NONE) -> FEDA_Chassis"""
        _vehicle.FEDA_Chassis_swiginit(self, _vehicle.new_FEDA_Chassis(*args))
    __swig_destroy__ = _vehicle.delete_FEDA_Chassis

    def GetLocalDriverCoordsys(self):
        r"""GetLocalDriverCoordsys(FEDA_Chassis self) -> ChCoordsysD"""
        return _vehicle.FEDA_Chassis_GetLocalDriverCoordsys(self)

# Register FEDA_Chassis in _vehicle:
_vehicle.FEDA_Chassis_swigregister(FEDA_Chassis)

class M113_Chassis(ChRigidChassis):
    r"""Proxy of C++ chrono::vehicle::m113::M113_Chassis class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(M113_Chassis self, std::string const & name, bool fixed=False, chrono::vehicle::CollisionType chassis_collision_type=NONE) -> M113_Chassis"""
        _vehicle.M113_Chassis_swiginit(self, _vehicle.new_M113_Chassis(*args))
    __swig_destroy__ = _vehicle.delete_M113_Chassis

    def GetLocalDriverCoordsys(self):
        r"""GetLocalDriverCoordsys(M113_Chassis self) -> ChCoordsysD"""
        return _vehicle.M113_Chassis_GetLocalDriverCoordsys(self)

# Register M113_Chassis in _vehicle:
_vehicle.M113_Chassis_swigregister(M113_Chassis)

class ChVehicle(object):
    r"""Proxy of C++ chrono::vehicle::ChVehicle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChVehicle

    def GetName(self):
        r"""GetName(ChVehicle self) -> std::string const &"""
        return _vehicle.ChVehicle_GetName(self)

    def SetName(self, name):
        r"""SetName(ChVehicle self, std::string const & name)"""
        return _vehicle.ChVehicle_SetName(self, name)

    def GetTemplateName(self):
        r"""GetTemplateName(ChVehicle self) -> std::string"""
        return _vehicle.ChVehicle_GetTemplateName(self)

    def GetSystem(self):
        r"""GetSystem(ChVehicle self) -> ChSystem"""
        return _vehicle.ChVehicle_GetSystem(self)

    def GetChTime(self):
        r"""GetChTime(ChVehicle self) -> double"""
        return _vehicle.ChVehicle_GetChTime(self)

    def GetChassis(self):
        r"""GetChassis(ChVehicle self) -> std::shared_ptr< chrono::vehicle::ChChassis >"""
        return _vehicle.ChVehicle_GetChassis(self)

    def GetChassisRear(self, id):
        r"""GetChassisRear(ChVehicle self, int id) -> std::shared_ptr< chrono::vehicle::ChChassisRear >"""
        return _vehicle.ChVehicle_GetChassisRear(self, id)

    def GetChassisConnector(self, id):
        r"""GetChassisConnector(ChVehicle self, int id) -> std::shared_ptr< chrono::vehicle::ChChassisConnector >"""
        return _vehicle.ChVehicle_GetChassisConnector(self, id)

    def GetChassisBody(self):
        r"""GetChassisBody(ChVehicle self) -> std::shared_ptr< chrono::ChBodyAuxRef >"""
        return _vehicle.ChVehicle_GetChassisBody(self)

    def GetChassisRearBody(self, id):
        r"""GetChassisRearBody(ChVehicle self, int id) -> std::shared_ptr< chrono::ChBodyAuxRef >"""
        return _vehicle.ChVehicle_GetChassisRearBody(self, id)

    def GetPowertrainAssembly(self):
        r"""GetPowertrainAssembly(ChVehicle self) -> std::shared_ptr< chrono::vehicle::ChPowertrainAssembly >"""
        return _vehicle.ChVehicle_GetPowertrainAssembly(self)

    def GetEngine(self):
        r"""GetEngine(ChVehicle self) -> std::shared_ptr< ChEngine >"""
        return _vehicle.ChVehicle_GetEngine(self)

    def GetTransmission(self):
        r"""GetTransmission(ChVehicle self) -> std::shared_ptr< ChTransmission >"""
        return _vehicle.ChVehicle_GetTransmission(self)

    def GetMass(self):
        r"""GetMass(ChVehicle self) -> double"""
        return _vehicle.ChVehicle_GetMass(self)

    def GetCOMFrame(self):
        r"""GetCOMFrame(ChVehicle self) -> chrono::ChFrame< > const &"""
        return _vehicle.ChVehicle_GetCOMFrame(self)

    def GetInertia(self):
        r"""GetInertia(ChVehicle self) -> ChMatrix33D"""
        return _vehicle.ChVehicle_GetInertia(self)

    def GetTransform(self):
        r"""GetTransform(ChVehicle self) -> chrono::ChFrame< > const &"""
        return _vehicle.ChVehicle_GetTransform(self)

    def GetPos(self):
        r"""GetPos(ChVehicle self) -> ChVectorD"""
        return _vehicle.ChVehicle_GetPos(self)

    def GetRot(self):
        r"""GetRot(ChVehicle self) -> ChQuaternionD"""
        return _vehicle.ChVehicle_GetRot(self)

    def GetSpeed(self):
        r"""GetSpeed(ChVehicle self) -> double"""
        return _vehicle.ChVehicle_GetSpeed(self)

    def GetPointLocation(self, locpos):
        r"""GetPointLocation(ChVehicle self, ChVectorD locpos) -> ChVectorD"""
        return _vehicle.ChVehicle_GetPointLocation(self, locpos)

    def GetPointVelocity(self, locpos):
        r"""GetPointVelocity(ChVehicle self, ChVectorD locpos) -> ChVectorD"""
        return _vehicle.ChVehicle_GetPointVelocity(self, locpos)

    def GetPointAcceleration(self, locpos):
        r"""GetPointAcceleration(ChVehicle self, ChVectorD locpos) -> ChVectorD"""
        return _vehicle.ChVehicle_GetPointAcceleration(self, locpos)

    def GetDriverPos(self):
        r"""GetDriverPos(ChVehicle self) -> ChVectorD"""
        return _vehicle.ChVehicle_GetDriverPos(self)

    def EnableRealtime(self, val):
        r"""EnableRealtime(ChVehicle self, bool val)"""
        return _vehicle.ChVehicle_EnableRealtime(self, val)

    def GetRTF(self):
        r"""GetRTF(ChVehicle self) -> double"""
        return _vehicle.ChVehicle_GetRTF(self)

    def SetCollisionSystemType(self, collsys_type):
        r"""SetCollisionSystemType(ChVehicle self, chrono::collision::ChCollisionSystemType collsys_type)"""
        return _vehicle.ChVehicle_SetCollisionSystemType(self, collsys_type)

    def SetOutput(self, type, out_dir, out_name, output_step):
        r"""SetOutput(ChVehicle self, chrono::vehicle::ChVehicleOutput::Type type, std::string const & out_dir, std::string const & out_name, double output_step)"""
        return _vehicle.ChVehicle_SetOutput(self, type, out_dir, out_name, output_step)

    def Initialize(self, chassisPos, chassisFwdVel=0):
        r"""Initialize(ChVehicle self, ChCoordsysD chassisPos, double chassisFwdVel=0)"""
        return _vehicle.ChVehicle_Initialize(self, chassisPos, chassisFwdVel)

    def InitializePowertrain(self, powertrain):
        r"""InitializePowertrain(ChVehicle self, std::shared_ptr< chrono::vehicle::ChPowertrainAssembly > powertrain)"""
        return _vehicle.ChVehicle_InitializePowertrain(self, powertrain)

    def InitializeInertiaProperties(self):
        r"""InitializeInertiaProperties(ChVehicle self)"""
        return _vehicle.ChVehicle_InitializeInertiaProperties(self)

    def SetChassisVisualizationType(self, vis):
        r"""SetChassisVisualizationType(ChVehicle self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChVehicle_SetChassisVisualizationType(self, vis)

    def SetChassisRearVisualizationType(self, vis):
        r"""SetChassisRearVisualizationType(ChVehicle self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChVehicle_SetChassisRearVisualizationType(self, vis)

    def SetChassisCollide(self, state):
        r"""SetChassisCollide(ChVehicle self, bool state)"""
        return _vehicle.ChVehicle_SetChassisCollide(self, state)

    def SetChassisVehicleCollide(self, state):
        r"""SetChassisVehicleCollide(ChVehicle self, bool state)"""
        return _vehicle.ChVehicle_SetChassisVehicleCollide(self, state)

    def SetChassisOutput(self, state):
        r"""SetChassisOutput(ChVehicle self, bool state)"""
        return _vehicle.ChVehicle_SetChassisOutput(self, state)

    def HasBushings(self):
        r"""HasBushings(ChVehicle self) -> bool"""
        return _vehicle.ChVehicle_HasBushings(self)

    def Advance(self, step):
        r"""Advance(ChVehicle self, double step)"""
        return _vehicle.ChVehicle_Advance(self, step)

    def LogConstraintViolations(self):
        r"""LogConstraintViolations(ChVehicle self)"""
        return _vehicle.ChVehicle_LogConstraintViolations(self)

    def ExportComponentList(self, *args):
        r"""
        ExportComponentList(ChVehicle self) -> std::string
        ExportComponentList(ChVehicle self, std::string const & filename)
        """
        return _vehicle.ChVehicle_ExportComponentList(self, *args)

    def Output(self, frame, database):
        r"""Output(ChVehicle self, int frame, ChVehicleOutput database)"""
        return _vehicle.ChVehicle_Output(self, frame, database)

# Register ChVehicle in _vehicle:
_vehicle.ChVehicle_swigregister(ChVehicle)

class vector_Entry(object):
    r"""Proxy of C++ std::vector< chrono::vehicle::ChDataDriver::Entry > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_Entry self) -> SwigPyIterator"""
        return _vehicle.vector_Entry_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_Entry self) -> bool"""
        return _vehicle.vector_Entry___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_Entry self) -> bool"""
        return _vehicle.vector_Entry___bool__(self)

    def __len__(self):
        r"""__len__(vector_Entry self) -> std::vector< chrono::vehicle::ChDataDriver::Entry >::size_type"""
        return _vehicle.vector_Entry___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vector_Entry self, std::vector< chrono::vehicle::ChDataDriver::Entry >::difference_type i, std::vector< chrono::vehicle::ChDataDriver::Entry >::difference_type j) -> vector_Entry"""
        return _vehicle.vector_Entry___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_Entry self, std::vector< chrono::vehicle::ChDataDriver::Entry >::difference_type i, std::vector< chrono::vehicle::ChDataDriver::Entry >::difference_type j)
        __setslice__(vector_Entry self, std::vector< chrono::vehicle::ChDataDriver::Entry >::difference_type i, std::vector< chrono::vehicle::ChDataDriver::Entry >::difference_type j, vector_Entry v)
        """
        return _vehicle.vector_Entry___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vector_Entry self, std::vector< chrono::vehicle::ChDataDriver::Entry >::difference_type i, std::vector< chrono::vehicle::ChDataDriver::Entry >::difference_type j)"""
        return _vehicle.vector_Entry___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_Entry self, std::vector< chrono::vehicle::ChDataDriver::Entry >::difference_type i)
        __delitem__(vector_Entry self, PySliceObject * slice)
        """
        return _vehicle.vector_Entry___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_Entry self, PySliceObject * slice) -> vector_Entry
        __getitem__(vector_Entry self, std::vector< chrono::vehicle::ChDataDriver::Entry >::difference_type i) -> DataDriverEntry
        """
        return _vehicle.vector_Entry___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_Entry self, PySliceObject * slice, vector_Entry v)
        __setitem__(vector_Entry self, PySliceObject * slice)
        __setitem__(vector_Entry self, std::vector< chrono::vehicle::ChDataDriver::Entry >::difference_type i, DataDriverEntry x)
        """
        return _vehicle.vector_Entry___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_Entry self) -> DataDriverEntry"""
        return _vehicle.vector_Entry_pop(self)

    def append(self, x):
        r"""append(vector_Entry self, DataDriverEntry x)"""
        return _vehicle.vector_Entry_append(self, x)

    def empty(self):
        r"""empty(vector_Entry self) -> bool"""
        return _vehicle.vector_Entry_empty(self)

    def size(self):
        r"""size(vector_Entry self) -> std::vector< chrono::vehicle::ChDataDriver::Entry >::size_type"""
        return _vehicle.vector_Entry_size(self)

    def swap(self, v):
        r"""swap(vector_Entry self, vector_Entry v)"""
        return _vehicle.vector_Entry_swap(self, v)

    def begin(self):
        r"""begin(vector_Entry self) -> std::vector< chrono::vehicle::ChDataDriver::Entry >::iterator"""
        return _vehicle.vector_Entry_begin(self)

    def end(self):
        r"""end(vector_Entry self) -> std::vector< chrono::vehicle::ChDataDriver::Entry >::iterator"""
        return _vehicle.vector_Entry_end(self)

    def rbegin(self):
        r"""rbegin(vector_Entry self) -> std::vector< chrono::vehicle::ChDataDriver::Entry >::reverse_iterator"""
        return _vehicle.vector_Entry_rbegin(self)

    def rend(self):
        r"""rend(vector_Entry self) -> std::vector< chrono::vehicle::ChDataDriver::Entry >::reverse_iterator"""
        return _vehicle.vector_Entry_rend(self)

    def clear(self):
        r"""clear(vector_Entry self)"""
        return _vehicle.vector_Entry_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_Entry self) -> std::vector< chrono::vehicle::ChDataDriver::Entry >::allocator_type"""
        return _vehicle.vector_Entry_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_Entry self)"""
        return _vehicle.vector_Entry_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_Entry self, std::vector< chrono::vehicle::ChDataDriver::Entry >::iterator pos) -> std::vector< chrono::vehicle::ChDataDriver::Entry >::iterator
        erase(vector_Entry self, std::vector< chrono::vehicle::ChDataDriver::Entry >::iterator first, std::vector< chrono::vehicle::ChDataDriver::Entry >::iterator last) -> std::vector< chrono::vehicle::ChDataDriver::Entry >::iterator
        """
        return _vehicle.vector_Entry_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_Entry self) -> vector_Entry
        __init__(vector_Entry self, vector_Entry other) -> vector_Entry
        __init__(vector_Entry self, std::vector< chrono::vehicle::ChDataDriver::Entry >::size_type size) -> vector_Entry
        __init__(vector_Entry self, std::vector< chrono::vehicle::ChDataDriver::Entry >::size_type size, DataDriverEntry value) -> vector_Entry
        """
        _vehicle.vector_Entry_swiginit(self, _vehicle.new_vector_Entry(*args))

    def push_back(self, x):
        r"""push_back(vector_Entry self, DataDriverEntry x)"""
        return _vehicle.vector_Entry_push_back(self, x)

    def front(self):
        r"""front(vector_Entry self) -> DataDriverEntry"""
        return _vehicle.vector_Entry_front(self)

    def back(self):
        r"""back(vector_Entry self) -> DataDriverEntry"""
        return _vehicle.vector_Entry_back(self)

    def assign(self, n, x):
        r"""assign(vector_Entry self, std::vector< chrono::vehicle::ChDataDriver::Entry >::size_type n, DataDriverEntry x)"""
        return _vehicle.vector_Entry_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_Entry self, std::vector< chrono::vehicle::ChDataDriver::Entry >::size_type new_size)
        resize(vector_Entry self, std::vector< chrono::vehicle::ChDataDriver::Entry >::size_type new_size, DataDriverEntry x)
        """
        return _vehicle.vector_Entry_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_Entry self, std::vector< chrono::vehicle::ChDataDriver::Entry >::iterator pos, DataDriverEntry x) -> std::vector< chrono::vehicle::ChDataDriver::Entry >::iterator
        insert(vector_Entry self, std::vector< chrono::vehicle::ChDataDriver::Entry >::iterator pos, std::vector< chrono::vehicle::ChDataDriver::Entry >::size_type n, DataDriverEntry x)
        """
        return _vehicle.vector_Entry_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vector_Entry self, std::vector< chrono::vehicle::ChDataDriver::Entry >::size_type n)"""
        return _vehicle.vector_Entry_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_Entry self) -> std::vector< chrono::vehicle::ChDataDriver::Entry >::size_type"""
        return _vehicle.vector_Entry_capacity(self)
    __swig_destroy__ = _vehicle.delete_vector_Entry

# Register vector_Entry in _vehicle:
_vehicle.vector_Entry_swigregister(vector_Entry)

class ChChaseCamera(object):
    r"""Proxy of C++ chrono::utils::ChChaseCamera class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Chase = _vehicle.ChChaseCamera_Chase
    
    Follow = _vehicle.ChChaseCamera_Follow
    
    Track = _vehicle.ChChaseCamera_Track
    
    Inside = _vehicle.ChChaseCamera_Inside
    
    Free = _vehicle.ChChaseCamera_Free
    

    def __init__(self, chassis):
        r"""__init__(ChChaseCamera self, std::shared_ptr< chrono::ChBody > chassis) -> ChChaseCamera"""
        _vehicle.ChChaseCamera_swiginit(self, _vehicle.new_ChChaseCamera(chassis))
    __swig_destroy__ = _vehicle.delete_ChChaseCamera

    def Initialize(self, *args):
        r"""Initialize(ChChaseCamera self, ChVectorD ptOnChassis, ChCoordsysD driverCoordsys, double chaseDist, double chaseHeight, ChVectorD up=chrono::ChVector< double >(0, 0, 1), ChVectorD fwd=chrono::ChVector< double >(1, 0, 0))"""
        return _vehicle.ChChaseCamera_Initialize(self, *args)

    def Update(self, step):
        r"""Update(ChChaseCamera self, double step)"""
        return _vehicle.ChChaseCamera_Update(self, step)

    def Zoom(self, val):
        r"""Zoom(ChChaseCamera self, int val)"""
        return _vehicle.ChChaseCamera_Zoom(self, val)

    def Turn(self, val):
        r"""Turn(ChChaseCamera self, int val)"""
        return _vehicle.ChChaseCamera_Turn(self, val)

    def Raise(self, val):
        r"""Raise(ChChaseCamera self, int val)"""
        return _vehicle.ChChaseCamera_Raise(self, val)

    def SetState(self, s):
        r"""SetState(ChChaseCamera self, chrono::utils::ChChaseCamera::State s)"""
        return _vehicle.ChChaseCamera_SetState(self, s)

    def SetCameraPos(self, pos):
        r"""SetCameraPos(ChChaseCamera self, ChVectorD pos)"""
        return _vehicle.ChChaseCamera_SetCameraPos(self, pos)

    def SetCameraAngle(self, angle):
        r"""SetCameraAngle(ChChaseCamera self, double angle)"""
        return _vehicle.ChChaseCamera_SetCameraAngle(self, angle)

    def GetState(self):
        r"""GetState(ChChaseCamera self) -> chrono::utils::ChChaseCamera::State"""
        return _vehicle.ChChaseCamera_GetState(self)

    def GetStateName(self):
        r"""GetStateName(ChChaseCamera self) -> std::string const &"""
        return _vehicle.ChChaseCamera_GetStateName(self)

    def GetCameraPos(self):
        r"""GetCameraPos(ChChaseCamera self) -> ChVectorD"""
        return _vehicle.ChChaseCamera_GetCameraPos(self)

    def GetTargetPos(self):
        r"""GetTargetPos(ChChaseCamera self) -> ChVectorD"""
        return _vehicle.ChChaseCamera_GetTargetPos(self)

    def SetHorizGain(self, g):
        r"""SetHorizGain(ChChaseCamera self, double g)"""
        return _vehicle.ChChaseCamera_SetHorizGain(self, g)

    def SetVertGain(self, g):
        r"""SetVertGain(ChChaseCamera self, double g)"""
        return _vehicle.ChChaseCamera_SetVertGain(self, g)

    def SetMultLimits(self, minMult, maxMult):
        r"""SetMultLimits(ChChaseCamera self, double minMult, double maxMult)"""
        return _vehicle.ChChaseCamera_SetMultLimits(self, minMult, maxMult)

    def SetChassis(self, chassis):
        r"""SetChassis(ChChaseCamera self, std::shared_ptr< chrono::ChBody > chassis)"""
        return _vehicle.ChChaseCamera_SetChassis(self, chassis)

    def SetTargetPoint(self, point):
        r"""SetTargetPoint(ChChaseCamera self, ChVectorD point)"""
        return _vehicle.ChChaseCamera_SetTargetPoint(self, point)

    def SetChaseDistance(self, dist):
        r"""SetChaseDistance(ChChaseCamera self, double dist)"""
        return _vehicle.ChChaseCamera_SetChaseDistance(self, dist)

    def SetChaseHeight(self, height):
        r"""SetChaseHeight(ChChaseCamera self, double height)"""
        return _vehicle.ChChaseCamera_SetChaseHeight(self, height)

# Register ChChaseCamera in _vehicle:
_vehicle.ChChaseCamera_swigregister(ChChaseCamera)

class ChDriver(object):
    r"""Proxy of C++ chrono::vehicle::ChDriver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, vehicle):
        r"""__init__(ChDriver self, ChVehicle vehicle) -> ChDriver"""
        _vehicle.ChDriver_swiginit(self, _vehicle.new_ChDriver(vehicle))
    __swig_destroy__ = _vehicle.delete_ChDriver

    def GetThrottle(self):
        r"""GetThrottle(ChDriver self) -> double"""
        return _vehicle.ChDriver_GetThrottle(self)

    def GetSteering(self):
        r"""GetSteering(ChDriver self) -> double"""
        return _vehicle.ChDriver_GetSteering(self)

    def GetBraking(self):
        r"""GetBraking(ChDriver self) -> double"""
        return _vehicle.ChDriver_GetBraking(self)

    def GetClutch(self):
        r"""GetClutch(ChDriver self) -> double"""
        return _vehicle.ChDriver_GetClutch(self)

    def GetInputs(self):
        r"""GetInputs(ChDriver self) -> DriverInputs"""
        return _vehicle.ChDriver_GetInputs(self)

    def Initialize(self):
        r"""Initialize(ChDriver self)"""
        return _vehicle.ChDriver_Initialize(self)

    def Synchronize(self, time):
        r"""Synchronize(ChDriver self, double time)"""
        return _vehicle.ChDriver_Synchronize(self, time)

    def Advance(self, step):
        r"""Advance(ChDriver self, double step)"""
        return _vehicle.ChDriver_Advance(self, step)

    def LogInit(self, filename):
        r"""LogInit(ChDriver self, std::string const & filename) -> bool"""
        return _vehicle.ChDriver_LogInit(self, filename)

    def Log(self, time):
        r"""Log(ChDriver self, double time) -> bool"""
        return _vehicle.ChDriver_Log(self, time)

    def SetSteering(self, steering):
        r"""SetSteering(ChDriver self, double steering)"""
        return _vehicle.ChDriver_SetSteering(self, steering)

    def SetThrottle(self, throttle):
        r"""SetThrottle(ChDriver self, double throttle)"""
        return _vehicle.ChDriver_SetThrottle(self, throttle)

    def SetBraking(self, braking):
        r"""SetBraking(ChDriver self, double braking)"""
        return _vehicle.ChDriver_SetBraking(self, braking)

    def SetClutch(self, clutch):
        r"""SetClutch(ChDriver self, double clutch)"""
        return _vehicle.ChDriver_SetClutch(self, clutch)

# Register ChDriver in _vehicle:
_vehicle.ChDriver_swigregister(ChDriver)

class ChDataDriver(ChDriver):
    r"""Proxy of C++ chrono::vehicle::ChDataDriver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChDataDriver self, ChVehicle vehicle, std::string const & filename, bool sorted=True) -> ChDataDriver
        __init__(ChDataDriver self, ChVehicle vehicle, vector_Entry data, bool sorted=True) -> ChDataDriver
        """
        _vehicle.ChDataDriver_swiginit(self, _vehicle.new_ChDataDriver(*args))
    __swig_destroy__ = _vehicle.delete_ChDataDriver

    def Synchronize(self, time):
        r"""Synchronize(ChDataDriver self, double time)"""
        return _vehicle.ChDataDriver_Synchronize(self, time)

# Register ChDataDriver in _vehicle:
_vehicle.ChDataDriver_swigregister(ChDataDriver)

class DataDriverEntry(object):
    r"""Proxy of C++ chrono::vehicle::ChDataDriver::Entry class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Entry() -> DataDriverEntry
        Entry(double time, double steering, double throttle, double braking, double clutch=0) -> DataDriverEntry
        """
        _vehicle.DataDriverEntry_swiginit(self, _vehicle.new_DataDriverEntry(*args))
    m_time = property(_vehicle.DataDriverEntry_m_time_get, _vehicle.DataDriverEntry_m_time_set, doc=r"""m_time : double""")
    m_steering = property(_vehicle.DataDriverEntry_m_steering_get, _vehicle.DataDriverEntry_m_steering_set, doc=r"""m_steering : double""")
    m_throttle = property(_vehicle.DataDriverEntry_m_throttle_get, _vehicle.DataDriverEntry_m_throttle_set, doc=r"""m_throttle : double""")
    m_braking = property(_vehicle.DataDriverEntry_m_braking_get, _vehicle.DataDriverEntry_m_braking_set, doc=r"""m_braking : double""")
    m_clutch = property(_vehicle.DataDriverEntry_m_clutch_get, _vehicle.DataDriverEntry_m_clutch_set, doc=r"""m_clutch : double""")
    __swig_destroy__ = _vehicle.delete_DataDriverEntry

# Register DataDriverEntry in _vehicle:
_vehicle.DataDriverEntry_swigregister(DataDriverEntry)

class ChInteractiveDriver(ChDriver):
    r"""Proxy of C++ chrono::vehicle::ChInteractiveDriver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    InputMode_LOCK = _vehicle.ChInteractiveDriver_InputMode_LOCK
    
    InputMode_KEYBOARD = _vehicle.ChInteractiveDriver_InputMode_KEYBOARD
    
    InputMode_DATAFILE = _vehicle.ChInteractiveDriver_InputMode_DATAFILE
    
    InputMode_JOYSTICK = _vehicle.ChInteractiveDriver_InputMode_JOYSTICK
    

    def __init__(self, vehicle):
        r"""__init__(ChInteractiveDriver self, ChVehicle vehicle) -> ChInteractiveDriver"""
        _vehicle.ChInteractiveDriver_swiginit(self, _vehicle.new_ChInteractiveDriver(vehicle))
    __swig_destroy__ = _vehicle.delete_ChInteractiveDriver

    def HasJoystick(self):
        r"""HasJoystick(ChInteractiveDriver self) -> bool"""
        return _vehicle.ChInteractiveDriver_HasJoystick(self)

    def Synchronize(self, time):
        r"""Synchronize(ChInteractiveDriver self, double time)"""
        return _vehicle.ChInteractiveDriver_Synchronize(self, time)

    def Advance(self, step):
        r"""Advance(ChInteractiveDriver self, double step)"""
        return _vehicle.ChInteractiveDriver_Advance(self, step)

    def SetInputMode(self, mode):
        r"""SetInputMode(ChInteractiveDriver self, chrono::vehicle::ChInteractiveDriver::InputMode mode)"""
        return _vehicle.ChInteractiveDriver_SetInputMode(self, mode)

    def SetThrottleDelta(self, delta):
        r"""SetThrottleDelta(ChInteractiveDriver self, double delta)"""
        return _vehicle.ChInteractiveDriver_SetThrottleDelta(self, delta)

    def SetSteeringDelta(self, delta):
        r"""SetSteeringDelta(ChInteractiveDriver self, double delta)"""
        return _vehicle.ChInteractiveDriver_SetSteeringDelta(self, delta)

    def SetBrakingDelta(self, delta):
        r"""SetBrakingDelta(ChInteractiveDriver self, double delta)"""
        return _vehicle.ChInteractiveDriver_SetBrakingDelta(self, delta)

    def SetClutchDelta(self, delta):
        r"""SetClutchDelta(ChInteractiveDriver self, double delta)"""
        return _vehicle.ChInteractiveDriver_SetClutchDelta(self, delta)

    def SetStepsize(self, val):
        r"""SetStepsize(ChInteractiveDriver self, double val)"""
        return _vehicle.ChInteractiveDriver_SetStepsize(self, val)

    def SetGains(self, steering_gain=1, throttle_gain=1, braking_gain=1, clutch_gain=1):
        r"""SetGains(ChInteractiveDriver self, double steering_gain=1, double throttle_gain=1, double braking_gain=1, double clutch_gain=1)"""
        return _vehicle.ChInteractiveDriver_SetGains(self, steering_gain, throttle_gain, braking_gain, clutch_gain)

    def SetInputDataFile(self, filename):
        r"""SetInputDataFile(ChInteractiveDriver self, std::string const & filename)"""
        return _vehicle.ChInteractiveDriver_SetInputDataFile(self, filename)

# Register ChInteractiveDriver in _vehicle:
_vehicle.ChInteractiveDriver_swigregister(ChInteractiveDriver)

class ChClosedLoopDriver(ChDriver):
    r"""Proxy of C++ chrono::vehicle::ChClosedLoopDriver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChClosedLoopDriver self, ChVehicle vehicle, std::string const & path_name, double target_speed) -> ChClosedLoopDriver
        __init__(ChClosedLoopDriver self, ChVehicle vehicle, std::string const & speed_filename, std::string const & path_name, double target_speed) -> ChClosedLoopDriver
        """
        _vehicle.ChClosedLoopDriver_swiginit(self, _vehicle.new_ChClosedLoopDriver(*args))
    __swig_destroy__ = _vehicle.delete_ChClosedLoopDriver

    def SetDesiredSpeed(self, val):
        r"""SetDesiredSpeed(ChClosedLoopDriver self, double val)"""
        return _vehicle.ChClosedLoopDriver_SetDesiredSpeed(self, val)

    def SetThresholdThrottle(self, val):
        r"""SetThresholdThrottle(ChClosedLoopDriver self, double val)"""
        return _vehicle.ChClosedLoopDriver_SetThresholdThrottle(self, val)

    def GetSpeedController(self):
        r"""GetSpeedController(ChClosedLoopDriver self) -> ChSpeedController"""
        return _vehicle.ChClosedLoopDriver_GetSpeedController(self)

    def Reset(self):
        r"""Reset(ChClosedLoopDriver self)"""
        return _vehicle.ChClosedLoopDriver_Reset(self)

    def Initialize(self):
        r"""Initialize(ChClosedLoopDriver self)"""
        return _vehicle.ChClosedLoopDriver_Initialize(self)

    def Advance(self, step):
        r"""Advance(ChClosedLoopDriver self, double step)"""
        return _vehicle.ChClosedLoopDriver_Advance(self, step)

    def SetColor(self, color):
        r"""SetColor(ChClosedLoopDriver self, ChColor color)"""
        return _vehicle.ChClosedLoopDriver_SetColor(self, color)

    def ExportPathPovray(self, out_dir):
        r"""ExportPathPovray(ChClosedLoopDriver self, std::string const & out_dir)"""
        return _vehicle.ChClosedLoopDriver_ExportPathPovray(self, out_dir)

# Register ChClosedLoopDriver in _vehicle:
_vehicle.ChClosedLoopDriver_swigregister(ChClosedLoopDriver)

class ChPathFollowerDriver(ChClosedLoopDriver):
    r"""Proxy of C++ chrono::vehicle::ChPathFollowerDriver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChPathFollowerDriver self, ChVehicle vehicle, std::shared_ptr< chrono::ChBezierCurve > path, std::string const & path_name, double target_speed) -> ChPathFollowerDriver
        __init__(ChPathFollowerDriver self, ChVehicle vehicle, std::string const & steering_filename, std::string const & speed_filename, std::shared_ptr< chrono::ChBezierCurve > path, std::string const & path_name, double target_speed) -> ChPathFollowerDriver
        """
        _vehicle.ChPathFollowerDriver_swiginit(self, _vehicle.new_ChPathFollowerDriver(*args))
    __swig_destroy__ = _vehicle.delete_ChPathFollowerDriver

    def GetSteeringController(self):
        r"""GetSteeringController(ChPathFollowerDriver self) -> ChPathSteeringController"""
        return _vehicle.ChPathFollowerDriver_GetSteeringController(self)

# Register ChPathFollowerDriver in _vehicle:
_vehicle.ChPathFollowerDriver_swigregister(ChPathFollowerDriver)

class ChPathFollowerDriverXT(ChClosedLoopDriver):
    r"""Proxy of C++ chrono::vehicle::ChPathFollowerDriverXT class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChPathFollowerDriverXT self, ChVehicle vehicle, std::shared_ptr< chrono::ChBezierCurve > path, std::string const & path_name, double target_speed, double maxWheelTurnAngle=0.0) -> ChPathFollowerDriverXT
        __init__(ChPathFollowerDriverXT self, ChVehicle vehicle, std::string const & steering_filename, std::string const & speed_filename, std::shared_ptr< chrono::ChBezierCurve > path, std::string const & path_name, double target_speed, double maxWheelTurnAngle=0.0) -> ChPathFollowerDriverXT
        """
        _vehicle.ChPathFollowerDriverXT_swiginit(self, _vehicle.new_ChPathFollowerDriverXT(*args))
    __swig_destroy__ = _vehicle.delete_ChPathFollowerDriverXT

    def GetSteeringController(self):
        r"""GetSteeringController(ChPathFollowerDriverXT self) -> ChPathSteeringControllerXT"""
        return _vehicle.ChPathFollowerDriverXT_GetSteeringController(self)

# Register ChPathFollowerDriverXT in _vehicle:
_vehicle.ChPathFollowerDriverXT_swigregister(ChPathFollowerDriverXT)

class ChPathFollowerDriverSR(ChClosedLoopDriver):
    r"""Proxy of C++ chrono::vehicle::ChPathFollowerDriverSR class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChPathFollowerDriverSR self, ChVehicle vehicle, std::shared_ptr< chrono::ChBezierCurve > path, std::string const & path_name, double target_speed, double maxWheelTurnAngle=0.0, double axle_space=2.5) -> ChPathFollowerDriverSR
        __init__(ChPathFollowerDriverSR self, ChVehicle vehicle, std::string const & steering_filename, std::string const & speed_filename, std::shared_ptr< chrono::ChBezierCurve > path, std::string const & path_name, double target_speed, double maxWheelTurnAngle=0.0, double axle_space=2.5) -> ChPathFollowerDriverSR
        """
        _vehicle.ChPathFollowerDriverSR_swiginit(self, _vehicle.new_ChPathFollowerDriverSR(*args))
    __swig_destroy__ = _vehicle.delete_ChPathFollowerDriverSR

    def GetSteeringController(self):
        r"""GetSteeringController(ChPathFollowerDriverSR self) -> ChPathSteeringControllerSR"""
        return _vehicle.ChPathFollowerDriverSR_GetSteeringController(self)

# Register ChPathFollowerDriverSR in _vehicle:
_vehicle.ChPathFollowerDriverSR_swigregister(ChPathFollowerDriverSR)

class ChPathFollowerDriverStanley(ChClosedLoopDriver):
    r"""Proxy of C++ chrono::vehicle::ChPathFollowerDriverStanley class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChPathFollowerDriverStanley self, ChVehicle vehicle, std::shared_ptr< chrono::ChBezierCurve > path, std::string const & path_name, double target_speed, double maxWheelTurnAngle=0.0) -> ChPathFollowerDriverStanley
        __init__(ChPathFollowerDriverStanley self, ChVehicle vehicle, std::string const & steering_filename, std::string const & speed_filename, std::shared_ptr< chrono::ChBezierCurve > path, std::string const & path_name, double target_speed, double maxWheelTurnAngle=0.0) -> ChPathFollowerDriverStanley
        """
        _vehicle.ChPathFollowerDriverStanley_swiginit(self, _vehicle.new_ChPathFollowerDriverStanley(*args))
    __swig_destroy__ = _vehicle.delete_ChPathFollowerDriverStanley

    def GetSteeringController(self):
        r"""GetSteeringController(ChPathFollowerDriverStanley self) -> ChPathSteeringControllerStanley"""
        return _vehicle.ChPathFollowerDriverStanley_GetSteeringController(self)

# Register ChPathFollowerDriverStanley in _vehicle:
_vehicle.ChPathFollowerDriverStanley_swigregister(ChPathFollowerDriverStanley)

class ChPathFollowerACCDriver(ChDriver):
    r"""Proxy of C++ chrono::vehicle::ChPathFollowerACCDriver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChPathFollowerACCDriver self, ChVehicle vehicle, std::shared_ptr< chrono::ChBezierCurve > path, std::string const & path_name, double target_speed, double target_following_time, double target_min_distance, double current_distance) -> ChPathFollowerACCDriver
        __init__(ChPathFollowerACCDriver self, ChVehicle vehicle, std::string const & steering_filename, std::string const & speed_filename, std::shared_ptr< chrono::ChBezierCurve > path, std::string const & path_name, double target_speed, double target_following_time, double target_min_distance, double current_distance) -> ChPathFollowerACCDriver
        """
        _vehicle.ChPathFollowerACCDriver_swiginit(self, _vehicle.new_ChPathFollowerACCDriver(*args))
    __swig_destroy__ = _vehicle.delete_ChPathFollowerACCDriver

    def SetDesiredSpeed(self, val):
        r"""SetDesiredSpeed(ChPathFollowerACCDriver self, double val)"""
        return _vehicle.ChPathFollowerACCDriver_SetDesiredSpeed(self, val)

    def SetDesiredFollowingTime(self, val):
        r"""SetDesiredFollowingTime(ChPathFollowerACCDriver self, double val)"""
        return _vehicle.ChPathFollowerACCDriver_SetDesiredFollowingTime(self, val)

    def SetDesiredFollowingMinDistance(self, val):
        r"""SetDesiredFollowingMinDistance(ChPathFollowerACCDriver self, double val)"""
        return _vehicle.ChPathFollowerACCDriver_SetDesiredFollowingMinDistance(self, val)

    def SetCurrentDistance(self, val):
        r"""SetCurrentDistance(ChPathFollowerACCDriver self, double val)"""
        return _vehicle.ChPathFollowerACCDriver_SetCurrentDistance(self, val)

    def SetThresholdThrottle(self, val):
        r"""SetThresholdThrottle(ChPathFollowerACCDriver self, double val)"""
        return _vehicle.ChPathFollowerACCDriver_SetThresholdThrottle(self, val)

    def GetSteeringController(self):
        r"""GetSteeringController(ChPathFollowerACCDriver self) -> ChPathSteeringController"""
        return _vehicle.ChPathFollowerACCDriver_GetSteeringController(self)

    def GetSpeedController(self):
        r"""GetSpeedController(ChPathFollowerACCDriver self) -> ChAdaptiveSpeedController"""
        return _vehicle.ChPathFollowerACCDriver_GetSpeedController(self)

    def Reset(self):
        r"""Reset(ChPathFollowerACCDriver self)"""
        return _vehicle.ChPathFollowerACCDriver_Reset(self)

    def Advance(self, step):
        r"""Advance(ChPathFollowerACCDriver self, double step)"""
        return _vehicle.ChPathFollowerACCDriver_Advance(self, step)

    def ExportPathPovray(self, out_dir):
        r"""ExportPathPovray(ChPathFollowerACCDriver self, std::string const & out_dir)"""
        return _vehicle.ChPathFollowerACCDriver_ExportPathPovray(self, out_dir)

# Register ChPathFollowerACCDriver in _vehicle:
_vehicle.ChPathFollowerACCDriver_swigregister(ChPathFollowerACCDriver)

class ChExternalDriver(ChDriver):
    r"""Proxy of C++ chrono::vehicle::ChExternalDriver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, vehicle, port):
        r"""__init__(ChExternalDriver self, ChVehicle vehicle, int port) -> ChExternalDriver"""
        _vehicle.ChExternalDriver_swiginit(self, _vehicle.new_ChExternalDriver(vehicle, port))
    __swig_destroy__ = _vehicle.delete_ChExternalDriver

    def Synchronize(self, time):
        r"""Synchronize(ChExternalDriver self, double time)"""
        return _vehicle.ChExternalDriver_Synchronize(self, time)

    def AddDataGenerator(self, functor, updateRate=-1):
        r"""AddDataGenerator(ChExternalDriver self, std::shared_ptr< chrono::vehicle::ChExternalDriver::DataGeneratorFunctor > functor, float updateRate=-1)"""
        return _vehicle.ChExternalDriver_AddDataGenerator(self, functor, updateRate)

    def AddDataParser(self, functor):
        r"""AddDataParser(ChExternalDriver self, std::shared_ptr< chrono::vehicle::ChExternalDriver::DataParserFunctor > functor)"""
        return _vehicle.ChExternalDriver_AddDataParser(self, functor)

# Register ChExternalDriver in _vehicle:
_vehicle.ChExternalDriver_swigregister(ChExternalDriver)

class ChExternalDriver_DataGeneratorFunctor(object):
    r"""Proxy of C++ chrono::vehicle::ChExternalDriver::DataGeneratorFunctor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type, id):
        r"""__init__(ChExternalDriver_DataGeneratorFunctor self, std::string const & type, std::string const & id) -> ChExternalDriver_DataGeneratorFunctor"""
        if self.__class__ == ChExternalDriver_DataGeneratorFunctor:
            _self = None
        else:
            _self = self
        _vehicle.ChExternalDriver_DataGeneratorFunctor_swiginit(self, _vehicle.new_ChExternalDriver_DataGeneratorFunctor(_self, type, id))
    __swig_destroy__ = _vehicle.delete_ChExternalDriver_DataGeneratorFunctor

    def Serialize(self, writer):
        r"""Serialize(ChExternalDriver_DataGeneratorFunctor self, ChJSONWriter writer)"""
        return _vehicle.ChExternalDriver_DataGeneratorFunctor_Serialize(self, writer)

    def HasData(self):
        r"""HasData(ChExternalDriver_DataGeneratorFunctor self) -> bool"""
        return _vehicle.ChExternalDriver_DataGeneratorFunctor_HasData(self)
    type = property(_vehicle.ChExternalDriver_DataGeneratorFunctor_type_get, _vehicle.ChExternalDriver_DataGeneratorFunctor_type_set, doc=r"""type : std::string""")
    id = property(_vehicle.ChExternalDriver_DataGeneratorFunctor_id_get, _vehicle.ChExternalDriver_DataGeneratorFunctor_id_set, doc=r"""id : std::string""")
    def __disown__(self):
        self.this.disown()
        _vehicle.disown_ChExternalDriver_DataGeneratorFunctor(self)
        return weakref.proxy(self)

# Register ChExternalDriver_DataGeneratorFunctor in _vehicle:
_vehicle.ChExternalDriver_DataGeneratorFunctor_swigregister(ChExternalDriver_DataGeneratorFunctor)

class ChExternalDriver_DataParserFunctor(object):
    r"""Proxy of C++ chrono::vehicle::ChExternalDriver::DataParserFunctor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type):
        r"""__init__(ChExternalDriver_DataParserFunctor self, std::string const & type) -> ChExternalDriver_DataParserFunctor"""
        if self.__class__ == ChExternalDriver_DataParserFunctor:
            _self = None
        else:
            _self = self
        _vehicle.ChExternalDriver_DataParserFunctor_swiginit(self, _vehicle.new_ChExternalDriver_DataParserFunctor(_self, type))
    __swig_destroy__ = _vehicle.delete_ChExternalDriver_DataParserFunctor

    def Deserialize(self, reader):
        r"""Deserialize(ChExternalDriver_DataParserFunctor self, ChJSONReader reader)"""
        return _vehicle.ChExternalDriver_DataParserFunctor_Deserialize(self, reader)
    type = property(_vehicle.ChExternalDriver_DataParserFunctor_type_get, _vehicle.ChExternalDriver_DataParserFunctor_type_set, doc=r"""type : std::string""")
    def __disown__(self):
        self.this.disown()
        _vehicle.disown_ChExternalDriver_DataParserFunctor(self)
        return weakref.proxy(self)

# Register ChExternalDriver_DataParserFunctor in _vehicle:
_vehicle.ChExternalDriver_DataParserFunctor_swigregister(ChExternalDriver_DataParserFunctor)

class ChJSONWriter(object):
    r"""Proxy of C++ chrono::vehicle::ChJSONWriter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChJSONWriter self) -> ChJSONWriter"""
        _vehicle.ChJSONWriter_swiginit(self, _vehicle.new_ChJSONWriter())

    def __lshift__(self, *args):
        r"""
        __lshift__(ChJSONWriter self, bool v) -> ChJSONWriter
        __lshift__(ChJSONWriter self, int const v) -> ChJSONWriter
        __lshift__(ChJSONWriter self, long const v) -> ChJSONWriter
        __lshift__(ChJSONWriter self, double const v) -> ChJSONWriter
        __lshift__(ChJSONWriter self, unsigned int v) -> ChJSONWriter
        __lshift__(ChJSONWriter self, char const * v) -> ChJSONWriter
        __lshift__(ChJSONWriter self, std::string & v) -> ChJSONWriter
        __lshift__(ChJSONWriter self, std::string const & v) -> ChJSONWriter
        __lshift__(ChJSONWriter self, unsigned long v) -> ChJSONWriter
        __lshift__(ChJSONWriter self, unsigned long long v) -> ChJSONWriter
        __lshift__(ChJSONWriter self, ChVectorD v) -> ChJSONWriter
        __lshift__(ChJSONWriter self, ChQuaternionD v) -> ChJSONWriter
        __lshift__(ChJSONWriter self, ChJSONWriter arg2) -> ChJSONWriter
        """
        return _vehicle.ChJSONWriter___lshift__(self, *args)

    def Key(self, v):
        r"""Key(ChJSONWriter self, std::string const & v) -> ChJSONWriter"""
        return _vehicle.ChJSONWriter_Key(self, v)

    def PointerAsString(self, v, len):
        r"""PointerAsString(ChJSONWriter self, size_t v, unsigned int len) -> ChJSONWriter"""
        return _vehicle.ChJSONWriter_PointerAsString(self, v, len)

    def StartObject(self, type, id):
        r"""StartObject(ChJSONWriter self, std::string const & type, std::string const & id) -> ChJSONWriter"""
        return _vehicle.ChJSONWriter_StartObject(self, type, id)

    def EndObject(self):
        r"""EndObject(ChJSONWriter self) -> ChJSONWriter"""
        return _vehicle.ChJSONWriter_EndObject(self)

    def Finish(self):
        r"""Finish(ChJSONWriter self) -> std::string"""
        return _vehicle.ChJSONWriter_Finish(self)
    __swig_destroy__ = _vehicle.delete_ChJSONWriter

# Register ChJSONWriter in _vehicle:
_vehicle.ChJSONWriter_swigregister(ChJSONWriter)

class ChJSONReader(object):
    r"""Proxy of C++ chrono::vehicle::ChJSONReader class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChJSONReader self) -> ChJSONReader"""
        _vehicle.ChJSONReader_swiginit(self, _vehicle.new_ChJSONReader())

    def Parse(self, message):
        r"""Parse(ChJSONReader self, std::string const & message)"""
        return _vehicle.ChJSONReader_Parse(self, message)

    def __rshift__(self, *args):
        r"""
        __rshift__(ChJSONReader self, bool & v) -> ChJSONReader
        __rshift__(ChJSONReader self, int & v) -> ChJSONReader
        __rshift__(ChJSONReader self, long & v) -> ChJSONReader
        __rshift__(ChJSONReader self, double & v) -> ChJSONReader
        __rshift__(ChJSONReader self, float & v) -> ChJSONReader
        __rshift__(ChJSONReader self, unsigned int & v) -> ChJSONReader
        __rshift__(ChJSONReader self, std::string & v) -> ChJSONReader
        __rshift__(ChJSONReader self, unsigned long & v) -> ChJSONReader
        __rshift__(ChJSONReader self, unsigned long long & v) -> ChJSONReader
        __rshift__(ChJSONReader self, std::array< double,3 > & v) -> ChJSONReader
        __rshift__(ChJSONReader self, std::array< double,4 > & v) -> ChJSONReader
        __rshift__(ChJSONReader self, ChJSONReader arg2) -> ChJSONReader
        """
        return _vehicle.ChJSONReader___rshift__(self, *args)

    def GetBool(self):
        r"""GetBool(ChJSONReader self) -> bool"""
        return _vehicle.ChJSONReader_GetBool(self)

    def GetInt(self):
        r"""GetInt(ChJSONReader self) -> int"""
        return _vehicle.ChJSONReader_GetInt(self)

    def GetLongInt(self):
        r"""GetLongInt(ChJSONReader self) -> long"""
        return _vehicle.ChJSONReader_GetLongInt(self)

    def GetDouble(self):
        r"""GetDouble(ChJSONReader self) -> double"""
        return _vehicle.ChJSONReader_GetDouble(self)

    def GetFloat(self):
        r"""GetFloat(ChJSONReader self) -> float"""
        return _vehicle.ChJSONReader_GetFloat(self)

    def GetUint(self):
        r"""GetUint(ChJSONReader self) -> unsigned int"""
        return _vehicle.ChJSONReader_GetUint(self)

    def GetString(self):
        r"""GetString(ChJSONReader self) -> std::string"""
        return _vehicle.ChJSONReader_GetString(self)

    def Next(self):
        r"""Next(ChJSONReader self) -> ChJSONReader"""
        return _vehicle.ChJSONReader_Next(self)

    def Back(self):
        r"""Back(ChJSONReader self) -> ChJSONReader"""
        return _vehicle.ChJSONReader_Back(self)

    def StartObject(self):
        r"""StartObject(ChJSONReader self) -> ChJSONReader"""
        return _vehicle.ChJSONReader_StartObject(self)

    def GetObject(self):
        r"""GetObject(ChJSONReader self) -> ChJSONReader"""
        return _vehicle.ChJSONReader_GetObject(self)

    def EndObject(self):
        r"""EndObject(ChJSONReader self) -> ChJSONReader"""
        return _vehicle.ChJSONReader_EndObject(self)

    def HasMembers(self):
        r"""HasMembers(ChJSONReader self) -> bool"""
        return _vehicle.ChJSONReader_HasMembers(self)
    __swig_destroy__ = _vehicle.delete_ChJSONReader

# Register ChJSONReader in _vehicle:
_vehicle.ChJSONReader_swigregister(ChJSONReader)

class ChSuspensionTestRigDriver(object):
    r"""Proxy of C++ chrono::vehicle::ChSuspensionTestRigDriver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChSuspensionTestRigDriver

    def GetSteering(self):
        r"""GetSteering(ChSuspensionTestRigDriver self) -> double"""
        return _vehicle.ChSuspensionTestRigDriver_GetSteering(self)

    def GetDisplacementLeft(self):
        r"""GetDisplacementLeft(ChSuspensionTestRigDriver self) -> vector_double"""
        return _vehicle.ChSuspensionTestRigDriver_GetDisplacementLeft(self)

    def GetDisplacementRight(self):
        r"""GetDisplacementRight(ChSuspensionTestRigDriver self) -> vector_double"""
        return _vehicle.ChSuspensionTestRigDriver_GetDisplacementRight(self)

    def GetDisplacementSpeedLeft(self):
        r"""GetDisplacementSpeedLeft(ChSuspensionTestRigDriver self) -> vector_double"""
        return _vehicle.ChSuspensionTestRigDriver_GetDisplacementSpeedLeft(self)

    def GetDisplacementSpeedRight(self):
        r"""GetDisplacementSpeedRight(ChSuspensionTestRigDriver self) -> vector_double"""
        return _vehicle.ChSuspensionTestRigDriver_GetDisplacementSpeedRight(self)

    def Started(self):
        r"""Started(ChSuspensionTestRigDriver self) -> bool"""
        return _vehicle.ChSuspensionTestRigDriver_Started(self)

    def Ended(self):
        r"""Ended(ChSuspensionTestRigDriver self) -> bool"""
        return _vehicle.ChSuspensionTestRigDriver_Ended(self)

    def LogInit(self, filename):
        r"""LogInit(ChSuspensionTestRigDriver self, std::string const & filename) -> bool"""
        return _vehicle.ChSuspensionTestRigDriver_LogInit(self, filename)

    def Log(self, time):
        r"""Log(ChSuspensionTestRigDriver self, double time) -> bool"""
        return _vehicle.ChSuspensionTestRigDriver_Log(self, time)

# Register ChSuspensionTestRigDriver in _vehicle:
_vehicle.ChSuspensionTestRigDriver_swigregister(ChSuspensionTestRigDriver)

class ChSuspensionTestRigDataDriver(ChSuspensionTestRigDriver):
    r"""Proxy of C++ chrono::vehicle::ChSuspensionTestRigDataDriver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, filename):
        r"""__init__(ChSuspensionTestRigDataDriver self, std::string const & filename) -> ChSuspensionTestRigDataDriver"""
        _vehicle.ChSuspensionTestRigDataDriver_swiginit(self, _vehicle.new_ChSuspensionTestRigDataDriver(filename))
    __swig_destroy__ = _vehicle.delete_ChSuspensionTestRigDataDriver

    def Ended(self):
        r"""Ended(ChSuspensionTestRigDataDriver self) -> bool"""
        return _vehicle.ChSuspensionTestRigDataDriver_Ended(self)

# Register ChSuspensionTestRigDataDriver in _vehicle:
_vehicle.ChSuspensionTestRigDataDriver_swigregister(ChSuspensionTestRigDataDriver)

class ChSpeedController(object):
    r"""Proxy of C++ chrono::vehicle::ChSpeedController class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChSpeedController self) -> ChSpeedController
        __init__(ChSpeedController self, std::string const & filename) -> ChSpeedController
        """
        _vehicle.ChSpeedController_swiginit(self, _vehicle.new_ChSpeedController(*args))
    __swig_destroy__ = _vehicle.delete_ChSpeedController

    def SetGains(self, Kp, Ki, Kd):
        r"""SetGains(ChSpeedController self, double Kp, double Ki, double Kd)"""
        return _vehicle.ChSpeedController_SetGains(self, Kp, Ki, Kd)

    def GetCurrentSpeed(self):
        r"""GetCurrentSpeed(ChSpeedController self) -> double"""
        return _vehicle.ChSpeedController_GetCurrentSpeed(self)

    def Reset(self, vehicle):
        r"""Reset(ChSpeedController self, ChVehicle vehicle)"""
        return _vehicle.ChSpeedController_Reset(self, vehicle)

    def Advance(self, vehicle, target_speed, step):
        r"""Advance(ChSpeedController self, ChVehicle vehicle, double target_speed, double step) -> double"""
        return _vehicle.ChSpeedController_Advance(self, vehicle, target_speed, step)

    def StartDataCollection(self):
        r"""StartDataCollection(ChSpeedController self)"""
        return _vehicle.ChSpeedController_StartDataCollection(self)

    def StopDataCollection(self):
        r"""StopDataCollection(ChSpeedController self)"""
        return _vehicle.ChSpeedController_StopDataCollection(self)

    def IsDataCollectionEnabled(self):
        r"""IsDataCollectionEnabled(ChSpeedController self) -> bool"""
        return _vehicle.ChSpeedController_IsDataCollectionEnabled(self)

    def IsDataAvailable(self):
        r"""IsDataAvailable(ChSpeedController self) -> bool"""
        return _vehicle.ChSpeedController_IsDataAvailable(self)

    def WriteOutputFile(self, filename):
        r"""WriteOutputFile(ChSpeedController self, std::string const & filename)"""
        return _vehicle.ChSpeedController_WriteOutputFile(self, filename)

# Register ChSpeedController in _vehicle:
_vehicle.ChSpeedController_swigregister(ChSpeedController)

class ChSteeringController(object):
    r"""Proxy of C++ chrono::vehicle::ChSteeringController class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChSteeringController

    def SetLookAheadDistance(self, dist):
        r"""SetLookAheadDistance(ChSteeringController self, double dist)"""
        return _vehicle.ChSteeringController_SetLookAheadDistance(self, dist)

    def GetSentinelLocation(self):
        r"""GetSentinelLocation(ChSteeringController self) -> ChVectorD"""
        return _vehicle.ChSteeringController_GetSentinelLocation(self)

    def GetTargetLocation(self):
        r"""GetTargetLocation(ChSteeringController self) -> ChVectorD"""
        return _vehicle.ChSteeringController_GetTargetLocation(self)

    def GetPath(self):
        r"""GetPath(ChSteeringController self) -> std::shared_ptr< chrono::ChBezierCurve >"""
        return _vehicle.ChSteeringController_GetPath(self)

    def Reset(self, vehicle):
        r"""Reset(ChSteeringController self, ChVehicle vehicle)"""
        return _vehicle.ChSteeringController_Reset(self, vehicle)

    def Advance(self, vehicle, step):
        r"""Advance(ChSteeringController self, ChVehicle vehicle, double step) -> double"""
        return _vehicle.ChSteeringController_Advance(self, vehicle, step)

    def StartDataCollection(self):
        r"""StartDataCollection(ChSteeringController self)"""
        return _vehicle.ChSteeringController_StartDataCollection(self)

    def StopDataCollection(self):
        r"""StopDataCollection(ChSteeringController self)"""
        return _vehicle.ChSteeringController_StopDataCollection(self)

    def IsDataCollectionEnabled(self):
        r"""IsDataCollectionEnabled(ChSteeringController self) -> bool"""
        return _vehicle.ChSteeringController_IsDataCollectionEnabled(self)

    def IsDataAvailable(self):
        r"""IsDataAvailable(ChSteeringController self) -> bool"""
        return _vehicle.ChSteeringController_IsDataAvailable(self)

    def WriteOutputFile(self, filename):
        r"""WriteOutputFile(ChSteeringController self, std::string const & filename)"""
        return _vehicle.ChSteeringController_WriteOutputFile(self, filename)

# Register ChSteeringController in _vehicle:
_vehicle.ChSteeringController_swigregister(ChSteeringController)

class ChPathSteeringController(ChSteeringController):
    r"""Proxy of C++ chrono::vehicle::ChPathSteeringController class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChPathSteeringController self, std::shared_ptr< chrono::ChBezierCurve > path) -> ChPathSteeringController
        __init__(ChPathSteeringController self, std::string const & filename, std::shared_ptr< chrono::ChBezierCurve > path) -> ChPathSteeringController
        """
        _vehicle.ChPathSteeringController_swiginit(self, _vehicle.new_ChPathSteeringController(*args))
    __swig_destroy__ = _vehicle.delete_ChPathSteeringController

    def SetGains(self, Kp, Ki, Kd):
        r"""SetGains(ChPathSteeringController self, double Kp, double Ki, double Kd)"""
        return _vehicle.ChPathSteeringController_SetGains(self, Kp, Ki, Kd)

    def Reset(self, vehicle):
        r"""Reset(ChPathSteeringController self, ChVehicle vehicle)"""
        return _vehicle.ChPathSteeringController_Reset(self, vehicle)

    def CalcTargetLocation(self):
        r"""CalcTargetLocation(ChPathSteeringController self)"""
        return _vehicle.ChPathSteeringController_CalcTargetLocation(self)

    def Advance(self, vehicle, step):
        r"""Advance(ChPathSteeringController self, ChVehicle vehicle, double step) -> double"""
        return _vehicle.ChPathSteeringController_Advance(self, vehicle, step)

# Register ChPathSteeringController in _vehicle:
_vehicle.ChPathSteeringController_swigregister(ChPathSteeringController)

class ChPathSteeringControllerXT(ChSteeringController):
    r"""Proxy of C++ chrono::vehicle::ChPathSteeringControllerXT class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChPathSteeringControllerXT self, std::shared_ptr< chrono::ChBezierCurve > path, double max_wheel_turn_angle=0.0) -> ChPathSteeringControllerXT
        __init__(ChPathSteeringControllerXT self, std::string const & filename, std::shared_ptr< chrono::ChBezierCurve > path, double max_wheel_turn_angle=0.0) -> ChPathSteeringControllerXT
        """
        _vehicle.ChPathSteeringControllerXT_swiginit(self, _vehicle.new_ChPathSteeringControllerXT(*args))
    __swig_destroy__ = _vehicle.delete_ChPathSteeringControllerXT

    def Reset(self, vehicle):
        r"""Reset(ChPathSteeringControllerXT self, ChVehicle vehicle)"""
        return _vehicle.ChPathSteeringControllerXT_Reset(self, vehicle)

    def SetGains(self, Kp=0.4, W_y_err=1.0, W_heading_err=1.0, W_ackermann=1.0):
        r"""SetGains(ChPathSteeringControllerXT self, double Kp=0.4, double W_y_err=1.0, double W_heading_err=1.0, double W_ackermann=1.0)"""
        return _vehicle.ChPathSteeringControllerXT_SetGains(self, Kp, W_y_err, W_heading_err, W_ackermann)

    def CalcTargetLocation(self):
        r"""CalcTargetLocation(ChPathSteeringControllerXT self)"""
        return _vehicle.ChPathSteeringControllerXT_CalcTargetLocation(self)

    def Advance(self, vehicle, step):
        r"""Advance(ChPathSteeringControllerXT self, ChVehicle vehicle, double step) -> double"""
        return _vehicle.ChPathSteeringControllerXT_Advance(self, vehicle, step)

# Register ChPathSteeringControllerXT in _vehicle:
_vehicle.ChPathSteeringControllerXT_swigregister(ChPathSteeringControllerXT)

class ChPathSteeringControllerSR(ChSteeringController):
    r"""Proxy of C++ chrono::vehicle::ChPathSteeringControllerSR class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChPathSteeringControllerSR self, std::shared_ptr< chrono::ChBezierCurve > path, bool isClosedPath=False, double max_wheel_turn_angle=0.0, double axle_space=2.5) -> ChPathSteeringControllerSR
        __init__(ChPathSteeringControllerSR self, std::string const & filename, std::shared_ptr< chrono::ChBezierCurve > path, bool isClosedPath=False, double max_wheel_turn_angle=0.0, double axle_space=2.5) -> ChPathSteeringControllerSR
        """
        _vehicle.ChPathSteeringControllerSR_swiginit(self, _vehicle.new_ChPathSteeringControllerSR(*args))
    __swig_destroy__ = _vehicle.delete_ChPathSteeringControllerSR

    def SetGains(self, Klat=0.1, Kug=0.0):
        r"""SetGains(ChPathSteeringControllerSR self, double Klat=0.1, double Kug=0.0)"""
        return _vehicle.ChPathSteeringControllerSR_SetGains(self, Klat, Kug)

    def SetPreviewTime(self, Tp=0.5):
        r"""SetPreviewTime(ChPathSteeringControllerSR self, double Tp=0.5)"""
        return _vehicle.ChPathSteeringControllerSR_SetPreviewTime(self, Tp)

    def Advance(self, vehicle, step):
        r"""Advance(ChPathSteeringControllerSR self, ChVehicle vehicle, double step) -> double"""
        return _vehicle.ChPathSteeringControllerSR_Advance(self, vehicle, step)

    def Reset(self, vehicle):
        r"""Reset(ChPathSteeringControllerSR self, ChVehicle vehicle)"""
        return _vehicle.ChPathSteeringControllerSR_Reset(self, vehicle)

    def CalcTargetLocation(self):
        r"""CalcTargetLocation(ChPathSteeringControllerSR self)"""
        return _vehicle.ChPathSteeringControllerSR_CalcTargetLocation(self)

# Register ChPathSteeringControllerSR in _vehicle:
_vehicle.ChPathSteeringControllerSR_swigregister(ChPathSteeringControllerSR)

class ChPathSteeringControllerStanley(ChSteeringController):
    r"""Proxy of C++ chrono::vehicle::ChPathSteeringControllerStanley class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChPathSteeringControllerStanley self, std::shared_ptr< chrono::ChBezierCurve > path, double max_wheel_turn_angle=0.0) -> ChPathSteeringControllerStanley
        __init__(ChPathSteeringControllerStanley self, std::string const & filename, std::shared_ptr< chrono::ChBezierCurve > path, double max_wheel_turn_angle=0.0) -> ChPathSteeringControllerStanley
        """
        _vehicle.ChPathSteeringControllerStanley_swiginit(self, _vehicle.new_ChPathSteeringControllerStanley(*args))
    __swig_destroy__ = _vehicle.delete_ChPathSteeringControllerStanley

    def SetGains(self, Kp, Ki, Kd):
        r"""SetGains(ChPathSteeringControllerStanley self, double Kp, double Ki, double Kd)"""
        return _vehicle.ChPathSteeringControllerStanley_SetGains(self, Kp, Ki, Kd)

    def SetDeadZone(self, dead_zone=0.0):
        r"""SetDeadZone(ChPathSteeringControllerStanley self, double dead_zone=0.0)"""
        return _vehicle.ChPathSteeringControllerStanley_SetDeadZone(self, dead_zone)

    def Advance(self, vehicle, step):
        r"""Advance(ChPathSteeringControllerStanley self, ChVehicle vehicle, double step) -> double"""
        return _vehicle.ChPathSteeringControllerStanley_Advance(self, vehicle, step)

    def Reset(self, vehicle):
        r"""Reset(ChPathSteeringControllerStanley self, ChVehicle vehicle)"""
        return _vehicle.ChPathSteeringControllerStanley_Reset(self, vehicle)

    def CalcTargetLocation(self):
        r"""CalcTargetLocation(ChPathSteeringControllerStanley self)"""
        return _vehicle.ChPathSteeringControllerStanley_CalcTargetLocation(self)

    def CalcHeadingError(self, a, b):
        r"""CalcHeadingError(ChPathSteeringControllerStanley self, ChVectorD a, ChVectorD b) -> double"""
        return _vehicle.ChPathSteeringControllerStanley_CalcHeadingError(self, a, b)

# Register ChPathSteeringControllerStanley in _vehicle:
_vehicle.ChPathSteeringControllerStanley_swigregister(ChPathSteeringControllerStanley)

class ChAdaptiveSpeedController(object):
    r"""Proxy of C++ chrono::vehicle::ChAdaptiveSpeedController class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChAdaptiveSpeedController self) -> ChAdaptiveSpeedController
        __init__(ChAdaptiveSpeedController self, std::string const & filename) -> ChAdaptiveSpeedController
        """
        _vehicle.ChAdaptiveSpeedController_swiginit(self, _vehicle.new_ChAdaptiveSpeedController(*args))
    __swig_destroy__ = _vehicle.delete_ChAdaptiveSpeedController

    def SetGains(self, Kp, Ki, Kd):
        r"""SetGains(ChAdaptiveSpeedController self, double Kp, double Ki, double Kd)"""
        return _vehicle.ChAdaptiveSpeedController_SetGains(self, Kp, Ki, Kd)

    def GetCurrentSpeed(self):
        r"""GetCurrentSpeed(ChAdaptiveSpeedController self) -> double"""
        return _vehicle.ChAdaptiveSpeedController_GetCurrentSpeed(self)

    def Reset(self, vehicle):
        r"""Reset(ChAdaptiveSpeedController self, ChVehicle vehicle)"""
        return _vehicle.ChAdaptiveSpeedController_Reset(self, vehicle)

    def Advance(self, vehicle, target_speed, target_following_time, target_min_distance, current_distance, step):
        r"""Advance(ChAdaptiveSpeedController self, ChVehicle vehicle, double target_speed, double target_following_time, double target_min_distance, double current_distance, double step) -> double"""
        return _vehicle.ChAdaptiveSpeedController_Advance(self, vehicle, target_speed, target_following_time, target_min_distance, current_distance, step)

    def StartDataCollection(self):
        r"""StartDataCollection(ChAdaptiveSpeedController self)"""
        return _vehicle.ChAdaptiveSpeedController_StartDataCollection(self)

    def StopDataCollection(self):
        r"""StopDataCollection(ChAdaptiveSpeedController self)"""
        return _vehicle.ChAdaptiveSpeedController_StopDataCollection(self)

    def IsDataCollectionEnabled(self):
        r"""IsDataCollectionEnabled(ChAdaptiveSpeedController self) -> bool"""
        return _vehicle.ChAdaptiveSpeedController_IsDataCollectionEnabled(self)

    def IsDataAvailable(self):
        r"""IsDataAvailable(ChAdaptiveSpeedController self) -> bool"""
        return _vehicle.ChAdaptiveSpeedController_IsDataAvailable(self)

    def WriteOutputFile(self, filename):
        r"""WriteOutputFile(ChAdaptiveSpeedController self, std::string const & filename)"""
        return _vehicle.ChAdaptiveSpeedController_WriteOutputFile(self, filename)

# Register ChAdaptiveSpeedController in _vehicle:
_vehicle.ChAdaptiveSpeedController_swigregister(ChAdaptiveSpeedController)

class ChJoystickAxisIRR(object):
    r"""Proxy of C++ chrono::vehicle::ChJoystickAxisIRR class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChJoystickAxisIRR self) -> ChJoystickAxisIRR"""
        _vehicle.ChJoystickAxisIRR_swiginit(self, _vehicle.new_ChJoystickAxisIRR())
    AXIS_X = _vehicle.ChJoystickAxisIRR_AXIS_X
    
    AXIS_Y = _vehicle.ChJoystickAxisIRR_AXIS_Y
    
    AXIS_Z = _vehicle.ChJoystickAxisIRR_AXIS_Z
    
    AXIS_R = _vehicle.ChJoystickAxisIRR_AXIS_R
    
    AXIS_U = _vehicle.ChJoystickAxisIRR_AXIS_U
    
    AXIS_V = _vehicle.ChJoystickAxisIRR_AXIS_V
    
    NONE = _vehicle.ChJoystickAxisIRR_NONE
    

    def GetValue(self, joystickEvent):
        r"""GetValue(ChJoystickAxisIRR self, irr::SEvent::SJoystickEvent const & joystickEvent) -> double"""
        return _vehicle.ChJoystickAxisIRR_GetValue(self, joystickEvent)

    def Read(self, d, elementName, dbg_print):
        r"""Read(ChJoystickAxisIRR self, rapidjson::Document & d, std::string const & elementName, bool dbg_print)"""
        return _vehicle.ChJoystickAxisIRR_Read(self, d, elementName, dbg_print)
    id = property(_vehicle.ChJoystickAxisIRR_id_get, _vehicle.ChJoystickAxisIRR_id_set, doc=r"""id : int""")
    axis = property(_vehicle.ChJoystickAxisIRR_axis_get, _vehicle.ChJoystickAxisIRR_axis_set, doc=r"""axis : chrono::vehicle::ChJoystickAxisIRR::Axis""")
    name = property(_vehicle.ChJoystickAxisIRR_name_get, _vehicle.ChJoystickAxisIRR_name_set, doc=r"""name : std::string""")
    min = property(_vehicle.ChJoystickAxisIRR_min_get, _vehicle.ChJoystickAxisIRR_min_set, doc=r"""min : double""")
    max = property(_vehicle.ChJoystickAxisIRR_max_get, _vehicle.ChJoystickAxisIRR_max_set, doc=r"""max : double""")
    scaled_min = property(_vehicle.ChJoystickAxisIRR_scaled_min_get, _vehicle.ChJoystickAxisIRR_scaled_min_set, doc=r"""scaled_min : double""")
    scaled_max = property(_vehicle.ChJoystickAxisIRR_scaled_max_get, _vehicle.ChJoystickAxisIRR_scaled_max_set, doc=r"""scaled_max : double""")
    value = property(_vehicle.ChJoystickAxisIRR_value_get, _vehicle.ChJoystickAxisIRR_value_set, doc=r"""value : double""")
    __swig_destroy__ = _vehicle.delete_ChJoystickAxisIRR

# Register ChJoystickAxisIRR in _vehicle:
_vehicle.ChJoystickAxisIRR_swigregister(ChJoystickAxisIRR)

class ChJoystickButtonIRR(object):
    r"""Proxy of C++ chrono::vehicle::ChJoystickButtonIRR class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChJoystickButtonIRR self) -> ChJoystickButtonIRR"""
        _vehicle.ChJoystickButtonIRR_swiginit(self, _vehicle.new_ChJoystickButtonIRR())

    def IsPressed(self, joystickEvent, continuous=False):
        r"""IsPressed(ChJoystickButtonIRR self, irr::SEvent::SJoystickEvent const & joystickEvent, bool continuous=False) -> bool"""
        return _vehicle.ChJoystickButtonIRR_IsPressed(self, joystickEvent, continuous)

    def Read(self, d, elementName, dbg_print):
        r"""Read(ChJoystickButtonIRR self, rapidjson::Document & d, std::string const & elementName, bool dbg_print)"""
        return _vehicle.ChJoystickButtonIRR_Read(self, d, elementName, dbg_print)
    id = property(_vehicle.ChJoystickButtonIRR_id_get, _vehicle.ChJoystickButtonIRR_id_set, doc=r"""id : int""")
    button = property(_vehicle.ChJoystickButtonIRR_button_get, _vehicle.ChJoystickButtonIRR_button_set, doc=r"""button : int""")
    name = property(_vehicle.ChJoystickButtonIRR_name_get, _vehicle.ChJoystickButtonIRR_name_set, doc=r"""name : std::string""")
    buttonPressedCount = property(_vehicle.ChJoystickButtonIRR_buttonPressedCount_get, _vehicle.ChJoystickButtonIRR_buttonPressedCount_set, doc=r"""buttonPressedCount : int""")
    buttonPressed = property(_vehicle.ChJoystickButtonIRR_buttonPressed_get, _vehicle.ChJoystickButtonIRR_buttonPressed_set, doc=r"""buttonPressed : bool""")
    __swig_destroy__ = _vehicle.delete_ChJoystickButtonIRR

# Register ChJoystickButtonIRR in _vehicle:
_vehicle.ChJoystickButtonIRR_swigregister(ChJoystickButtonIRR)

class ChInteractiveDriverIRR(ChInteractiveDriver):
    r"""Proxy of C++ chrono::vehicle::ChInteractiveDriverIRR class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, vsys):
        r"""__init__(ChInteractiveDriverIRR self, ChVehicleVisualSystemIrrlicht vsys) -> ChInteractiveDriverIRR"""
        _vehicle.ChInteractiveDriverIRR_swiginit(self, _vehicle.new_ChInteractiveDriverIRR(vsys))
    __swig_destroy__ = _vehicle.delete_ChInteractiveDriverIRR

    def HasJoystick(self):
        r"""HasJoystick(ChInteractiveDriverIRR self) -> bool"""
        return _vehicle.ChInteractiveDriverIRR_HasJoystick(self)

    def Initialize(self):
        r"""Initialize(ChInteractiveDriverIRR self)"""
        return _vehicle.ChInteractiveDriverIRR_Initialize(self)

    def SetJoystickConfigFile(self, filename):
        r"""SetJoystickConfigFile(ChInteractiveDriverIRR self, std::string const & filename)"""
        return _vehicle.ChInteractiveDriverIRR_SetJoystickConfigFile(self, filename)

    def SetJoystickDebug(self, val):
        r"""SetJoystickDebug(ChInteractiveDriverIRR self, bool val)"""
        return _vehicle.ChInteractiveDriverIRR_SetJoystickDebug(self, val)

    def SetButtonCallback(self, button, cbfun):
        r"""SetButtonCallback(ChInteractiveDriverIRR self, int button, void (*)() cbfun)"""
        return _vehicle.ChInteractiveDriverIRR_SetButtonCallback(self, button, cbfun)

# Register ChInteractiveDriverIRR in _vehicle:
_vehicle.ChInteractiveDriverIRR_swigregister(ChInteractiveDriverIRR)

class ChSuspensionTestRigInteractiveDriverIRR(ChSuspensionTestRigDriver):
    r"""Proxy of C++ chrono::vehicle::ChSuspensionTestRigInteractiveDriverIRR class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, vsys):
        r"""__init__(ChSuspensionTestRigInteractiveDriverIRR self, ChVisualSystemIrrlicht vsys) -> ChSuspensionTestRigInteractiveDriverIRR"""
        _vehicle.ChSuspensionTestRigInteractiveDriverIRR_swiginit(self, _vehicle.new_ChSuspensionTestRigInteractiveDriverIRR(vsys))
    __swig_destroy__ = _vehicle.delete_ChSuspensionTestRigInteractiveDriverIRR

    def SetSteeringDelta(self, delta):
        r"""SetSteeringDelta(ChSuspensionTestRigInteractiveDriverIRR self, double delta)"""
        return _vehicle.ChSuspensionTestRigInteractiveDriverIRR_SetSteeringDelta(self, delta)

    def SetDisplacementDelta(self, delta):
        r"""SetDisplacementDelta(ChSuspensionTestRigInteractiveDriverIRR self, double delta)"""
        return _vehicle.ChSuspensionTestRigInteractiveDriverIRR_SetDisplacementDelta(self, delta)

# Register ChSuspensionTestRigInteractiveDriverIRR in _vehicle:
_vehicle.ChSuspensionTestRigInteractiveDriverIRR_swigregister(ChSuspensionTestRigInteractiveDriverIRR)

class dimension2du(object):
    r"""Proxy of C++ irr::core::dimension2d< irr::u32 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(dimension2du self) -> dimension2du
        __init__(dimension2du self, unsigned int const & width, unsigned int const & height) -> dimension2du
        __init__(dimension2du self, irr::core::vector2d< unsigned int > const & other) -> dimension2du
        """
        _vehicle.dimension2du_swiginit(self, _vehicle.new_dimension2du(*args))

    def __eq__(self, *args):
        r"""
        __eq__(dimension2du self, dimension2du other) -> bool
        __eq__(dimension2du self, irr::core::vector2d< unsigned int > const & other) -> bool
        """
        return _vehicle.dimension2du___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(dimension2du self, dimension2du other) -> bool
        __ne__(dimension2du self, irr::core::vector2d< unsigned int > const & other) -> bool
        """
        return _vehicle.dimension2du___ne__(self, *args)

    def set(self, width, height):
        r"""set(dimension2du self, unsigned int const & width, unsigned int const & height) -> dimension2du"""
        return _vehicle.dimension2du_set(self, width, height)

    def __itruediv__(self, *args):
        return _vehicle.dimension2du___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _vehicle.dimension2du___truediv__(self, *args)
    __div__ = __truediv__



    def __imul__(self, scale):
        r"""__imul__(dimension2du self, unsigned int const & scale) -> dimension2du"""
        return _vehicle.dimension2du___imul__(self, scale)

    def __mul__(self, scale):
        r"""__mul__(dimension2du self, unsigned int const & scale) -> dimension2du"""
        return _vehicle.dimension2du___mul__(self, scale)

    def __iadd__(self, other):
        r"""__iadd__(dimension2du self, dimension2du other) -> dimension2du"""
        return _vehicle.dimension2du___iadd__(self, other)

    def __add__(self, other):
        r"""__add__(dimension2du self, dimension2du other) -> dimension2du"""
        return _vehicle.dimension2du___add__(self, other)

    def __isub__(self, other):
        r"""__isub__(dimension2du self, dimension2du other) -> dimension2du"""
        return _vehicle.dimension2du___isub__(self, other)

    def __sub__(self, other):
        r"""__sub__(dimension2du self, dimension2du other) -> dimension2du"""
        return _vehicle.dimension2du___sub__(self, other)

    def getArea(self):
        r"""getArea(dimension2du self) -> unsigned int"""
        return _vehicle.dimension2du_getArea(self)

    def getOptimalSize(self, requirePowerOfTwo=True, requireSquare=False, larger=True, maxValue=0):
        r"""getOptimalSize(dimension2du self, bool requirePowerOfTwo=True, bool requireSquare=False, bool larger=True, irr::u32 maxValue=0) -> dimension2du"""
        return _vehicle.dimension2du_getOptimalSize(self, requirePowerOfTwo, requireSquare, larger, maxValue)

    def getInterpolated(self, other, d):
        r"""getInterpolated(dimension2du self, dimension2du other, irr::f32 d) -> dimension2du"""
        return _vehicle.dimension2du_getInterpolated(self, other, d)
    Width = property(_vehicle.dimension2du_Width_get, _vehicle.dimension2du_Width_set, doc=r"""Width : unsigned int""")
    Height = property(_vehicle.dimension2du_Height_get, _vehicle.dimension2du_Height_set, doc=r"""Height : unsigned int""")
    __swig_destroy__ = _vehicle.delete_dimension2du

# Register dimension2du in _vehicle:
_vehicle.dimension2du_swigregister(dimension2du)


def CastToChInteractiveDriverIRR(in_obj):
    r"""CastToChInteractiveDriverIRR(std::shared_ptr< chrono::vehicle::ChInteractiveDriver > in_obj) -> std::shared_ptr< chrono::vehicle::ChInteractiveDriverIRR >"""
    return _vehicle.CastToChInteractiveDriverIRR(in_obj)
class ChPatchList(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(ChPatchList self) -> SwigPyIterator"""
        return _vehicle.ChPatchList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(ChPatchList self) -> bool"""
        return _vehicle.ChPatchList___nonzero__(self)

    def __bool__(self):
        r"""__bool__(ChPatchList self) -> bool"""
        return _vehicle.ChPatchList___bool__(self)

    def __len__(self):
        r"""__len__(ChPatchList self) -> std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::size_type"""
        return _vehicle.ChPatchList___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(ChPatchList self, std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::difference_type i, std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::difference_type j) -> ChPatchList"""
        return _vehicle.ChPatchList___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(ChPatchList self, std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::difference_type i, std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::difference_type j)
        __setslice__(ChPatchList self, std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::difference_type i, std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::difference_type j, ChPatchList v)
        """
        return _vehicle.ChPatchList___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(ChPatchList self, std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::difference_type i, std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::difference_type j)"""
        return _vehicle.ChPatchList___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(ChPatchList self, std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::difference_type i)
        __delitem__(ChPatchList self, PySliceObject * slice)
        """
        return _vehicle.ChPatchList___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(ChPatchList self, PySliceObject * slice) -> ChPatchList
        __getitem__(ChPatchList self, std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::difference_type i) -> std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::value_type const &
        """
        return _vehicle.ChPatchList___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(ChPatchList self, PySliceObject * slice, ChPatchList v)
        __setitem__(ChPatchList self, PySliceObject * slice)
        __setitem__(ChPatchList self, std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::difference_type i, std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::value_type const & x)
        """
        return _vehicle.ChPatchList___setitem__(self, *args)

    def pop(self):
        r"""pop(ChPatchList self) -> std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::value_type"""
        return _vehicle.ChPatchList_pop(self)

    def append(self, x):
        r"""append(ChPatchList self, std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::value_type const & x)"""
        return _vehicle.ChPatchList_append(self, x)

    def empty(self):
        r"""empty(ChPatchList self) -> bool"""
        return _vehicle.ChPatchList_empty(self)

    def size(self):
        r"""size(ChPatchList self) -> std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::size_type"""
        return _vehicle.ChPatchList_size(self)

    def swap(self, v):
        r"""swap(ChPatchList self, ChPatchList v)"""
        return _vehicle.ChPatchList_swap(self, v)

    def begin(self):
        r"""begin(ChPatchList self) -> std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::iterator"""
        return _vehicle.ChPatchList_begin(self)

    def end(self):
        r"""end(ChPatchList self) -> std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::iterator"""
        return _vehicle.ChPatchList_end(self)

    def rbegin(self):
        r"""rbegin(ChPatchList self) -> std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::reverse_iterator"""
        return _vehicle.ChPatchList_rbegin(self)

    def rend(self):
        r"""rend(ChPatchList self) -> std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::reverse_iterator"""
        return _vehicle.ChPatchList_rend(self)

    def clear(self):
        r"""clear(ChPatchList self)"""
        return _vehicle.ChPatchList_clear(self)

    def get_allocator(self):
        r"""get_allocator(ChPatchList self) -> std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::allocator_type"""
        return _vehicle.ChPatchList_get_allocator(self)

    def pop_back(self):
        r"""pop_back(ChPatchList self)"""
        return _vehicle.ChPatchList_pop_back(self)

    def erase(self, *args):
        r"""
        erase(ChPatchList self, std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::iterator pos) -> std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::iterator
        erase(ChPatchList self, std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::iterator first, std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::iterator last) -> std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::iterator
        """
        return _vehicle.ChPatchList_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(ChPatchList self) -> ChPatchList
        __init__(ChPatchList self, ChPatchList other) -> ChPatchList
        __init__(ChPatchList self, std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::size_type size) -> ChPatchList
        __init__(ChPatchList self, std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::size_type size, std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::value_type const & value) -> ChPatchList
        """
        _vehicle.ChPatchList_swiginit(self, _vehicle.new_ChPatchList(*args))

    def push_back(self, x):
        r"""push_back(ChPatchList self, std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::value_type const & x)"""
        return _vehicle.ChPatchList_push_back(self, x)

    def front(self):
        r"""front(ChPatchList self) -> std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::value_type const &"""
        return _vehicle.ChPatchList_front(self)

    def back(self):
        r"""back(ChPatchList self) -> std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::value_type const &"""
        return _vehicle.ChPatchList_back(self)

    def assign(self, n, x):
        r"""assign(ChPatchList self, std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::size_type n, std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::value_type const & x)"""
        return _vehicle.ChPatchList_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(ChPatchList self, std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::size_type new_size)
        resize(ChPatchList self, std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::size_type new_size, std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::value_type const & x)
        """
        return _vehicle.ChPatchList_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(ChPatchList self, std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::iterator pos, std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::value_type const & x) -> std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::iterator
        insert(ChPatchList self, std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::iterator pos, std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::size_type n, std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::value_type const & x)
        """
        return _vehicle.ChPatchList_insert(self, *args)

    def reserve(self, n):
        r"""reserve(ChPatchList self, std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::size_type n)"""
        return _vehicle.ChPatchList_reserve(self, n)

    def capacity(self):
        r"""capacity(ChPatchList self) -> std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > >::size_type"""
        return _vehicle.ChPatchList_capacity(self)
    __swig_destroy__ = _vehicle.delete_ChPatchList

# Register ChPatchList in _vehicle:
_vehicle.ChPatchList_swigregister(ChPatchList)

class ChTerrain(object):
    r"""Proxy of C++ chrono::vehicle::ChTerrain class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChTerrain self) -> ChTerrain"""
        _vehicle.ChTerrain_swiginit(self, _vehicle.new_ChTerrain())
    __swig_destroy__ = _vehicle.delete_ChTerrain

    def Synchronize(self, time):
        r"""Synchronize(ChTerrain self, double time)"""
        return _vehicle.ChTerrain_Synchronize(self, time)

    def Advance(self, step):
        r"""Advance(ChTerrain self, double step)"""
        return _vehicle.ChTerrain_Advance(self, step)

    def GetHeight(self, loc):
        r"""GetHeight(ChTerrain self, ChVectorD loc) -> double"""
        return _vehicle.ChTerrain_GetHeight(self, loc)

    def GetNormal(self, loc):
        r"""GetNormal(ChTerrain self, ChVectorD loc) -> ChVectorD"""
        return _vehicle.ChTerrain_GetNormal(self, loc)

    def GetCoefficientFriction(self, loc):
        r"""GetCoefficientFriction(ChTerrain self, ChVectorD loc) -> float"""
        return _vehicle.ChTerrain_GetCoefficientFriction(self, loc)

    def GetProperties(self, loc, height, normal, friction):
        r"""GetProperties(ChTerrain self, ChVectorD loc, double & height, ChVectorD normal, float & friction)"""
        return _vehicle.ChTerrain_GetProperties(self, loc, height, normal, friction)

    def RegisterHeightFunctor(self, functor):
        r"""RegisterHeightFunctor(ChTerrain self, std::shared_ptr< chrono::vehicle::ChTerrain::HeightFunctor > functor)"""
        return _vehicle.ChTerrain_RegisterHeightFunctor(self, functor)

    def RegisterNormalFunctor(self, functor):
        r"""RegisterNormalFunctor(ChTerrain self, std::shared_ptr< chrono::vehicle::ChTerrain::NormalFunctor > functor)"""
        return _vehicle.ChTerrain_RegisterNormalFunctor(self, functor)

    def RegisterFrictionFunctor(self, functor):
        r"""RegisterFrictionFunctor(ChTerrain self, std::shared_ptr< chrono::vehicle::ChTerrain::FrictionFunctor > functor)"""
        return _vehicle.ChTerrain_RegisterFrictionFunctor(self, functor)

# Register ChTerrain in _vehicle:
_vehicle.ChTerrain_swigregister(ChTerrain)

class HeightFunctor(object):
    r"""Proxy of C++ chrono::vehicle::ChTerrain::HeightFunctor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_HeightFunctor

    def __call__(self, loc):
        r"""__call__(HeightFunctor self, ChVectorD loc) -> double"""
        return _vehicle.HeightFunctor___call__(self, loc)

# Register HeightFunctor in _vehicle:
_vehicle.HeightFunctor_swigregister(HeightFunctor)

class NormalFunctor(object):
    r"""Proxy of C++ chrono::vehicle::ChTerrain::NormalFunctor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_NormalFunctor

    def __call__(self, loc):
        r"""__call__(NormalFunctor self, ChVectorD loc) -> ChVectorD"""
        return _vehicle.NormalFunctor___call__(self, loc)

# Register NormalFunctor in _vehicle:
_vehicle.NormalFunctor_swigregister(NormalFunctor)

class FrictionFunctor(object):
    r"""Proxy of C++ chrono::vehicle::ChTerrain::FrictionFunctor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_FrictionFunctor

    def __call__(self, loc):
        r"""__call__(FrictionFunctor self, ChVectorD loc) -> float"""
        return _vehicle.FrictionFunctor___call__(self, loc)

# Register FrictionFunctor in _vehicle:
_vehicle.FrictionFunctor_swigregister(FrictionFunctor)

class FlatTerrain(ChTerrain):
    r"""Proxy of C++ chrono::vehicle::FlatTerrain class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, height, friction=0.8):
        r"""__init__(FlatTerrain self, double height, float friction=0.8) -> FlatTerrain"""
        _vehicle.FlatTerrain_swiginit(self, _vehicle.new_FlatTerrain(height, friction))
    __swig_destroy__ = _vehicle.delete_FlatTerrain

    def GetHeight(self, loc):
        r"""GetHeight(FlatTerrain self, ChVectorD loc) -> double"""
        return _vehicle.FlatTerrain_GetHeight(self, loc)

    def GetNormal(self, loc):
        r"""GetNormal(FlatTerrain self, ChVectorD loc) -> ChVectorD"""
        return _vehicle.FlatTerrain_GetNormal(self, loc)

    def GetCoefficientFriction(self, loc):
        r"""GetCoefficientFriction(FlatTerrain self, ChVectorD loc) -> float"""
        return _vehicle.FlatTerrain_GetCoefficientFriction(self, loc)

# Register FlatTerrain in _vehicle:
_vehicle.FlatTerrain_swigregister(FlatTerrain)

class RigidTerrain(ChTerrain):
    r"""Proxy of C++ chrono::vehicle::RigidTerrain class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PatchType_BOX = _vehicle.RigidTerrain_PatchType_BOX
    
    PatchType_MESH = _vehicle.RigidTerrain_PatchType_MESH
    
    PatchType_HEIGHT_MAP = _vehicle.RigidTerrain_PatchType_HEIGHT_MAP
    

    def __init__(self, *args):
        r"""
        __init__(RigidTerrain self, ChSystem system) -> RigidTerrain
        __init__(RigidTerrain self, ChSystem system, std::string const & filename) -> RigidTerrain
        """
        _vehicle.RigidTerrain_swiginit(self, _vehicle.new_RigidTerrain(*args))
    __swig_destroy__ = _vehicle.delete_RigidTerrain

    def AddPatch(self, *args):
        r"""
        AddPatch(RigidTerrain self, std::shared_ptr< chrono::ChMaterialSurface > material, ChCoordsysD position, double length, double width, double thickness=1, bool tiled=False, double max_tile_size=1, bool visualization=True) -> std::shared_ptr< chrono::vehicle::RigidTerrain::Patch >
        AddPatch(RigidTerrain self, std::shared_ptr< chrono::ChMaterialSurface > material, ChCoordsysD position, std::string const & mesh_file, bool connected_mesh=True, double sweep_sphere_radius=0, bool visualization=True) -> std::shared_ptr< chrono::vehicle::RigidTerrain::Patch >
        AddPatch(RigidTerrain self, std::shared_ptr< chrono::ChMaterialSurface > material, ChCoordsysD position, std::string const & heightmap_file, double length, double width, double hMin, double hMax, bool connected_mesh=True, double sweep_sphere_radius=0, bool visualization=True) -> std::shared_ptr< chrono::vehicle::RigidTerrain::Patch >
        """
        return _vehicle.RigidTerrain_AddPatch(self, *args)

    def Initialize(self):
        r"""Initialize(RigidTerrain self)"""
        return _vehicle.RigidTerrain_Initialize(self)

    def GetPatches(self):
        r"""GetPatches(RigidTerrain self) -> ChPatchList"""
        return _vehicle.RigidTerrain_GetPatches(self)

    def UseLocationDependentFriction(self, val):
        r"""UseLocationDependentFriction(RigidTerrain self, bool val)"""
        return _vehicle.RigidTerrain_UseLocationDependentFriction(self, val)

    def GetHeight(self, loc):
        r"""GetHeight(RigidTerrain self, ChVectorD loc) -> double"""
        return _vehicle.RigidTerrain_GetHeight(self, loc)

    def GetNormal(self, loc):
        r"""GetNormal(RigidTerrain self, ChVectorD loc) -> ChVectorD"""
        return _vehicle.RigidTerrain_GetNormal(self, loc)

    def GetCoefficientFriction(self, loc):
        r"""GetCoefficientFriction(RigidTerrain self, ChVectorD loc) -> float"""
        return _vehicle.RigidTerrain_GetCoefficientFriction(self, loc)

    def GetProperties(self, loc, height, normal, friction):
        r"""GetProperties(RigidTerrain self, ChVectorD loc, double & height, ChVectorD normal, float & friction)"""
        return _vehicle.RigidTerrain_GetProperties(self, loc, height, normal, friction)

    def ExportMeshPovray(self, out_dir, smoothed=False):
        r"""ExportMeshPovray(RigidTerrain self, std::string const & out_dir, bool smoothed=False)"""
        return _vehicle.RigidTerrain_ExportMeshPovray(self, out_dir, smoothed)

    def ExportMeshWavefront(self, out_dir):
        r"""ExportMeshWavefront(RigidTerrain self, std::string const & out_dir)"""
        return _vehicle.RigidTerrain_ExportMeshWavefront(self, out_dir)

    def FindPoint(self, loc, height, normal, friction):
        r"""FindPoint(RigidTerrain self, ChVectorD loc, double & height, ChVectorD normal, float & friction) -> bool"""
        return _vehicle.RigidTerrain_FindPoint(self, loc, height, normal, friction)

    def SetCollisionFamily(self, family):
        r"""SetCollisionFamily(RigidTerrain self, int family)"""
        return _vehicle.RigidTerrain_SetCollisionFamily(self, family)

# Register RigidTerrain in _vehicle:
_vehicle.RigidTerrain_swigregister(RigidTerrain)

class Patch(object):
    r"""Proxy of C++ chrono::vehicle::RigidTerrain::Patch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_Patch

    def SetColor(self, color):
        r"""SetColor(Patch self, ChColor color)"""
        return _vehicle.Patch_SetColor(self, color)

    def SetTexture(self, filename, scale_x=1, scale_y=1):
        r"""SetTexture(Patch self, std::string const & filename, float scale_x=1, float scale_y=1)"""
        return _vehicle.Patch_SetTexture(self, filename, scale_x, scale_y)

    def GetGroundBody(self):
        r"""GetGroundBody(Patch self) -> std::shared_ptr< chrono::ChBody >"""
        return _vehicle.Patch_GetGroundBody(self)

    def Initialize(self):
        r"""Initialize(Patch self)"""
        return _vehicle.Patch_Initialize(self)

# Register Patch in _vehicle:
_vehicle.Patch_swigregister(Patch)


def new_intp():
    r"""new_intp() -> int *"""
    return _vehicle.new_intp()

def copy_intp(value):
    r"""copy_intp(int value) -> int *"""
    return _vehicle.copy_intp(value)

def delete_intp(obj):
    r"""delete_intp(int * obj)"""
    return _vehicle.delete_intp(obj)

def intp_assign(obj, value):
    r"""intp_assign(int * obj, int value)"""
    return _vehicle.intp_assign(obj, value)

def intp_value(obj):
    r"""intp_value(int * obj) -> int"""
    return _vehicle.intp_value(obj)

def new_doublep():
    r"""new_doublep() -> double *"""
    return _vehicle.new_doublep()

def copy_doublep(value):
    r"""copy_doublep(double value) -> double *"""
    return _vehicle.copy_doublep(value)

def delete_doublep(obj):
    r"""delete_doublep(double * obj)"""
    return _vehicle.delete_doublep(obj)

def doublep_assign(obj, value):
    r"""doublep_assign(double * obj, double value)"""
    return _vehicle.doublep_assign(obj, value)

def doublep_value(obj):
    r"""doublep_value(double * obj) -> double"""
    return _vehicle.doublep_value(obj)
class SCMTerrain(ChTerrain):
    r"""Proxy of C++ chrono::vehicle::SCMTerrain class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PLOT_NONE = _vehicle.SCMTerrain_PLOT_NONE
    
    PLOT_LEVEL = _vehicle.SCMTerrain_PLOT_LEVEL
    
    PLOT_LEVEL_INITIAL = _vehicle.SCMTerrain_PLOT_LEVEL_INITIAL
    
    PLOT_SINKAGE = _vehicle.SCMTerrain_PLOT_SINKAGE
    
    PLOT_SINKAGE_ELASTIC = _vehicle.SCMTerrain_PLOT_SINKAGE_ELASTIC
    
    PLOT_SINKAGE_PLASTIC = _vehicle.SCMTerrain_PLOT_SINKAGE_PLASTIC
    
    PLOT_STEP_PLASTIC_FLOW = _vehicle.SCMTerrain_PLOT_STEP_PLASTIC_FLOW
    
    PLOT_PRESSURE = _vehicle.SCMTerrain_PLOT_PRESSURE
    
    PLOT_PRESSURE_YELD = _vehicle.SCMTerrain_PLOT_PRESSURE_YELD
    
    PLOT_SHEAR = _vehicle.SCMTerrain_PLOT_SHEAR
    
    PLOT_K_JANOSI = _vehicle.SCMTerrain_PLOT_K_JANOSI
    
    PLOT_IS_TOUCHED = _vehicle.SCMTerrain_PLOT_IS_TOUCHED
    
    PLOT_ISLAND_ID = _vehicle.SCMTerrain_PLOT_ISLAND_ID
    
    PLOT_MASSREMAINDER = _vehicle.SCMTerrain_PLOT_MASSREMAINDER
    

    def __init__(self, system, visualization_mesh=True):
        r"""__init__(SCMTerrain self, ChSystem system, bool visualization_mesh=True) -> SCMTerrain"""
        _vehicle.SCMTerrain_swiginit(self, _vehicle.new_SCMTerrain(system, visualization_mesh))
    __swig_destroy__ = _vehicle.delete_SCMTerrain

    def SetPlane(self, plane):
        r"""SetPlane(SCMTerrain self, ChCoordsysD plane)"""
        return _vehicle.SCMTerrain_SetPlane(self, plane)

    def GetPlane(self):
        r"""GetPlane(SCMTerrain self) -> ChCoordsysD"""
        return _vehicle.SCMTerrain_GetPlane(self)

    def SetSoilParameters(self, Bekker_Kphi, Bekker_Kc, Bekker_n, Mohr_cohesion, Mohr_friction, Janosi_shear, elastic_K, damping_R):
        r"""SetSoilParameters(SCMTerrain self, double Bekker_Kphi, double Bekker_Kc, double Bekker_n, double Mohr_cohesion, double Mohr_friction, double Janosi_shear, double elastic_K, double damping_R)"""
        return _vehicle.SCMTerrain_SetSoilParameters(self, Bekker_Kphi, Bekker_Kc, Bekker_n, Mohr_cohesion, Mohr_friction, Janosi_shear, elastic_K, damping_R)

    def EnableBulldozing(self, mb):
        r"""EnableBulldozing(SCMTerrain self, bool mb)"""
        return _vehicle.SCMTerrain_EnableBulldozing(self, mb)

    def SetBulldozingParameters(self, erosion_angle, flow_factor=1.0, erosion_iterations=3, erosion_propagations=10):
        r"""SetBulldozingParameters(SCMTerrain self, double erosion_angle, double flow_factor=1.0, int erosion_iterations=3, int erosion_propagations=10)"""
        return _vehicle.SCMTerrain_SetBulldozingParameters(self, erosion_angle, flow_factor, erosion_iterations, erosion_propagations)

    def SetTestHeight(self, offset):
        r"""SetTestHeight(SCMTerrain self, double offset)"""
        return _vehicle.SCMTerrain_SetTestHeight(self, offset)

    def GetTestHeight(self):
        r"""GetTestHeight(SCMTerrain self) -> double"""
        return _vehicle.SCMTerrain_GetTestHeight(self)

    def SetPlotType(self, plot_type, min_val, max_val):
        r"""SetPlotType(SCMTerrain self, chrono::vehicle::SCMTerrain::DataPlotType plot_type, double min_val, double max_val)"""
        return _vehicle.SCMTerrain_SetPlotType(self, plot_type, min_val, max_val)

    def SetColor(self, color):
        r"""SetColor(SCMTerrain self, ChColor color)"""
        return _vehicle.SCMTerrain_SetColor(self, color)

    def SetTexture(self, tex_file, scale_x=1, scale_y=1):
        r"""SetTexture(SCMTerrain self, std::string const tex_file, float scale_x=1, float scale_y=1)"""
        return _vehicle.SCMTerrain_SetTexture(self, tex_file, scale_x, scale_y)

    def AddMovingPatch(self, body, OOBB_center, OOBB_dims):
        r"""AddMovingPatch(SCMTerrain self, std::shared_ptr< chrono::ChBody > body, ChVectorD OOBB_center, ChVectorD OOBB_dims)"""
        return _vehicle.SCMTerrain_AddMovingPatch(self, body, OOBB_center, OOBB_dims)

    def RegisterSoilParametersCallback(self, cb):
        r"""RegisterSoilParametersCallback(SCMTerrain self, std::shared_ptr< chrono::vehicle::SCMTerrain::SoilParametersCallback > cb)"""
        return _vehicle.SCMTerrain_RegisterSoilParametersCallback(self, cb)

    def GetInitHeight(self, loc):
        r"""GetInitHeight(SCMTerrain self, ChVectorD loc) -> double"""
        return _vehicle.SCMTerrain_GetInitHeight(self, loc)

    def GetInitNormal(self, loc):
        r"""GetInitNormal(SCMTerrain self, ChVectorD loc) -> ChVectorD"""
        return _vehicle.SCMTerrain_GetInitNormal(self, loc)

    def GetHeight(self, loc):
        r"""GetHeight(SCMTerrain self, ChVectorD loc) -> double"""
        return _vehicle.SCMTerrain_GetHeight(self, loc)

    def GetNormal(self, loc):
        r"""GetNormal(SCMTerrain self, ChVectorD loc) -> ChVectorD"""
        return _vehicle.SCMTerrain_GetNormal(self, loc)

    def GetCoefficientFriction(self, loc):
        r"""GetCoefficientFriction(SCMTerrain self, ChVectorD loc) -> float"""
        return _vehicle.SCMTerrain_GetCoefficientFriction(self, loc)

    def GetNodeInfo(self, loc):
        r"""GetNodeInfo(SCMTerrain self, ChVectorD loc) -> NodeInfo"""
        return _vehicle.SCMTerrain_GetNodeInfo(self, loc)

    def GetMesh(self):
        r"""GetMesh(SCMTerrain self) -> std::shared_ptr< chrono::ChTriangleMeshShape >"""
        return _vehicle.SCMTerrain_GetMesh(self)

    def SetMeshWireframe(self, val):
        r"""SetMeshWireframe(SCMTerrain self, bool val)"""
        return _vehicle.SCMTerrain_SetMeshWireframe(self, val)

    def WriteMesh(self, filename):
        r"""WriteMesh(SCMTerrain self, std::string const & filename)"""
        return _vehicle.SCMTerrain_WriteMesh(self, filename)

    def SetCosimulationMode(self, val):
        r"""SetCosimulationMode(SCMTerrain self, bool val)"""
        return _vehicle.SCMTerrain_SetCosimulationMode(self, val)

    def Initialize(self, *args):
        r"""
        Initialize(SCMTerrain self, double sizeX, double sizeY, double delta)
        Initialize(SCMTerrain self, std::string const & heightmap_file, double sizeX, double sizeY, double hMin, double hMax, double delta)
        Initialize(SCMTerrain self, std::string const & mesh_file, double delta)
        Initialize(SCMTerrain self, geometry::ChTriangleMeshConnected const & trimesh, double delta)
        """
        return _vehicle.SCMTerrain_Initialize(self, *args)

    def GetModifiedNodes(self, all_nodes=False):
        r"""GetModifiedNodes(SCMTerrain self, bool all_nodes=False) -> std::vector< chrono::vehicle::SCMTerrain::NodeLevel,std::allocator< chrono::vehicle::SCMTerrain::NodeLevel > >"""
        return _vehicle.SCMTerrain_GetModifiedNodes(self, all_nodes)

    def SetModifiedNodes(self, nodes):
        r"""SetModifiedNodes(SCMTerrain self, std::vector< chrono::vehicle::SCMTerrain::NodeLevel,std::allocator< chrono::vehicle::SCMTerrain::NodeLevel > > const & nodes)"""
        return _vehicle.SCMTerrain_SetModifiedNodes(self, nodes)

    def GetContactForceBody(self, body, force, torque):
        r"""GetContactForceBody(SCMTerrain self, std::shared_ptr< chrono::ChBody > body, ChVectorD force, ChVectorD torque) -> bool"""
        return _vehicle.SCMTerrain_GetContactForceBody(self, body, force, torque)

    def GetContactForceNode(self, node, force):
        r"""GetContactForceNode(SCMTerrain self, std::shared_ptr< chrono::fea::ChNodeFEAbase > node, ChVectorD force) -> bool"""
        return _vehicle.SCMTerrain_GetContactForceNode(self, node, force)

    def GetNumRayCasts(self):
        r"""GetNumRayCasts(SCMTerrain self) -> int"""
        return _vehicle.SCMTerrain_GetNumRayCasts(self)

    def GetNumRayHits(self):
        r"""GetNumRayHits(SCMTerrain self) -> int"""
        return _vehicle.SCMTerrain_GetNumRayHits(self)

    def GetNumContactPatches(self):
        r"""GetNumContactPatches(SCMTerrain self) -> int"""
        return _vehicle.SCMTerrain_GetNumContactPatches(self)

    def GetNumErosionNodes(self):
        r"""GetNumErosionNodes(SCMTerrain self) -> int"""
        return _vehicle.SCMTerrain_GetNumErosionNodes(self)

    def GetTimerMovingPatches(self):
        r"""GetTimerMovingPatches(SCMTerrain self) -> double"""
        return _vehicle.SCMTerrain_GetTimerMovingPatches(self)

    def GetTimerRayTesting(self):
        r"""GetTimerRayTesting(SCMTerrain self) -> double"""
        return _vehicle.SCMTerrain_GetTimerRayTesting(self)

    def GetTimerRayCasting(self):
        r"""GetTimerRayCasting(SCMTerrain self) -> double"""
        return _vehicle.SCMTerrain_GetTimerRayCasting(self)

    def GetTimerContactPatches(self):
        r"""GetTimerContactPatches(SCMTerrain self) -> double"""
        return _vehicle.SCMTerrain_GetTimerContactPatches(self)

    def GetTimerContactForces(self):
        r"""GetTimerContactForces(SCMTerrain self) -> double"""
        return _vehicle.SCMTerrain_GetTimerContactForces(self)

    def GetTimerBulldozing(self):
        r"""GetTimerBulldozing(SCMTerrain self) -> double"""
        return _vehicle.SCMTerrain_GetTimerBulldozing(self)

    def GetTimerVisUpdate(self):
        r"""GetTimerVisUpdate(SCMTerrain self) -> double"""
        return _vehicle.SCMTerrain_GetTimerVisUpdate(self)

    def PrintStepStatistics(self, os):
        r"""PrintStepStatistics(SCMTerrain self, std::ostream & os)"""
        return _vehicle.SCMTerrain_PrintStepStatistics(self, os)

    def GetSCMLoader(self):
        r"""GetSCMLoader(SCMTerrain self) -> std::shared_ptr< chrono::vehicle::SCMLoader >"""
        return _vehicle.SCMTerrain_GetSCMLoader(self)

    def SetBaseMeshLevel(self, level):
        r"""SetBaseMeshLevel(SCMTerrain self, double level)"""
        return _vehicle.SCMTerrain_SetBaseMeshLevel(self, level)

# Register SCMTerrain in _vehicle:
_vehicle.SCMTerrain_swigregister(SCMTerrain)

class NodeInfo(object):
    r"""Proxy of C++ chrono::vehicle::SCMTerrain::NodeInfo class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sinkage = property(_vehicle.NodeInfo_sinkage_get, _vehicle.NodeInfo_sinkage_set, doc=r"""sinkage : double""")
    sinkage_plastic = property(_vehicle.NodeInfo_sinkage_plastic_get, _vehicle.NodeInfo_sinkage_plastic_set, doc=r"""sinkage_plastic : double""")
    sinkage_elastic = property(_vehicle.NodeInfo_sinkage_elastic_get, _vehicle.NodeInfo_sinkage_elastic_set, doc=r"""sinkage_elastic : double""")
    sigma = property(_vehicle.NodeInfo_sigma_get, _vehicle.NodeInfo_sigma_set, doc=r"""sigma : double""")
    sigma_yield = property(_vehicle.NodeInfo_sigma_yield_get, _vehicle.NodeInfo_sigma_yield_set, doc=r"""sigma_yield : double""")
    kshear = property(_vehicle.NodeInfo_kshear_get, _vehicle.NodeInfo_kshear_set, doc=r"""kshear : double""")
    tau = property(_vehicle.NodeInfo_tau_get, _vehicle.NodeInfo_tau_set, doc=r"""tau : double""")

    def __init__(self):
        r"""__init__(NodeInfo self) -> NodeInfo"""
        _vehicle.NodeInfo_swiginit(self, _vehicle.new_NodeInfo())
    __swig_destroy__ = _vehicle.delete_NodeInfo

# Register NodeInfo in _vehicle:
_vehicle.NodeInfo_swigregister(NodeInfo)

class SoilParametersCallback(object):
    r"""Proxy of C++ chrono::vehicle::SCMTerrain::SoilParametersCallback class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_SoilParametersCallback

    def Set(self, loc, Bekker_Kphi, Bekker_Kc, Bekker_n, Mohr_cohesion, Mohr_friction, Janosi_shear, elastic_K, damping_R):
        r"""Set(SoilParametersCallback self, ChVectorD loc, double & Bekker_Kphi, double & Bekker_Kc, double & Bekker_n, double & Mohr_cohesion, double & Mohr_friction, double & Janosi_shear, double & elastic_K, double & damping_R)"""
        return _vehicle.SoilParametersCallback_Set(self, loc, Bekker_Kphi, Bekker_Kc, Bekker_n, Mohr_cohesion, Mohr_friction, Janosi_shear, elastic_K, damping_R)

    def __init__(self):
        r"""__init__(SoilParametersCallback self) -> SoilParametersCallback"""
        if self.__class__ == SoilParametersCallback:
            _self = None
        else:
            _self = self
        _vehicle.SoilParametersCallback_swiginit(self, _vehicle.new_SoilParametersCallback(_self, ))
    def __disown__(self):
        self.this.disown()
        _vehicle.disown_SoilParametersCallback(self)
        return weakref.proxy(self)

# Register SoilParametersCallback in _vehicle:
_vehicle.SoilParametersCallback_swigregister(SoilParametersCallback)

class SCMContactableData(object):
    r"""Proxy of C++ chrono::vehicle::SCMContactableData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, area_ratio, Mohr_cohesion, Mohr_friction, Janosi_shear):
        r"""__init__(SCMContactableData self, double area_ratio, double Mohr_cohesion, double Mohr_friction, double Janosi_shear) -> SCMContactableData"""
        _vehicle.SCMContactableData_swiginit(self, _vehicle.new_SCMContactableData(area_ratio, Mohr_cohesion, Mohr_friction, Janosi_shear))
    __swig_destroy__ = _vehicle.delete_SCMContactableData

# Register SCMContactableData in _vehicle:
_vehicle.SCMContactableData_swigregister(SCMContactableData)

class SCMLoader(pychrono.core.ChLoadContainer):
    r"""Proxy of C++ chrono::vehicle::SCMLoader class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, system, visualization_mesh):
        r"""__init__(SCMLoader self, ChSystem system, bool visualization_mesh) -> SCMLoader"""
        _vehicle.SCMLoader_swiginit(self, _vehicle.new_SCMLoader(system, visualization_mesh))
    __swig_destroy__ = _vehicle.delete_SCMLoader

    def Initialize(self, *args):
        r"""
        Initialize(SCMLoader self, double hsizeX, double hsizeY, double delta)
        Initialize(SCMLoader self, std::string const & heightmap_file, double sizeX, double sizeY, double hMin, double hMax, double delta)
        Initialize(SCMLoader self, std::string const & mesh_file, double delta)
        Initialize(SCMLoader self, geometry::ChTriangleMeshConnected const & trimesh, double delta)
        """
        return _vehicle.SCMLoader_Initialize(self, *args)

# Register SCMLoader in _vehicle:
_vehicle.SCMLoader_swigregister(SCMLoader)

class ChSteering(ChPart):
    r"""Proxy of C++ chrono::vehicle::ChSteering class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChSteering

    def GetRelTransform(self):
        r"""GetRelTransform(ChSteering self) -> chrono::ChFrame< > const &"""
        return _vehicle.ChSteering_GetRelTransform(self)

    def GetSteeringLink(self):
        r"""GetSteeringLink(ChSteering self) -> std::shared_ptr< chrono::ChBody >"""
        return _vehicle.ChSteering_GetSteeringLink(self)

    def Initialize(self, chassis, location, rotation):
        r"""Initialize(ChSteering self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, ChVectorD location, ChQuaternionD rotation)"""
        return _vehicle.ChSteering_Initialize(self, chassis, location, rotation)

    def Synchronize(self, time, driver_inputs):
        r"""Synchronize(ChSteering self, double time, DriverInputs driver_inputs)"""
        return _vehicle.ChSteering_Synchronize(self, time, driver_inputs)

    def LogConstraintViolations(self):
        r"""LogConstraintViolations(ChSteering self)"""
        return _vehicle.ChSteering_LogConstraintViolations(self)

# Register ChSteering in _vehicle:
_vehicle.ChSteering_swigregister(ChSteering)

class ChPitmanArm(ChSteering):
    r"""Proxy of C++ chrono::vehicle::ChPitmanArm class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChPitmanArm

    def GetTemplateName(self):
        r"""GetTemplateName(ChPitmanArm self) -> std::string"""
        return _vehicle.ChPitmanArm_GetTemplateName(self)

    def Initialize(self, chassis, location, rotation):
        r"""Initialize(ChPitmanArm self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, ChVectorD location, ChQuaternionD rotation)"""
        return _vehicle.ChPitmanArm_Initialize(self, chassis, location, rotation)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChPitmanArm self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChPitmanArm_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChPitmanArm self)"""
        return _vehicle.ChPitmanArm_RemoveVisualizationAssets(self)

    def Synchronize(self, time, driver_inputs):
        r"""Synchronize(ChPitmanArm self, double time, DriverInputs driver_inputs)"""
        return _vehicle.ChPitmanArm_Synchronize(self, time, driver_inputs)

    def LogConstraintViolations(self):
        r"""LogConstraintViolations(ChPitmanArm self)"""
        return _vehicle.ChPitmanArm_LogConstraintViolations(self)

# Register ChPitmanArm in _vehicle:
_vehicle.ChPitmanArm_swigregister(ChPitmanArm)

class ChPitmanArmShafts(ChSteering):
    r"""Proxy of C++ chrono::vehicle::ChPitmanArmShafts class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChPitmanArmShafts

    def GetTemplateName(self):
        r"""GetTemplateName(ChPitmanArmShafts self) -> std::string"""
        return _vehicle.ChPitmanArmShafts_GetTemplateName(self)

    def Initialize(self, chassis, location, rotation):
        r"""Initialize(ChPitmanArmShafts self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, ChVectorD location, ChQuaternionD rotation)"""
        return _vehicle.ChPitmanArmShafts_Initialize(self, chassis, location, rotation)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChPitmanArmShafts self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChPitmanArmShafts_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChPitmanArmShafts self)"""
        return _vehicle.ChPitmanArmShafts_RemoveVisualizationAssets(self)

    def Synchronize(self, time, driver_inputs):
        r"""Synchronize(ChPitmanArmShafts self, double time, DriverInputs driver_inputs)"""
        return _vehicle.ChPitmanArmShafts_Synchronize(self, time, driver_inputs)

    def LogConstraintViolations(self):
        r"""LogConstraintViolations(ChPitmanArmShafts self)"""
        return _vehicle.ChPitmanArmShafts_LogConstraintViolations(self)

    def GetShaftInformation(self, time, motor_input, motor_input_der, shaft_angles, shaft_velocities, constraint_violations, arm_angular_vel):
        r"""GetShaftInformation(ChPitmanArmShafts self, double time, double & motor_input, double & motor_input_der, vector_double shaft_angles, vector_double shaft_velocities, vector_double constraint_violations, ChVectorD arm_angular_vel)"""
        return _vehicle.ChPitmanArmShafts_GetShaftInformation(self, time, motor_input, motor_input_der, shaft_angles, shaft_velocities, constraint_violations, arm_angular_vel)

# Register ChPitmanArmShafts in _vehicle:
_vehicle.ChPitmanArmShafts_swigregister(ChPitmanArmShafts)

class ChRackPinion(ChSteering):
    r"""Proxy of C++ chrono::vehicle::ChRackPinion class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChRackPinion

    def GetTemplateName(self):
        r"""GetTemplateName(ChRackPinion self) -> std::string"""
        return _vehicle.ChRackPinion_GetTemplateName(self)

    def Initialize(self, chassis, location, rotation):
        r"""Initialize(ChRackPinion self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, ChVectorD location, ChQuaternionD rotation)"""
        return _vehicle.ChRackPinion_Initialize(self, chassis, location, rotation)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChRackPinion self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChRackPinion_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChRackPinion self)"""
        return _vehicle.ChRackPinion_RemoveVisualizationAssets(self)

    def Synchronize(self, time, driver_inputs):
        r"""Synchronize(ChRackPinion self, double time, DriverInputs driver_inputs)"""
        return _vehicle.ChRackPinion_Synchronize(self, time, driver_inputs)

    def LogConstraintViolations(self):
        r"""LogConstraintViolations(ChRackPinion self)"""
        return _vehicle.ChRackPinion_LogConstraintViolations(self)

# Register ChRackPinion in _vehicle:
_vehicle.ChRackPinion_swigregister(ChRackPinion)

class ChRotaryArm(ChSteering):
    r"""Proxy of C++ chrono::vehicle::ChRotaryArm class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChRotaryArm

    def GetTemplateName(self):
        r"""GetTemplateName(ChRotaryArm self) -> std::string"""
        return _vehicle.ChRotaryArm_GetTemplateName(self)

    def Initialize(self, chassis, location, rotation):
        r"""Initialize(ChRotaryArm self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, ChVectorD location, ChQuaternionD rotation)"""
        return _vehicle.ChRotaryArm_Initialize(self, chassis, location, rotation)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChRotaryArm self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChRotaryArm_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChRotaryArm self)"""
        return _vehicle.ChRotaryArm_RemoveVisualizationAssets(self)

    def Synchronize(self, time, driver_inputs):
        r"""Synchronize(ChRotaryArm self, double time, DriverInputs driver_inputs)"""
        return _vehicle.ChRotaryArm_Synchronize(self, time, driver_inputs)

    def LogConstraintViolations(self):
        r"""LogConstraintViolations(ChRotaryArm self)"""
        return _vehicle.ChRotaryArm_LogConstraintViolations(self)

# Register ChRotaryArm in _vehicle:
_vehicle.ChRotaryArm_swigregister(ChRotaryArm)

class PitmanArm(ChPitmanArm):
    r"""Proxy of C++ chrono::vehicle::PitmanArm class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(PitmanArm self, std::string const & filename) -> PitmanArm
        __init__(PitmanArm self, rapidjson::Document const & d) -> PitmanArm
        """
        _vehicle.PitmanArm_swiginit(self, _vehicle.new_PitmanArm(*args))
    __swig_destroy__ = _vehicle.delete_PitmanArm

    def getSteeringLinkMass(self):
        r"""getSteeringLinkMass(PitmanArm self) -> double"""
        return _vehicle.PitmanArm_getSteeringLinkMass(self)

    def getPitmanArmMass(self):
        r"""getPitmanArmMass(PitmanArm self) -> double"""
        return _vehicle.PitmanArm_getPitmanArmMass(self)

    def getSteeringLinkRadius(self):
        r"""getSteeringLinkRadius(PitmanArm self) -> double"""
        return _vehicle.PitmanArm_getSteeringLinkRadius(self)

    def getPitmanArmRadius(self):
        r"""getPitmanArmRadius(PitmanArm self) -> double"""
        return _vehicle.PitmanArm_getPitmanArmRadius(self)

    def getSteeringLinkInertiaMoments(self):
        r"""getSteeringLinkInertiaMoments(PitmanArm self) -> ChVectorD"""
        return _vehicle.PitmanArm_getSteeringLinkInertiaMoments(self)

    def getSteeringLinkInertiaProducts(self):
        r"""getSteeringLinkInertiaProducts(PitmanArm self) -> ChVectorD"""
        return _vehicle.PitmanArm_getSteeringLinkInertiaProducts(self)

    def getPitmanArmInertiaMoments(self):
        r"""getPitmanArmInertiaMoments(PitmanArm self) -> ChVectorD"""
        return _vehicle.PitmanArm_getPitmanArmInertiaMoments(self)

    def getPitmanArmInertiaProducts(self):
        r"""getPitmanArmInertiaProducts(PitmanArm self) -> ChVectorD"""
        return _vehicle.PitmanArm_getPitmanArmInertiaProducts(self)

    def getMaxAngle(self):
        r"""getMaxAngle(PitmanArm self) -> double"""
        return _vehicle.PitmanArm_getMaxAngle(self)

# Register PitmanArm in _vehicle:
_vehicle.PitmanArm_swigregister(PitmanArm)

class RackPinion(ChRackPinion):
    r"""Proxy of C++ chrono::vehicle::RackPinion class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RackPinion self, std::string const & filename) -> RackPinion
        __init__(RackPinion self, rapidjson::Document const & d) -> RackPinion
        """
        _vehicle.RackPinion_swiginit(self, _vehicle.new_RackPinion(*args))
    __swig_destroy__ = _vehicle.delete_RackPinion

    def GetSteeringLinkMass(self):
        r"""GetSteeringLinkMass(RackPinion self) -> double"""
        return _vehicle.RackPinion_GetSteeringLinkMass(self)

    def GetSteeringLinkInertia(self):
        r"""GetSteeringLinkInertia(RackPinion self) -> ChVectorD"""
        return _vehicle.RackPinion_GetSteeringLinkInertia(self)

    def GetSteeringLinkCOM(self):
        r"""GetSteeringLinkCOM(RackPinion self) -> double"""
        return _vehicle.RackPinion_GetSteeringLinkCOM(self)

    def GetSteeringLinkRadius(self):
        r"""GetSteeringLinkRadius(RackPinion self) -> double"""
        return _vehicle.RackPinion_GetSteeringLinkRadius(self)

    def GetSteeringLinkLength(self):
        r"""GetSteeringLinkLength(RackPinion self) -> double"""
        return _vehicle.RackPinion_GetSteeringLinkLength(self)

    def GetPinionRadius(self):
        r"""GetPinionRadius(RackPinion self) -> double"""
        return _vehicle.RackPinion_GetPinionRadius(self)

    def GetMaxAngle(self):
        r"""GetMaxAngle(RackPinion self) -> double"""
        return _vehicle.RackPinion_GetMaxAngle(self)

# Register RackPinion in _vehicle:
_vehicle.RackPinion_swigregister(RackPinion)

class RotaryArm(ChRotaryArm):
    r"""Proxy of C++ chrono::vehicle::RotaryArm class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RotaryArm self, std::string const & filename) -> RotaryArm
        __init__(RotaryArm self, rapidjson::Document const & d) -> RotaryArm
        """
        _vehicle.RotaryArm_swiginit(self, _vehicle.new_RotaryArm(*args))
    __swig_destroy__ = _vehicle.delete_RotaryArm

    def getPitmanArmMass(self):
        r"""getPitmanArmMass(RotaryArm self) -> double"""
        return _vehicle.RotaryArm_getPitmanArmMass(self)

    def getPitmanArmRadius(self):
        r"""getPitmanArmRadius(RotaryArm self) -> double"""
        return _vehicle.RotaryArm_getPitmanArmRadius(self)

    def getPitmanArmInertiaMoments(self):
        r"""getPitmanArmInertiaMoments(RotaryArm self) -> ChVectorD"""
        return _vehicle.RotaryArm_getPitmanArmInertiaMoments(self)

    def getPitmanArmInertiaProducts(self):
        r"""getPitmanArmInertiaProducts(RotaryArm self) -> ChVectorD"""
        return _vehicle.RotaryArm_getPitmanArmInertiaProducts(self)

    def getMaxAngle(self):
        r"""getMaxAngle(RotaryArm self) -> double"""
        return _vehicle.RotaryArm_getMaxAngle(self)

# Register RotaryArm in _vehicle:
_vehicle.RotaryArm_swigregister(RotaryArm)

class HMMWV_PitmanArm(ChPitmanArm):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_PitmanArm class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(HMMWV_PitmanArm self, std::string const & name) -> HMMWV_PitmanArm"""
        _vehicle.HMMWV_PitmanArm_swiginit(self, _vehicle.new_HMMWV_PitmanArm(name))
    __swig_destroy__ = _vehicle.delete_HMMWV_PitmanArm

    def getSteeringLinkMass(self):
        r"""getSteeringLinkMass(HMMWV_PitmanArm self) -> double"""
        return _vehicle.HMMWV_PitmanArm_getSteeringLinkMass(self)

    def getPitmanArmMass(self):
        r"""getPitmanArmMass(HMMWV_PitmanArm self) -> double"""
        return _vehicle.HMMWV_PitmanArm_getPitmanArmMass(self)

    def getSteeringLinkRadius(self):
        r"""getSteeringLinkRadius(HMMWV_PitmanArm self) -> double"""
        return _vehicle.HMMWV_PitmanArm_getSteeringLinkRadius(self)

    def getPitmanArmRadius(self):
        r"""getPitmanArmRadius(HMMWV_PitmanArm self) -> double"""
        return _vehicle.HMMWV_PitmanArm_getPitmanArmRadius(self)

    def getSteeringLinkInertiaMoments(self):
        r"""getSteeringLinkInertiaMoments(HMMWV_PitmanArm self) -> ChVectorD"""
        return _vehicle.HMMWV_PitmanArm_getSteeringLinkInertiaMoments(self)

    def getSteeringLinkInertiaProducts(self):
        r"""getSteeringLinkInertiaProducts(HMMWV_PitmanArm self) -> ChVectorD"""
        return _vehicle.HMMWV_PitmanArm_getSteeringLinkInertiaProducts(self)

    def getPitmanArmInertiaMoments(self):
        r"""getPitmanArmInertiaMoments(HMMWV_PitmanArm self) -> ChVectorD"""
        return _vehicle.HMMWV_PitmanArm_getPitmanArmInertiaMoments(self)

    def getPitmanArmInertiaProducts(self):
        r"""getPitmanArmInertiaProducts(HMMWV_PitmanArm self) -> ChVectorD"""
        return _vehicle.HMMWV_PitmanArm_getPitmanArmInertiaProducts(self)

    def getMaxAngle(self):
        r"""getMaxAngle(HMMWV_PitmanArm self) -> double"""
        return _vehicle.HMMWV_PitmanArm_getMaxAngle(self)

# Register HMMWV_PitmanArm in _vehicle:
_vehicle.HMMWV_PitmanArm_swigregister(HMMWV_PitmanArm)

class HMMWV_RackPinion(ChRackPinion):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_RackPinion class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(HMMWV_RackPinion self, std::string const & name) -> HMMWV_RackPinion"""
        _vehicle.HMMWV_RackPinion_swiginit(self, _vehicle.new_HMMWV_RackPinion(name))
    __swig_destroy__ = _vehicle.delete_HMMWV_RackPinion

    def GetSteeringLinkMass(self):
        r"""GetSteeringLinkMass(HMMWV_RackPinion self) -> double"""
        return _vehicle.HMMWV_RackPinion_GetSteeringLinkMass(self)

    def GetSteeringLinkInertia(self):
        r"""GetSteeringLinkInertia(HMMWV_RackPinion self) -> ChVectorD"""
        return _vehicle.HMMWV_RackPinion_GetSteeringLinkInertia(self)

    def GetSteeringLinkCOM(self):
        r"""GetSteeringLinkCOM(HMMWV_RackPinion self) -> double"""
        return _vehicle.HMMWV_RackPinion_GetSteeringLinkCOM(self)

    def GetSteeringLinkRadius(self):
        r"""GetSteeringLinkRadius(HMMWV_RackPinion self) -> double"""
        return _vehicle.HMMWV_RackPinion_GetSteeringLinkRadius(self)

    def GetSteeringLinkLength(self):
        r"""GetSteeringLinkLength(HMMWV_RackPinion self) -> double"""
        return _vehicle.HMMWV_RackPinion_GetSteeringLinkLength(self)

    def GetPinionRadius(self):
        r"""GetPinionRadius(HMMWV_RackPinion self) -> double"""
        return _vehicle.HMMWV_RackPinion_GetPinionRadius(self)

    def GetMaxAngle(self):
        r"""GetMaxAngle(HMMWV_RackPinion self) -> double"""
        return _vehicle.HMMWV_RackPinion_GetMaxAngle(self)

# Register HMMWV_RackPinion in _vehicle:
_vehicle.HMMWV_RackPinion_swigregister(HMMWV_RackPinion)

class CityBus_RotaryArm(ChRotaryArm):
    r"""Proxy of C++ chrono::vehicle::citybus::CityBus_RotaryArm class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(CityBus_RotaryArm self, std::string const & name) -> CityBus_RotaryArm"""
        _vehicle.CityBus_RotaryArm_swiginit(self, _vehicle.new_CityBus_RotaryArm(name))
    __swig_destroy__ = _vehicle.delete_CityBus_RotaryArm

    def getPitmanArmMass(self):
        r"""getPitmanArmMass(CityBus_RotaryArm self) -> double"""
        return _vehicle.CityBus_RotaryArm_getPitmanArmMass(self)

    def getPitmanArmRadius(self):
        r"""getPitmanArmRadius(CityBus_RotaryArm self) -> double"""
        return _vehicle.CityBus_RotaryArm_getPitmanArmRadius(self)

    def getPitmanArmInertiaMoments(self):
        r"""getPitmanArmInertiaMoments(CityBus_RotaryArm self) -> ChVectorD"""
        return _vehicle.CityBus_RotaryArm_getPitmanArmInertiaMoments(self)

    def getPitmanArmInertiaProducts(self):
        r"""getPitmanArmInertiaProducts(CityBus_RotaryArm self) -> ChVectorD"""
        return _vehicle.CityBus_RotaryArm_getPitmanArmInertiaProducts(self)

    def getMaxAngle(self):
        r"""getMaxAngle(CityBus_RotaryArm self) -> double"""
        return _vehicle.CityBus_RotaryArm_getMaxAngle(self)

# Register CityBus_RotaryArm in _vehicle:
_vehicle.CityBus_RotaryArm_swigregister(CityBus_RotaryArm)

class CityBus_RackPinion(ChRackPinion):
    r"""Proxy of C++ chrono::vehicle::citybus::CityBus_RackPinion class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(CityBus_RackPinion self, std::string const & name) -> CityBus_RackPinion"""
        _vehicle.CityBus_RackPinion_swiginit(self, _vehicle.new_CityBus_RackPinion(name))
    __swig_destroy__ = _vehicle.delete_CityBus_RackPinion

    def GetSteeringLinkMass(self):
        r"""GetSteeringLinkMass(CityBus_RackPinion self) -> double"""
        return _vehicle.CityBus_RackPinion_GetSteeringLinkMass(self)

    def GetSteeringLinkInertia(self):
        r"""GetSteeringLinkInertia(CityBus_RackPinion self) -> ChVectorD"""
        return _vehicle.CityBus_RackPinion_GetSteeringLinkInertia(self)

    def GetSteeringLinkCOM(self):
        r"""GetSteeringLinkCOM(CityBus_RackPinion self) -> double"""
        return _vehicle.CityBus_RackPinion_GetSteeringLinkCOM(self)

    def GetSteeringLinkRadius(self):
        r"""GetSteeringLinkRadius(CityBus_RackPinion self) -> double"""
        return _vehicle.CityBus_RackPinion_GetSteeringLinkRadius(self)

    def GetSteeringLinkLength(self):
        r"""GetSteeringLinkLength(CityBus_RackPinion self) -> double"""
        return _vehicle.CityBus_RackPinion_GetSteeringLinkLength(self)

    def GetPinionRadius(self):
        r"""GetPinionRadius(CityBus_RackPinion self) -> double"""
        return _vehicle.CityBus_RackPinion_GetPinionRadius(self)

    def GetMaxAngle(self):
        r"""GetMaxAngle(CityBus_RackPinion self) -> double"""
        return _vehicle.CityBus_RackPinion_GetMaxAngle(self)

# Register CityBus_RackPinion in _vehicle:
_vehicle.CityBus_RackPinion_swigregister(CityBus_RackPinion)

class MAN_5t_RotaryArm(ChRotaryArm):
    r"""Proxy of C++ chrono::vehicle::man::MAN_5t_RotaryArm class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(MAN_5t_RotaryArm self, std::string const & name) -> MAN_5t_RotaryArm"""
        _vehicle.MAN_5t_RotaryArm_swiginit(self, _vehicle.new_MAN_5t_RotaryArm(name))
    __swig_destroy__ = _vehicle.delete_MAN_5t_RotaryArm

    def getPitmanArmMass(self):
        r"""getPitmanArmMass(MAN_5t_RotaryArm self) -> double"""
        return _vehicle.MAN_5t_RotaryArm_getPitmanArmMass(self)

    def getPitmanArmRadius(self):
        r"""getPitmanArmRadius(MAN_5t_RotaryArm self) -> double"""
        return _vehicle.MAN_5t_RotaryArm_getPitmanArmRadius(self)

    def getPitmanArmInertiaMoments(self):
        r"""getPitmanArmInertiaMoments(MAN_5t_RotaryArm self) -> ChVectorD"""
        return _vehicle.MAN_5t_RotaryArm_getPitmanArmInertiaMoments(self)

    def getPitmanArmInertiaProducts(self):
        r"""getPitmanArmInertiaProducts(MAN_5t_RotaryArm self) -> ChVectorD"""
        return _vehicle.MAN_5t_RotaryArm_getPitmanArmInertiaProducts(self)

    def getMaxAngle(self):
        r"""getMaxAngle(MAN_5t_RotaryArm self) -> double"""
        return _vehicle.MAN_5t_RotaryArm_getMaxAngle(self)

# Register MAN_5t_RotaryArm in _vehicle:
_vehicle.MAN_5t_RotaryArm_swigregister(MAN_5t_RotaryArm)

class MAN_10t_RotaryArm2(ChRotaryArm):
    r"""Proxy of C++ chrono::vehicle::man::MAN_10t_RotaryArm2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(MAN_10t_RotaryArm2 self, std::string const & name) -> MAN_10t_RotaryArm2"""
        _vehicle.MAN_10t_RotaryArm2_swiginit(self, _vehicle.new_MAN_10t_RotaryArm2(name))
    __swig_destroy__ = _vehicle.delete_MAN_10t_RotaryArm2

    def getPitmanArmMass(self):
        r"""getPitmanArmMass(MAN_10t_RotaryArm2 self) -> double"""
        return _vehicle.MAN_10t_RotaryArm2_getPitmanArmMass(self)

    def getPitmanArmRadius(self):
        r"""getPitmanArmRadius(MAN_10t_RotaryArm2 self) -> double"""
        return _vehicle.MAN_10t_RotaryArm2_getPitmanArmRadius(self)

    def getPitmanArmInertiaMoments(self):
        r"""getPitmanArmInertiaMoments(MAN_10t_RotaryArm2 self) -> ChVectorD"""
        return _vehicle.MAN_10t_RotaryArm2_getPitmanArmInertiaMoments(self)

    def getPitmanArmInertiaProducts(self):
        r"""getPitmanArmInertiaProducts(MAN_10t_RotaryArm2 self) -> ChVectorD"""
        return _vehicle.MAN_10t_RotaryArm2_getPitmanArmInertiaProducts(self)

    def getMaxAngle(self):
        r"""getMaxAngle(MAN_10t_RotaryArm2 self) -> double"""
        return _vehicle.MAN_10t_RotaryArm2_getMaxAngle(self)

# Register MAN_10t_RotaryArm2 in _vehicle:
_vehicle.MAN_10t_RotaryArm2_swigregister(MAN_10t_RotaryArm2)

class UAZBUS_RotaryArm(ChRotaryArm):
    r"""Proxy of C++ chrono::vehicle::uaz::UAZBUS_RotaryArm class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(UAZBUS_RotaryArm self, std::string const & name) -> UAZBUS_RotaryArm"""
        _vehicle.UAZBUS_RotaryArm_swiginit(self, _vehicle.new_UAZBUS_RotaryArm(name))
    __swig_destroy__ = _vehicle.delete_UAZBUS_RotaryArm

    def getPitmanArmMass(self):
        r"""getPitmanArmMass(UAZBUS_RotaryArm self) -> double"""
        return _vehicle.UAZBUS_RotaryArm_getPitmanArmMass(self)

    def getPitmanArmRadius(self):
        r"""getPitmanArmRadius(UAZBUS_RotaryArm self) -> double"""
        return _vehicle.UAZBUS_RotaryArm_getPitmanArmRadius(self)

    def getPitmanArmInertiaMoments(self):
        r"""getPitmanArmInertiaMoments(UAZBUS_RotaryArm self) -> ChVectorD"""
        return _vehicle.UAZBUS_RotaryArm_getPitmanArmInertiaMoments(self)

    def getPitmanArmInertiaProducts(self):
        r"""getPitmanArmInertiaProducts(UAZBUS_RotaryArm self) -> ChVectorD"""
        return _vehicle.UAZBUS_RotaryArm_getPitmanArmInertiaProducts(self)

    def getMaxAngle(self):
        r"""getMaxAngle(UAZBUS_RotaryArm self) -> double"""
        return _vehicle.UAZBUS_RotaryArm_getMaxAngle(self)

# Register UAZBUS_RotaryArm in _vehicle:
_vehicle.UAZBUS_RotaryArm_swigregister(UAZBUS_RotaryArm)

class Gator_RackPinion(ChRackPinion):
    r"""Proxy of C++ chrono::vehicle::gator::Gator_RackPinion class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Gator_RackPinion self, std::string const & name) -> Gator_RackPinion"""
        _vehicle.Gator_RackPinion_swiginit(self, _vehicle.new_Gator_RackPinion(name))
    __swig_destroy__ = _vehicle.delete_Gator_RackPinion

    def GetSteeringLinkMass(self):
        r"""GetSteeringLinkMass(Gator_RackPinion self) -> double"""
        return _vehicle.Gator_RackPinion_GetSteeringLinkMass(self)

    def GetSteeringLinkInertia(self):
        r"""GetSteeringLinkInertia(Gator_RackPinion self) -> ChVectorD"""
        return _vehicle.Gator_RackPinion_GetSteeringLinkInertia(self)

    def GetSteeringLinkCOM(self):
        r"""GetSteeringLinkCOM(Gator_RackPinion self) -> double"""
        return _vehicle.Gator_RackPinion_GetSteeringLinkCOM(self)

    def GetSteeringLinkRadius(self):
        r"""GetSteeringLinkRadius(Gator_RackPinion self) -> double"""
        return _vehicle.Gator_RackPinion_GetSteeringLinkRadius(self)

    def GetSteeringLinkLength(self):
        r"""GetSteeringLinkLength(Gator_RackPinion self) -> double"""
        return _vehicle.Gator_RackPinion_GetSteeringLinkLength(self)

    def GetPinionRadius(self):
        r"""GetPinionRadius(Gator_RackPinion self) -> double"""
        return _vehicle.Gator_RackPinion_GetPinionRadius(self)

    def GetMaxAngle(self):
        r"""GetMaxAngle(Gator_RackPinion self) -> double"""
        return _vehicle.Gator_RackPinion_GetMaxAngle(self)

# Register Gator_RackPinion in _vehicle:
_vehicle.Gator_RackPinion_swigregister(Gator_RackPinion)

class RCCar_PitmanArm(ChPitmanArm):
    r"""Proxy of C++ chrono::vehicle::rccar::RCCar_PitmanArm class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(RCCar_PitmanArm self, std::string const & name) -> RCCar_PitmanArm"""
        _vehicle.RCCar_PitmanArm_swiginit(self, _vehicle.new_RCCar_PitmanArm(name))
    __swig_destroy__ = _vehicle.delete_RCCar_PitmanArm

    def getSteeringLinkMass(self):
        r"""getSteeringLinkMass(RCCar_PitmanArm self) -> double"""
        return _vehicle.RCCar_PitmanArm_getSteeringLinkMass(self)

    def getPitmanArmMass(self):
        r"""getPitmanArmMass(RCCar_PitmanArm self) -> double"""
        return _vehicle.RCCar_PitmanArm_getPitmanArmMass(self)

    def getSteeringLinkRadius(self):
        r"""getSteeringLinkRadius(RCCar_PitmanArm self) -> double"""
        return _vehicle.RCCar_PitmanArm_getSteeringLinkRadius(self)

    def getPitmanArmRadius(self):
        r"""getPitmanArmRadius(RCCar_PitmanArm self) -> double"""
        return _vehicle.RCCar_PitmanArm_getPitmanArmRadius(self)

    def getSteeringLinkInertiaMoments(self):
        r"""getSteeringLinkInertiaMoments(RCCar_PitmanArm self) -> ChVectorD"""
        return _vehicle.RCCar_PitmanArm_getSteeringLinkInertiaMoments(self)

    def getSteeringLinkInertiaProducts(self):
        r"""getSteeringLinkInertiaProducts(RCCar_PitmanArm self) -> ChVectorD"""
        return _vehicle.RCCar_PitmanArm_getSteeringLinkInertiaProducts(self)

    def getPitmanArmInertiaMoments(self):
        r"""getPitmanArmInertiaMoments(RCCar_PitmanArm self) -> ChVectorD"""
        return _vehicle.RCCar_PitmanArm_getPitmanArmInertiaMoments(self)

    def getPitmanArmInertiaProducts(self):
        r"""getPitmanArmInertiaProducts(RCCar_PitmanArm self) -> ChVectorD"""
        return _vehicle.RCCar_PitmanArm_getPitmanArmInertiaProducts(self)

    def getMaxAngle(self):
        r"""getMaxAngle(RCCar_PitmanArm self) -> double"""
        return _vehicle.RCCar_PitmanArm_getMaxAngle(self)

# Register RCCar_PitmanArm in _vehicle:
_vehicle.RCCar_PitmanArm_swigregister(RCCar_PitmanArm)

class FEDA_PitmanArm(ChPitmanArm):
    r"""Proxy of C++ chrono::vehicle::feda::FEDA_PitmanArm class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(FEDA_PitmanArm self, std::string const & name) -> FEDA_PitmanArm"""
        _vehicle.FEDA_PitmanArm_swiginit(self, _vehicle.new_FEDA_PitmanArm(name))
    __swig_destroy__ = _vehicle.delete_FEDA_PitmanArm

    def getSteeringLinkMass(self):
        r"""getSteeringLinkMass(FEDA_PitmanArm self) -> double"""
        return _vehicle.FEDA_PitmanArm_getSteeringLinkMass(self)

    def getPitmanArmMass(self):
        r"""getPitmanArmMass(FEDA_PitmanArm self) -> double"""
        return _vehicle.FEDA_PitmanArm_getPitmanArmMass(self)

    def getSteeringLinkRadius(self):
        r"""getSteeringLinkRadius(FEDA_PitmanArm self) -> double"""
        return _vehicle.FEDA_PitmanArm_getSteeringLinkRadius(self)

    def getPitmanArmRadius(self):
        r"""getPitmanArmRadius(FEDA_PitmanArm self) -> double"""
        return _vehicle.FEDA_PitmanArm_getPitmanArmRadius(self)

    def getSteeringLinkInertiaMoments(self):
        r"""getSteeringLinkInertiaMoments(FEDA_PitmanArm self) -> ChVectorD"""
        return _vehicle.FEDA_PitmanArm_getSteeringLinkInertiaMoments(self)

    def getSteeringLinkInertiaProducts(self):
        r"""getSteeringLinkInertiaProducts(FEDA_PitmanArm self) -> ChVectorD"""
        return _vehicle.FEDA_PitmanArm_getSteeringLinkInertiaProducts(self)

    def getPitmanArmInertiaMoments(self):
        r"""getPitmanArmInertiaMoments(FEDA_PitmanArm self) -> ChVectorD"""
        return _vehicle.FEDA_PitmanArm_getPitmanArmInertiaMoments(self)

    def getPitmanArmInertiaProducts(self):
        r"""getPitmanArmInertiaProducts(FEDA_PitmanArm self) -> ChVectorD"""
        return _vehicle.FEDA_PitmanArm_getPitmanArmInertiaProducts(self)

    def getMaxAngle(self):
        r"""getMaxAngle(FEDA_PitmanArm self) -> double"""
        return _vehicle.FEDA_PitmanArm_getMaxAngle(self)

# Register FEDA_PitmanArm in _vehicle:
_vehicle.FEDA_PitmanArm_swigregister(FEDA_PitmanArm)

class ChSubchassis(ChPart):
    r"""Proxy of C++ chrono::vehicle::ChSubchassis class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChSubchassis

    def GetLocation(self):
        r"""GetLocation(ChSubchassis self) -> ChVectorD"""
        return _vehicle.ChSubchassis_GetLocation(self)

    def GetBeam(self, side):
        r"""GetBeam(ChSubchassis self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChBody >"""
        return _vehicle.ChSubchassis_GetBeam(self, side)

    def Initialize(self, chassis, location):
        r"""Initialize(ChSubchassis self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, ChVectorD location)"""
        return _vehicle.ChSubchassis_Initialize(self, chassis, location)

# Register ChSubchassis in _vehicle:
_vehicle.ChSubchassis_swigregister(ChSubchassis)

class ChBalancer(ChSubchassis):
    r"""Proxy of C++ chrono::vehicle::ChBalancer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChBalancer

    def GetTemplateName(self):
        r"""GetTemplateName(ChBalancer self) -> std::string"""
        return _vehicle.ChBalancer_GetTemplateName(self)

    def Initialize(self, chassis, location):
        r"""Initialize(ChBalancer self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, ChVectorD location)"""
        return _vehicle.ChBalancer_Initialize(self, chassis, location)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChBalancer self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChBalancer_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChBalancer self)"""
        return _vehicle.ChBalancer_RemoveVisualizationAssets(self)

# Register ChBalancer in _vehicle:
_vehicle.ChBalancer_swigregister(ChBalancer)

class Balancer(ChBalancer):
    r"""Proxy of C++ chrono::vehicle::Balancer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Balancer self, std::string const & filename) -> Balancer
        __init__(Balancer self, rapidjson::Document const & d) -> Balancer
        """
        _vehicle.Balancer_swiginit(self, _vehicle.new_Balancer(*args))
    __swig_destroy__ = _vehicle.delete_Balancer

    def GetBalancerBeamMass(self):
        r"""GetBalancerBeamMass(Balancer self) -> double"""
        return _vehicle.Balancer_GetBalancerBeamMass(self)

    def GetBalancerBeamInertia(self):
        r"""GetBalancerBeamInertia(Balancer self) -> ChVectorD"""
        return _vehicle.Balancer_GetBalancerBeamInertia(self)

    def GetBalancerMaxPitch(self):
        r"""GetBalancerMaxPitch(Balancer self) -> double const"""
        return _vehicle.Balancer_GetBalancerMaxPitch(self)

    def GetBalancerBeamDimensions(self):
        r"""GetBalancerBeamDimensions(Balancer self) -> ChVectorD"""
        return _vehicle.Balancer_GetBalancerBeamDimensions(self)

    def GetBushingData(self):
        r"""GetBushingData(Balancer self) -> std::shared_ptr< ChVehicleBushingData >"""
        return _vehicle.Balancer_GetBushingData(self)

# Register Balancer in _vehicle:
_vehicle.Balancer_swigregister(Balancer)

class MTV_Balancer(ChBalancer):
    r"""Proxy of C++ chrono::vehicle::fmtv::MTV_Balancer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(MTV_Balancer self, std::string const & name) -> MTV_Balancer"""
        _vehicle.MTV_Balancer_swiginit(self, _vehicle.new_MTV_Balancer(name))

    def GetBalancerBeamMass(self):
        r"""GetBalancerBeamMass(MTV_Balancer self) -> double"""
        return _vehicle.MTV_Balancer_GetBalancerBeamMass(self)

    def GetBalancerBeamInertia(self):
        r"""GetBalancerBeamInertia(MTV_Balancer self) -> ChVectorD"""
        return _vehicle.MTV_Balancer_GetBalancerBeamInertia(self)

    def GetBalancerMaxPitch(self):
        r"""GetBalancerMaxPitch(MTV_Balancer self) -> double const"""
        return _vehicle.MTV_Balancer_GetBalancerMaxPitch(self)

    def GetBalancerBeamDimensions(self):
        r"""GetBalancerBeamDimensions(MTV_Balancer self) -> ChVectorD"""
        return _vehicle.MTV_Balancer_GetBalancerBeamDimensions(self)
    __swig_destroy__ = _vehicle.delete_MTV_Balancer

# Register MTV_Balancer in _vehicle:
_vehicle.MTV_Balancer_swigregister(MTV_Balancer)

class ChSuspension(ChPart):
    r"""Proxy of C++ chrono::vehicle::ChSuspension class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChSuspension

    def IsSteerable(self):
        r"""IsSteerable(ChSuspension self) -> bool"""
        return _vehicle.ChSuspension_IsSteerable(self)

    def IsIndependent(self):
        r"""IsIndependent(ChSuspension self) -> bool"""
        return _vehicle.ChSuspension_IsIndependent(self)

    def GetRelPosition(self):
        r"""GetRelPosition(ChSuspension self) -> ChVectorD"""
        return _vehicle.ChSuspension_GetRelPosition(self)

    def GetSpindle(self, side):
        r"""GetSpindle(ChSuspension self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChBody >"""
        return _vehicle.ChSuspension_GetSpindle(self, side)

    def GetAxle(self, side):
        r"""GetAxle(ChSuspension self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChShaft >"""
        return _vehicle.ChSuspension_GetAxle(self, side)

    def GetRevolute(self, side):
        r"""GetRevolute(ChSuspension self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkLockRevolute >"""
        return _vehicle.ChSuspension_GetRevolute(self, side)

    def GetSpindlePos(self, side):
        r"""GetSpindlePos(ChSuspension self, chrono::vehicle::VehicleSide side) -> ChVectorD"""
        return _vehicle.ChSuspension_GetSpindlePos(self, side)

    def GetSpindleRot(self, side):
        r"""GetSpindleRot(ChSuspension self, chrono::vehicle::VehicleSide side) -> ChQuaternionD"""
        return _vehicle.ChSuspension_GetSpindleRot(self, side)

    def GetSpindleLinVel(self, side):
        r"""GetSpindleLinVel(ChSuspension self, chrono::vehicle::VehicleSide side) -> ChVectorD"""
        return _vehicle.ChSuspension_GetSpindleLinVel(self, side)

    def GetSpindleAngVel(self, side):
        r"""GetSpindleAngVel(ChSuspension self, chrono::vehicle::VehicleSide side) -> ChVectorD"""
        return _vehicle.ChSuspension_GetSpindleAngVel(self, side)

    def GetAxleSpeed(self, side):
        r"""GetAxleSpeed(ChSuspension self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSuspension_GetAxleSpeed(self, side)

    def Synchronize(self):
        r"""Synchronize(ChSuspension self)"""
        return _vehicle.ChSuspension_Synchronize(self)

    def ApplyAxleTorque(self, side, torque):
        r"""ApplyAxleTorque(ChSuspension self, chrono::vehicle::VehicleSide side, double torque)"""
        return _vehicle.ChSuspension_ApplyAxleTorque(self, side, torque)

    def Initialize(self, chassis, subchassis, steering, location, left_ang_vel=0, right_ang_vel=0):
        r"""Initialize(ChSuspension self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, std::shared_ptr< chrono::vehicle::ChSubchassis > subchassis, std::shared_ptr< chrono::vehicle::ChSteering > steering, ChVectorD location, double left_ang_vel=0, double right_ang_vel=0)"""
        return _vehicle.ChSuspension_Initialize(self, chassis, subchassis, steering, location, left_ang_vel, right_ang_vel)

    def getSpindleRadius(self):
        r"""getSpindleRadius(ChSuspension self) -> double"""
        return _vehicle.ChSuspension_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(ChSuspension self) -> double"""
        return _vehicle.ChSuspension_getSpindleWidth(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChSuspension self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChSuspension_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChSuspension self)"""
        return _vehicle.ChSuspension_RemoveVisualizationAssets(self)

    def GetAntirollBody(self, side):
        r"""GetAntirollBody(ChSuspension self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChBody >"""
        return _vehicle.ChSuspension_GetAntirollBody(self, side)

    def GetBrakeBody(self, side):
        r"""GetBrakeBody(ChSuspension self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChBody >"""
        return _vehicle.ChSuspension_GetBrakeBody(self, side)

    def GetTrack(self):
        r"""GetTrack(ChSuspension self) -> double"""
        return _vehicle.ChSuspension_GetTrack(self)

    def ReportSuspensionForce(self, side):
        r"""ReportSuspensionForce(ChSuspension self, chrono::vehicle::VehicleSide side) -> std::vector< chrono::vehicle::ChSuspension::ForceTSDA,std::allocator< chrono::vehicle::ChSuspension::ForceTSDA > >"""
        return _vehicle.ChSuspension_ReportSuspensionForce(self, side)

    def LogConstraintViolations(self, side):
        r"""LogConstraintViolations(ChSuspension self, chrono::vehicle::VehicleSide side)"""
        return _vehicle.ChSuspension_LogConstraintViolations(self, side)

    def ApplyParkingBrake(self, brake):
        r"""ApplyParkingBrake(ChSuspension self, bool brake)"""
        return _vehicle.ChSuspension_ApplyParkingBrake(self, brake)

# Register ChSuspension in _vehicle:
_vehicle.ChSuspension_swigregister(ChSuspension)

class ForceTSDA(object):
    r"""Proxy of C++ chrono::vehicle::ChSuspension::ForceTSDA class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_vehicle.ForceTSDA_name_get, _vehicle.ForceTSDA_name_set, doc=r"""name : std::string""")
    force = property(_vehicle.ForceTSDA_force_get, _vehicle.ForceTSDA_force_set, doc=r"""force : double""")
    length = property(_vehicle.ForceTSDA_length_get, _vehicle.ForceTSDA_length_set, doc=r"""length : double""")
    velocity = property(_vehicle.ForceTSDA_velocity_get, _vehicle.ForceTSDA_velocity_set, doc=r"""velocity : double""")

    def __init__(self, *args):
        r"""
        __init__(ForceTSDA self) -> ForceTSDA
        __init__(ForceTSDA self, std::string const & n, double f, double l, double v) -> ForceTSDA
        """
        _vehicle.ForceTSDA_swiginit(self, _vehicle.new_ForceTSDA(*args))
    __swig_destroy__ = _vehicle.delete_ForceTSDA

# Register ForceTSDA in _vehicle:
_vehicle.ForceTSDA_swigregister(ForceTSDA)

class ChDoubleWishbone(ChSuspension):
    r"""Proxy of C++ chrono::vehicle::ChDoubleWishbone class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChDoubleWishbone

    def GetTemplateName(self):
        r"""GetTemplateName(ChDoubleWishbone self) -> std::string"""
        return _vehicle.ChDoubleWishbone_GetTemplateName(self)

    def IsSteerable(self):
        r"""IsSteerable(ChDoubleWishbone self) -> bool"""
        return _vehicle.ChDoubleWishbone_IsSteerable(self)

    def IsIndependent(self):
        r"""IsIndependent(ChDoubleWishbone self) -> bool"""
        return _vehicle.ChDoubleWishbone_IsIndependent(self)

    def Initialize(self, chassis, subchassis, steering, location, left_ang_vel=0, right_ang_vel=0):
        r"""Initialize(ChDoubleWishbone self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, std::shared_ptr< chrono::vehicle::ChSubchassis > subchassis, std::shared_ptr< chrono::vehicle::ChSteering > steering, ChVectorD location, double left_ang_vel=0, double right_ang_vel=0)"""
        return _vehicle.ChDoubleWishbone_Initialize(self, chassis, subchassis, steering, location, left_ang_vel, right_ang_vel)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChDoubleWishbone self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChDoubleWishbone_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChDoubleWishbone self)"""
        return _vehicle.ChDoubleWishbone_RemoveVisualizationAssets(self)

    def GetTrack(self):
        r"""GetTrack(ChDoubleWishbone self) -> double"""
        return _vehicle.ChDoubleWishbone_GetTrack(self)

    def GetSpring(self, side):
        r"""GetSpring(ChDoubleWishbone self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkTSDA >"""
        return _vehicle.ChDoubleWishbone_GetSpring(self, side)

    def GetShock(self, side):
        r"""GetShock(ChDoubleWishbone self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkTSDA >"""
        return _vehicle.ChDoubleWishbone_GetShock(self, side)

    def ReportSuspensionForce(self, side):
        r"""ReportSuspensionForce(ChDoubleWishbone self, chrono::vehicle::VehicleSide side) -> std::vector< chrono::vehicle::ChSuspension::ForceTSDA,std::allocator< chrono::vehicle::ChSuspension::ForceTSDA > >"""
        return _vehicle.ChDoubleWishbone_ReportSuspensionForce(self, side)

    def GetSpringForce(self, side):
        r"""GetSpringForce(ChDoubleWishbone self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChDoubleWishbone_GetSpringForce(self, side)

    def GetSpringLength(self, side):
        r"""GetSpringLength(ChDoubleWishbone self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChDoubleWishbone_GetSpringLength(self, side)

    def GetSpringDeformation(self, side):
        r"""GetSpringDeformation(ChDoubleWishbone self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChDoubleWishbone_GetSpringDeformation(self, side)

    def GetShockForce(self, side):
        r"""GetShockForce(ChDoubleWishbone self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChDoubleWishbone_GetShockForce(self, side)

    def GetShockLength(self, side):
        r"""GetShockLength(ChDoubleWishbone self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChDoubleWishbone_GetShockLength(self, side)

    def GetShockVelocity(self, side):
        r"""GetShockVelocity(ChDoubleWishbone self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChDoubleWishbone_GetShockVelocity(self, side)

    def Get_LCA_sph_pos(self, side):
        r"""Get_LCA_sph_pos(ChDoubleWishbone self, chrono::vehicle::VehicleSide side) -> ChVectorD"""
        return _vehicle.ChDoubleWishbone_Get_LCA_sph_pos(self, side)

    def Get_UCA_sph_pos(self, side):
        r"""Get_UCA_sph_pos(ChDoubleWishbone self, chrono::vehicle::VehicleSide side) -> ChVectorD"""
        return _vehicle.ChDoubleWishbone_Get_UCA_sph_pos(self, side)

    def LogConstraintViolations(self, side):
        r"""LogConstraintViolations(ChDoubleWishbone self, chrono::vehicle::VehicleSide side)"""
        return _vehicle.ChDoubleWishbone_LogConstraintViolations(self, side)

    def GetAntirollBody(self, side):
        r"""GetAntirollBody(ChDoubleWishbone self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChBody >"""
        return _vehicle.ChDoubleWishbone_GetAntirollBody(self, side)

    def LogHardpointLocations(self, ref, inches=False):
        r"""LogHardpointLocations(ChDoubleWishbone self, ChVectorD ref, bool inches=False)"""
        return _vehicle.ChDoubleWishbone_LogHardpointLocations(self, ref, inches)

# Register ChDoubleWishbone in _vehicle:
_vehicle.ChDoubleWishbone_swigregister(ChDoubleWishbone)

class ChMacPhersonStrut(ChSuspension):
    r"""Proxy of C++ chrono::vehicle::ChMacPhersonStrut class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChMacPhersonStrut

    def GetTemplateName(self):
        r"""GetTemplateName(ChMacPhersonStrut self) -> std::string"""
        return _vehicle.ChMacPhersonStrut_GetTemplateName(self)

    def IsSteerable(self):
        r"""IsSteerable(ChMacPhersonStrut self) -> bool"""
        return _vehicle.ChMacPhersonStrut_IsSteerable(self)

    def IsIndependent(self):
        r"""IsIndependent(ChMacPhersonStrut self) -> bool"""
        return _vehicle.ChMacPhersonStrut_IsIndependent(self)

    def Initialize(self, chassis, subchassis, steering, location, left_ang_vel=0, right_ang_vel=0):
        r"""Initialize(ChMacPhersonStrut self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, std::shared_ptr< chrono::vehicle::ChSubchassis > subchassis, std::shared_ptr< chrono::vehicle::ChSteering > steering, ChVectorD location, double left_ang_vel=0, double right_ang_vel=0)"""
        return _vehicle.ChMacPhersonStrut_Initialize(self, chassis, subchassis, steering, location, left_ang_vel, right_ang_vel)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChMacPhersonStrut self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChMacPhersonStrut_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChMacPhersonStrut self)"""
        return _vehicle.ChMacPhersonStrut_RemoveVisualizationAssets(self)

    def GetTrack(self):
        r"""GetTrack(ChMacPhersonStrut self) -> double"""
        return _vehicle.ChMacPhersonStrut_GetTrack(self)

    def GetSpring(self, side):
        r"""GetSpring(ChMacPhersonStrut self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkTSDA >"""
        return _vehicle.ChMacPhersonStrut_GetSpring(self, side)

    def GetShock(self, side):
        r"""GetShock(ChMacPhersonStrut self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkTSDA >"""
        return _vehicle.ChMacPhersonStrut_GetShock(self, side)

    def ReportSuspensionForce(self, side):
        r"""ReportSuspensionForce(ChMacPhersonStrut self, chrono::vehicle::VehicleSide side) -> std::vector< chrono::vehicle::ChSuspension::ForceTSDA,std::allocator< chrono::vehicle::ChSuspension::ForceTSDA > >"""
        return _vehicle.ChMacPhersonStrut_ReportSuspensionForce(self, side)

    def GetSpringForce(self, side):
        r"""GetSpringForce(ChMacPhersonStrut self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChMacPhersonStrut_GetSpringForce(self, side)

    def GetSpringLength(self, side):
        r"""GetSpringLength(ChMacPhersonStrut self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChMacPhersonStrut_GetSpringLength(self, side)

    def GetSpringDeformation(self, side):
        r"""GetSpringDeformation(ChMacPhersonStrut self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChMacPhersonStrut_GetSpringDeformation(self, side)

    def GetShockForce(self, side):
        r"""GetShockForce(ChMacPhersonStrut self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChMacPhersonStrut_GetShockForce(self, side)

    def GetShockLength(self, side):
        r"""GetShockLength(ChMacPhersonStrut self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChMacPhersonStrut_GetShockLength(self, side)

    def GetShockVelocity(self, side):
        r"""GetShockVelocity(ChMacPhersonStrut self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChMacPhersonStrut_GetShockVelocity(self, side)

    def Get_LCA_sph_pos(self, side):
        r"""Get_LCA_sph_pos(ChMacPhersonStrut self, chrono::vehicle::VehicleSide side) -> ChVectorD"""
        return _vehicle.ChMacPhersonStrut_Get_LCA_sph_pos(self, side)

    def LogConstraintViolations(self, side):
        r"""LogConstraintViolations(ChMacPhersonStrut self, chrono::vehicle::VehicleSide side)"""
        return _vehicle.ChMacPhersonStrut_LogConstraintViolations(self, side)

    def GetAntirollBody(self, side):
        r"""GetAntirollBody(ChMacPhersonStrut self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChBody >"""
        return _vehicle.ChMacPhersonStrut_GetAntirollBody(self, side)

    def LogHardpointLocations(self, ref, inches=False):
        r"""LogHardpointLocations(ChMacPhersonStrut self, ChVectorD ref, bool inches=False)"""
        return _vehicle.ChMacPhersonStrut_LogHardpointLocations(self, ref, inches)

# Register ChMacPhersonStrut in _vehicle:
_vehicle.ChMacPhersonStrut_swigregister(ChMacPhersonStrut)

class ChLeafspringAxle(ChSuspension):
    r"""Proxy of C++ chrono::vehicle::ChLeafspringAxle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChLeafspringAxle

    def GetTemplateName(self):
        r"""GetTemplateName(ChLeafspringAxle self) -> std::string"""
        return _vehicle.ChLeafspringAxle_GetTemplateName(self)

    def IsSteerable(self):
        r"""IsSteerable(ChLeafspringAxle self) -> bool"""
        return _vehicle.ChLeafspringAxle_IsSteerable(self)

    def IsIndependent(self):
        r"""IsIndependent(ChLeafspringAxle self) -> bool"""
        return _vehicle.ChLeafspringAxle_IsIndependent(self)

    def Initialize(self, chassis, subchassis, steering, location, left_ang_vel=0, right_ang_vel=0):
        r"""Initialize(ChLeafspringAxle self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, std::shared_ptr< chrono::vehicle::ChSubchassis > subchassis, std::shared_ptr< chrono::vehicle::ChSteering > steering, ChVectorD location, double left_ang_vel=0, double right_ang_vel=0)"""
        return _vehicle.ChLeafspringAxle_Initialize(self, chassis, subchassis, steering, location, left_ang_vel, right_ang_vel)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChLeafspringAxle self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChLeafspringAxle_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChLeafspringAxle self)"""
        return _vehicle.ChLeafspringAxle_RemoveVisualizationAssets(self)

    def GetTrack(self):
        r"""GetTrack(ChLeafspringAxle self) -> double"""
        return _vehicle.ChLeafspringAxle_GetTrack(self)

    def GetSpring(self, side):
        r"""GetSpring(ChLeafspringAxle self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkTSDA >"""
        return _vehicle.ChLeafspringAxle_GetSpring(self, side)

    def GetShock(self, side):
        r"""GetShock(ChLeafspringAxle self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkTSDA >"""
        return _vehicle.ChLeafspringAxle_GetShock(self, side)

    def ReportSuspensionForce(self, side):
        r"""ReportSuspensionForce(ChLeafspringAxle self, chrono::vehicle::VehicleSide side) -> std::vector< chrono::vehicle::ChSuspension::ForceTSDA,std::allocator< chrono::vehicle::ChSuspension::ForceTSDA > >"""
        return _vehicle.ChLeafspringAxle_ReportSuspensionForce(self, side)

    def GetSpringForce(self, side):
        r"""GetSpringForce(ChLeafspringAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChLeafspringAxle_GetSpringForce(self, side)

    def GetSpringLength(self, side):
        r"""GetSpringLength(ChLeafspringAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChLeafspringAxle_GetSpringLength(self, side)

    def GetSpringDeformation(self, side):
        r"""GetSpringDeformation(ChLeafspringAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChLeafspringAxle_GetSpringDeformation(self, side)

    def GetShockForce(self, side):
        r"""GetShockForce(ChLeafspringAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChLeafspringAxle_GetShockForce(self, side)

    def GetShockLength(self, side):
        r"""GetShockLength(ChLeafspringAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChLeafspringAxle_GetShockLength(self, side)

    def GetShockVelocity(self, side):
        r"""GetShockVelocity(ChLeafspringAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChLeafspringAxle_GetShockVelocity(self, side)

    def LogConstraintViolations(self, side):
        r"""LogConstraintViolations(ChLeafspringAxle self, chrono::vehicle::VehicleSide side)"""
        return _vehicle.ChLeafspringAxle_LogConstraintViolations(self, side)

    def LogHardpointLocations(self, ref, inches=False):
        r"""LogHardpointLocations(ChLeafspringAxle self, ChVectorD ref, bool inches=False)"""
        return _vehicle.ChLeafspringAxle_LogHardpointLocations(self, ref, inches)

# Register ChLeafspringAxle in _vehicle:
_vehicle.ChLeafspringAxle_swigregister(ChLeafspringAxle)

class ChHendricksonPRIMAXX(ChSuspension):
    r"""Proxy of C++ chrono::vehicle::ChHendricksonPRIMAXX class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChHendricksonPRIMAXX

    def GetTemplateName(self):
        r"""GetTemplateName(ChHendricksonPRIMAXX self) -> std::string"""
        return _vehicle.ChHendricksonPRIMAXX_GetTemplateName(self)

    def IsSteerable(self):
        r"""IsSteerable(ChHendricksonPRIMAXX self) -> bool"""
        return _vehicle.ChHendricksonPRIMAXX_IsSteerable(self)

    def IsIndependent(self):
        r"""IsIndependent(ChHendricksonPRIMAXX self) -> bool"""
        return _vehicle.ChHendricksonPRIMAXX_IsIndependent(self)

    def Initialize(self, chassis, subchassis, steering, location, left_ang_vel=0, right_ang_vel=0):
        r"""Initialize(ChHendricksonPRIMAXX self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, std::shared_ptr< chrono::vehicle::ChSubchassis > subchassis, std::shared_ptr< chrono::vehicle::ChSteering > steering, ChVectorD location, double left_ang_vel=0, double right_ang_vel=0)"""
        return _vehicle.ChHendricksonPRIMAXX_Initialize(self, chassis, subchassis, steering, location, left_ang_vel, right_ang_vel)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChHendricksonPRIMAXX self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChHendricksonPRIMAXX_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChHendricksonPRIMAXX self)"""
        return _vehicle.ChHendricksonPRIMAXX_RemoveVisualizationAssets(self)

    def GetTrack(self):
        r"""GetTrack(ChHendricksonPRIMAXX self) -> double"""
        return _vehicle.ChHendricksonPRIMAXX_GetTrack(self)

    def ReportSuspensionForce(self, side):
        r"""ReportSuspensionForce(ChHendricksonPRIMAXX self, chrono::vehicle::VehicleSide side) -> std::vector< chrono::vehicle::ChSuspension::ForceTSDA,std::allocator< chrono::vehicle::ChSuspension::ForceTSDA > >"""
        return _vehicle.ChHendricksonPRIMAXX_ReportSuspensionForce(self, side)

    def GetShockLBForce(self, side):
        r"""GetShockLBForce(ChHendricksonPRIMAXX self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChHendricksonPRIMAXX_GetShockLBForce(self, side)

    def GetShockLBLength(self, side):
        r"""GetShockLBLength(ChHendricksonPRIMAXX self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChHendricksonPRIMAXX_GetShockLBLength(self, side)

    def GetShockLBVelocity(self, side):
        r"""GetShockLBVelocity(ChHendricksonPRIMAXX self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChHendricksonPRIMAXX_GetShockLBVelocity(self, side)

    def GetShockAHForce(self, side):
        r"""GetShockAHForce(ChHendricksonPRIMAXX self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChHendricksonPRIMAXX_GetShockAHForce(self, side)

    def GetShockAHLength(self, side):
        r"""GetShockAHLength(ChHendricksonPRIMAXX self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChHendricksonPRIMAXX_GetShockAHLength(self, side)

    def GetShockAHVelocity(self, side):
        r"""GetShockAHVelocity(ChHendricksonPRIMAXX self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChHendricksonPRIMAXX_GetShockAHVelocity(self, side)

    def LogConstraintViolations(self, side):
        r"""LogConstraintViolations(ChHendricksonPRIMAXX self, chrono::vehicle::VehicleSide side)"""
        return _vehicle.ChHendricksonPRIMAXX_LogConstraintViolations(self, side)

    def LogHardpointLocations(self, ref, inches=False):
        r"""LogHardpointLocations(ChHendricksonPRIMAXX self, ChVectorD ref, bool inches=False)"""
        return _vehicle.ChHendricksonPRIMAXX_LogHardpointLocations(self, ref, inches)

# Register ChHendricksonPRIMAXX in _vehicle:
_vehicle.ChHendricksonPRIMAXX_swigregister(ChHendricksonPRIMAXX)

class ChDoubleWishboneReduced(ChSuspension):
    r"""Proxy of C++ chrono::vehicle::ChDoubleWishboneReduced class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChDoubleWishboneReduced

    def GetTemplateName(self):
        r"""GetTemplateName(ChDoubleWishboneReduced self) -> std::string"""
        return _vehicle.ChDoubleWishboneReduced_GetTemplateName(self)

    def IsSteerable(self):
        r"""IsSteerable(ChDoubleWishboneReduced self) -> bool"""
        return _vehicle.ChDoubleWishboneReduced_IsSteerable(self)

    def IsIndependent(self):
        r"""IsIndependent(ChDoubleWishboneReduced self) -> bool"""
        return _vehicle.ChDoubleWishboneReduced_IsIndependent(self)

    def Initialize(self, chassis, subchassis, steering, location, left_ang_vel=0, right_ang_vel=0):
        r"""Initialize(ChDoubleWishboneReduced self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, std::shared_ptr< chrono::vehicle::ChSubchassis > subchassis, std::shared_ptr< chrono::vehicle::ChSteering > steering, ChVectorD location, double left_ang_vel=0, double right_ang_vel=0)"""
        return _vehicle.ChDoubleWishboneReduced_Initialize(self, chassis, subchassis, steering, location, left_ang_vel, right_ang_vel)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChDoubleWishboneReduced self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChDoubleWishboneReduced_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChDoubleWishboneReduced self)"""
        return _vehicle.ChDoubleWishboneReduced_RemoveVisualizationAssets(self)

    def GetTrack(self):
        r"""GetTrack(ChDoubleWishboneReduced self) -> double"""
        return _vehicle.ChDoubleWishboneReduced_GetTrack(self)

    def GetShock(self, side):
        r"""GetShock(ChDoubleWishboneReduced self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkTSDA >"""
        return _vehicle.ChDoubleWishboneReduced_GetShock(self, side)

    def ReportSuspensionForce(self, side):
        r"""ReportSuspensionForce(ChDoubleWishboneReduced self, chrono::vehicle::VehicleSide side) -> std::vector< chrono::vehicle::ChSuspension::ForceTSDA,std::allocator< chrono::vehicle::ChSuspension::ForceTSDA > >"""
        return _vehicle.ChDoubleWishboneReduced_ReportSuspensionForce(self, side)

    def GetAntirollBody(self, side):
        r"""GetAntirollBody(ChDoubleWishboneReduced self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChBody >"""
        return _vehicle.ChDoubleWishboneReduced_GetAntirollBody(self, side)

    def LogConstraintViolations(self, side):
        r"""LogConstraintViolations(ChDoubleWishboneReduced self, chrono::vehicle::VehicleSide side)"""
        return _vehicle.ChDoubleWishboneReduced_LogConstraintViolations(self, side)

# Register ChDoubleWishboneReduced in _vehicle:
_vehicle.ChDoubleWishboneReduced_swigregister(ChDoubleWishboneReduced)

class ChMultiLink(ChSuspension):
    r"""Proxy of C++ chrono::vehicle::ChMultiLink class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChMultiLink

    def GetTemplateName(self):
        r"""GetTemplateName(ChMultiLink self) -> std::string"""
        return _vehicle.ChMultiLink_GetTemplateName(self)

    def IsSteerable(self):
        r"""IsSteerable(ChMultiLink self) -> bool"""
        return _vehicle.ChMultiLink_IsSteerable(self)

    def IsIndependent(self):
        r"""IsIndependent(ChMultiLink self) -> bool"""
        return _vehicle.ChMultiLink_IsIndependent(self)

    def Initialize(self, chassis, subchassis, steering, location, left_ang_vel=0, right_ang_vel=0):
        r"""Initialize(ChMultiLink self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, std::shared_ptr< chrono::vehicle::ChSubchassis > subchassis, std::shared_ptr< chrono::vehicle::ChSteering > steering, ChVectorD location, double left_ang_vel=0, double right_ang_vel=0)"""
        return _vehicle.ChMultiLink_Initialize(self, chassis, subchassis, steering, location, left_ang_vel, right_ang_vel)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChMultiLink self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChMultiLink_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChMultiLink self)"""
        return _vehicle.ChMultiLink_RemoveVisualizationAssets(self)

    def GetTrack(self):
        r"""GetTrack(ChMultiLink self) -> double"""
        return _vehicle.ChMultiLink_GetTrack(self)

    def GetSpring(self, side):
        r"""GetSpring(ChMultiLink self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkTSDA >"""
        return _vehicle.ChMultiLink_GetSpring(self, side)

    def GetShock(self, side):
        r"""GetShock(ChMultiLink self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkTSDA >"""
        return _vehicle.ChMultiLink_GetShock(self, side)

    def ReportSuspensionForce(self, side):
        r"""ReportSuspensionForce(ChMultiLink self, chrono::vehicle::VehicleSide side) -> std::vector< chrono::vehicle::ChSuspension::ForceTSDA,std::allocator< chrono::vehicle::ChSuspension::ForceTSDA > >"""
        return _vehicle.ChMultiLink_ReportSuspensionForce(self, side)

    def GetSpringForce(self, side):
        r"""GetSpringForce(ChMultiLink self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChMultiLink_GetSpringForce(self, side)

    def GetSpringLength(self, side):
        r"""GetSpringLength(ChMultiLink self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChMultiLink_GetSpringLength(self, side)

    def GetSpringDeformation(self, side):
        r"""GetSpringDeformation(ChMultiLink self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChMultiLink_GetSpringDeformation(self, side)

    def GetShockForce(self, side):
        r"""GetShockForce(ChMultiLink self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChMultiLink_GetShockForce(self, side)

    def GetShockLength(self, side):
        r"""GetShockLength(ChMultiLink self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChMultiLink_GetShockLength(self, side)

    def GetShockVelocity(self, side):
        r"""GetShockVelocity(ChMultiLink self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChMultiLink_GetShockVelocity(self, side)

    def GetAntirollBody(self, side):
        r"""GetAntirollBody(ChMultiLink self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChBody >"""
        return _vehicle.ChMultiLink_GetAntirollBody(self, side)

    def LogConstraintViolations(self, side):
        r"""LogConstraintViolations(ChMultiLink self, chrono::vehicle::VehicleSide side)"""
        return _vehicle.ChMultiLink_LogConstraintViolations(self, side)

    def LogHardpointLocations(self, ref, inches=False):
        r"""LogHardpointLocations(ChMultiLink self, ChVectorD ref, bool inches=False)"""
        return _vehicle.ChMultiLink_LogHardpointLocations(self, ref, inches)

# Register ChMultiLink in _vehicle:
_vehicle.ChMultiLink_swigregister(ChMultiLink)

class ChRigidPinnedAxle(ChSuspension):
    r"""Proxy of C++ chrono::vehicle::ChRigidPinnedAxle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChRigidPinnedAxle

    def GetTemplateName(self):
        r"""GetTemplateName(ChRigidPinnedAxle self) -> std::string"""
        return _vehicle.ChRigidPinnedAxle_GetTemplateName(self)

    def IsSteerable(self):
        r"""IsSteerable(ChRigidPinnedAxle self) -> bool"""
        return _vehicle.ChRigidPinnedAxle_IsSteerable(self)

    def IsIndependent(self):
        r"""IsIndependent(ChRigidPinnedAxle self) -> bool"""
        return _vehicle.ChRigidPinnedAxle_IsIndependent(self)

    def Initialize(self, chassis, subchassis, steering, location, left_ang_vel=0, right_ang_vel=0):
        r"""Initialize(ChRigidPinnedAxle self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, std::shared_ptr< chrono::vehicle::ChSubchassis > subchassis, std::shared_ptr< chrono::vehicle::ChSteering > steering, ChVectorD location, double left_ang_vel=0, double right_ang_vel=0)"""
        return _vehicle.ChRigidPinnedAxle_Initialize(self, chassis, subchassis, steering, location, left_ang_vel, right_ang_vel)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChRigidPinnedAxle self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChRigidPinnedAxle_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChRigidPinnedAxle self)"""
        return _vehicle.ChRigidPinnedAxle_RemoveVisualizationAssets(self)

    def GetTrack(self):
        r"""GetTrack(ChRigidPinnedAxle self) -> double"""
        return _vehicle.ChRigidPinnedAxle_GetTrack(self)

    def ReportSuspensionForce(self, side):
        r"""ReportSuspensionForce(ChRigidPinnedAxle self, chrono::vehicle::VehicleSide side) -> std::vector< chrono::vehicle::ChSuspension::ForceTSDA,std::allocator< chrono::vehicle::ChSuspension::ForceTSDA > >"""
        return _vehicle.ChRigidPinnedAxle_ReportSuspensionForce(self, side)

    def LogConstraintViolations(self, side):
        r"""LogConstraintViolations(ChRigidPinnedAxle self, chrono::vehicle::VehicleSide side)"""
        return _vehicle.ChRigidPinnedAxle_LogConstraintViolations(self, side)

# Register ChRigidPinnedAxle in _vehicle:
_vehicle.ChRigidPinnedAxle_swigregister(ChRigidPinnedAxle)

class ChSemiTrailingArm(ChSuspension):
    r"""Proxy of C++ chrono::vehicle::ChSemiTrailingArm class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChSemiTrailingArm

    def GetTemplateName(self):
        r"""GetTemplateName(ChSemiTrailingArm self) -> std::string"""
        return _vehicle.ChSemiTrailingArm_GetTemplateName(self)

    def IsSteerable(self):
        r"""IsSteerable(ChSemiTrailingArm self) -> bool"""
        return _vehicle.ChSemiTrailingArm_IsSteerable(self)

    def IsIndependent(self):
        r"""IsIndependent(ChSemiTrailingArm self) -> bool"""
        return _vehicle.ChSemiTrailingArm_IsIndependent(self)

    def Initialize(self, chassis, subchassis, steering, location, left_ang_vel=0, right_ang_vel=0):
        r"""Initialize(ChSemiTrailingArm self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, std::shared_ptr< chrono::vehicle::ChSubchassis > subchassis, std::shared_ptr< chrono::vehicle::ChSteering > steering, ChVectorD location, double left_ang_vel=0, double right_ang_vel=0)"""
        return _vehicle.ChSemiTrailingArm_Initialize(self, chassis, subchassis, steering, location, left_ang_vel, right_ang_vel)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChSemiTrailingArm self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChSemiTrailingArm_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChSemiTrailingArm self)"""
        return _vehicle.ChSemiTrailingArm_RemoveVisualizationAssets(self)

    def GetTrack(self):
        r"""GetTrack(ChSemiTrailingArm self) -> double"""
        return _vehicle.ChSemiTrailingArm_GetTrack(self)

    def GetSpring(self, side):
        r"""GetSpring(ChSemiTrailingArm self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkTSDA >"""
        return _vehicle.ChSemiTrailingArm_GetSpring(self, side)

    def GetShock(self, side):
        r"""GetShock(ChSemiTrailingArm self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkTSDA >"""
        return _vehicle.ChSemiTrailingArm_GetShock(self, side)

    def ReportSuspensionForce(self, side):
        r"""ReportSuspensionForce(ChSemiTrailingArm self, chrono::vehicle::VehicleSide side) -> std::vector< chrono::vehicle::ChSuspension::ForceTSDA,std::allocator< chrono::vehicle::ChSuspension::ForceTSDA > >"""
        return _vehicle.ChSemiTrailingArm_ReportSuspensionForce(self, side)

    def GetSpringForce(self, side):
        r"""GetSpringForce(ChSemiTrailingArm self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSemiTrailingArm_GetSpringForce(self, side)

    def GetSpringLength(self, side):
        r"""GetSpringLength(ChSemiTrailingArm self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSemiTrailingArm_GetSpringLength(self, side)

    def GetSpringDeformation(self, side):
        r"""GetSpringDeformation(ChSemiTrailingArm self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSemiTrailingArm_GetSpringDeformation(self, side)

    def GetShockForce(self, side):
        r"""GetShockForce(ChSemiTrailingArm self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSemiTrailingArm_GetShockForce(self, side)

    def GetShockLength(self, side):
        r"""GetShockLength(ChSemiTrailingArm self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSemiTrailingArm_GetShockLength(self, side)

    def GetShockVelocity(self, side):
        r"""GetShockVelocity(ChSemiTrailingArm self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSemiTrailingArm_GetShockVelocity(self, side)

    def LogConstraintViolations(self, side):
        r"""LogConstraintViolations(ChSemiTrailingArm self, chrono::vehicle::VehicleSide side)"""
        return _vehicle.ChSemiTrailingArm_LogConstraintViolations(self, side)

    def GetAntirollBody(self, side):
        r"""GetAntirollBody(ChSemiTrailingArm self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChBody >"""
        return _vehicle.ChSemiTrailingArm_GetAntirollBody(self, side)

    def LogHardpointLocations(self, ref, inches=False):
        r"""LogHardpointLocations(ChSemiTrailingArm self, ChVectorD ref, bool inches=False)"""
        return _vehicle.ChSemiTrailingArm_LogHardpointLocations(self, ref, inches)

# Register ChSemiTrailingArm in _vehicle:
_vehicle.ChSemiTrailingArm_swigregister(ChSemiTrailingArm)

class ChRigidSuspension(ChSuspension):
    r"""Proxy of C++ chrono::vehicle::ChRigidSuspension class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChRigidSuspension

    def GetTemplateName(self):
        r"""GetTemplateName(ChRigidSuspension self) -> std::string"""
        return _vehicle.ChRigidSuspension_GetTemplateName(self)

    def IsSteerable(self):
        r"""IsSteerable(ChRigidSuspension self) -> bool"""
        return _vehicle.ChRigidSuspension_IsSteerable(self)

    def IsIndependent(self):
        r"""IsIndependent(ChRigidSuspension self) -> bool"""
        return _vehicle.ChRigidSuspension_IsIndependent(self)

    def Initialize(self, chassis, subchassis, steering, location, left_ang_vel=0, right_ang_vel=0):
        r"""Initialize(ChRigidSuspension self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, std::shared_ptr< chrono::vehicle::ChSubchassis > subchassis, std::shared_ptr< chrono::vehicle::ChSteering > steering, ChVectorD location, double left_ang_vel=0, double right_ang_vel=0)"""
        return _vehicle.ChRigidSuspension_Initialize(self, chassis, subchassis, steering, location, left_ang_vel, right_ang_vel)

    def GetTrack(self):
        r"""GetTrack(ChRigidSuspension self) -> double"""
        return _vehicle.ChRigidSuspension_GetTrack(self)

    def ReportSuspensionForce(self, side):
        r"""ReportSuspensionForce(ChRigidSuspension self, chrono::vehicle::VehicleSide side) -> std::vector< chrono::vehicle::ChSuspension::ForceTSDA,std::allocator< chrono::vehicle::ChSuspension::ForceTSDA > >"""
        return _vehicle.ChRigidSuspension_ReportSuspensionForce(self, side)

    def LogConstraintViolations(self, side):
        r"""LogConstraintViolations(ChRigidSuspension self, chrono::vehicle::VehicleSide side)"""
        return _vehicle.ChRigidSuspension_LogConstraintViolations(self, side)

# Register ChRigidSuspension in _vehicle:
_vehicle.ChRigidSuspension_swigregister(ChRigidSuspension)

class ChSolidAxle(ChSuspension):
    r"""Proxy of C++ chrono::vehicle::ChSolidAxle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChSolidAxle

    def GetTemplateName(self):
        r"""GetTemplateName(ChSolidAxle self) -> std::string"""
        return _vehicle.ChSolidAxle_GetTemplateName(self)

    def IsSteerable(self):
        r"""IsSteerable(ChSolidAxle self) -> bool"""
        return _vehicle.ChSolidAxle_IsSteerable(self)

    def IsIndependent(self):
        r"""IsIndependent(ChSolidAxle self) -> bool"""
        return _vehicle.ChSolidAxle_IsIndependent(self)

    def Initialize(self, chassis, subchassis, steering, location, left_ang_vel=0, right_ang_vel=0):
        r"""Initialize(ChSolidAxle self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, std::shared_ptr< chrono::vehicle::ChSubchassis > subchassis, std::shared_ptr< chrono::vehicle::ChSteering > steering, ChVectorD location, double left_ang_vel=0, double right_ang_vel=0)"""
        return _vehicle.ChSolidAxle_Initialize(self, chassis, subchassis, steering, location, left_ang_vel, right_ang_vel)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChSolidAxle self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChSolidAxle_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChSolidAxle self)"""
        return _vehicle.ChSolidAxle_RemoveVisualizationAssets(self)

    def GetTrack(self):
        r"""GetTrack(ChSolidAxle self) -> double"""
        return _vehicle.ChSolidAxle_GetTrack(self)

    def GetSpring(self, side):
        r"""GetSpring(ChSolidAxle self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkTSDA >"""
        return _vehicle.ChSolidAxle_GetSpring(self, side)

    def GetShock(self, side):
        r"""GetShock(ChSolidAxle self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkTSDA >"""
        return _vehicle.ChSolidAxle_GetShock(self, side)

    def ReportSuspensionForce(self, side):
        r"""ReportSuspensionForce(ChSolidAxle self, chrono::vehicle::VehicleSide side) -> std::vector< chrono::vehicle::ChSuspension::ForceTSDA,std::allocator< chrono::vehicle::ChSuspension::ForceTSDA > >"""
        return _vehicle.ChSolidAxle_ReportSuspensionForce(self, side)

    def GetSpringForce(self, side):
        r"""GetSpringForce(ChSolidAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSolidAxle_GetSpringForce(self, side)

    def GetSpringLength(self, side):
        r"""GetSpringLength(ChSolidAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSolidAxle_GetSpringLength(self, side)

    def GetSpringDeformation(self, side):
        r"""GetSpringDeformation(ChSolidAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSolidAxle_GetSpringDeformation(self, side)

    def GetShockForce(self, side):
        r"""GetShockForce(ChSolidAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSolidAxle_GetShockForce(self, side)

    def GetShockLength(self, side):
        r"""GetShockLength(ChSolidAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSolidAxle_GetShockLength(self, side)

    def GetShockVelocity(self, side):
        r"""GetShockVelocity(ChSolidAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSolidAxle_GetShockVelocity(self, side)

    def LogConstraintViolations(self, side):
        r"""LogConstraintViolations(ChSolidAxle self, chrono::vehicle::VehicleSide side)"""
        return _vehicle.ChSolidAxle_LogConstraintViolations(self, side)

    def LogHardpointLocations(self, ref, inches=False):
        r"""LogHardpointLocations(ChSolidAxle self, ChVectorD ref, bool inches=False)"""
        return _vehicle.ChSolidAxle_LogHardpointLocations(self, ref, inches)

# Register ChSolidAxle in _vehicle:
_vehicle.ChSolidAxle_swigregister(ChSolidAxle)

class ChThreeLinkIRS(ChSuspension):
    r"""Proxy of C++ chrono::vehicle::ChThreeLinkIRS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChThreeLinkIRS

    def GetTemplateName(self):
        r"""GetTemplateName(ChThreeLinkIRS self) -> std::string"""
        return _vehicle.ChThreeLinkIRS_GetTemplateName(self)

    def IsSteerable(self):
        r"""IsSteerable(ChThreeLinkIRS self) -> bool"""
        return _vehicle.ChThreeLinkIRS_IsSteerable(self)

    def IsIndependent(self):
        r"""IsIndependent(ChThreeLinkIRS self) -> bool"""
        return _vehicle.ChThreeLinkIRS_IsIndependent(self)

    def Initialize(self, chassis, subchassis, steering, location, left_ang_vel=0, right_ang_vel=0):
        r"""Initialize(ChThreeLinkIRS self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, std::shared_ptr< chrono::vehicle::ChSubchassis > subchassis, std::shared_ptr< chrono::vehicle::ChSteering > steering, ChVectorD location, double left_ang_vel=0, double right_ang_vel=0)"""
        return _vehicle.ChThreeLinkIRS_Initialize(self, chassis, subchassis, steering, location, left_ang_vel, right_ang_vel)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChThreeLinkIRS self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChThreeLinkIRS_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChThreeLinkIRS self)"""
        return _vehicle.ChThreeLinkIRS_RemoveVisualizationAssets(self)

    def GetTrack(self):
        r"""GetTrack(ChThreeLinkIRS self) -> double"""
        return _vehicle.ChThreeLinkIRS_GetTrack(self)

    def GetSpring(self, side):
        r"""GetSpring(ChThreeLinkIRS self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkTSDA >"""
        return _vehicle.ChThreeLinkIRS_GetSpring(self, side)

    def GetShock(self, side):
        r"""GetShock(ChThreeLinkIRS self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkTSDA >"""
        return _vehicle.ChThreeLinkIRS_GetShock(self, side)

    def ReportSuspensionForce(self, side):
        r"""ReportSuspensionForce(ChThreeLinkIRS self, chrono::vehicle::VehicleSide side) -> std::vector< chrono::vehicle::ChSuspension::ForceTSDA,std::allocator< chrono::vehicle::ChSuspension::ForceTSDA > >"""
        return _vehicle.ChThreeLinkIRS_ReportSuspensionForce(self, side)

    def GetSpringForce(self, side):
        r"""GetSpringForce(ChThreeLinkIRS self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChThreeLinkIRS_GetSpringForce(self, side)

    def GetSpringLength(self, side):
        r"""GetSpringLength(ChThreeLinkIRS self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChThreeLinkIRS_GetSpringLength(self, side)

    def GetSpringDeformation(self, side):
        r"""GetSpringDeformation(ChThreeLinkIRS self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChThreeLinkIRS_GetSpringDeformation(self, side)

    def GetShockForce(self, side):
        r"""GetShockForce(ChThreeLinkIRS self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChThreeLinkIRS_GetShockForce(self, side)

    def GetShockLength(self, side):
        r"""GetShockLength(ChThreeLinkIRS self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChThreeLinkIRS_GetShockLength(self, side)

    def GetShockVelocity(self, side):
        r"""GetShockVelocity(ChThreeLinkIRS self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChThreeLinkIRS_GetShockVelocity(self, side)

    def LogConstraintViolations(self, side):
        r"""LogConstraintViolations(ChThreeLinkIRS self, chrono::vehicle::VehicleSide side)"""
        return _vehicle.ChThreeLinkIRS_LogConstraintViolations(self, side)

    def GetAntirollBody(self, side):
        r"""GetAntirollBody(ChThreeLinkIRS self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChBody >"""
        return _vehicle.ChThreeLinkIRS_GetAntirollBody(self, side)

    def LogHardpointLocations(self, ref, inches=False):
        r"""LogHardpointLocations(ChThreeLinkIRS self, ChVectorD ref, bool inches=False)"""
        return _vehicle.ChThreeLinkIRS_LogHardpointLocations(self, ref, inches)

# Register ChThreeLinkIRS in _vehicle:
_vehicle.ChThreeLinkIRS_swigregister(ChThreeLinkIRS)

class ChToeBarLeafspringAxle(ChSuspension):
    r"""Proxy of C++ chrono::vehicle::ChToeBarLeafspringAxle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChToeBarLeafspringAxle

    def GetTemplateName(self):
        r"""GetTemplateName(ChToeBarLeafspringAxle self) -> std::string"""
        return _vehicle.ChToeBarLeafspringAxle_GetTemplateName(self)

    def IsSteerable(self):
        r"""IsSteerable(ChToeBarLeafspringAxle self) -> bool"""
        return _vehicle.ChToeBarLeafspringAxle_IsSteerable(self)

    def IsIndependent(self):
        r"""IsIndependent(ChToeBarLeafspringAxle self) -> bool"""
        return _vehicle.ChToeBarLeafspringAxle_IsIndependent(self)

    def Initialize(self, chassis, subchassis, steering, location, left_ang_vel=0, right_ang_vel=0):
        r"""Initialize(ChToeBarLeafspringAxle self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, std::shared_ptr< chrono::vehicle::ChSubchassis > subchassis, std::shared_ptr< chrono::vehicle::ChSteering > steering, ChVectorD location, double left_ang_vel=0, double right_ang_vel=0)"""
        return _vehicle.ChToeBarLeafspringAxle_Initialize(self, chassis, subchassis, steering, location, left_ang_vel, right_ang_vel)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChToeBarLeafspringAxle self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChToeBarLeafspringAxle_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChToeBarLeafspringAxle self)"""
        return _vehicle.ChToeBarLeafspringAxle_RemoveVisualizationAssets(self)

    def GetTrack(self):
        r"""GetTrack(ChToeBarLeafspringAxle self) -> double"""
        return _vehicle.ChToeBarLeafspringAxle_GetTrack(self)

    def GetSpring(self, side):
        r"""GetSpring(ChToeBarLeafspringAxle self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkTSDA >"""
        return _vehicle.ChToeBarLeafspringAxle_GetSpring(self, side)

    def GetShock(self, side):
        r"""GetShock(ChToeBarLeafspringAxle self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkTSDA >"""
        return _vehicle.ChToeBarLeafspringAxle_GetShock(self, side)

    def ReportSuspensionForce(self, side):
        r"""ReportSuspensionForce(ChToeBarLeafspringAxle self, chrono::vehicle::VehicleSide side) -> std::vector< chrono::vehicle::ChSuspension::ForceTSDA,std::allocator< chrono::vehicle::ChSuspension::ForceTSDA > >"""
        return _vehicle.ChToeBarLeafspringAxle_ReportSuspensionForce(self, side)

    def GetSpringForce(self, side):
        r"""GetSpringForce(ChToeBarLeafspringAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChToeBarLeafspringAxle_GetSpringForce(self, side)

    def GetSpringLength(self, side):
        r"""GetSpringLength(ChToeBarLeafspringAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChToeBarLeafspringAxle_GetSpringLength(self, side)

    def GetSpringDeformation(self, side):
        r"""GetSpringDeformation(ChToeBarLeafspringAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChToeBarLeafspringAxle_GetSpringDeformation(self, side)

    def GetShockForce(self, side):
        r"""GetShockForce(ChToeBarLeafspringAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChToeBarLeafspringAxle_GetShockForce(self, side)

    def GetShockLength(self, side):
        r"""GetShockLength(ChToeBarLeafspringAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChToeBarLeafspringAxle_GetShockLength(self, side)

    def GetShockVelocity(self, side):
        r"""GetShockVelocity(ChToeBarLeafspringAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChToeBarLeafspringAxle_GetShockVelocity(self, side)

    def GetKingpinAngleLeft(self):
        r"""GetKingpinAngleLeft(ChToeBarLeafspringAxle self) -> double"""
        return _vehicle.ChToeBarLeafspringAxle_GetKingpinAngleLeft(self)

    def GetKingpinAngleRight(self):
        r"""GetKingpinAngleRight(ChToeBarLeafspringAxle self) -> double"""
        return _vehicle.ChToeBarLeafspringAxle_GetKingpinAngleRight(self)

    def LogConstraintViolations(self, side):
        r"""LogConstraintViolations(ChToeBarLeafspringAxle self, chrono::vehicle::VehicleSide side)"""
        return _vehicle.ChToeBarLeafspringAxle_LogConstraintViolations(self, side)

    def LogHardpointLocations(self, ref, inches=False):
        r"""LogHardpointLocations(ChToeBarLeafspringAxle self, ChVectorD ref, bool inches=False)"""
        return _vehicle.ChToeBarLeafspringAxle_LogHardpointLocations(self, ref, inches)

# Register ChToeBarLeafspringAxle in _vehicle:
_vehicle.ChToeBarLeafspringAxle_swigregister(ChToeBarLeafspringAxle)

class ChSolidBellcrankThreeLinkAxle(ChSuspension):
    r"""Proxy of C++ chrono::vehicle::ChSolidBellcrankThreeLinkAxle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChSolidBellcrankThreeLinkAxle

    def GetTemplateName(self):
        r"""GetTemplateName(ChSolidBellcrankThreeLinkAxle self) -> std::string"""
        return _vehicle.ChSolidBellcrankThreeLinkAxle_GetTemplateName(self)

    def IsSteerable(self):
        r"""IsSteerable(ChSolidBellcrankThreeLinkAxle self) -> bool"""
        return _vehicle.ChSolidBellcrankThreeLinkAxle_IsSteerable(self)

    def IsIndependent(self):
        r"""IsIndependent(ChSolidBellcrankThreeLinkAxle self) -> bool"""
        return _vehicle.ChSolidBellcrankThreeLinkAxle_IsIndependent(self)

    def Initialize(self, chassis, subchassis, steering, location, left_ang_vel=0, right_ang_vel=0):
        r"""Initialize(ChSolidBellcrankThreeLinkAxle self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, std::shared_ptr< chrono::vehicle::ChSubchassis > subchassis, std::shared_ptr< chrono::vehicle::ChSteering > steering, ChVectorD location, double left_ang_vel=0, double right_ang_vel=0)"""
        return _vehicle.ChSolidBellcrankThreeLinkAxle_Initialize(self, chassis, subchassis, steering, location, left_ang_vel, right_ang_vel)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChSolidBellcrankThreeLinkAxle self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChSolidBellcrankThreeLinkAxle_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChSolidBellcrankThreeLinkAxle self)"""
        return _vehicle.ChSolidBellcrankThreeLinkAxle_RemoveVisualizationAssets(self)

    def GetTrack(self):
        r"""GetTrack(ChSolidBellcrankThreeLinkAxle self) -> double"""
        return _vehicle.ChSolidBellcrankThreeLinkAxle_GetTrack(self)

    def GetSpring(self, side):
        r"""GetSpring(ChSolidBellcrankThreeLinkAxle self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkTSDA >"""
        return _vehicle.ChSolidBellcrankThreeLinkAxle_GetSpring(self, side)

    def GetShock(self, side):
        r"""GetShock(ChSolidBellcrankThreeLinkAxle self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkTSDA >"""
        return _vehicle.ChSolidBellcrankThreeLinkAxle_GetShock(self, side)

    def ReportSuspensionForce(self, side):
        r"""ReportSuspensionForce(ChSolidBellcrankThreeLinkAxle self, chrono::vehicle::VehicleSide side) -> std::vector< chrono::vehicle::ChSuspension::ForceTSDA,std::allocator< chrono::vehicle::ChSuspension::ForceTSDA > >"""
        return _vehicle.ChSolidBellcrankThreeLinkAxle_ReportSuspensionForce(self, side)

    def GetSpringForce(self, side):
        r"""GetSpringForce(ChSolidBellcrankThreeLinkAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSolidBellcrankThreeLinkAxle_GetSpringForce(self, side)

    def GetSpringLength(self, side):
        r"""GetSpringLength(ChSolidBellcrankThreeLinkAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSolidBellcrankThreeLinkAxle_GetSpringLength(self, side)

    def GetSpringDeformation(self, side):
        r"""GetSpringDeformation(ChSolidBellcrankThreeLinkAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSolidBellcrankThreeLinkAxle_GetSpringDeformation(self, side)

    def GetShockForce(self, side):
        r"""GetShockForce(ChSolidBellcrankThreeLinkAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSolidBellcrankThreeLinkAxle_GetShockForce(self, side)

    def GetShockLength(self, side):
        r"""GetShockLength(ChSolidBellcrankThreeLinkAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSolidBellcrankThreeLinkAxle_GetShockLength(self, side)

    def GetShockVelocity(self, side):
        r"""GetShockVelocity(ChSolidBellcrankThreeLinkAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSolidBellcrankThreeLinkAxle_GetShockVelocity(self, side)

    def LogConstraintViolations(self, side):
        r"""LogConstraintViolations(ChSolidBellcrankThreeLinkAxle self, chrono::vehicle::VehicleSide side)"""
        return _vehicle.ChSolidBellcrankThreeLinkAxle_LogConstraintViolations(self, side)

    def LogHardpointLocations(self, ref, inches=False):
        r"""LogHardpointLocations(ChSolidBellcrankThreeLinkAxle self, ChVectorD ref, bool inches=False)"""
        return _vehicle.ChSolidBellcrankThreeLinkAxle_LogHardpointLocations(self, ref, inches)

# Register ChSolidBellcrankThreeLinkAxle in _vehicle:
_vehicle.ChSolidBellcrankThreeLinkAxle_swigregister(ChSolidBellcrankThreeLinkAxle)

class ChSolidThreeLinkAxle(ChSuspension):
    r"""Proxy of C++ chrono::vehicle::ChSolidThreeLinkAxle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChSolidThreeLinkAxle

    def GetTemplateName(self):
        r"""GetTemplateName(ChSolidThreeLinkAxle self) -> std::string"""
        return _vehicle.ChSolidThreeLinkAxle_GetTemplateName(self)

    def IsSteerable(self):
        r"""IsSteerable(ChSolidThreeLinkAxle self) -> bool"""
        return _vehicle.ChSolidThreeLinkAxle_IsSteerable(self)

    def IsIndependent(self):
        r"""IsIndependent(ChSolidThreeLinkAxle self) -> bool"""
        return _vehicle.ChSolidThreeLinkAxle_IsIndependent(self)

    def Initialize(self, chassis, subchassis, steering, location, left_ang_vel=0, right_ang_vel=0):
        r"""Initialize(ChSolidThreeLinkAxle self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, std::shared_ptr< chrono::vehicle::ChSubchassis > subchassis, std::shared_ptr< chrono::vehicle::ChSteering > steering, ChVectorD location, double left_ang_vel=0, double right_ang_vel=0)"""
        return _vehicle.ChSolidThreeLinkAxle_Initialize(self, chassis, subchassis, steering, location, left_ang_vel, right_ang_vel)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChSolidThreeLinkAxle self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChSolidThreeLinkAxle_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChSolidThreeLinkAxle self)"""
        return _vehicle.ChSolidThreeLinkAxle_RemoveVisualizationAssets(self)

    def GetTrack(self):
        r"""GetTrack(ChSolidThreeLinkAxle self) -> double"""
        return _vehicle.ChSolidThreeLinkAxle_GetTrack(self)

    def GetSpring(self, side):
        r"""GetSpring(ChSolidThreeLinkAxle self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkTSDA >"""
        return _vehicle.ChSolidThreeLinkAxle_GetSpring(self, side)

    def GetShock(self, side):
        r"""GetShock(ChSolidThreeLinkAxle self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkTSDA >"""
        return _vehicle.ChSolidThreeLinkAxle_GetShock(self, side)

    def ReportSuspensionForce(self, side):
        r"""ReportSuspensionForce(ChSolidThreeLinkAxle self, chrono::vehicle::VehicleSide side) -> std::vector< chrono::vehicle::ChSuspension::ForceTSDA,std::allocator< chrono::vehicle::ChSuspension::ForceTSDA > >"""
        return _vehicle.ChSolidThreeLinkAxle_ReportSuspensionForce(self, side)

    def GetSpringForce(self, side):
        r"""GetSpringForce(ChSolidThreeLinkAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSolidThreeLinkAxle_GetSpringForce(self, side)

    def GetSpringLength(self, side):
        r"""GetSpringLength(ChSolidThreeLinkAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSolidThreeLinkAxle_GetSpringLength(self, side)

    def GetSpringDeformation(self, side):
        r"""GetSpringDeformation(ChSolidThreeLinkAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSolidThreeLinkAxle_GetSpringDeformation(self, side)

    def GetShockForce(self, side):
        r"""GetShockForce(ChSolidThreeLinkAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSolidThreeLinkAxle_GetShockForce(self, side)

    def GetShockLength(self, side):
        r"""GetShockLength(ChSolidThreeLinkAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSolidThreeLinkAxle_GetShockLength(self, side)

    def GetShockVelocity(self, side):
        r"""GetShockVelocity(ChSolidThreeLinkAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSolidThreeLinkAxle_GetShockVelocity(self, side)

    def LogConstraintViolations(self, side):
        r"""LogConstraintViolations(ChSolidThreeLinkAxle self, chrono::vehicle::VehicleSide side)"""
        return _vehicle.ChSolidThreeLinkAxle_LogConstraintViolations(self, side)

    def LogHardpointLocations(self, ref, inches=False):
        r"""LogHardpointLocations(ChSolidThreeLinkAxle self, ChVectorD ref, bool inches=False)"""
        return _vehicle.ChSolidThreeLinkAxle_LogHardpointLocations(self, ref, inches)

# Register ChSolidThreeLinkAxle in _vehicle:
_vehicle.ChSolidThreeLinkAxle_swigregister(ChSolidThreeLinkAxle)

class ChSingleWishbone(ChSuspension):
    r"""Proxy of C++ chrono::vehicle::ChSingleWishbone class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChSingleWishbone

    def GetTemplateName(self):
        r"""GetTemplateName(ChSingleWishbone self) -> std::string"""
        return _vehicle.ChSingleWishbone_GetTemplateName(self)

    def IsSteerable(self):
        r"""IsSteerable(ChSingleWishbone self) -> bool"""
        return _vehicle.ChSingleWishbone_IsSteerable(self)

    def IsIndependent(self):
        r"""IsIndependent(ChSingleWishbone self) -> bool"""
        return _vehicle.ChSingleWishbone_IsIndependent(self)

    def Initialize(self, chassis, subchassis, steering, location, left_ang_vel=0, right_ang_vel=0):
        r"""Initialize(ChSingleWishbone self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, std::shared_ptr< chrono::vehicle::ChSubchassis > subchassis, std::shared_ptr< chrono::vehicle::ChSteering > steering, ChVectorD location, double left_ang_vel=0, double right_ang_vel=0)"""
        return _vehicle.ChSingleWishbone_Initialize(self, chassis, subchassis, steering, location, left_ang_vel, right_ang_vel)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChSingleWishbone self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChSingleWishbone_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChSingleWishbone self)"""
        return _vehicle.ChSingleWishbone_RemoveVisualizationAssets(self)

    def GetTrack(self):
        r"""GetTrack(ChSingleWishbone self) -> double"""
        return _vehicle.ChSingleWishbone_GetTrack(self)

    def GetShock(self, side):
        r"""GetShock(ChSingleWishbone self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkTSDA >"""
        return _vehicle.ChSingleWishbone_GetShock(self, side)

    def ReportSuspensionForce(self, side):
        r"""ReportSuspensionForce(ChSingleWishbone self, chrono::vehicle::VehicleSide side) -> std::vector< chrono::vehicle::ChSuspension::ForceTSDA,std::allocator< chrono::vehicle::ChSuspension::ForceTSDA > >"""
        return _vehicle.ChSingleWishbone_ReportSuspensionForce(self, side)

    def GetShockForce(self, side):
        r"""GetShockForce(ChSingleWishbone self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSingleWishbone_GetShockForce(self, side)

    def GetShockLength(self, side):
        r"""GetShockLength(ChSingleWishbone self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSingleWishbone_GetShockLength(self, side)

    def GetShockVelocity(self, side):
        r"""GetShockVelocity(ChSingleWishbone self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSingleWishbone_GetShockVelocity(self, side)

    def LogConstraintViolations(self, side):
        r"""LogConstraintViolations(ChSingleWishbone self, chrono::vehicle::VehicleSide side)"""
        return _vehicle.ChSingleWishbone_LogConstraintViolations(self, side)

    def GetAntirollBody(self, side):
        r"""GetAntirollBody(ChSingleWishbone self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChBody >"""
        return _vehicle.ChSingleWishbone_GetAntirollBody(self, side)

    def LogHardpointLocations(self, ref, inches=False):
        r"""LogHardpointLocations(ChSingleWishbone self, ChVectorD ref, bool inches=False)"""
        return _vehicle.ChSingleWishbone_LogHardpointLocations(self, ref, inches)

# Register ChSingleWishbone in _vehicle:
_vehicle.ChSingleWishbone_swigregister(ChSingleWishbone)

class DoubleWishbone(ChDoubleWishbone):
    r"""Proxy of C++ chrono::vehicle::DoubleWishbone class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DoubleWishbone self, std::string const & filename) -> DoubleWishbone
        __init__(DoubleWishbone self, rapidjson::Document const & d) -> DoubleWishbone
        """
        _vehicle.DoubleWishbone_swiginit(self, _vehicle.new_DoubleWishbone(*args))
    __swig_destroy__ = _vehicle.delete_DoubleWishbone

    def UseTierodBodies(self):
        r"""UseTierodBodies(DoubleWishbone self) -> bool"""
        return _vehicle.DoubleWishbone_UseTierodBodies(self)

    def getCamberAngle(self):
        r"""getCamberAngle(DoubleWishbone self) -> double"""
        return _vehicle.DoubleWishbone_getCamberAngle(self)

    def getToeAngle(self):
        r"""getToeAngle(DoubleWishbone self) -> double"""
        return _vehicle.DoubleWishbone_getToeAngle(self)

    def getSpindleMass(self):
        r"""getSpindleMass(DoubleWishbone self) -> double"""
        return _vehicle.DoubleWishbone_getSpindleMass(self)

    def getUCAMass(self):
        r"""getUCAMass(DoubleWishbone self) -> double"""
        return _vehicle.DoubleWishbone_getUCAMass(self)

    def getLCAMass(self):
        r"""getLCAMass(DoubleWishbone self) -> double"""
        return _vehicle.DoubleWishbone_getLCAMass(self)

    def getUprightMass(self):
        r"""getUprightMass(DoubleWishbone self) -> double"""
        return _vehicle.DoubleWishbone_getUprightMass(self)

    def getTierodMass(self):
        r"""getTierodMass(DoubleWishbone self) -> double"""
        return _vehicle.DoubleWishbone_getTierodMass(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(DoubleWishbone self) -> double"""
        return _vehicle.DoubleWishbone_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(DoubleWishbone self) -> double"""
        return _vehicle.DoubleWishbone_getSpindleWidth(self)

    def getUCARadius(self):
        r"""getUCARadius(DoubleWishbone self) -> double"""
        return _vehicle.DoubleWishbone_getUCARadius(self)

    def getLCARadius(self):
        r"""getLCARadius(DoubleWishbone self) -> double"""
        return _vehicle.DoubleWishbone_getLCARadius(self)

    def getUprightRadius(self):
        r"""getUprightRadius(DoubleWishbone self) -> double"""
        return _vehicle.DoubleWishbone_getUprightRadius(self)

    def getTierodRadius(self):
        r"""getTierodRadius(DoubleWishbone self) -> double"""
        return _vehicle.DoubleWishbone_getTierodRadius(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(DoubleWishbone self) -> ChVectorD"""
        return _vehicle.DoubleWishbone_getSpindleInertia(self)

    def getUCAInertiaMoments(self):
        r"""getUCAInertiaMoments(DoubleWishbone self) -> ChVectorD"""
        return _vehicle.DoubleWishbone_getUCAInertiaMoments(self)

    def getUCAInertiaProducts(self):
        r"""getUCAInertiaProducts(DoubleWishbone self) -> ChVectorD"""
        return _vehicle.DoubleWishbone_getUCAInertiaProducts(self)

    def getLCAInertiaMoments(self):
        r"""getLCAInertiaMoments(DoubleWishbone self) -> ChVectorD"""
        return _vehicle.DoubleWishbone_getLCAInertiaMoments(self)

    def getLCAInertiaProducts(self):
        r"""getLCAInertiaProducts(DoubleWishbone self) -> ChVectorD"""
        return _vehicle.DoubleWishbone_getLCAInertiaProducts(self)

    def getUprightInertiaMoments(self):
        r"""getUprightInertiaMoments(DoubleWishbone self) -> ChVectorD"""
        return _vehicle.DoubleWishbone_getUprightInertiaMoments(self)

    def getUprightInertiaProducts(self):
        r"""getUprightInertiaProducts(DoubleWishbone self) -> ChVectorD"""
        return _vehicle.DoubleWishbone_getUprightInertiaProducts(self)

    def getTierodInertia(self):
        r"""getTierodInertia(DoubleWishbone self) -> ChVectorD"""
        return _vehicle.DoubleWishbone_getTierodInertia(self)

    def getAxleInertia(self):
        r"""getAxleInertia(DoubleWishbone self) -> double"""
        return _vehicle.DoubleWishbone_getAxleInertia(self)

    def getSpringRestLength(self):
        r"""getSpringRestLength(DoubleWishbone self) -> double"""
        return _vehicle.DoubleWishbone_getSpringRestLength(self)

    def getShockRestLength(self):
        r"""getShockRestLength(DoubleWishbone self) -> double"""
        return _vehicle.DoubleWishbone_getShockRestLength(self)

    def getSpringForceFunctor(self):
        r"""getSpringForceFunctor(DoubleWishbone self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.DoubleWishbone_getSpringForceFunctor(self)

    def getShockForceFunctor(self):
        r"""getShockForceFunctor(DoubleWishbone self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.DoubleWishbone_getShockForceFunctor(self)

    def getUCABushingData(self):
        r"""getUCABushingData(DoubleWishbone self) -> std::shared_ptr< ChVehicleBushingData >"""
        return _vehicle.DoubleWishbone_getUCABushingData(self)

    def getLCABushingData(self):
        r"""getLCABushingData(DoubleWishbone self) -> std::shared_ptr< ChVehicleBushingData >"""
        return _vehicle.DoubleWishbone_getLCABushingData(self)

    def getTierodBushingData(self):
        r"""getTierodBushingData(DoubleWishbone self) -> std::shared_ptr< ChVehicleBushingData >"""
        return _vehicle.DoubleWishbone_getTierodBushingData(self)

# Register DoubleWishbone in _vehicle:
_vehicle.DoubleWishbone_swigregister(DoubleWishbone)

class DoubleWishboneReduced(ChDoubleWishboneReduced):
    r"""Proxy of C++ chrono::vehicle::DoubleWishboneReduced class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DoubleWishboneReduced self, std::string const & filename) -> DoubleWishboneReduced
        __init__(DoubleWishboneReduced self, rapidjson::Document const & d) -> DoubleWishboneReduced
        """
        _vehicle.DoubleWishboneReduced_swiginit(self, _vehicle.new_DoubleWishboneReduced(*args))
    __swig_destroy__ = _vehicle.delete_DoubleWishboneReduced

    def getCamberAngle(self):
        r"""getCamberAngle(DoubleWishboneReduced self) -> double"""
        return _vehicle.DoubleWishboneReduced_getCamberAngle(self)

    def getToeAngle(self):
        r"""getToeAngle(DoubleWishboneReduced self) -> double"""
        return _vehicle.DoubleWishboneReduced_getToeAngle(self)

    def getSpindleMass(self):
        r"""getSpindleMass(DoubleWishboneReduced self) -> double"""
        return _vehicle.DoubleWishboneReduced_getSpindleMass(self)

    def getUprightMass(self):
        r"""getUprightMass(DoubleWishboneReduced self) -> double"""
        return _vehicle.DoubleWishboneReduced_getUprightMass(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(DoubleWishboneReduced self) -> double"""
        return _vehicle.DoubleWishboneReduced_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(DoubleWishboneReduced self) -> double"""
        return _vehicle.DoubleWishboneReduced_getSpindleWidth(self)

    def getUprightRadius(self):
        r"""getUprightRadius(DoubleWishboneReduced self) -> double"""
        return _vehicle.DoubleWishboneReduced_getUprightRadius(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(DoubleWishboneReduced self) -> ChVectorD"""
        return _vehicle.DoubleWishboneReduced_getSpindleInertia(self)

    def getUprightInertia(self):
        r"""getUprightInertia(DoubleWishboneReduced self) -> ChVectorD"""
        return _vehicle.DoubleWishboneReduced_getUprightInertia(self)

    def getAxleInertia(self):
        r"""getAxleInertia(DoubleWishboneReduced self) -> double"""
        return _vehicle.DoubleWishboneReduced_getAxleInertia(self)

    def getSpringRestLength(self):
        r"""getSpringRestLength(DoubleWishboneReduced self) -> double"""
        return _vehicle.DoubleWishboneReduced_getSpringRestLength(self)

    def getShockForceFunctor(self):
        r"""getShockForceFunctor(DoubleWishboneReduced self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.DoubleWishboneReduced_getShockForceFunctor(self)

# Register DoubleWishboneReduced in _vehicle:
_vehicle.DoubleWishboneReduced_swigregister(DoubleWishboneReduced)

class HendricksonPRIMAXX(ChHendricksonPRIMAXX):
    r"""Proxy of C++ chrono::vehicle::HendricksonPRIMAXX class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(HendricksonPRIMAXX self, std::string const & filename) -> HendricksonPRIMAXX
        __init__(HendricksonPRIMAXX self, rapidjson::Document const & d) -> HendricksonPRIMAXX
        """
        _vehicle.HendricksonPRIMAXX_swiginit(self, _vehicle.new_HendricksonPRIMAXX(*args))
    __swig_destroy__ = _vehicle.delete_HendricksonPRIMAXX

    def UseTierodBodies(self):
        r"""UseTierodBodies(HendricksonPRIMAXX self) -> bool"""
        return _vehicle.HendricksonPRIMAXX_UseTierodBodies(self)

    def getAxlehousingCOM(self):
        r"""getAxlehousingCOM(HendricksonPRIMAXX self) -> ChVectorD"""
        return _vehicle.HendricksonPRIMAXX_getAxlehousingCOM(self)

    def getTransversebeamCOM(self):
        r"""getTransversebeamCOM(HendricksonPRIMAXX self) -> ChVectorD"""
        return _vehicle.HendricksonPRIMAXX_getTransversebeamCOM(self)

    def getAxlehousingMass(self):
        r"""getAxlehousingMass(HendricksonPRIMAXX self) -> double"""
        return _vehicle.HendricksonPRIMAXX_getAxlehousingMass(self)

    def getKnuckleMass(self):
        r"""getKnuckleMass(HendricksonPRIMAXX self) -> double"""
        return _vehicle.HendricksonPRIMAXX_getKnuckleMass(self)

    def getSpindleMass(self):
        r"""getSpindleMass(HendricksonPRIMAXX self) -> double"""
        return _vehicle.HendricksonPRIMAXX_getSpindleMass(self)

    def getTorquerodMass(self):
        r"""getTorquerodMass(HendricksonPRIMAXX self) -> double"""
        return _vehicle.HendricksonPRIMAXX_getTorquerodMass(self)

    def getLowerbeamMass(self):
        r"""getLowerbeamMass(HendricksonPRIMAXX self) -> double"""
        return _vehicle.HendricksonPRIMAXX_getLowerbeamMass(self)

    def getTransversebeamMass(self):
        r"""getTransversebeamMass(HendricksonPRIMAXX self) -> double"""
        return _vehicle.HendricksonPRIMAXX_getTransversebeamMass(self)

    def getTierodMass(self):
        r"""getTierodMass(HendricksonPRIMAXX self) -> double"""
        return _vehicle.HendricksonPRIMAXX_getTierodMass(self)

    def getAxlehousingRadius(self):
        r"""getAxlehousingRadius(HendricksonPRIMAXX self) -> double"""
        return _vehicle.HendricksonPRIMAXX_getAxlehousingRadius(self)

    def getKnuckleRadius(self):
        r"""getKnuckleRadius(HendricksonPRIMAXX self) -> double"""
        return _vehicle.HendricksonPRIMAXX_getKnuckleRadius(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(HendricksonPRIMAXX self) -> double"""
        return _vehicle.HendricksonPRIMAXX_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(HendricksonPRIMAXX self) -> double"""
        return _vehicle.HendricksonPRIMAXX_getSpindleWidth(self)

    def getTorquerodRadius(self):
        r"""getTorquerodRadius(HendricksonPRIMAXX self) -> double"""
        return _vehicle.HendricksonPRIMAXX_getTorquerodRadius(self)

    def getLowerbeamRadius(self):
        r"""getLowerbeamRadius(HendricksonPRIMAXX self) -> double"""
        return _vehicle.HendricksonPRIMAXX_getLowerbeamRadius(self)

    def getTransversebeamRadius(self):
        r"""getTransversebeamRadius(HendricksonPRIMAXX self) -> double"""
        return _vehicle.HendricksonPRIMAXX_getTransversebeamRadius(self)

    def getTierodRadius(self):
        r"""getTierodRadius(HendricksonPRIMAXX self) -> double"""
        return _vehicle.HendricksonPRIMAXX_getTierodRadius(self)

    def getAxlehousingInertia(self):
        r"""getAxlehousingInertia(HendricksonPRIMAXX self) -> ChVectorD"""
        return _vehicle.HendricksonPRIMAXX_getAxlehousingInertia(self)

    def getKnuckleInertia(self):
        r"""getKnuckleInertia(HendricksonPRIMAXX self) -> ChVectorD"""
        return _vehicle.HendricksonPRIMAXX_getKnuckleInertia(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(HendricksonPRIMAXX self) -> ChVectorD"""
        return _vehicle.HendricksonPRIMAXX_getSpindleInertia(self)

    def getTorquerodInertia(self):
        r"""getTorquerodInertia(HendricksonPRIMAXX self) -> ChVectorD"""
        return _vehicle.HendricksonPRIMAXX_getTorquerodInertia(self)

    def getLowerbeamInertia(self):
        r"""getLowerbeamInertia(HendricksonPRIMAXX self) -> ChVectorD"""
        return _vehicle.HendricksonPRIMAXX_getLowerbeamInertia(self)

    def getTransversebeamInertia(self):
        r"""getTransversebeamInertia(HendricksonPRIMAXX self) -> ChVectorD"""
        return _vehicle.HendricksonPRIMAXX_getTransversebeamInertia(self)

    def getTierodInertia(self):
        r"""getTierodInertia(HendricksonPRIMAXX self) -> ChVectorD"""
        return _vehicle.HendricksonPRIMAXX_getTierodInertia(self)

    def getAxleInertia(self):
        r"""getAxleInertia(HendricksonPRIMAXX self) -> double"""
        return _vehicle.HendricksonPRIMAXX_getAxleInertia(self)

    def getShockAHRestLength(self):
        r"""getShockAHRestLength(HendricksonPRIMAXX self) -> double"""
        return _vehicle.HendricksonPRIMAXX_getShockAHRestLength(self)

    def getShockAHForceCallback(self):
        r"""getShockAHForceCallback(HendricksonPRIMAXX self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.HendricksonPRIMAXX_getShockAHForceCallback(self)

    def getShockLBRestLength(self):
        r"""getShockLBRestLength(HendricksonPRIMAXX self) -> double"""
        return _vehicle.HendricksonPRIMAXX_getShockLBRestLength(self)

    def getShockLBForceCallback(self):
        r"""getShockLBForceCallback(HendricksonPRIMAXX self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.HendricksonPRIMAXX_getShockLBForceCallback(self)

    def getTierodBushingData(self):
        r"""getTierodBushingData(HendricksonPRIMAXX self) -> std::shared_ptr< ChVehicleBushingData >"""
        return _vehicle.HendricksonPRIMAXX_getTierodBushingData(self)

# Register HendricksonPRIMAXX in _vehicle:
_vehicle.HendricksonPRIMAXX_swigregister(HendricksonPRIMAXX)

class LeafspringAxle(ChLeafspringAxle):
    r"""Proxy of C++ chrono::vehicle::LeafspringAxle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(LeafspringAxle self, std::string const & filename) -> LeafspringAxle
        __init__(LeafspringAxle self, rapidjson::Document const & d) -> LeafspringAxle
        """
        _vehicle.LeafspringAxle_swiginit(self, _vehicle.new_LeafspringAxle(*args))
    __swig_destroy__ = _vehicle.delete_LeafspringAxle

# Register LeafspringAxle in _vehicle:
_vehicle.LeafspringAxle_swigregister(LeafspringAxle)

class MacPhersonStrut(ChMacPhersonStrut):
    r"""Proxy of C++ chrono::vehicle::MacPhersonStrut class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MacPhersonStrut self, std::string const & filename) -> MacPhersonStrut
        __init__(MacPhersonStrut self, rapidjson::Document const & d) -> MacPhersonStrut
        """
        _vehicle.MacPhersonStrut_swiginit(self, _vehicle.new_MacPhersonStrut(*args))
    __swig_destroy__ = _vehicle.delete_MacPhersonStrut

    def UseTierodBodies(self):
        r"""UseTierodBodies(MacPhersonStrut self) -> bool"""
        return _vehicle.MacPhersonStrut_UseTierodBodies(self)

    def getCamberAngle(self):
        r"""getCamberAngle(MacPhersonStrut self) -> double"""
        return _vehicle.MacPhersonStrut_getCamberAngle(self)

    def getToeAngle(self):
        r"""getToeAngle(MacPhersonStrut self) -> double"""
        return _vehicle.MacPhersonStrut_getToeAngle(self)

    def getSpindleMass(self):
        r"""getSpindleMass(MacPhersonStrut self) -> double"""
        return _vehicle.MacPhersonStrut_getSpindleMass(self)

    def getStrutMass(self):
        r"""getStrutMass(MacPhersonStrut self) -> double"""
        return _vehicle.MacPhersonStrut_getStrutMass(self)

    def getLCAMass(self):
        r"""getLCAMass(MacPhersonStrut self) -> double"""
        return _vehicle.MacPhersonStrut_getLCAMass(self)

    def getUprightMass(self):
        r"""getUprightMass(MacPhersonStrut self) -> double"""
        return _vehicle.MacPhersonStrut_getUprightMass(self)

    def getTierodMass(self):
        r"""getTierodMass(MacPhersonStrut self) -> double"""
        return _vehicle.MacPhersonStrut_getTierodMass(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(MacPhersonStrut self) -> double"""
        return _vehicle.MacPhersonStrut_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(MacPhersonStrut self) -> double"""
        return _vehicle.MacPhersonStrut_getSpindleWidth(self)

    def getStrutRadius(self):
        r"""getStrutRadius(MacPhersonStrut self) -> double"""
        return _vehicle.MacPhersonStrut_getStrutRadius(self)

    def getLCARadius(self):
        r"""getLCARadius(MacPhersonStrut self) -> double"""
        return _vehicle.MacPhersonStrut_getLCARadius(self)

    def getUprightRadius(self):
        r"""getUprightRadius(MacPhersonStrut self) -> double"""
        return _vehicle.MacPhersonStrut_getUprightRadius(self)

    def getTierodRadius(self):
        r"""getTierodRadius(MacPhersonStrut self) -> double"""
        return _vehicle.MacPhersonStrut_getTierodRadius(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(MacPhersonStrut self) -> ChVectorD"""
        return _vehicle.MacPhersonStrut_getSpindleInertia(self)

    def getStrutInertia(self):
        r"""getStrutInertia(MacPhersonStrut self) -> ChVectorD"""
        return _vehicle.MacPhersonStrut_getStrutInertia(self)

    def getLCAInertia(self):
        r"""getLCAInertia(MacPhersonStrut self) -> ChVectorD"""
        return _vehicle.MacPhersonStrut_getLCAInertia(self)

    def getUprightInertia(self):
        r"""getUprightInertia(MacPhersonStrut self) -> ChVectorD"""
        return _vehicle.MacPhersonStrut_getUprightInertia(self)

    def getTierodInertia(self):
        r"""getTierodInertia(MacPhersonStrut self) -> ChVectorD"""
        return _vehicle.MacPhersonStrut_getTierodInertia(self)

    def getAxleInertia(self):
        r"""getAxleInertia(MacPhersonStrut self) -> double"""
        return _vehicle.MacPhersonStrut_getAxleInertia(self)

    def getSpringRestLength(self):
        r"""getSpringRestLength(MacPhersonStrut self) -> double"""
        return _vehicle.MacPhersonStrut_getSpringRestLength(self)

    def getShockRestLength(self):
        r"""getShockRestLength(MacPhersonStrut self) -> double"""
        return _vehicle.MacPhersonStrut_getShockRestLength(self)

    def getSpringForceFunctor(self):
        r"""getSpringForceFunctor(MacPhersonStrut self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.MacPhersonStrut_getSpringForceFunctor(self)

    def getShockForceFunctor(self):
        r"""getShockForceFunctor(MacPhersonStrut self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.MacPhersonStrut_getShockForceFunctor(self)

    def getLCABushingData(self):
        r"""getLCABushingData(MacPhersonStrut self) -> std::shared_ptr< ChVehicleBushingData >"""
        return _vehicle.MacPhersonStrut_getLCABushingData(self)

    def getTierodBushingData(self):
        r"""getTierodBushingData(MacPhersonStrut self) -> std::shared_ptr< ChVehicleBushingData >"""
        return _vehicle.MacPhersonStrut_getTierodBushingData(self)

# Register MacPhersonStrut in _vehicle:
_vehicle.MacPhersonStrut_swigregister(MacPhersonStrut)

class MultiLink(ChMultiLink):
    r"""Proxy of C++ chrono::vehicle::MultiLink class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MultiLink self, std::string const & filename) -> MultiLink
        __init__(MultiLink self, rapidjson::Document const & d) -> MultiLink
        """
        _vehicle.MultiLink_swiginit(self, _vehicle.new_MultiLink(*args))
    __swig_destroy__ = _vehicle.delete_MultiLink

    def UseTierodBodies(self):
        r"""UseTierodBodies(MultiLink self) -> bool"""
        return _vehicle.MultiLink_UseTierodBodies(self)

    def getCamberAngle(self):
        r"""getCamberAngle(MultiLink self) -> double"""
        return _vehicle.MultiLink_getCamberAngle(self)

    def getToeAngle(self):
        r"""getToeAngle(MultiLink self) -> double"""
        return _vehicle.MultiLink_getToeAngle(self)

    def getSpindleMass(self):
        r"""getSpindleMass(MultiLink self) -> double"""
        return _vehicle.MultiLink_getSpindleMass(self)

    def getUpperArmMass(self):
        r"""getUpperArmMass(MultiLink self) -> double"""
        return _vehicle.MultiLink_getUpperArmMass(self)

    def getLateralMass(self):
        r"""getLateralMass(MultiLink self) -> double"""
        return _vehicle.MultiLink_getLateralMass(self)

    def getTrailingLinkMass(self):
        r"""getTrailingLinkMass(MultiLink self) -> double"""
        return _vehicle.MultiLink_getTrailingLinkMass(self)

    def getUprightMass(self):
        r"""getUprightMass(MultiLink self) -> double"""
        return _vehicle.MultiLink_getUprightMass(self)

    def getTierodMass(self):
        r"""getTierodMass(MultiLink self) -> double"""
        return _vehicle.MultiLink_getTierodMass(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(MultiLink self) -> double"""
        return _vehicle.MultiLink_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(MultiLink self) -> double"""
        return _vehicle.MultiLink_getSpindleWidth(self)

    def getUpperArmRadius(self):
        r"""getUpperArmRadius(MultiLink self) -> double"""
        return _vehicle.MultiLink_getUpperArmRadius(self)

    def getLateralRadius(self):
        r"""getLateralRadius(MultiLink self) -> double"""
        return _vehicle.MultiLink_getLateralRadius(self)

    def getTrailingLinkRadius(self):
        r"""getTrailingLinkRadius(MultiLink self) -> double"""
        return _vehicle.MultiLink_getTrailingLinkRadius(self)

    def getUprightRadius(self):
        r"""getUprightRadius(MultiLink self) -> double"""
        return _vehicle.MultiLink_getUprightRadius(self)

    def getTierodRadius(self):
        r"""getTierodRadius(MultiLink self) -> double"""
        return _vehicle.MultiLink_getTierodRadius(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(MultiLink self) -> ChVectorD"""
        return _vehicle.MultiLink_getSpindleInertia(self)

    def getUpperArmInertia(self):
        r"""getUpperArmInertia(MultiLink self) -> ChVectorD"""
        return _vehicle.MultiLink_getUpperArmInertia(self)

    def getLateralInertia(self):
        r"""getLateralInertia(MultiLink self) -> ChVectorD"""
        return _vehicle.MultiLink_getLateralInertia(self)

    def getTrailingLinkInertia(self):
        r"""getTrailingLinkInertia(MultiLink self) -> ChVectorD"""
        return _vehicle.MultiLink_getTrailingLinkInertia(self)

    def getUprightInertia(self):
        r"""getUprightInertia(MultiLink self) -> ChVectorD"""
        return _vehicle.MultiLink_getUprightInertia(self)

    def getTierodInertia(self):
        r"""getTierodInertia(MultiLink self) -> ChVectorD"""
        return _vehicle.MultiLink_getTierodInertia(self)

    def getAxleInertia(self):
        r"""getAxleInertia(MultiLink self) -> double"""
        return _vehicle.MultiLink_getAxleInertia(self)

    def getSpringRestLength(self):
        r"""getSpringRestLength(MultiLink self) -> double"""
        return _vehicle.MultiLink_getSpringRestLength(self)

    def getShockRestLength(self):
        r"""getShockRestLength(MultiLink self) -> double"""
        return _vehicle.MultiLink_getShockRestLength(self)

    def getSpringForceFunctor(self):
        r"""getSpringForceFunctor(MultiLink self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.MultiLink_getSpringForceFunctor(self)

    def getShockForceFunctor(self):
        r"""getShockForceFunctor(MultiLink self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.MultiLink_getShockForceFunctor(self)

    def getTierodBushingData(self):
        r"""getTierodBushingData(MultiLink self) -> std::shared_ptr< ChVehicleBushingData >"""
        return _vehicle.MultiLink_getTierodBushingData(self)

# Register MultiLink in _vehicle:
_vehicle.MultiLink_swigregister(MultiLink)

class SemiTrailingArm(ChSemiTrailingArm):
    r"""Proxy of C++ chrono::vehicle::SemiTrailingArm class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SemiTrailingArm self, std::string const & filename) -> SemiTrailingArm
        __init__(SemiTrailingArm self, rapidjson::Document const & d) -> SemiTrailingArm
        """
        _vehicle.SemiTrailingArm_swiginit(self, _vehicle.new_SemiTrailingArm(*args))
    __swig_destroy__ = _vehicle.delete_SemiTrailingArm

    def getCamberAngle(self):
        r"""getCamberAngle(SemiTrailingArm self) -> double"""
        return _vehicle.SemiTrailingArm_getCamberAngle(self)

    def getToeAngle(self):
        r"""getToeAngle(SemiTrailingArm self) -> double"""
        return _vehicle.SemiTrailingArm_getToeAngle(self)

    def getSpindleMass(self):
        r"""getSpindleMass(SemiTrailingArm self) -> double"""
        return _vehicle.SemiTrailingArm_getSpindleMass(self)

    def getArmMass(self):
        r"""getArmMass(SemiTrailingArm self) -> double"""
        return _vehicle.SemiTrailingArm_getArmMass(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(SemiTrailingArm self) -> double"""
        return _vehicle.SemiTrailingArm_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(SemiTrailingArm self) -> double"""
        return _vehicle.SemiTrailingArm_getSpindleWidth(self)

    def getArmRadius(self):
        r"""getArmRadius(SemiTrailingArm self) -> double"""
        return _vehicle.SemiTrailingArm_getArmRadius(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(SemiTrailingArm self) -> ChVectorD"""
        return _vehicle.SemiTrailingArm_getSpindleInertia(self)

    def getArmInertia(self):
        r"""getArmInertia(SemiTrailingArm self) -> ChVectorD"""
        return _vehicle.SemiTrailingArm_getArmInertia(self)

    def getAxleInertia(self):
        r"""getAxleInertia(SemiTrailingArm self) -> double"""
        return _vehicle.SemiTrailingArm_getAxleInertia(self)

    def getSpringRestLength(self):
        r"""getSpringRestLength(SemiTrailingArm self) -> double"""
        return _vehicle.SemiTrailingArm_getSpringRestLength(self)

    def getShockRestLength(self):
        r"""getShockRestLength(SemiTrailingArm self) -> double"""
        return _vehicle.SemiTrailingArm_getShockRestLength(self)

    def getSpringForceFunctor(self):
        r"""getSpringForceFunctor(SemiTrailingArm self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.SemiTrailingArm_getSpringForceFunctor(self)

    def getShockForceFunctor(self):
        r"""getShockForceFunctor(SemiTrailingArm self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.SemiTrailingArm_getShockForceFunctor(self)

    def getCABushingData(self):
        r"""getCABushingData(SemiTrailingArm self) -> std::shared_ptr< ChVehicleBushingData >"""
        return _vehicle.SemiTrailingArm_getCABushingData(self)

# Register SemiTrailingArm in _vehicle:
_vehicle.SemiTrailingArm_swigregister(SemiTrailingArm)

class SolidAxle(ChSolidAxle):
    r"""Proxy of C++ chrono::vehicle::SolidAxle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SolidAxle self, std::string const & filename) -> SolidAxle
        __init__(SolidAxle self, rapidjson::Document const & d) -> SolidAxle
        """
        _vehicle.SolidAxle_swiginit(self, _vehicle.new_SolidAxle(*args))
    __swig_destroy__ = _vehicle.delete_SolidAxle

    def getCamberAngle(self):
        r"""getCamberAngle(SolidAxle self) -> double"""
        return _vehicle.SolidAxle_getCamberAngle(self)

    def getToeAngle(self):
        r"""getToeAngle(SolidAxle self) -> double"""
        return _vehicle.SolidAxle_getToeAngle(self)

    def getAxleTubeMass(self):
        r"""getAxleTubeMass(SolidAxle self) -> double"""
        return _vehicle.SolidAxle_getAxleTubeMass(self)

    def getSpindleMass(self):
        r"""getSpindleMass(SolidAxle self) -> double"""
        return _vehicle.SolidAxle_getSpindleMass(self)

    def getULMass(self):
        r"""getULMass(SolidAxle self) -> double"""
        return _vehicle.SolidAxle_getULMass(self)

    def getLLMass(self):
        r"""getLLMass(SolidAxle self) -> double"""
        return _vehicle.SolidAxle_getLLMass(self)

    def getKnuckleMass(self):
        r"""getKnuckleMass(SolidAxle self) -> double"""
        return _vehicle.SolidAxle_getKnuckleMass(self)

    def getTierodMass(self):
        r"""getTierodMass(SolidAxle self) -> double"""
        return _vehicle.SolidAxle_getTierodMass(self)

    def getDraglinkMass(self):
        r"""getDraglinkMass(SolidAxle self) -> double"""
        return _vehicle.SolidAxle_getDraglinkMass(self)

    def getBellCrankMass(self):
        r"""getBellCrankMass(SolidAxle self) -> double"""
        return _vehicle.SolidAxle_getBellCrankMass(self)

    def getAxleTubeRadius(self):
        r"""getAxleTubeRadius(SolidAxle self) -> double"""
        return _vehicle.SolidAxle_getAxleTubeRadius(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(SolidAxle self) -> double"""
        return _vehicle.SolidAxle_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(SolidAxle self) -> double"""
        return _vehicle.SolidAxle_getSpindleWidth(self)

    def getULRadius(self):
        r"""getULRadius(SolidAxle self) -> double"""
        return _vehicle.SolidAxle_getULRadius(self)

    def getLLRadius(self):
        r"""getLLRadius(SolidAxle self) -> double"""
        return _vehicle.SolidAxle_getLLRadius(self)

    def getKnuckleRadius(self):
        r"""getKnuckleRadius(SolidAxle self) -> double"""
        return _vehicle.SolidAxle_getKnuckleRadius(self)

    def getTierodRadius(self):
        r"""getTierodRadius(SolidAxle self) -> double"""
        return _vehicle.SolidAxle_getTierodRadius(self)

    def getDraglinkRadius(self):
        r"""getDraglinkRadius(SolidAxle self) -> double"""
        return _vehicle.SolidAxle_getDraglinkRadius(self)

    def getBellCrankRadius(self):
        r"""getBellCrankRadius(SolidAxle self) -> double"""
        return _vehicle.SolidAxle_getBellCrankRadius(self)

    def getAxleTubeInertia(self):
        r"""getAxleTubeInertia(SolidAxle self) -> ChVectorD"""
        return _vehicle.SolidAxle_getAxleTubeInertia(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(SolidAxle self) -> ChVectorD"""
        return _vehicle.SolidAxle_getSpindleInertia(self)

    def getULInertia(self):
        r"""getULInertia(SolidAxle self) -> ChVectorD"""
        return _vehicle.SolidAxle_getULInertia(self)

    def getLLInertia(self):
        r"""getLLInertia(SolidAxle self) -> ChVectorD"""
        return _vehicle.SolidAxle_getLLInertia(self)

    def getKnuckleInertia(self):
        r"""getKnuckleInertia(SolidAxle self) -> ChVectorD"""
        return _vehicle.SolidAxle_getKnuckleInertia(self)

    def getTierodInertia(self):
        r"""getTierodInertia(SolidAxle self) -> ChVectorD"""
        return _vehicle.SolidAxle_getTierodInertia(self)

    def getDraglinkInertia(self):
        r"""getDraglinkInertia(SolidAxle self) -> ChVectorD"""
        return _vehicle.SolidAxle_getDraglinkInertia(self)

    def getBellCrankInertia(self):
        r"""getBellCrankInertia(SolidAxle self) -> ChVectorD"""
        return _vehicle.SolidAxle_getBellCrankInertia(self)

    def getAxleInertia(self):
        r"""getAxleInertia(SolidAxle self) -> double"""
        return _vehicle.SolidAxle_getAxleInertia(self)

    def getSpringRestLength(self):
        r"""getSpringRestLength(SolidAxle self) -> double"""
        return _vehicle.SolidAxle_getSpringRestLength(self)

    def getShockRestLength(self):
        r"""getShockRestLength(SolidAxle self) -> double"""
        return _vehicle.SolidAxle_getShockRestLength(self)

    def getSpringForceFunctor(self):
        r"""getSpringForceFunctor(SolidAxle self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.SolidAxle_getSpringForceFunctor(self)

    def getShockForceFunctor(self):
        r"""getShockForceFunctor(SolidAxle self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.SolidAxle_getShockForceFunctor(self)

    def getAxleTubeCOM(self):
        r"""getAxleTubeCOM(SolidAxle self) -> ChVectorD"""
        return _vehicle.SolidAxle_getAxleTubeCOM(self)

# Register SolidAxle in _vehicle:
_vehicle.SolidAxle_swigregister(SolidAxle)

class ThreeLinkIRS(ChThreeLinkIRS):
    r"""Proxy of C++ chrono::vehicle::ThreeLinkIRS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ThreeLinkIRS self, std::string const & filename) -> ThreeLinkIRS
        __init__(ThreeLinkIRS self, rapidjson::Document const & d) -> ThreeLinkIRS
        """
        _vehicle.ThreeLinkIRS_swiginit(self, _vehicle.new_ThreeLinkIRS(*args))
    __swig_destroy__ = _vehicle.delete_ThreeLinkIRS

    def getCamberAngle(self):
        r"""getCamberAngle(ThreeLinkIRS self) -> double"""
        return _vehicle.ThreeLinkIRS_getCamberAngle(self)

    def getToeAngle(self):
        r"""getToeAngle(ThreeLinkIRS self) -> double"""
        return _vehicle.ThreeLinkIRS_getToeAngle(self)

    def getSpindleMass(self):
        r"""getSpindleMass(ThreeLinkIRS self) -> double"""
        return _vehicle.ThreeLinkIRS_getSpindleMass(self)

    def getArmMass(self):
        r"""getArmMass(ThreeLinkIRS self) -> double"""
        return _vehicle.ThreeLinkIRS_getArmMass(self)

    def getUpperLinkMass(self):
        r"""getUpperLinkMass(ThreeLinkIRS self) -> double"""
        return _vehicle.ThreeLinkIRS_getUpperLinkMass(self)

    def getLowerLinkMass(self):
        r"""getLowerLinkMass(ThreeLinkIRS self) -> double"""
        return _vehicle.ThreeLinkIRS_getLowerLinkMass(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(ThreeLinkIRS self) -> double"""
        return _vehicle.ThreeLinkIRS_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(ThreeLinkIRS self) -> double"""
        return _vehicle.ThreeLinkIRS_getSpindleWidth(self)

    def getArmRadius(self):
        r"""getArmRadius(ThreeLinkIRS self) -> double"""
        return _vehicle.ThreeLinkIRS_getArmRadius(self)

    def getUpperLinkRadius(self):
        r"""getUpperLinkRadius(ThreeLinkIRS self) -> double"""
        return _vehicle.ThreeLinkIRS_getUpperLinkRadius(self)

    def getLowerLinkRadius(self):
        r"""getLowerLinkRadius(ThreeLinkIRS self) -> double"""
        return _vehicle.ThreeLinkIRS_getLowerLinkRadius(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(ThreeLinkIRS self) -> ChVectorD"""
        return _vehicle.ThreeLinkIRS_getSpindleInertia(self)

    def getArmInertia(self):
        r"""getArmInertia(ThreeLinkIRS self) -> ChVectorD"""
        return _vehicle.ThreeLinkIRS_getArmInertia(self)

    def getUpperLinkInertia(self):
        r"""getUpperLinkInertia(ThreeLinkIRS self) -> ChVectorD"""
        return _vehicle.ThreeLinkIRS_getUpperLinkInertia(self)

    def getLowerLinkInertia(self):
        r"""getLowerLinkInertia(ThreeLinkIRS self) -> ChVectorD"""
        return _vehicle.ThreeLinkIRS_getLowerLinkInertia(self)

    def getAxleInertia(self):
        r"""getAxleInertia(ThreeLinkIRS self) -> double"""
        return _vehicle.ThreeLinkIRS_getAxleInertia(self)

    def getSpringRestLength(self):
        r"""getSpringRestLength(ThreeLinkIRS self) -> double"""
        return _vehicle.ThreeLinkIRS_getSpringRestLength(self)

    def getShockRestLength(self):
        r"""getShockRestLength(ThreeLinkIRS self) -> double"""
        return _vehicle.ThreeLinkIRS_getShockRestLength(self)

    def getSpringForceFunctor(self):
        r"""getSpringForceFunctor(ThreeLinkIRS self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.ThreeLinkIRS_getSpringForceFunctor(self)

    def getShockForceFunctor(self):
        r"""getShockForceFunctor(ThreeLinkIRS self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.ThreeLinkIRS_getShockForceFunctor(self)

    def getArmChassisBushingData(self):
        r"""getArmChassisBushingData(ThreeLinkIRS self) -> std::shared_ptr< ChVehicleBushingData >"""
        return _vehicle.ThreeLinkIRS_getArmChassisBushingData(self)

    def getArmUpperBushingData(self):
        r"""getArmUpperBushingData(ThreeLinkIRS self) -> std::shared_ptr< ChVehicleBushingData >"""
        return _vehicle.ThreeLinkIRS_getArmUpperBushingData(self)

    def getArmLowerBushingData(self):
        r"""getArmLowerBushingData(ThreeLinkIRS self) -> std::shared_ptr< ChVehicleBushingData >"""
        return _vehicle.ThreeLinkIRS_getArmLowerBushingData(self)

    def getChassisUpperBushingData(self):
        r"""getChassisUpperBushingData(ThreeLinkIRS self) -> std::shared_ptr< ChVehicleBushingData >"""
        return _vehicle.ThreeLinkIRS_getChassisUpperBushingData(self)

    def getChassisLowerBushingData(self):
        r"""getChassisLowerBushingData(ThreeLinkIRS self) -> std::shared_ptr< ChVehicleBushingData >"""
        return _vehicle.ThreeLinkIRS_getChassisLowerBushingData(self)

# Register ThreeLinkIRS in _vehicle:
_vehicle.ThreeLinkIRS_swigregister(ThreeLinkIRS)

class ToeBarLeafspringAxle(ChToeBarLeafspringAxle):
    r"""Proxy of C++ chrono::vehicle::ToeBarLeafspringAxle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ToeBarLeafspringAxle self, std::string const & filename) -> ToeBarLeafspringAxle
        __init__(ToeBarLeafspringAxle self, rapidjson::Document const & d) -> ToeBarLeafspringAxle
        """
        _vehicle.ToeBarLeafspringAxle_swiginit(self, _vehicle.new_ToeBarLeafspringAxle(*args))
    __swig_destroy__ = _vehicle.delete_ToeBarLeafspringAxle

# Register ToeBarLeafspringAxle in _vehicle:
_vehicle.ToeBarLeafspringAxle_swigregister(ToeBarLeafspringAxle)

class SolidBellcrankThreeLinkAxle(ChSolidBellcrankThreeLinkAxle):
    r"""Proxy of C++ chrono::vehicle::SolidBellcrankThreeLinkAxle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SolidBellcrankThreeLinkAxle self, std::string const & filename) -> SolidBellcrankThreeLinkAxle
        __init__(SolidBellcrankThreeLinkAxle self, rapidjson::Document const & d) -> SolidBellcrankThreeLinkAxle
        """
        _vehicle.SolidBellcrankThreeLinkAxle_swiginit(self, _vehicle.new_SolidBellcrankThreeLinkAxle(*args))
    __swig_destroy__ = _vehicle.delete_SolidBellcrankThreeLinkAxle

# Register SolidBellcrankThreeLinkAxle in _vehicle:
_vehicle.SolidBellcrankThreeLinkAxle_swigregister(SolidBellcrankThreeLinkAxle)

class SolidThreeLinkAxle(ChSolidThreeLinkAxle):
    r"""Proxy of C++ chrono::vehicle::SolidThreeLinkAxle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SolidThreeLinkAxle self, std::string const & filename) -> SolidThreeLinkAxle
        __init__(SolidThreeLinkAxle self, rapidjson::Document const & d) -> SolidThreeLinkAxle
        """
        _vehicle.SolidThreeLinkAxle_swiginit(self, _vehicle.new_SolidThreeLinkAxle(*args))
    __swig_destroy__ = _vehicle.delete_SolidThreeLinkAxle

# Register SolidThreeLinkAxle in _vehicle:
_vehicle.SolidThreeLinkAxle_swigregister(SolidThreeLinkAxle)

class SingleWishbone(ChSingleWishbone):
    r"""Proxy of C++ chrono::vehicle::SingleWishbone class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SingleWishbone self, std::string const & filename) -> SingleWishbone
        __init__(SingleWishbone self, rapidjson::Document const & d) -> SingleWishbone
        """
        _vehicle.SingleWishbone_swiginit(self, _vehicle.new_SingleWishbone(*args))
    __swig_destroy__ = _vehicle.delete_SingleWishbone

    def UseTierodBodies(self):
        r"""UseTierodBodies(SingleWishbone self) -> bool"""
        return _vehicle.SingleWishbone_UseTierodBodies(self)

    def getCamberAngle(self):
        r"""getCamberAngle(SingleWishbone self) -> double"""
        return _vehicle.SingleWishbone_getCamberAngle(self)

    def getToeAngle(self):
        r"""getToeAngle(SingleWishbone self) -> double"""
        return _vehicle.SingleWishbone_getToeAngle(self)

    def getSpindleMass(self):
        r"""getSpindleMass(SingleWishbone self) -> double"""
        return _vehicle.SingleWishbone_getSpindleMass(self)

    def getCAMass(self):
        r"""getCAMass(SingleWishbone self) -> double"""
        return _vehicle.SingleWishbone_getCAMass(self)

    def getUprightMass(self):
        r"""getUprightMass(SingleWishbone self) -> double"""
        return _vehicle.SingleWishbone_getUprightMass(self)

    def getTierodMass(self):
        r"""getTierodMass(SingleWishbone self) -> double"""
        return _vehicle.SingleWishbone_getTierodMass(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(SingleWishbone self) -> double"""
        return _vehicle.SingleWishbone_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(SingleWishbone self) -> double"""
        return _vehicle.SingleWishbone_getSpindleWidth(self)

    def getCARadius(self):
        r"""getCARadius(SingleWishbone self) -> double"""
        return _vehicle.SingleWishbone_getCARadius(self)

    def getUprightRadius(self):
        r"""getUprightRadius(SingleWishbone self) -> double"""
        return _vehicle.SingleWishbone_getUprightRadius(self)

    def getTierodRadius(self):
        r"""getTierodRadius(SingleWishbone self) -> double"""
        return _vehicle.SingleWishbone_getTierodRadius(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(SingleWishbone self) -> ChVectorD"""
        return _vehicle.SingleWishbone_getSpindleInertia(self)

    def getCAInertiaMoments(self):
        r"""getCAInertiaMoments(SingleWishbone self) -> ChVectorD"""
        return _vehicle.SingleWishbone_getCAInertiaMoments(self)

    def getCAInertiaProducts(self):
        r"""getCAInertiaProducts(SingleWishbone self) -> ChVectorD"""
        return _vehicle.SingleWishbone_getCAInertiaProducts(self)

    def getUprightInertiaMoments(self):
        r"""getUprightInertiaMoments(SingleWishbone self) -> ChVectorD"""
        return _vehicle.SingleWishbone_getUprightInertiaMoments(self)

    def getUprightInertiaProducts(self):
        r"""getUprightInertiaProducts(SingleWishbone self) -> ChVectorD"""
        return _vehicle.SingleWishbone_getUprightInertiaProducts(self)

    def getTierodInertia(self):
        r"""getTierodInertia(SingleWishbone self) -> ChVectorD"""
        return _vehicle.SingleWishbone_getTierodInertia(self)

    def getAxleInertia(self):
        r"""getAxleInertia(SingleWishbone self) -> double"""
        return _vehicle.SingleWishbone_getAxleInertia(self)

    def getShockRestLength(self):
        r"""getShockRestLength(SingleWishbone self) -> double"""
        return _vehicle.SingleWishbone_getShockRestLength(self)

    def getShockForceFunctor(self):
        r"""getShockForceFunctor(SingleWishbone self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.SingleWishbone_getShockForceFunctor(self)

    def getCABushingData(self):
        r"""getCABushingData(SingleWishbone self) -> std::shared_ptr< ChVehicleBushingData >"""
        return _vehicle.SingleWishbone_getCABushingData(self)

    def getTierodBushingData(self):
        r"""getTierodBushingData(SingleWishbone self) -> std::shared_ptr< ChVehicleBushingData >"""
        return _vehicle.SingleWishbone_getTierodBushingData(self)

# Register SingleWishbone in _vehicle:
_vehicle.SingleWishbone_swigregister(SingleWishbone)

class Generic_RigidSuspension(ChRigidSuspension):
    r"""Proxy of C++ chrono::vehicle::generic::Generic_RigidSuspension class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Generic_RigidSuspension self, std::string const & name) -> Generic_RigidSuspension"""
        _vehicle.Generic_RigidSuspension_swiginit(self, _vehicle.new_Generic_RigidSuspension(name))
    __swig_destroy__ = _vehicle.delete_Generic_RigidSuspension

    def getSpindleMass(self):
        r"""getSpindleMass(Generic_RigidSuspension self) -> double"""
        return _vehicle.Generic_RigidSuspension_getSpindleMass(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(Generic_RigidSuspension self) -> double"""
        return _vehicle.Generic_RigidSuspension_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(Generic_RigidSuspension self) -> double"""
        return _vehicle.Generic_RigidSuspension_getSpindleWidth(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(Generic_RigidSuspension self) -> ChVectorD"""
        return _vehicle.Generic_RigidSuspension_getSpindleInertia(self)

    def getAxleInertia(self):
        r"""getAxleInertia(Generic_RigidSuspension self) -> double"""
        return _vehicle.Generic_RigidSuspension_getAxleInertia(self)

# Register Generic_RigidSuspension in _vehicle:
_vehicle.Generic_RigidSuspension_swigregister(Generic_RigidSuspension)

class Generic_RigidPinnedAxle(ChRigidPinnedAxle):
    r"""Proxy of C++ chrono::vehicle::generic::Generic_RigidPinnedAxle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Generic_RigidPinnedAxle self, std::string const & name) -> Generic_RigidPinnedAxle"""
        _vehicle.Generic_RigidPinnedAxle_swiginit(self, _vehicle.new_Generic_RigidPinnedAxle(name))
    __swig_destroy__ = _vehicle.delete_Generic_RigidPinnedAxle

    def getAxleTubeCOM(self):
        r"""getAxleTubeCOM(Generic_RigidPinnedAxle self) -> ChVectorD"""
        return _vehicle.Generic_RigidPinnedAxle_getAxleTubeCOM(self)

    def getAxlePinLocation(self):
        r"""getAxlePinLocation(Generic_RigidPinnedAxle self) -> ChVectorD"""
        return _vehicle.Generic_RigidPinnedAxle_getAxlePinLocation(self)

    def getSpindleMass(self):
        r"""getSpindleMass(Generic_RigidPinnedAxle self) -> double"""
        return _vehicle.Generic_RigidPinnedAxle_getSpindleMass(self)

    def getAxleTubeMass(self):
        r"""getAxleTubeMass(Generic_RigidPinnedAxle self) -> double"""
        return _vehicle.Generic_RigidPinnedAxle_getAxleTubeMass(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(Generic_RigidPinnedAxle self) -> double"""
        return _vehicle.Generic_RigidPinnedAxle_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(Generic_RigidPinnedAxle self) -> double"""
        return _vehicle.Generic_RigidPinnedAxle_getSpindleWidth(self)

    def getAxleTubeRadius(self):
        r"""getAxleTubeRadius(Generic_RigidPinnedAxle self) -> double"""
        return _vehicle.Generic_RigidPinnedAxle_getAxleTubeRadius(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(Generic_RigidPinnedAxle self) -> ChVectorD"""
        return _vehicle.Generic_RigidPinnedAxle_getSpindleInertia(self)

    def getAxleTubeInertia(self):
        r"""getAxleTubeInertia(Generic_RigidPinnedAxle self) -> ChVectorD"""
        return _vehicle.Generic_RigidPinnedAxle_getAxleTubeInertia(self)

    def getAxleInertia(self):
        r"""getAxleInertia(Generic_RigidPinnedAxle self) -> double"""
        return _vehicle.Generic_RigidPinnedAxle_getAxleInertia(self)

# Register Generic_RigidPinnedAxle in _vehicle:
_vehicle.Generic_RigidPinnedAxle_swigregister(Generic_RigidPinnedAxle)

class Generic_MultiLink(ChMultiLink):
    r"""Proxy of C++ chrono::vehicle::generic::Generic_MultiLink class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Generic_MultiLink self, std::string const & name) -> Generic_MultiLink"""
        _vehicle.Generic_MultiLink_swiginit(self, _vehicle.new_Generic_MultiLink(name))
    __swig_destroy__ = _vehicle.delete_Generic_MultiLink

    def getCamberAngle(self):
        r"""getCamberAngle(Generic_MultiLink self) -> double"""
        return _vehicle.Generic_MultiLink_getCamberAngle(self)

    def getToeAngle(self):
        r"""getToeAngle(Generic_MultiLink self) -> double"""
        return _vehicle.Generic_MultiLink_getToeAngle(self)

    def getSpindleMass(self):
        r"""getSpindleMass(Generic_MultiLink self) -> double"""
        return _vehicle.Generic_MultiLink_getSpindleMass(self)

    def getUpperArmMass(self):
        r"""getUpperArmMass(Generic_MultiLink self) -> double"""
        return _vehicle.Generic_MultiLink_getUpperArmMass(self)

    def getLateralMass(self):
        r"""getLateralMass(Generic_MultiLink self) -> double"""
        return _vehicle.Generic_MultiLink_getLateralMass(self)

    def getTrailingLinkMass(self):
        r"""getTrailingLinkMass(Generic_MultiLink self) -> double"""
        return _vehicle.Generic_MultiLink_getTrailingLinkMass(self)

    def getUprightMass(self):
        r"""getUprightMass(Generic_MultiLink self) -> double"""
        return _vehicle.Generic_MultiLink_getUprightMass(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(Generic_MultiLink self) -> double"""
        return _vehicle.Generic_MultiLink_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(Generic_MultiLink self) -> double"""
        return _vehicle.Generic_MultiLink_getSpindleWidth(self)

    def getUpperArmRadius(self):
        r"""getUpperArmRadius(Generic_MultiLink self) -> double"""
        return _vehicle.Generic_MultiLink_getUpperArmRadius(self)

    def getLateralRadius(self):
        r"""getLateralRadius(Generic_MultiLink self) -> double"""
        return _vehicle.Generic_MultiLink_getLateralRadius(self)

    def getTrailingLinkRadius(self):
        r"""getTrailingLinkRadius(Generic_MultiLink self) -> double"""
        return _vehicle.Generic_MultiLink_getTrailingLinkRadius(self)

    def getUprightRadius(self):
        r"""getUprightRadius(Generic_MultiLink self) -> double"""
        return _vehicle.Generic_MultiLink_getUprightRadius(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(Generic_MultiLink self) -> ChVectorD"""
        return _vehicle.Generic_MultiLink_getSpindleInertia(self)

    def getUpperArmInertia(self):
        r"""getUpperArmInertia(Generic_MultiLink self) -> ChVectorD"""
        return _vehicle.Generic_MultiLink_getUpperArmInertia(self)

    def getLateralInertia(self):
        r"""getLateralInertia(Generic_MultiLink self) -> ChVectorD"""
        return _vehicle.Generic_MultiLink_getLateralInertia(self)

    def getTrailingLinkInertia(self):
        r"""getTrailingLinkInertia(Generic_MultiLink self) -> ChVectorD"""
        return _vehicle.Generic_MultiLink_getTrailingLinkInertia(self)

    def getUprightInertia(self):
        r"""getUprightInertia(Generic_MultiLink self) -> ChVectorD"""
        return _vehicle.Generic_MultiLink_getUprightInertia(self)

    def getAxleInertia(self):
        r"""getAxleInertia(Generic_MultiLink self) -> double"""
        return _vehicle.Generic_MultiLink_getAxleInertia(self)

    def getSpringRestLength(self):
        r"""getSpringRestLength(Generic_MultiLink self) -> double"""
        return _vehicle.Generic_MultiLink_getSpringRestLength(self)

    def getSpringForceFunctor(self):
        r"""getSpringForceFunctor(Generic_MultiLink self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.Generic_MultiLink_getSpringForceFunctor(self)

    def getShockForceFunctor(self):
        r"""getShockForceFunctor(Generic_MultiLink self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.Generic_MultiLink_getShockForceFunctor(self)

# Register Generic_MultiLink in _vehicle:
_vehicle.Generic_MultiLink_swigregister(Generic_MultiLink)

class Generic_DoubleWishbone(ChDoubleWishbone):
    r"""Proxy of C++ chrono::vehicle::generic::Generic_DoubleWishbone class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Generic_DoubleWishbone self, std::string const & name) -> Generic_DoubleWishbone"""
        _vehicle.Generic_DoubleWishbone_swiginit(self, _vehicle.new_Generic_DoubleWishbone(name))
    __swig_destroy__ = _vehicle.delete_Generic_DoubleWishbone

    def getCamberAngle(self):
        r"""getCamberAngle(Generic_DoubleWishbone self) -> double"""
        return _vehicle.Generic_DoubleWishbone_getCamberAngle(self)

    def getToeAngle(self):
        r"""getToeAngle(Generic_DoubleWishbone self) -> double"""
        return _vehicle.Generic_DoubleWishbone_getToeAngle(self)

    def getSpindleMass(self):
        r"""getSpindleMass(Generic_DoubleWishbone self) -> double"""
        return _vehicle.Generic_DoubleWishbone_getSpindleMass(self)

    def getUCAMass(self):
        r"""getUCAMass(Generic_DoubleWishbone self) -> double"""
        return _vehicle.Generic_DoubleWishbone_getUCAMass(self)

    def getLCAMass(self):
        r"""getLCAMass(Generic_DoubleWishbone self) -> double"""
        return _vehicle.Generic_DoubleWishbone_getLCAMass(self)

    def getUprightMass(self):
        r"""getUprightMass(Generic_DoubleWishbone self) -> double"""
        return _vehicle.Generic_DoubleWishbone_getUprightMass(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(Generic_DoubleWishbone self) -> double"""
        return _vehicle.Generic_DoubleWishbone_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(Generic_DoubleWishbone self) -> double"""
        return _vehicle.Generic_DoubleWishbone_getSpindleWidth(self)

    def getUCARadius(self):
        r"""getUCARadius(Generic_DoubleWishbone self) -> double"""
        return _vehicle.Generic_DoubleWishbone_getUCARadius(self)

    def getLCARadius(self):
        r"""getLCARadius(Generic_DoubleWishbone self) -> double"""
        return _vehicle.Generic_DoubleWishbone_getLCARadius(self)

    def getUprightRadius(self):
        r"""getUprightRadius(Generic_DoubleWishbone self) -> double"""
        return _vehicle.Generic_DoubleWishbone_getUprightRadius(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(Generic_DoubleWishbone self) -> ChVectorD"""
        return _vehicle.Generic_DoubleWishbone_getSpindleInertia(self)

    def getUCAInertiaMoments(self):
        r"""getUCAInertiaMoments(Generic_DoubleWishbone self) -> ChVectorD"""
        return _vehicle.Generic_DoubleWishbone_getUCAInertiaMoments(self)

    def getUCAInertiaProducts(self):
        r"""getUCAInertiaProducts(Generic_DoubleWishbone self) -> ChVectorD"""
        return _vehicle.Generic_DoubleWishbone_getUCAInertiaProducts(self)

    def getLCAInertiaMoments(self):
        r"""getLCAInertiaMoments(Generic_DoubleWishbone self) -> ChVectorD"""
        return _vehicle.Generic_DoubleWishbone_getLCAInertiaMoments(self)

    def getLCAInertiaProducts(self):
        r"""getLCAInertiaProducts(Generic_DoubleWishbone self) -> ChVectorD"""
        return _vehicle.Generic_DoubleWishbone_getLCAInertiaProducts(self)

    def getUprightInertiaMoments(self):
        r"""getUprightInertiaMoments(Generic_DoubleWishbone self) -> ChVectorD"""
        return _vehicle.Generic_DoubleWishbone_getUprightInertiaMoments(self)

    def getUprightInertiaProducts(self):
        r"""getUprightInertiaProducts(Generic_DoubleWishbone self) -> ChVectorD"""
        return _vehicle.Generic_DoubleWishbone_getUprightInertiaProducts(self)

    def getAxleInertia(self):
        r"""getAxleInertia(Generic_DoubleWishbone self) -> double"""
        return _vehicle.Generic_DoubleWishbone_getAxleInertia(self)

    def getSpringRestLength(self):
        r"""getSpringRestLength(Generic_DoubleWishbone self) -> double"""
        return _vehicle.Generic_DoubleWishbone_getSpringRestLength(self)

    def getSpringForceFunctor(self):
        r"""getSpringForceFunctor(Generic_DoubleWishbone self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.Generic_DoubleWishbone_getSpringForceFunctor(self)

    def getShockForceFunctor(self):
        r"""getShockForceFunctor(Generic_DoubleWishbone self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.Generic_DoubleWishbone_getShockForceFunctor(self)

# Register Generic_DoubleWishbone in _vehicle:
_vehicle.Generic_DoubleWishbone_swigregister(Generic_DoubleWishbone)

class Generic_DoubleWishboneFront(ChDoubleWishbone):
    r"""Proxy of C++ chrono::vehicle::generic::Generic_DoubleWishboneFront class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Generic_DoubleWishboneFront self, std::string const & name) -> Generic_DoubleWishboneFront"""
        _vehicle.Generic_DoubleWishboneFront_swiginit(self, _vehicle.new_Generic_DoubleWishboneFront(name))
    __swig_destroy__ = _vehicle.delete_Generic_DoubleWishboneFront

    def getCamberAngle(self):
        r"""getCamberAngle(Generic_DoubleWishboneFront self) -> double"""
        return _vehicle.Generic_DoubleWishboneFront_getCamberAngle(self)

    def getToeAngle(self):
        r"""getToeAngle(Generic_DoubleWishboneFront self) -> double"""
        return _vehicle.Generic_DoubleWishboneFront_getToeAngle(self)

    def getSpindleMass(self):
        r"""getSpindleMass(Generic_DoubleWishboneFront self) -> double"""
        return _vehicle.Generic_DoubleWishboneFront_getSpindleMass(self)

    def getUCAMass(self):
        r"""getUCAMass(Generic_DoubleWishboneFront self) -> double"""
        return _vehicle.Generic_DoubleWishboneFront_getUCAMass(self)

    def getLCAMass(self):
        r"""getLCAMass(Generic_DoubleWishboneFront self) -> double"""
        return _vehicle.Generic_DoubleWishboneFront_getLCAMass(self)

    def getUprightMass(self):
        r"""getUprightMass(Generic_DoubleWishboneFront self) -> double"""
        return _vehicle.Generic_DoubleWishboneFront_getUprightMass(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(Generic_DoubleWishboneFront self) -> double"""
        return _vehicle.Generic_DoubleWishboneFront_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(Generic_DoubleWishboneFront self) -> double"""
        return _vehicle.Generic_DoubleWishboneFront_getSpindleWidth(self)

    def getUCARadius(self):
        r"""getUCARadius(Generic_DoubleWishboneFront self) -> double"""
        return _vehicle.Generic_DoubleWishboneFront_getUCARadius(self)

    def getLCARadius(self):
        r"""getLCARadius(Generic_DoubleWishboneFront self) -> double"""
        return _vehicle.Generic_DoubleWishboneFront_getLCARadius(self)

    def getUprightRadius(self):
        r"""getUprightRadius(Generic_DoubleWishboneFront self) -> double"""
        return _vehicle.Generic_DoubleWishboneFront_getUprightRadius(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(Generic_DoubleWishboneFront self) -> ChVectorD"""
        return _vehicle.Generic_DoubleWishboneFront_getSpindleInertia(self)

    def getUCAInertiaMoments(self):
        r"""getUCAInertiaMoments(Generic_DoubleWishboneFront self) -> ChVectorD"""
        return _vehicle.Generic_DoubleWishboneFront_getUCAInertiaMoments(self)

    def getUCAInertiaProducts(self):
        r"""getUCAInertiaProducts(Generic_DoubleWishboneFront self) -> ChVectorD"""
        return _vehicle.Generic_DoubleWishboneFront_getUCAInertiaProducts(self)

    def getLCAInertiaMoments(self):
        r"""getLCAInertiaMoments(Generic_DoubleWishboneFront self) -> ChVectorD"""
        return _vehicle.Generic_DoubleWishboneFront_getLCAInertiaMoments(self)

    def getLCAInertiaProducts(self):
        r"""getLCAInertiaProducts(Generic_DoubleWishboneFront self) -> ChVectorD"""
        return _vehicle.Generic_DoubleWishboneFront_getLCAInertiaProducts(self)

    def getUprightInertiaMoments(self):
        r"""getUprightInertiaMoments(Generic_DoubleWishboneFront self) -> ChVectorD"""
        return _vehicle.Generic_DoubleWishboneFront_getUprightInertiaMoments(self)

    def getUprightInertiaProducts(self):
        r"""getUprightInertiaProducts(Generic_DoubleWishboneFront self) -> ChVectorD"""
        return _vehicle.Generic_DoubleWishboneFront_getUprightInertiaProducts(self)

    def getAxleInertia(self):
        r"""getAxleInertia(Generic_DoubleWishboneFront self) -> double"""
        return _vehicle.Generic_DoubleWishboneFront_getAxleInertia(self)

    def getSpringRestLength(self):
        r"""getSpringRestLength(Generic_DoubleWishboneFront self) -> double"""
        return _vehicle.Generic_DoubleWishboneFront_getSpringRestLength(self)

    def getSpringForceFunctor(self):
        r"""getSpringForceFunctor(Generic_DoubleWishboneFront self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.Generic_DoubleWishboneFront_getSpringForceFunctor(self)

    def getShockForceFunctor(self):
        r"""getShockForceFunctor(Generic_DoubleWishboneFront self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.Generic_DoubleWishboneFront_getShockForceFunctor(self)

# Register Generic_DoubleWishboneFront in _vehicle:
_vehicle.Generic_DoubleWishboneFront_swigregister(Generic_DoubleWishboneFront)

class Generic_DoubleWishboneRear(ChDoubleWishbone):
    r"""Proxy of C++ chrono::vehicle::generic::Generic_DoubleWishboneRear class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Generic_DoubleWishboneRear self, std::string const & name) -> Generic_DoubleWishboneRear"""
        _vehicle.Generic_DoubleWishboneRear_swiginit(self, _vehicle.new_Generic_DoubleWishboneRear(name))
    __swig_destroy__ = _vehicle.delete_Generic_DoubleWishboneRear

    def getCamberAngle(self):
        r"""getCamberAngle(Generic_DoubleWishboneRear self) -> double"""
        return _vehicle.Generic_DoubleWishboneRear_getCamberAngle(self)

    def getToeAngle(self):
        r"""getToeAngle(Generic_DoubleWishboneRear self) -> double"""
        return _vehicle.Generic_DoubleWishboneRear_getToeAngle(self)

    def getSpindleMass(self):
        r"""getSpindleMass(Generic_DoubleWishboneRear self) -> double"""
        return _vehicle.Generic_DoubleWishboneRear_getSpindleMass(self)

    def getUCAMass(self):
        r"""getUCAMass(Generic_DoubleWishboneRear self) -> double"""
        return _vehicle.Generic_DoubleWishboneRear_getUCAMass(self)

    def getLCAMass(self):
        r"""getLCAMass(Generic_DoubleWishboneRear self) -> double"""
        return _vehicle.Generic_DoubleWishboneRear_getLCAMass(self)

    def getUprightMass(self):
        r"""getUprightMass(Generic_DoubleWishboneRear self) -> double"""
        return _vehicle.Generic_DoubleWishboneRear_getUprightMass(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(Generic_DoubleWishboneRear self) -> double"""
        return _vehicle.Generic_DoubleWishboneRear_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(Generic_DoubleWishboneRear self) -> double"""
        return _vehicle.Generic_DoubleWishboneRear_getSpindleWidth(self)

    def getUCARadius(self):
        r"""getUCARadius(Generic_DoubleWishboneRear self) -> double"""
        return _vehicle.Generic_DoubleWishboneRear_getUCARadius(self)

    def getLCARadius(self):
        r"""getLCARadius(Generic_DoubleWishboneRear self) -> double"""
        return _vehicle.Generic_DoubleWishboneRear_getLCARadius(self)

    def getUprightRadius(self):
        r"""getUprightRadius(Generic_DoubleWishboneRear self) -> double"""
        return _vehicle.Generic_DoubleWishboneRear_getUprightRadius(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(Generic_DoubleWishboneRear self) -> ChVectorD"""
        return _vehicle.Generic_DoubleWishboneRear_getSpindleInertia(self)

    def getUCAInertiaMoments(self):
        r"""getUCAInertiaMoments(Generic_DoubleWishboneRear self) -> ChVectorD"""
        return _vehicle.Generic_DoubleWishboneRear_getUCAInertiaMoments(self)

    def getUCAInertiaProducts(self):
        r"""getUCAInertiaProducts(Generic_DoubleWishboneRear self) -> ChVectorD"""
        return _vehicle.Generic_DoubleWishboneRear_getUCAInertiaProducts(self)

    def getLCAInertiaMoments(self):
        r"""getLCAInertiaMoments(Generic_DoubleWishboneRear self) -> ChVectorD"""
        return _vehicle.Generic_DoubleWishboneRear_getLCAInertiaMoments(self)

    def getLCAInertiaProducts(self):
        r"""getLCAInertiaProducts(Generic_DoubleWishboneRear self) -> ChVectorD"""
        return _vehicle.Generic_DoubleWishboneRear_getLCAInertiaProducts(self)

    def getUprightInertiaMoments(self):
        r"""getUprightInertiaMoments(Generic_DoubleWishboneRear self) -> ChVectorD"""
        return _vehicle.Generic_DoubleWishboneRear_getUprightInertiaMoments(self)

    def getUprightInertiaProducts(self):
        r"""getUprightInertiaProducts(Generic_DoubleWishboneRear self) -> ChVectorD"""
        return _vehicle.Generic_DoubleWishboneRear_getUprightInertiaProducts(self)

    def getAxleInertia(self):
        r"""getAxleInertia(Generic_DoubleWishboneRear self) -> double"""
        return _vehicle.Generic_DoubleWishboneRear_getAxleInertia(self)

    def getSpringRestLength(self):
        r"""getSpringRestLength(Generic_DoubleWishboneRear self) -> double"""
        return _vehicle.Generic_DoubleWishboneRear_getSpringRestLength(self)

    def getSpringForceFunctor(self):
        r"""getSpringForceFunctor(Generic_DoubleWishboneRear self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.Generic_DoubleWishboneRear_getSpringForceFunctor(self)

    def getShockForceFunctor(self):
        r"""getShockForceFunctor(Generic_DoubleWishboneRear self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.Generic_DoubleWishboneRear_getShockForceFunctor(self)

# Register Generic_DoubleWishboneRear in _vehicle:
_vehicle.Generic_DoubleWishboneRear_swigregister(Generic_DoubleWishboneRear)

class HMMWV_DoubleWishboneFront(ChDoubleWishbone):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, use_tierod_bodies):
        r"""__init__(HMMWV_DoubleWishboneFront self, std::string const & name, bool use_tierod_bodies) -> HMMWV_DoubleWishboneFront"""
        _vehicle.HMMWV_DoubleWishboneFront_swiginit(self, _vehicle.new_HMMWV_DoubleWishboneFront(name, use_tierod_bodies))
    __swig_destroy__ = _vehicle.delete_HMMWV_DoubleWishboneFront

    def UseTierodBodies(self):
        r"""UseTierodBodies(HMMWV_DoubleWishboneFront self) -> bool"""
        return _vehicle.HMMWV_DoubleWishboneFront_UseTierodBodies(self)

    def getCamberAngle(self):
        r"""getCamberAngle(HMMWV_DoubleWishboneFront self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneFront_getCamberAngle(self)

    def getToeAngle(self):
        r"""getToeAngle(HMMWV_DoubleWishboneFront self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneFront_getToeAngle(self)

    def getSpindleMass(self):
        r"""getSpindleMass(HMMWV_DoubleWishboneFront self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneFront_getSpindleMass(self)

    def getUCAMass(self):
        r"""getUCAMass(HMMWV_DoubleWishboneFront self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneFront_getUCAMass(self)

    def getLCAMass(self):
        r"""getLCAMass(HMMWV_DoubleWishboneFront self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneFront_getLCAMass(self)

    def getUprightMass(self):
        r"""getUprightMass(HMMWV_DoubleWishboneFront self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneFront_getUprightMass(self)

    def getTierodMass(self):
        r"""getTierodMass(HMMWV_DoubleWishboneFront self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneFront_getTierodMass(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(HMMWV_DoubleWishboneFront self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneFront_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(HMMWV_DoubleWishboneFront self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneFront_getSpindleWidth(self)

    def getUCARadius(self):
        r"""getUCARadius(HMMWV_DoubleWishboneFront self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneFront_getUCARadius(self)

    def getLCARadius(self):
        r"""getLCARadius(HMMWV_DoubleWishboneFront self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneFront_getLCARadius(self)

    def getUprightRadius(self):
        r"""getUprightRadius(HMMWV_DoubleWishboneFront self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneFront_getUprightRadius(self)

    def getTierodRadius(self):
        r"""getTierodRadius(HMMWV_DoubleWishboneFront self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneFront_getTierodRadius(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(HMMWV_DoubleWishboneFront self) -> ChVectorD"""
        return _vehicle.HMMWV_DoubleWishboneFront_getSpindleInertia(self)

    def getUCAInertiaMoments(self):
        r"""getUCAInertiaMoments(HMMWV_DoubleWishboneFront self) -> ChVectorD"""
        return _vehicle.HMMWV_DoubleWishboneFront_getUCAInertiaMoments(self)

    def getUCAInertiaProducts(self):
        r"""getUCAInertiaProducts(HMMWV_DoubleWishboneFront self) -> ChVectorD"""
        return _vehicle.HMMWV_DoubleWishboneFront_getUCAInertiaProducts(self)

    def getLCAInertiaMoments(self):
        r"""getLCAInertiaMoments(HMMWV_DoubleWishboneFront self) -> ChVectorD"""
        return _vehicle.HMMWV_DoubleWishboneFront_getLCAInertiaMoments(self)

    def getLCAInertiaProducts(self):
        r"""getLCAInertiaProducts(HMMWV_DoubleWishboneFront self) -> ChVectorD"""
        return _vehicle.HMMWV_DoubleWishboneFront_getLCAInertiaProducts(self)

    def getUprightInertiaMoments(self):
        r"""getUprightInertiaMoments(HMMWV_DoubleWishboneFront self) -> ChVectorD"""
        return _vehicle.HMMWV_DoubleWishboneFront_getUprightInertiaMoments(self)

    def getUprightInertiaProducts(self):
        r"""getUprightInertiaProducts(HMMWV_DoubleWishboneFront self) -> ChVectorD"""
        return _vehicle.HMMWV_DoubleWishboneFront_getUprightInertiaProducts(self)

    def getTierodInertia(self):
        r"""getTierodInertia(HMMWV_DoubleWishboneFront self) -> ChVectorD"""
        return _vehicle.HMMWV_DoubleWishboneFront_getTierodInertia(self)

    def getAxleInertia(self):
        r"""getAxleInertia(HMMWV_DoubleWishboneFront self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneFront_getAxleInertia(self)

    def getSpringRestLength(self):
        r"""getSpringRestLength(HMMWV_DoubleWishboneFront self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneFront_getSpringRestLength(self)

    def getSpringForceFunctor(self):
        r"""getSpringForceFunctor(HMMWV_DoubleWishboneFront self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.HMMWV_DoubleWishboneFront_getSpringForceFunctor(self)

    def getShockForceFunctor(self):
        r"""getShockForceFunctor(HMMWV_DoubleWishboneFront self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.HMMWV_DoubleWishboneFront_getShockForceFunctor(self)

# Register HMMWV_DoubleWishboneFront in _vehicle:
_vehicle.HMMWV_DoubleWishboneFront_swigregister(HMMWV_DoubleWishboneFront)

class HMMWV_DoubleWishboneRear(ChDoubleWishbone):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, use_tierod_bodies):
        r"""__init__(HMMWV_DoubleWishboneRear self, std::string const & name, bool use_tierod_bodies) -> HMMWV_DoubleWishboneRear"""
        _vehicle.HMMWV_DoubleWishboneRear_swiginit(self, _vehicle.new_HMMWV_DoubleWishboneRear(name, use_tierod_bodies))
    __swig_destroy__ = _vehicle.delete_HMMWV_DoubleWishboneRear

    def UseTierodBodies(self):
        r"""UseTierodBodies(HMMWV_DoubleWishboneRear self) -> bool"""
        return _vehicle.HMMWV_DoubleWishboneRear_UseTierodBodies(self)

    def getCamberAngle(self):
        r"""getCamberAngle(HMMWV_DoubleWishboneRear self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneRear_getCamberAngle(self)

    def getToeAngle(self):
        r"""getToeAngle(HMMWV_DoubleWishboneRear self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneRear_getToeAngle(self)

    def getSpindleMass(self):
        r"""getSpindleMass(HMMWV_DoubleWishboneRear self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneRear_getSpindleMass(self)

    def getUCAMass(self):
        r"""getUCAMass(HMMWV_DoubleWishboneRear self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneRear_getUCAMass(self)

    def getLCAMass(self):
        r"""getLCAMass(HMMWV_DoubleWishboneRear self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneRear_getLCAMass(self)

    def getUprightMass(self):
        r"""getUprightMass(HMMWV_DoubleWishboneRear self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneRear_getUprightMass(self)

    def getTierodMass(self):
        r"""getTierodMass(HMMWV_DoubleWishboneRear self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneRear_getTierodMass(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(HMMWV_DoubleWishboneRear self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneRear_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(HMMWV_DoubleWishboneRear self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneRear_getSpindleWidth(self)

    def getUCARadius(self):
        r"""getUCARadius(HMMWV_DoubleWishboneRear self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneRear_getUCARadius(self)

    def getLCARadius(self):
        r"""getLCARadius(HMMWV_DoubleWishboneRear self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneRear_getLCARadius(self)

    def getUprightRadius(self):
        r"""getUprightRadius(HMMWV_DoubleWishboneRear self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneRear_getUprightRadius(self)

    def getTierodRadius(self):
        r"""getTierodRadius(HMMWV_DoubleWishboneRear self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneRear_getTierodRadius(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(HMMWV_DoubleWishboneRear self) -> ChVectorD"""
        return _vehicle.HMMWV_DoubleWishboneRear_getSpindleInertia(self)

    def getUCAInertiaMoments(self):
        r"""getUCAInertiaMoments(HMMWV_DoubleWishboneRear self) -> ChVectorD"""
        return _vehicle.HMMWV_DoubleWishboneRear_getUCAInertiaMoments(self)

    def getUCAInertiaProducts(self):
        r"""getUCAInertiaProducts(HMMWV_DoubleWishboneRear self) -> ChVectorD"""
        return _vehicle.HMMWV_DoubleWishboneRear_getUCAInertiaProducts(self)

    def getLCAInertiaMoments(self):
        r"""getLCAInertiaMoments(HMMWV_DoubleWishboneRear self) -> ChVectorD"""
        return _vehicle.HMMWV_DoubleWishboneRear_getLCAInertiaMoments(self)

    def getLCAInertiaProducts(self):
        r"""getLCAInertiaProducts(HMMWV_DoubleWishboneRear self) -> ChVectorD"""
        return _vehicle.HMMWV_DoubleWishboneRear_getLCAInertiaProducts(self)

    def getUprightInertiaMoments(self):
        r"""getUprightInertiaMoments(HMMWV_DoubleWishboneRear self) -> ChVectorD"""
        return _vehicle.HMMWV_DoubleWishboneRear_getUprightInertiaMoments(self)

    def getUprightInertiaProducts(self):
        r"""getUprightInertiaProducts(HMMWV_DoubleWishboneRear self) -> ChVectorD"""
        return _vehicle.HMMWV_DoubleWishboneRear_getUprightInertiaProducts(self)

    def getTierodInertia(self):
        r"""getTierodInertia(HMMWV_DoubleWishboneRear self) -> ChVectorD"""
        return _vehicle.HMMWV_DoubleWishboneRear_getTierodInertia(self)

    def getAxleInertia(self):
        r"""getAxleInertia(HMMWV_DoubleWishboneRear self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneRear_getAxleInertia(self)

    def getSpringRestLength(self):
        r"""getSpringRestLength(HMMWV_DoubleWishboneRear self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneRear_getSpringRestLength(self)

    def getSpringForceFunctor(self):
        r"""getSpringForceFunctor(HMMWV_DoubleWishboneRear self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.HMMWV_DoubleWishboneRear_getSpringForceFunctor(self)

    def getShockForceFunctor(self):
        r"""getShockForceFunctor(HMMWV_DoubleWishboneRear self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.HMMWV_DoubleWishboneRear_getShockForceFunctor(self)

# Register HMMWV_DoubleWishboneRear in _vehicle:
_vehicle.HMMWV_DoubleWishboneRear_swigregister(HMMWV_DoubleWishboneRear)

class HMMWV_DoubleWishboneReducedFront(ChDoubleWishboneReduced):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(HMMWV_DoubleWishboneReducedFront self, std::string const & name) -> HMMWV_DoubleWishboneReducedFront"""
        _vehicle.HMMWV_DoubleWishboneReducedFront_swiginit(self, _vehicle.new_HMMWV_DoubleWishboneReducedFront(name))
    __swig_destroy__ = _vehicle.delete_HMMWV_DoubleWishboneReducedFront

    def getCamberAngle(self):
        r"""getCamberAngle(HMMWV_DoubleWishboneReducedFront self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneReducedFront_getCamberAngle(self)

    def getToeAngle(self):
        r"""getToeAngle(HMMWV_DoubleWishboneReducedFront self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneReducedFront_getToeAngle(self)

    def getSpindleMass(self):
        r"""getSpindleMass(HMMWV_DoubleWishboneReducedFront self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneReducedFront_getSpindleMass(self)

    def getUprightMass(self):
        r"""getUprightMass(HMMWV_DoubleWishboneReducedFront self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneReducedFront_getUprightMass(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(HMMWV_DoubleWishboneReducedFront self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneReducedFront_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(HMMWV_DoubleWishboneReducedFront self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneReducedFront_getSpindleWidth(self)

    def getUprightRadius(self):
        r"""getUprightRadius(HMMWV_DoubleWishboneReducedFront self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneReducedFront_getUprightRadius(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(HMMWV_DoubleWishboneReducedFront self) -> ChVectorD"""
        return _vehicle.HMMWV_DoubleWishboneReducedFront_getSpindleInertia(self)

    def getUprightInertia(self):
        r"""getUprightInertia(HMMWV_DoubleWishboneReducedFront self) -> ChVectorD"""
        return _vehicle.HMMWV_DoubleWishboneReducedFront_getUprightInertia(self)

    def getAxleInertia(self):
        r"""getAxleInertia(HMMWV_DoubleWishboneReducedFront self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneReducedFront_getAxleInertia(self)

    def getSpringRestLength(self):
        r"""getSpringRestLength(HMMWV_DoubleWishboneReducedFront self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneReducedFront_getSpringRestLength(self)

    def getShockForceFunctor(self):
        r"""getShockForceFunctor(HMMWV_DoubleWishboneReducedFront self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.HMMWV_DoubleWishboneReducedFront_getShockForceFunctor(self)

# Register HMMWV_DoubleWishboneReducedFront in _vehicle:
_vehicle.HMMWV_DoubleWishboneReducedFront_swigregister(HMMWV_DoubleWishboneReducedFront)

class HMMWV_DoubleWishboneReducedRear(ChDoubleWishboneReduced):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(HMMWV_DoubleWishboneReducedRear self, std::string const & name) -> HMMWV_DoubleWishboneReducedRear"""
        _vehicle.HMMWV_DoubleWishboneReducedRear_swiginit(self, _vehicle.new_HMMWV_DoubleWishboneReducedRear(name))
    __swig_destroy__ = _vehicle.delete_HMMWV_DoubleWishboneReducedRear

    def getCamberAngle(self):
        r"""getCamberAngle(HMMWV_DoubleWishboneReducedRear self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneReducedRear_getCamberAngle(self)

    def getToeAngle(self):
        r"""getToeAngle(HMMWV_DoubleWishboneReducedRear self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneReducedRear_getToeAngle(self)

    def getSpindleMass(self):
        r"""getSpindleMass(HMMWV_DoubleWishboneReducedRear self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneReducedRear_getSpindleMass(self)

    def getUprightMass(self):
        r"""getUprightMass(HMMWV_DoubleWishboneReducedRear self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneReducedRear_getUprightMass(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(HMMWV_DoubleWishboneReducedRear self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneReducedRear_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(HMMWV_DoubleWishboneReducedRear self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneReducedRear_getSpindleWidth(self)

    def getUprightRadius(self):
        r"""getUprightRadius(HMMWV_DoubleWishboneReducedRear self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneReducedRear_getUprightRadius(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(HMMWV_DoubleWishboneReducedRear self) -> ChVectorD"""
        return _vehicle.HMMWV_DoubleWishboneReducedRear_getSpindleInertia(self)

    def getUprightInertia(self):
        r"""getUprightInertia(HMMWV_DoubleWishboneReducedRear self) -> ChVectorD"""
        return _vehicle.HMMWV_DoubleWishboneReducedRear_getUprightInertia(self)

    def getAxleInertia(self):
        r"""getAxleInertia(HMMWV_DoubleWishboneReducedRear self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneReducedRear_getAxleInertia(self)

    def getSpringRestLength(self):
        r"""getSpringRestLength(HMMWV_DoubleWishboneReducedRear self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneReducedRear_getSpringRestLength(self)

    def getShockForceFunctor(self):
        r"""getShockForceFunctor(HMMWV_DoubleWishboneReducedRear self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.HMMWV_DoubleWishboneReducedRear_getShockForceFunctor(self)

# Register HMMWV_DoubleWishboneReducedRear in _vehicle:
_vehicle.HMMWV_DoubleWishboneReducedRear_swigregister(HMMWV_DoubleWishboneReducedRear)

class Sedan_DoubleWishbone(ChDoubleWishbone):
    r"""Proxy of C++ chrono::vehicle::sedan::Sedan_DoubleWishbone class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Sedan_DoubleWishbone self, std::string const & name) -> Sedan_DoubleWishbone"""
        _vehicle.Sedan_DoubleWishbone_swiginit(self, _vehicle.new_Sedan_DoubleWishbone(name))
    __swig_destroy__ = _vehicle.delete_Sedan_DoubleWishbone

    def getCamberAngle(self):
        r"""getCamberAngle(Sedan_DoubleWishbone self) -> double"""
        return _vehicle.Sedan_DoubleWishbone_getCamberAngle(self)

    def getToeAngle(self):
        r"""getToeAngle(Sedan_DoubleWishbone self) -> double"""
        return _vehicle.Sedan_DoubleWishbone_getToeAngle(self)

    def getSpindleMass(self):
        r"""getSpindleMass(Sedan_DoubleWishbone self) -> double"""
        return _vehicle.Sedan_DoubleWishbone_getSpindleMass(self)

    def getUCAMass(self):
        r"""getUCAMass(Sedan_DoubleWishbone self) -> double"""
        return _vehicle.Sedan_DoubleWishbone_getUCAMass(self)

    def getLCAMass(self):
        r"""getLCAMass(Sedan_DoubleWishbone self) -> double"""
        return _vehicle.Sedan_DoubleWishbone_getLCAMass(self)

    def getUprightMass(self):
        r"""getUprightMass(Sedan_DoubleWishbone self) -> double"""
        return _vehicle.Sedan_DoubleWishbone_getUprightMass(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(Sedan_DoubleWishbone self) -> double"""
        return _vehicle.Sedan_DoubleWishbone_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(Sedan_DoubleWishbone self) -> double"""
        return _vehicle.Sedan_DoubleWishbone_getSpindleWidth(self)

    def getUCARadius(self):
        r"""getUCARadius(Sedan_DoubleWishbone self) -> double"""
        return _vehicle.Sedan_DoubleWishbone_getUCARadius(self)

    def getLCARadius(self):
        r"""getLCARadius(Sedan_DoubleWishbone self) -> double"""
        return _vehicle.Sedan_DoubleWishbone_getLCARadius(self)

    def getUprightRadius(self):
        r"""getUprightRadius(Sedan_DoubleWishbone self) -> double"""
        return _vehicle.Sedan_DoubleWishbone_getUprightRadius(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(Sedan_DoubleWishbone self) -> ChVectorD"""
        return _vehicle.Sedan_DoubleWishbone_getSpindleInertia(self)

    def getUCAInertiaMoments(self):
        r"""getUCAInertiaMoments(Sedan_DoubleWishbone self) -> ChVectorD"""
        return _vehicle.Sedan_DoubleWishbone_getUCAInertiaMoments(self)

    def getUCAInertiaProducts(self):
        r"""getUCAInertiaProducts(Sedan_DoubleWishbone self) -> ChVectorD"""
        return _vehicle.Sedan_DoubleWishbone_getUCAInertiaProducts(self)

    def getLCAInertiaMoments(self):
        r"""getLCAInertiaMoments(Sedan_DoubleWishbone self) -> ChVectorD"""
        return _vehicle.Sedan_DoubleWishbone_getLCAInertiaMoments(self)

    def getLCAInertiaProducts(self):
        r"""getLCAInertiaProducts(Sedan_DoubleWishbone self) -> ChVectorD"""
        return _vehicle.Sedan_DoubleWishbone_getLCAInertiaProducts(self)

    def getUprightInertiaMoments(self):
        r"""getUprightInertiaMoments(Sedan_DoubleWishbone self) -> ChVectorD"""
        return _vehicle.Sedan_DoubleWishbone_getUprightInertiaMoments(self)

    def getUprightInertiaProducts(self):
        r"""getUprightInertiaProducts(Sedan_DoubleWishbone self) -> ChVectorD"""
        return _vehicle.Sedan_DoubleWishbone_getUprightInertiaProducts(self)

    def getAxleInertia(self):
        r"""getAxleInertia(Sedan_DoubleWishbone self) -> double"""
        return _vehicle.Sedan_DoubleWishbone_getAxleInertia(self)

    def getSpringRestLength(self):
        r"""getSpringRestLength(Sedan_DoubleWishbone self) -> double"""
        return _vehicle.Sedan_DoubleWishbone_getSpringRestLength(self)

    def getSpringForceFunctor(self):
        r"""getSpringForceFunctor(Sedan_DoubleWishbone self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.Sedan_DoubleWishbone_getSpringForceFunctor(self)

    def getShockForceFunctor(self):
        r"""getShockForceFunctor(Sedan_DoubleWishbone self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.Sedan_DoubleWishbone_getShockForceFunctor(self)

# Register Sedan_DoubleWishbone in _vehicle:
_vehicle.Sedan_DoubleWishbone_swigregister(Sedan_DoubleWishbone)

class Sedan_MultiLink(ChMultiLink):
    r"""Proxy of C++ chrono::vehicle::sedan::Sedan_MultiLink class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Sedan_MultiLink self, std::string const & name) -> Sedan_MultiLink"""
        _vehicle.Sedan_MultiLink_swiginit(self, _vehicle.new_Sedan_MultiLink(name))
    __swig_destroy__ = _vehicle.delete_Sedan_MultiLink

    def getSpindleMass(self):
        r"""getSpindleMass(Sedan_MultiLink self) -> double"""
        return _vehicle.Sedan_MultiLink_getSpindleMass(self)

    def getUpperArmMass(self):
        r"""getUpperArmMass(Sedan_MultiLink self) -> double"""
        return _vehicle.Sedan_MultiLink_getUpperArmMass(self)

    def getLateralMass(self):
        r"""getLateralMass(Sedan_MultiLink self) -> double"""
        return _vehicle.Sedan_MultiLink_getLateralMass(self)

    def getTrailingLinkMass(self):
        r"""getTrailingLinkMass(Sedan_MultiLink self) -> double"""
        return _vehicle.Sedan_MultiLink_getTrailingLinkMass(self)

    def getUprightMass(self):
        r"""getUprightMass(Sedan_MultiLink self) -> double"""
        return _vehicle.Sedan_MultiLink_getUprightMass(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(Sedan_MultiLink self) -> double"""
        return _vehicle.Sedan_MultiLink_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(Sedan_MultiLink self) -> double"""
        return _vehicle.Sedan_MultiLink_getSpindleWidth(self)

    def getUpperArmRadius(self):
        r"""getUpperArmRadius(Sedan_MultiLink self) -> double"""
        return _vehicle.Sedan_MultiLink_getUpperArmRadius(self)

    def getLateralRadius(self):
        r"""getLateralRadius(Sedan_MultiLink self) -> double"""
        return _vehicle.Sedan_MultiLink_getLateralRadius(self)

    def getTrailingLinkRadius(self):
        r"""getTrailingLinkRadius(Sedan_MultiLink self) -> double"""
        return _vehicle.Sedan_MultiLink_getTrailingLinkRadius(self)

    def getUprightRadius(self):
        r"""getUprightRadius(Sedan_MultiLink self) -> double"""
        return _vehicle.Sedan_MultiLink_getUprightRadius(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(Sedan_MultiLink self) -> ChVectorD"""
        return _vehicle.Sedan_MultiLink_getSpindleInertia(self)

    def getUpperArmInertia(self):
        r"""getUpperArmInertia(Sedan_MultiLink self) -> ChVectorD"""
        return _vehicle.Sedan_MultiLink_getUpperArmInertia(self)

    def getLateralInertia(self):
        r"""getLateralInertia(Sedan_MultiLink self) -> ChVectorD"""
        return _vehicle.Sedan_MultiLink_getLateralInertia(self)

    def getTrailingLinkInertia(self):
        r"""getTrailingLinkInertia(Sedan_MultiLink self) -> ChVectorD"""
        return _vehicle.Sedan_MultiLink_getTrailingLinkInertia(self)

    def getUprightInertia(self):
        r"""getUprightInertia(Sedan_MultiLink self) -> ChVectorD"""
        return _vehicle.Sedan_MultiLink_getUprightInertia(self)

    def getAxleInertia(self):
        r"""getAxleInertia(Sedan_MultiLink self) -> double"""
        return _vehicle.Sedan_MultiLink_getAxleInertia(self)

    def getSpringRestLength(self):
        r"""getSpringRestLength(Sedan_MultiLink self) -> double"""
        return _vehicle.Sedan_MultiLink_getSpringRestLength(self)

    def getSpringForceFunctor(self):
        r"""getSpringForceFunctor(Sedan_MultiLink self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.Sedan_MultiLink_getSpringForceFunctor(self)

    def getShockForceFunctor(self):
        r"""getShockForceFunctor(Sedan_MultiLink self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.Sedan_MultiLink_getShockForceFunctor(self)

# Register Sedan_MultiLink in _vehicle:
_vehicle.Sedan_MultiLink_swigregister(Sedan_MultiLink)

class CityBus_ToeBarLeafspringAxle(ChToeBarLeafspringAxle):
    r"""Proxy of C++ chrono::vehicle::citybus::CityBus_ToeBarLeafspringAxle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(CityBus_ToeBarLeafspringAxle self, std::string const & name) -> CityBus_ToeBarLeafspringAxle"""
        _vehicle.CityBus_ToeBarLeafspringAxle_swiginit(self, _vehicle.new_CityBus_ToeBarLeafspringAxle(name))
    __swig_destroy__ = _vehicle.delete_CityBus_ToeBarLeafspringAxle

# Register CityBus_ToeBarLeafspringAxle in _vehicle:
_vehicle.CityBus_ToeBarLeafspringAxle_swigregister(CityBus_ToeBarLeafspringAxle)

class CityBus_SolidAxleFront(ChSolidAxle):
    r"""Proxy of C++ chrono::vehicle::citybus::CityBus_SolidAxleFront class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(CityBus_SolidAxleFront self, std::string const & name) -> CityBus_SolidAxleFront"""
        _vehicle.CityBus_SolidAxleFront_swiginit(self, _vehicle.new_CityBus_SolidAxleFront(name))
    __swig_destroy__ = _vehicle.delete_CityBus_SolidAxleFront

    def getAxleTubeMass(self):
        r"""getAxleTubeMass(CityBus_SolidAxleFront self) -> double"""
        return _vehicle.CityBus_SolidAxleFront_getAxleTubeMass(self)

    def getSpindleMass(self):
        r"""getSpindleMass(CityBus_SolidAxleFront self) -> double"""
        return _vehicle.CityBus_SolidAxleFront_getSpindleMass(self)

    def getULMass(self):
        r"""getULMass(CityBus_SolidAxleFront self) -> double"""
        return _vehicle.CityBus_SolidAxleFront_getULMass(self)

    def getLLMass(self):
        r"""getLLMass(CityBus_SolidAxleFront self) -> double"""
        return _vehicle.CityBus_SolidAxleFront_getLLMass(self)

    def getKnuckleMass(self):
        r"""getKnuckleMass(CityBus_SolidAxleFront self) -> double"""
        return _vehicle.CityBus_SolidAxleFront_getKnuckleMass(self)

    def getTierodMass(self):
        r"""getTierodMass(CityBus_SolidAxleFront self) -> double"""
        return _vehicle.CityBus_SolidAxleFront_getTierodMass(self)

    def getDraglinkMass(self):
        r"""getDraglinkMass(CityBus_SolidAxleFront self) -> double"""
        return _vehicle.CityBus_SolidAxleFront_getDraglinkMass(self)

    def getBellCrankMass(self):
        r"""getBellCrankMass(CityBus_SolidAxleFront self) -> double"""
        return _vehicle.CityBus_SolidAxleFront_getBellCrankMass(self)

    def getAxleTubeRadius(self):
        r"""getAxleTubeRadius(CityBus_SolidAxleFront self) -> double"""
        return _vehicle.CityBus_SolidAxleFront_getAxleTubeRadius(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(CityBus_SolidAxleFront self) -> double"""
        return _vehicle.CityBus_SolidAxleFront_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(CityBus_SolidAxleFront self) -> double"""
        return _vehicle.CityBus_SolidAxleFront_getSpindleWidth(self)

    def getULRadius(self):
        r"""getULRadius(CityBus_SolidAxleFront self) -> double"""
        return _vehicle.CityBus_SolidAxleFront_getULRadius(self)

    def getLLRadius(self):
        r"""getLLRadius(CityBus_SolidAxleFront self) -> double"""
        return _vehicle.CityBus_SolidAxleFront_getLLRadius(self)

    def getKnuckleRadius(self):
        r"""getKnuckleRadius(CityBus_SolidAxleFront self) -> double"""
        return _vehicle.CityBus_SolidAxleFront_getKnuckleRadius(self)

    def getTierodRadius(self):
        r"""getTierodRadius(CityBus_SolidAxleFront self) -> double"""
        return _vehicle.CityBus_SolidAxleFront_getTierodRadius(self)

    def getDraglinkRadius(self):
        r"""getDraglinkRadius(CityBus_SolidAxleFront self) -> double"""
        return _vehicle.CityBus_SolidAxleFront_getDraglinkRadius(self)

    def getBellCrankRadius(self):
        r"""getBellCrankRadius(CityBus_SolidAxleFront self) -> double"""
        return _vehicle.CityBus_SolidAxleFront_getBellCrankRadius(self)

    def getAxleTubeInertia(self):
        r"""getAxleTubeInertia(CityBus_SolidAxleFront self) -> ChVectorD"""
        return _vehicle.CityBus_SolidAxleFront_getAxleTubeInertia(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(CityBus_SolidAxleFront self) -> ChVectorD"""
        return _vehicle.CityBus_SolidAxleFront_getSpindleInertia(self)

    def getULInertia(self):
        r"""getULInertia(CityBus_SolidAxleFront self) -> ChVectorD"""
        return _vehicle.CityBus_SolidAxleFront_getULInertia(self)

    def getLLInertia(self):
        r"""getLLInertia(CityBus_SolidAxleFront self) -> ChVectorD"""
        return _vehicle.CityBus_SolidAxleFront_getLLInertia(self)

    def getKnuckleInertia(self):
        r"""getKnuckleInertia(CityBus_SolidAxleFront self) -> ChVectorD"""
        return _vehicle.CityBus_SolidAxleFront_getKnuckleInertia(self)

    def getTierodInertia(self):
        r"""getTierodInertia(CityBus_SolidAxleFront self) -> ChVectorD"""
        return _vehicle.CityBus_SolidAxleFront_getTierodInertia(self)

    def getDraglinkInertia(self):
        r"""getDraglinkInertia(CityBus_SolidAxleFront self) -> ChVectorD"""
        return _vehicle.CityBus_SolidAxleFront_getDraglinkInertia(self)

    def getBellCrankInertia(self):
        r"""getBellCrankInertia(CityBus_SolidAxleFront self) -> ChVectorD"""
        return _vehicle.CityBus_SolidAxleFront_getBellCrankInertia(self)

    def getAxleInertia(self):
        r"""getAxleInertia(CityBus_SolidAxleFront self) -> double"""
        return _vehicle.CityBus_SolidAxleFront_getAxleInertia(self)

    def getSpringRestLength(self):
        r"""getSpringRestLength(CityBus_SolidAxleFront self) -> double"""
        return _vehicle.CityBus_SolidAxleFront_getSpringRestLength(self)

    def getSpringForceFunctor(self):
        r"""getSpringForceFunctor(CityBus_SolidAxleFront self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.CityBus_SolidAxleFront_getSpringForceFunctor(self)

    def getShockForceFunctor(self):
        r"""getShockForceFunctor(CityBus_SolidAxleFront self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.CityBus_SolidAxleFront_getShockForceFunctor(self)

    def getAxleTubeCOM(self):
        r"""getAxleTubeCOM(CityBus_SolidAxleFront self) -> ChVectorD"""
        return _vehicle.CityBus_SolidAxleFront_getAxleTubeCOM(self)

# Register CityBus_SolidAxleFront in _vehicle:
_vehicle.CityBus_SolidAxleFront_swigregister(CityBus_SolidAxleFront)

class CityBus_SolidAxleRear(ChSolidAxle):
    r"""Proxy of C++ chrono::vehicle::citybus::CityBus_SolidAxleRear class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(CityBus_SolidAxleRear self, std::string const & name) -> CityBus_SolidAxleRear"""
        _vehicle.CityBus_SolidAxleRear_swiginit(self, _vehicle.new_CityBus_SolidAxleRear(name))
    __swig_destroy__ = _vehicle.delete_CityBus_SolidAxleRear

    def getAxleTubeMass(self):
        r"""getAxleTubeMass(CityBus_SolidAxleRear self) -> double"""
        return _vehicle.CityBus_SolidAxleRear_getAxleTubeMass(self)

    def getSpindleMass(self):
        r"""getSpindleMass(CityBus_SolidAxleRear self) -> double"""
        return _vehicle.CityBus_SolidAxleRear_getSpindleMass(self)

    def getULMass(self):
        r"""getULMass(CityBus_SolidAxleRear self) -> double"""
        return _vehicle.CityBus_SolidAxleRear_getULMass(self)

    def getLLMass(self):
        r"""getLLMass(CityBus_SolidAxleRear self) -> double"""
        return _vehicle.CityBus_SolidAxleRear_getLLMass(self)

    def getKnuckleMass(self):
        r"""getKnuckleMass(CityBus_SolidAxleRear self) -> double"""
        return _vehicle.CityBus_SolidAxleRear_getKnuckleMass(self)

    def getTierodMass(self):
        r"""getTierodMass(CityBus_SolidAxleRear self) -> double"""
        return _vehicle.CityBus_SolidAxleRear_getTierodMass(self)

    def getDraglinkMass(self):
        r"""getDraglinkMass(CityBus_SolidAxleRear self) -> double"""
        return _vehicle.CityBus_SolidAxleRear_getDraglinkMass(self)

    def getBellCrankMass(self):
        r"""getBellCrankMass(CityBus_SolidAxleRear self) -> double"""
        return _vehicle.CityBus_SolidAxleRear_getBellCrankMass(self)

    def getAxleTubeRadius(self):
        r"""getAxleTubeRadius(CityBus_SolidAxleRear self) -> double"""
        return _vehicle.CityBus_SolidAxleRear_getAxleTubeRadius(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(CityBus_SolidAxleRear self) -> double"""
        return _vehicle.CityBus_SolidAxleRear_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(CityBus_SolidAxleRear self) -> double"""
        return _vehicle.CityBus_SolidAxleRear_getSpindleWidth(self)

    def getULRadius(self):
        r"""getULRadius(CityBus_SolidAxleRear self) -> double"""
        return _vehicle.CityBus_SolidAxleRear_getULRadius(self)

    def getLLRadius(self):
        r"""getLLRadius(CityBus_SolidAxleRear self) -> double"""
        return _vehicle.CityBus_SolidAxleRear_getLLRadius(self)

    def getKnuckleRadius(self):
        r"""getKnuckleRadius(CityBus_SolidAxleRear self) -> double"""
        return _vehicle.CityBus_SolidAxleRear_getKnuckleRadius(self)

    def getTierodRadius(self):
        r"""getTierodRadius(CityBus_SolidAxleRear self) -> double"""
        return _vehicle.CityBus_SolidAxleRear_getTierodRadius(self)

    def getDraglinkRadius(self):
        r"""getDraglinkRadius(CityBus_SolidAxleRear self) -> double"""
        return _vehicle.CityBus_SolidAxleRear_getDraglinkRadius(self)

    def getBellCrankRadius(self):
        r"""getBellCrankRadius(CityBus_SolidAxleRear self) -> double"""
        return _vehicle.CityBus_SolidAxleRear_getBellCrankRadius(self)

    def getAxleTubeInertia(self):
        r"""getAxleTubeInertia(CityBus_SolidAxleRear self) -> ChVectorD"""
        return _vehicle.CityBus_SolidAxleRear_getAxleTubeInertia(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(CityBus_SolidAxleRear self) -> ChVectorD"""
        return _vehicle.CityBus_SolidAxleRear_getSpindleInertia(self)

    def getULInertia(self):
        r"""getULInertia(CityBus_SolidAxleRear self) -> ChVectorD"""
        return _vehicle.CityBus_SolidAxleRear_getULInertia(self)

    def getLLInertia(self):
        r"""getLLInertia(CityBus_SolidAxleRear self) -> ChVectorD"""
        return _vehicle.CityBus_SolidAxleRear_getLLInertia(self)

    def getKnuckleInertia(self):
        r"""getKnuckleInertia(CityBus_SolidAxleRear self) -> ChVectorD"""
        return _vehicle.CityBus_SolidAxleRear_getKnuckleInertia(self)

    def getTierodInertia(self):
        r"""getTierodInertia(CityBus_SolidAxleRear self) -> ChVectorD"""
        return _vehicle.CityBus_SolidAxleRear_getTierodInertia(self)

    def getDraglinkInertia(self):
        r"""getDraglinkInertia(CityBus_SolidAxleRear self) -> ChVectorD"""
        return _vehicle.CityBus_SolidAxleRear_getDraglinkInertia(self)

    def getBellCrankInertia(self):
        r"""getBellCrankInertia(CityBus_SolidAxleRear self) -> ChVectorD"""
        return _vehicle.CityBus_SolidAxleRear_getBellCrankInertia(self)

    def getAxleInertia(self):
        r"""getAxleInertia(CityBus_SolidAxleRear self) -> double"""
        return _vehicle.CityBus_SolidAxleRear_getAxleInertia(self)

    def getSpringRestLength(self):
        r"""getSpringRestLength(CityBus_SolidAxleRear self) -> double"""
        return _vehicle.CityBus_SolidAxleRear_getSpringRestLength(self)

    def getSpringForceFunctor(self):
        r"""getSpringForceFunctor(CityBus_SolidAxleRear self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.CityBus_SolidAxleRear_getSpringForceFunctor(self)

    def getShockForceFunctor(self):
        r"""getShockForceFunctor(CityBus_SolidAxleRear self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.CityBus_SolidAxleRear_getShockForceFunctor(self)

    def getAxleTubeCOM(self):
        r"""getAxleTubeCOM(CityBus_SolidAxleRear self) -> ChVectorD"""
        return _vehicle.CityBus_SolidAxleRear_getAxleTubeCOM(self)

# Register CityBus_SolidAxleRear in _vehicle:
_vehicle.CityBus_SolidAxleRear_swigregister(CityBus_SolidAxleRear)

class CityBus_LeafspringAxle(ChLeafspringAxle):
    r"""Proxy of C++ chrono::vehicle::citybus::CityBus_LeafspringAxle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(CityBus_LeafspringAxle self, std::string const & name) -> CityBus_LeafspringAxle"""
        _vehicle.CityBus_LeafspringAxle_swiginit(self, _vehicle.new_CityBus_LeafspringAxle(name))
    __swig_destroy__ = _vehicle.delete_CityBus_LeafspringAxle

# Register CityBus_LeafspringAxle in _vehicle:
_vehicle.CityBus_LeafspringAxle_swigregister(CityBus_LeafspringAxle)

class MAN_5t_BellcrankSolid3LinkAxle(ChSolidBellcrankThreeLinkAxle):
    r"""Proxy of C++ chrono::vehicle::man::MAN_5t_BellcrankSolid3LinkAxle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(MAN_5t_BellcrankSolid3LinkAxle self, std::string const & name) -> MAN_5t_BellcrankSolid3LinkAxle"""
        _vehicle.MAN_5t_BellcrankSolid3LinkAxle_swiginit(self, _vehicle.new_MAN_5t_BellcrankSolid3LinkAxle(name))
    __swig_destroy__ = _vehicle.delete_MAN_5t_BellcrankSolid3LinkAxle

# Register MAN_5t_BellcrankSolid3LinkAxle in _vehicle:
_vehicle.MAN_5t_BellcrankSolid3LinkAxle_swigregister(MAN_5t_BellcrankSolid3LinkAxle)

class MAN_5t_Solid3LinkAxle(ChSolidThreeLinkAxle):
    r"""Proxy of C++ chrono::vehicle::man::MAN_5t_Solid3LinkAxle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(MAN_5t_Solid3LinkAxle self, std::string const & name) -> MAN_5t_Solid3LinkAxle"""
        _vehicle.MAN_5t_Solid3LinkAxle_swiginit(self, _vehicle.new_MAN_5t_Solid3LinkAxle(name))
    __swig_destroy__ = _vehicle.delete_MAN_5t_Solid3LinkAxle

# Register MAN_5t_Solid3LinkAxle in _vehicle:
_vehicle.MAN_5t_Solid3LinkAxle_swigregister(MAN_5t_Solid3LinkAxle)

class MAN_10t_Front1Axle(ChSolidBellcrankThreeLinkAxle):
    r"""Proxy of C++ chrono::vehicle::man::MAN_10t_Front1Axle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(MAN_10t_Front1Axle self, std::string const & name) -> MAN_10t_Front1Axle"""
        _vehicle.MAN_10t_Front1Axle_swiginit(self, _vehicle.new_MAN_10t_Front1Axle(name))
    __swig_destroy__ = _vehicle.delete_MAN_10t_Front1Axle

# Register MAN_10t_Front1Axle in _vehicle:
_vehicle.MAN_10t_Front1Axle_swigregister(MAN_10t_Front1Axle)

class MAN_10t_Front2Axle(ChSolidBellcrankThreeLinkAxle):
    r"""Proxy of C++ chrono::vehicle::man::MAN_10t_Front2Axle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(MAN_10t_Front2Axle self, std::string const & name) -> MAN_10t_Front2Axle"""
        _vehicle.MAN_10t_Front2Axle_swiginit(self, _vehicle.new_MAN_10t_Front2Axle(name))
    __swig_destroy__ = _vehicle.delete_MAN_10t_Front2Axle

# Register MAN_10t_Front2Axle in _vehicle:
_vehicle.MAN_10t_Front2Axle_swigregister(MAN_10t_Front2Axle)

class UAZBUS_ToeBarLeafspringAxle(ChToeBarLeafspringAxle):
    r"""Proxy of C++ chrono::vehicle::uaz::UAZBUS_ToeBarLeafspringAxle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(UAZBUS_ToeBarLeafspringAxle self, std::string const & name) -> UAZBUS_ToeBarLeafspringAxle"""
        _vehicle.UAZBUS_ToeBarLeafspringAxle_swiginit(self, _vehicle.new_UAZBUS_ToeBarLeafspringAxle(name))
    __swig_destroy__ = _vehicle.delete_UAZBUS_ToeBarLeafspringAxle

# Register UAZBUS_ToeBarLeafspringAxle in _vehicle:
_vehicle.UAZBUS_ToeBarLeafspringAxle_swigregister(UAZBUS_ToeBarLeafspringAxle)

class UAZBUS_LeafspringAxle(ChLeafspringAxle):
    r"""Proxy of C++ chrono::vehicle::uaz::UAZBUS_LeafspringAxle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(UAZBUS_LeafspringAxle self, std::string const & name) -> UAZBUS_LeafspringAxle"""
        _vehicle.UAZBUS_LeafspringAxle_swiginit(self, _vehicle.new_UAZBUS_LeafspringAxle(name))
    __swig_destroy__ = _vehicle.delete_UAZBUS_LeafspringAxle

# Register UAZBUS_LeafspringAxle in _vehicle:
_vehicle.UAZBUS_LeafspringAxle_swigregister(UAZBUS_LeafspringAxle)

class Gator_SingleWishbone(ChSingleWishbone):
    r"""Proxy of C++ chrono::vehicle::gator::Gator_SingleWishbone class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Gator_SingleWishbone self, std::string const & name) -> Gator_SingleWishbone"""
        _vehicle.Gator_SingleWishbone_swiginit(self, _vehicle.new_Gator_SingleWishbone(name))
    __swig_destroy__ = _vehicle.delete_Gator_SingleWishbone

    def getSpindleMass(self):
        r"""getSpindleMass(Gator_SingleWishbone self) -> double"""
        return _vehicle.Gator_SingleWishbone_getSpindleMass(self)

    def getCAMass(self):
        r"""getCAMass(Gator_SingleWishbone self) -> double"""
        return _vehicle.Gator_SingleWishbone_getCAMass(self)

    def getUprightMass(self):
        r"""getUprightMass(Gator_SingleWishbone self) -> double"""
        return _vehicle.Gator_SingleWishbone_getUprightMass(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(Gator_SingleWishbone self) -> double"""
        return _vehicle.Gator_SingleWishbone_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(Gator_SingleWishbone self) -> double"""
        return _vehicle.Gator_SingleWishbone_getSpindleWidth(self)

    def getCARadius(self):
        r"""getCARadius(Gator_SingleWishbone self) -> double"""
        return _vehicle.Gator_SingleWishbone_getCARadius(self)

    def getUprightRadius(self):
        r"""getUprightRadius(Gator_SingleWishbone self) -> double"""
        return _vehicle.Gator_SingleWishbone_getUprightRadius(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(Gator_SingleWishbone self) -> ChVectorD"""
        return _vehicle.Gator_SingleWishbone_getSpindleInertia(self)

    def getCAInertiaMoments(self):
        r"""getCAInertiaMoments(Gator_SingleWishbone self) -> ChVectorD"""
        return _vehicle.Gator_SingleWishbone_getCAInertiaMoments(self)

    def getCAInertiaProducts(self):
        r"""getCAInertiaProducts(Gator_SingleWishbone self) -> ChVectorD"""
        return _vehicle.Gator_SingleWishbone_getCAInertiaProducts(self)

    def getUprightInertiaMoments(self):
        r"""getUprightInertiaMoments(Gator_SingleWishbone self) -> ChVectorD"""
        return _vehicle.Gator_SingleWishbone_getUprightInertiaMoments(self)

    def getUprightInertiaProducts(self):
        r"""getUprightInertiaProducts(Gator_SingleWishbone self) -> ChVectorD"""
        return _vehicle.Gator_SingleWishbone_getUprightInertiaProducts(self)

    def getAxleInertia(self):
        r"""getAxleInertia(Gator_SingleWishbone self) -> double"""
        return _vehicle.Gator_SingleWishbone_getAxleInertia(self)

    def getShockRestLength(self):
        r"""getShockRestLength(Gator_SingleWishbone self) -> double"""
        return _vehicle.Gator_SingleWishbone_getShockRestLength(self)

    def getShockForceFunctor(self):
        r"""getShockForceFunctor(Gator_SingleWishbone self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.Gator_SingleWishbone_getShockForceFunctor(self)

# Register Gator_SingleWishbone in _vehicle:
_vehicle.Gator_SingleWishbone_swigregister(Gator_SingleWishbone)

class Gator_RigidSuspension(ChRigidSuspension):
    r"""Proxy of C++ chrono::vehicle::gator::Gator_RigidSuspension class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Gator_RigidSuspension self, std::string const & name) -> Gator_RigidSuspension"""
        _vehicle.Gator_RigidSuspension_swiginit(self, _vehicle.new_Gator_RigidSuspension(name))
    __swig_destroy__ = _vehicle.delete_Gator_RigidSuspension

    def getSpindleMass(self):
        r"""getSpindleMass(Gator_RigidSuspension self) -> double"""
        return _vehicle.Gator_RigidSuspension_getSpindleMass(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(Gator_RigidSuspension self) -> double"""
        return _vehicle.Gator_RigidSuspension_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(Gator_RigidSuspension self) -> double"""
        return _vehicle.Gator_RigidSuspension_getSpindleWidth(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(Gator_RigidSuspension self) -> ChVectorD"""
        return _vehicle.Gator_RigidSuspension_getSpindleInertia(self)

    def getAxleInertia(self):
        r"""getAxleInertia(Gator_RigidSuspension self) -> double"""
        return _vehicle.Gator_RigidSuspension_getAxleInertia(self)

# Register Gator_RigidSuspension in _vehicle:
_vehicle.Gator_RigidSuspension_swigregister(Gator_RigidSuspension)

class RCCar_DoubleWishboneFront(ChDoubleWishbone):
    r"""Proxy of C++ chrono::vehicle::rccar::RCCar_DoubleWishboneFront class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(RCCar_DoubleWishboneFront self, std::string const & name) -> RCCar_DoubleWishboneFront"""
        _vehicle.RCCar_DoubleWishboneFront_swiginit(self, _vehicle.new_RCCar_DoubleWishboneFront(name))
    __swig_destroy__ = _vehicle.delete_RCCar_DoubleWishboneFront

    def getCamberAngle(self):
        r"""getCamberAngle(RCCar_DoubleWishboneFront self) -> double"""
        return _vehicle.RCCar_DoubleWishboneFront_getCamberAngle(self)

    def getToeAngle(self):
        r"""getToeAngle(RCCar_DoubleWishboneFront self) -> double"""
        return _vehicle.RCCar_DoubleWishboneFront_getToeAngle(self)

    def getSpindleMass(self):
        r"""getSpindleMass(RCCar_DoubleWishboneFront self) -> double"""
        return _vehicle.RCCar_DoubleWishboneFront_getSpindleMass(self)

    def getUCAMass(self):
        r"""getUCAMass(RCCar_DoubleWishboneFront self) -> double"""
        return _vehicle.RCCar_DoubleWishboneFront_getUCAMass(self)

    def getLCAMass(self):
        r"""getLCAMass(RCCar_DoubleWishboneFront self) -> double"""
        return _vehicle.RCCar_DoubleWishboneFront_getLCAMass(self)

    def getUprightMass(self):
        r"""getUprightMass(RCCar_DoubleWishboneFront self) -> double"""
        return _vehicle.RCCar_DoubleWishboneFront_getUprightMass(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(RCCar_DoubleWishboneFront self) -> double"""
        return _vehicle.RCCar_DoubleWishboneFront_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(RCCar_DoubleWishboneFront self) -> double"""
        return _vehicle.RCCar_DoubleWishboneFront_getSpindleWidth(self)

    def getUCARadius(self):
        r"""getUCARadius(RCCar_DoubleWishboneFront self) -> double"""
        return _vehicle.RCCar_DoubleWishboneFront_getUCARadius(self)

    def getLCARadius(self):
        r"""getLCARadius(RCCar_DoubleWishboneFront self) -> double"""
        return _vehicle.RCCar_DoubleWishboneFront_getLCARadius(self)

    def getUprightRadius(self):
        r"""getUprightRadius(RCCar_DoubleWishboneFront self) -> double"""
        return _vehicle.RCCar_DoubleWishboneFront_getUprightRadius(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(RCCar_DoubleWishboneFront self) -> ChVectorD"""
        return _vehicle.RCCar_DoubleWishboneFront_getSpindleInertia(self)

    def getUCAInertiaMoments(self):
        r"""getUCAInertiaMoments(RCCar_DoubleWishboneFront self) -> ChVectorD"""
        return _vehicle.RCCar_DoubleWishboneFront_getUCAInertiaMoments(self)

    def getUCAInertiaProducts(self):
        r"""getUCAInertiaProducts(RCCar_DoubleWishboneFront self) -> ChVectorD"""
        return _vehicle.RCCar_DoubleWishboneFront_getUCAInertiaProducts(self)

    def getLCAInertiaMoments(self):
        r"""getLCAInertiaMoments(RCCar_DoubleWishboneFront self) -> ChVectorD"""
        return _vehicle.RCCar_DoubleWishboneFront_getLCAInertiaMoments(self)

    def getLCAInertiaProducts(self):
        r"""getLCAInertiaProducts(RCCar_DoubleWishboneFront self) -> ChVectorD"""
        return _vehicle.RCCar_DoubleWishboneFront_getLCAInertiaProducts(self)

    def getUprightInertiaMoments(self):
        r"""getUprightInertiaMoments(RCCar_DoubleWishboneFront self) -> ChVectorD"""
        return _vehicle.RCCar_DoubleWishboneFront_getUprightInertiaMoments(self)

    def getUprightInertiaProducts(self):
        r"""getUprightInertiaProducts(RCCar_DoubleWishboneFront self) -> ChVectorD"""
        return _vehicle.RCCar_DoubleWishboneFront_getUprightInertiaProducts(self)

    def getAxleInertia(self):
        r"""getAxleInertia(RCCar_DoubleWishboneFront self) -> double"""
        return _vehicle.RCCar_DoubleWishboneFront_getAxleInertia(self)

    def getSpringRestLength(self):
        r"""getSpringRestLength(RCCar_DoubleWishboneFront self) -> double"""
        return _vehicle.RCCar_DoubleWishboneFront_getSpringRestLength(self)

    def getSpringForceFunctor(self):
        r"""getSpringForceFunctor(RCCar_DoubleWishboneFront self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.RCCar_DoubleWishboneFront_getSpringForceFunctor(self)

    def getShockForceFunctor(self):
        r"""getShockForceFunctor(RCCar_DoubleWishboneFront self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.RCCar_DoubleWishboneFront_getShockForceFunctor(self)

# Register RCCar_DoubleWishboneFront in _vehicle:
_vehicle.RCCar_DoubleWishboneFront_swigregister(RCCar_DoubleWishboneFront)

class RCCar_DoubleWishboneRear(ChDoubleWishbone):
    r"""Proxy of C++ chrono::vehicle::rccar::RCCar_DoubleWishboneRear class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(RCCar_DoubleWishboneRear self, std::string const & name) -> RCCar_DoubleWishboneRear"""
        _vehicle.RCCar_DoubleWishboneRear_swiginit(self, _vehicle.new_RCCar_DoubleWishboneRear(name))
    __swig_destroy__ = _vehicle.delete_RCCar_DoubleWishboneRear

    def getCamberAngle(self):
        r"""getCamberAngle(RCCar_DoubleWishboneRear self) -> double"""
        return _vehicle.RCCar_DoubleWishboneRear_getCamberAngle(self)

    def getToeAngle(self):
        r"""getToeAngle(RCCar_DoubleWishboneRear self) -> double"""
        return _vehicle.RCCar_DoubleWishboneRear_getToeAngle(self)

    def getSpindleMass(self):
        r"""getSpindleMass(RCCar_DoubleWishboneRear self) -> double"""
        return _vehicle.RCCar_DoubleWishboneRear_getSpindleMass(self)

    def getUCAMass(self):
        r"""getUCAMass(RCCar_DoubleWishboneRear self) -> double"""
        return _vehicle.RCCar_DoubleWishboneRear_getUCAMass(self)

    def getLCAMass(self):
        r"""getLCAMass(RCCar_DoubleWishboneRear self) -> double"""
        return _vehicle.RCCar_DoubleWishboneRear_getLCAMass(self)

    def getUprightMass(self):
        r"""getUprightMass(RCCar_DoubleWishboneRear self) -> double"""
        return _vehicle.RCCar_DoubleWishboneRear_getUprightMass(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(RCCar_DoubleWishboneRear self) -> double"""
        return _vehicle.RCCar_DoubleWishboneRear_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(RCCar_DoubleWishboneRear self) -> double"""
        return _vehicle.RCCar_DoubleWishboneRear_getSpindleWidth(self)

    def getUCARadius(self):
        r"""getUCARadius(RCCar_DoubleWishboneRear self) -> double"""
        return _vehicle.RCCar_DoubleWishboneRear_getUCARadius(self)

    def getLCARadius(self):
        r"""getLCARadius(RCCar_DoubleWishboneRear self) -> double"""
        return _vehicle.RCCar_DoubleWishboneRear_getLCARadius(self)

    def getUprightRadius(self):
        r"""getUprightRadius(RCCar_DoubleWishboneRear self) -> double"""
        return _vehicle.RCCar_DoubleWishboneRear_getUprightRadius(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(RCCar_DoubleWishboneRear self) -> ChVectorD"""
        return _vehicle.RCCar_DoubleWishboneRear_getSpindleInertia(self)

    def getUCAInertiaMoments(self):
        r"""getUCAInertiaMoments(RCCar_DoubleWishboneRear self) -> ChVectorD"""
        return _vehicle.RCCar_DoubleWishboneRear_getUCAInertiaMoments(self)

    def getUCAInertiaProducts(self):
        r"""getUCAInertiaProducts(RCCar_DoubleWishboneRear self) -> ChVectorD"""
        return _vehicle.RCCar_DoubleWishboneRear_getUCAInertiaProducts(self)

    def getLCAInertiaMoments(self):
        r"""getLCAInertiaMoments(RCCar_DoubleWishboneRear self) -> ChVectorD"""
        return _vehicle.RCCar_DoubleWishboneRear_getLCAInertiaMoments(self)

    def getLCAInertiaProducts(self):
        r"""getLCAInertiaProducts(RCCar_DoubleWishboneRear self) -> ChVectorD"""
        return _vehicle.RCCar_DoubleWishboneRear_getLCAInertiaProducts(self)

    def getUprightInertiaMoments(self):
        r"""getUprightInertiaMoments(RCCar_DoubleWishboneRear self) -> ChVectorD"""
        return _vehicle.RCCar_DoubleWishboneRear_getUprightInertiaMoments(self)

    def getUprightInertiaProducts(self):
        r"""getUprightInertiaProducts(RCCar_DoubleWishboneRear self) -> ChVectorD"""
        return _vehicle.RCCar_DoubleWishboneRear_getUprightInertiaProducts(self)

    def getAxleInertia(self):
        r"""getAxleInertia(RCCar_DoubleWishboneRear self) -> double"""
        return _vehicle.RCCar_DoubleWishboneRear_getAxleInertia(self)

    def getSpringRestLength(self):
        r"""getSpringRestLength(RCCar_DoubleWishboneRear self) -> double"""
        return _vehicle.RCCar_DoubleWishboneRear_getSpringRestLength(self)

    def getSpringForceFunctor(self):
        r"""getSpringForceFunctor(RCCar_DoubleWishboneRear self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.RCCar_DoubleWishboneRear_getSpringForceFunctor(self)

    def getShockForceFunctor(self):
        r"""getShockForceFunctor(RCCar_DoubleWishboneRear self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.RCCar_DoubleWishboneRear_getShockForceFunctor(self)

# Register RCCar_DoubleWishboneRear in _vehicle:
_vehicle.RCCar_DoubleWishboneRear_swigregister(RCCar_DoubleWishboneRear)

class FEDA_DoubleWishboneFront(ChDoubleWishbone):
    r"""Proxy of C++ chrono::vehicle::feda::FEDA_DoubleWishboneFront class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, rideHeightMode=2, damperMode=1):
        r"""__init__(FEDA_DoubleWishboneFront self, std::string const & name, int rideHeightMode=2, int damperMode=1) -> FEDA_DoubleWishboneFront"""
        _vehicle.FEDA_DoubleWishboneFront_swiginit(self, _vehicle.new_FEDA_DoubleWishboneFront(name, rideHeightMode, damperMode))
    __swig_destroy__ = _vehicle.delete_FEDA_DoubleWishboneFront

    def getCamberAngle(self):
        r"""getCamberAngle(FEDA_DoubleWishboneFront self) -> double"""
        return _vehicle.FEDA_DoubleWishboneFront_getCamberAngle(self)

    def getToeAngle(self):
        r"""getToeAngle(FEDA_DoubleWishboneFront self) -> double"""
        return _vehicle.FEDA_DoubleWishboneFront_getToeAngle(self)

    def getSpindleMass(self):
        r"""getSpindleMass(FEDA_DoubleWishboneFront self) -> double"""
        return _vehicle.FEDA_DoubleWishboneFront_getSpindleMass(self)

    def getUCAMass(self):
        r"""getUCAMass(FEDA_DoubleWishboneFront self) -> double"""
        return _vehicle.FEDA_DoubleWishboneFront_getUCAMass(self)

    def getLCAMass(self):
        r"""getLCAMass(FEDA_DoubleWishboneFront self) -> double"""
        return _vehicle.FEDA_DoubleWishboneFront_getLCAMass(self)

    def getUprightMass(self):
        r"""getUprightMass(FEDA_DoubleWishboneFront self) -> double"""
        return _vehicle.FEDA_DoubleWishboneFront_getUprightMass(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(FEDA_DoubleWishboneFront self) -> double"""
        return _vehicle.FEDA_DoubleWishboneFront_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(FEDA_DoubleWishboneFront self) -> double"""
        return _vehicle.FEDA_DoubleWishboneFront_getSpindleWidth(self)

    def getUCARadius(self):
        r"""getUCARadius(FEDA_DoubleWishboneFront self) -> double"""
        return _vehicle.FEDA_DoubleWishboneFront_getUCARadius(self)

    def getLCARadius(self):
        r"""getLCARadius(FEDA_DoubleWishboneFront self) -> double"""
        return _vehicle.FEDA_DoubleWishboneFront_getLCARadius(self)

    def getUprightRadius(self):
        r"""getUprightRadius(FEDA_DoubleWishboneFront self) -> double"""
        return _vehicle.FEDA_DoubleWishboneFront_getUprightRadius(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(FEDA_DoubleWishboneFront self) -> ChVectorD"""
        return _vehicle.FEDA_DoubleWishboneFront_getSpindleInertia(self)

    def getUCAInertiaMoments(self):
        r"""getUCAInertiaMoments(FEDA_DoubleWishboneFront self) -> ChVectorD"""
        return _vehicle.FEDA_DoubleWishboneFront_getUCAInertiaMoments(self)

    def getUCAInertiaProducts(self):
        r"""getUCAInertiaProducts(FEDA_DoubleWishboneFront self) -> ChVectorD"""
        return _vehicle.FEDA_DoubleWishboneFront_getUCAInertiaProducts(self)

    def getLCAInertiaMoments(self):
        r"""getLCAInertiaMoments(FEDA_DoubleWishboneFront self) -> ChVectorD"""
        return _vehicle.FEDA_DoubleWishboneFront_getLCAInertiaMoments(self)

    def getLCAInertiaProducts(self):
        r"""getLCAInertiaProducts(FEDA_DoubleWishboneFront self) -> ChVectorD"""
        return _vehicle.FEDA_DoubleWishboneFront_getLCAInertiaProducts(self)

    def getUprightInertiaMoments(self):
        r"""getUprightInertiaMoments(FEDA_DoubleWishboneFront self) -> ChVectorD"""
        return _vehicle.FEDA_DoubleWishboneFront_getUprightInertiaMoments(self)

    def getUprightInertiaProducts(self):
        r"""getUprightInertiaProducts(FEDA_DoubleWishboneFront self) -> ChVectorD"""
        return _vehicle.FEDA_DoubleWishboneFront_getUprightInertiaProducts(self)

    def getAxleInertia(self):
        r"""getAxleInertia(FEDA_DoubleWishboneFront self) -> double"""
        return _vehicle.FEDA_DoubleWishboneFront_getAxleInertia(self)

    def getSpringRestLength(self):
        r"""getSpringRestLength(FEDA_DoubleWishboneFront self) -> double"""
        return _vehicle.FEDA_DoubleWishboneFront_getSpringRestLength(self)

    def getSpringForceFunctor(self):
        r"""getSpringForceFunctor(FEDA_DoubleWishboneFront self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.FEDA_DoubleWishboneFront_getSpringForceFunctor(self)

    def getShockForceFunctor(self):
        r"""getShockForceFunctor(FEDA_DoubleWishboneFront self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.FEDA_DoubleWishboneFront_getShockForceFunctor(self)

    def Initialize(self, chassis, subchassis, steering, location, left_ang_vel=0, right_ang_vel=0):
        r"""Initialize(FEDA_DoubleWishboneFront self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, std::shared_ptr< chrono::vehicle::ChSubchassis > subchassis, std::shared_ptr< chrono::vehicle::ChSteering > steering, ChVectorD location, double left_ang_vel=0, double right_ang_vel=0)"""
        return _vehicle.FEDA_DoubleWishboneFront_Initialize(self, chassis, subchassis, steering, location, left_ang_vel, right_ang_vel)

# Register FEDA_DoubleWishboneFront in _vehicle:
_vehicle.FEDA_DoubleWishboneFront_swigregister(FEDA_DoubleWishboneFront)

class FEDA_DoubleWishboneRear(ChDoubleWishbone):
    r"""Proxy of C++ chrono::vehicle::feda::FEDA_DoubleWishboneRear class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, rideHeightMode=2, damperMode=2):
        r"""__init__(FEDA_DoubleWishboneRear self, std::string const & name, int rideHeightMode=2, int damperMode=2) -> FEDA_DoubleWishboneRear"""
        _vehicle.FEDA_DoubleWishboneRear_swiginit(self, _vehicle.new_FEDA_DoubleWishboneRear(name, rideHeightMode, damperMode))
    __swig_destroy__ = _vehicle.delete_FEDA_DoubleWishboneRear

    def getCamberAngle(self):
        r"""getCamberAngle(FEDA_DoubleWishboneRear self) -> double"""
        return _vehicle.FEDA_DoubleWishboneRear_getCamberAngle(self)

    def getToeAngle(self):
        r"""getToeAngle(FEDA_DoubleWishboneRear self) -> double"""
        return _vehicle.FEDA_DoubleWishboneRear_getToeAngle(self)

    def getSpindleMass(self):
        r"""getSpindleMass(FEDA_DoubleWishboneRear self) -> double"""
        return _vehicle.FEDA_DoubleWishboneRear_getSpindleMass(self)

    def getUCAMass(self):
        r"""getUCAMass(FEDA_DoubleWishboneRear self) -> double"""
        return _vehicle.FEDA_DoubleWishboneRear_getUCAMass(self)

    def getLCAMass(self):
        r"""getLCAMass(FEDA_DoubleWishboneRear self) -> double"""
        return _vehicle.FEDA_DoubleWishboneRear_getLCAMass(self)

    def getUprightMass(self):
        r"""getUprightMass(FEDA_DoubleWishboneRear self) -> double"""
        return _vehicle.FEDA_DoubleWishboneRear_getUprightMass(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(FEDA_DoubleWishboneRear self) -> double"""
        return _vehicle.FEDA_DoubleWishboneRear_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(FEDA_DoubleWishboneRear self) -> double"""
        return _vehicle.FEDA_DoubleWishboneRear_getSpindleWidth(self)

    def getUCARadius(self):
        r"""getUCARadius(FEDA_DoubleWishboneRear self) -> double"""
        return _vehicle.FEDA_DoubleWishboneRear_getUCARadius(self)

    def getLCARadius(self):
        r"""getLCARadius(FEDA_DoubleWishboneRear self) -> double"""
        return _vehicle.FEDA_DoubleWishboneRear_getLCARadius(self)

    def getUprightRadius(self):
        r"""getUprightRadius(FEDA_DoubleWishboneRear self) -> double"""
        return _vehicle.FEDA_DoubleWishboneRear_getUprightRadius(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(FEDA_DoubleWishboneRear self) -> ChVectorD"""
        return _vehicle.FEDA_DoubleWishboneRear_getSpindleInertia(self)

    def getUCAInertiaMoments(self):
        r"""getUCAInertiaMoments(FEDA_DoubleWishboneRear self) -> ChVectorD"""
        return _vehicle.FEDA_DoubleWishboneRear_getUCAInertiaMoments(self)

    def getUCAInertiaProducts(self):
        r"""getUCAInertiaProducts(FEDA_DoubleWishboneRear self) -> ChVectorD"""
        return _vehicle.FEDA_DoubleWishboneRear_getUCAInertiaProducts(self)

    def getLCAInertiaMoments(self):
        r"""getLCAInertiaMoments(FEDA_DoubleWishboneRear self) -> ChVectorD"""
        return _vehicle.FEDA_DoubleWishboneRear_getLCAInertiaMoments(self)

    def getLCAInertiaProducts(self):
        r"""getLCAInertiaProducts(FEDA_DoubleWishboneRear self) -> ChVectorD"""
        return _vehicle.FEDA_DoubleWishboneRear_getLCAInertiaProducts(self)

    def getUprightInertiaMoments(self):
        r"""getUprightInertiaMoments(FEDA_DoubleWishboneRear self) -> ChVectorD"""
        return _vehicle.FEDA_DoubleWishboneRear_getUprightInertiaMoments(self)

    def getUprightInertiaProducts(self):
        r"""getUprightInertiaProducts(FEDA_DoubleWishboneRear self) -> ChVectorD"""
        return _vehicle.FEDA_DoubleWishboneRear_getUprightInertiaProducts(self)

    def getAxleInertia(self):
        r"""getAxleInertia(FEDA_DoubleWishboneRear self) -> double"""
        return _vehicle.FEDA_DoubleWishboneRear_getAxleInertia(self)

    def getSpringRestLength(self):
        r"""getSpringRestLength(FEDA_DoubleWishboneRear self) -> double"""
        return _vehicle.FEDA_DoubleWishboneRear_getSpringRestLength(self)

    def getSpringForceFunctor(self):
        r"""getSpringForceFunctor(FEDA_DoubleWishboneRear self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.FEDA_DoubleWishboneRear_getSpringForceFunctor(self)

    def getShockForceFunctor(self):
        r"""getShockForceFunctor(FEDA_DoubleWishboneRear self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.FEDA_DoubleWishboneRear_getShockForceFunctor(self)

    def Initialize(self, chassis, subchassis, steering, location, left_ang_vel=0, right_ang_vel=0):
        r"""Initialize(FEDA_DoubleWishboneRear self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, std::shared_ptr< chrono::vehicle::ChSubchassis > subchassis, std::shared_ptr< chrono::vehicle::ChSteering > steering, ChVectorD location, double left_ang_vel=0, double right_ang_vel=0)"""
        return _vehicle.FEDA_DoubleWishboneRear_Initialize(self, chassis, subchassis, steering, location, left_ang_vel, right_ang_vel)

# Register FEDA_DoubleWishboneRear in _vehicle:
_vehicle.FEDA_DoubleWishboneRear_swigregister(FEDA_DoubleWishboneRear)

class ChDriveline(ChPart):
    r"""Proxy of C++ chrono::vehicle::ChDriveline class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChDriveline

    def Initialize(self, chassis):
        r"""Initialize(ChDriveline self, std::shared_ptr< chrono::vehicle::ChChassis > chassis)"""
        return _vehicle.ChDriveline_Initialize(self, chassis)

    def Synchronize(self, time, driver_inputs, driveshaft_torque):
        r"""Synchronize(ChDriveline self, double time, DriverInputs driver_inputs, double driveshaft_torque)"""
        return _vehicle.ChDriveline_Synchronize(self, time, driver_inputs, driveshaft_torque)

    def Disconnect(self):
        r"""Disconnect(ChDriveline self)"""
        return _vehicle.ChDriveline_Disconnect(self)

    def GetOutputDriveshaftSpeed(self):
        r"""GetOutputDriveshaftSpeed(ChDriveline self) -> double"""
        return _vehicle.ChDriveline_GetOutputDriveshaftSpeed(self)

# Register ChDriveline in _vehicle:
_vehicle.ChDriveline_swigregister(ChDriveline)

class ChDrivelineWV(ChDriveline):
    r"""Proxy of C++ chrono::vehicle::ChDrivelineWV class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChDrivelineWV

    def GetNumDrivenAxles(self):
        r"""GetNumDrivenAxles(ChDrivelineWV self) -> int"""
        return _vehicle.ChDrivelineWV_GetNumDrivenAxles(self)

    def Initialize(self, chassis, axles, driven_axles):
        r"""Initialize(ChDrivelineWV self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, ChAxleList axles, vector_int driven_axles)"""
        return _vehicle.ChDrivelineWV_Initialize(self, chassis, axles, driven_axles)

    def LockAxleDifferential(self, axle, lock):
        r"""LockAxleDifferential(ChDrivelineWV self, int axle, bool lock)"""
        return _vehicle.ChDrivelineWV_LockAxleDifferential(self, axle, lock)

    def LockCentralDifferential(self, which, lock):
        r"""LockCentralDifferential(ChDrivelineWV self, int which, bool lock)"""
        return _vehicle.ChDrivelineWV_LockCentralDifferential(self, which, lock)

    def GetDrivenAxleIndexes(self):
        r"""GetDrivenAxleIndexes(ChDrivelineWV self) -> vector_int"""
        return _vehicle.ChDrivelineWV_GetDrivenAxleIndexes(self)

    def GetSpindleTorque(self, axle, side):
        r"""GetSpindleTorque(ChDrivelineWV self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChDrivelineWV_GetSpindleTorque(self, axle, side)

# Register ChDrivelineWV in _vehicle:
_vehicle.ChDrivelineWV_swigregister(ChDrivelineWV)

class ChShaftsDriveline2WD(ChDrivelineWV):
    r"""Proxy of C++ chrono::vehicle::ChShaftsDriveline2WD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChShaftsDriveline2WD

    def GetTemplateName(self):
        r"""GetTemplateName(ChShaftsDriveline2WD self) -> std::string"""
        return _vehicle.ChShaftsDriveline2WD_GetTemplateName(self)

    def SetMotorBlockDirection(self, dir):
        r"""SetMotorBlockDirection(ChShaftsDriveline2WD self, ChVectorD dir)"""
        return _vehicle.ChShaftsDriveline2WD_SetMotorBlockDirection(self, dir)

    def SetAxleDirection(self, dir):
        r"""SetAxleDirection(ChShaftsDriveline2WD self, ChVectorD dir)"""
        return _vehicle.ChShaftsDriveline2WD_SetAxleDirection(self, dir)

    def LockAxleDifferential(self, axle, lock):
        r"""LockAxleDifferential(ChShaftsDriveline2WD self, int axle, bool lock)"""
        return _vehicle.ChShaftsDriveline2WD_LockAxleDifferential(self, axle, lock)

    def LockCentralDifferential(self, which, lock):
        r"""LockCentralDifferential(ChShaftsDriveline2WD self, int which, bool lock)"""
        return _vehicle.ChShaftsDriveline2WD_LockCentralDifferential(self, which, lock)

    def GetNumDrivenAxles(self):
        r"""GetNumDrivenAxles(ChShaftsDriveline2WD self) -> int"""
        return _vehicle.ChShaftsDriveline2WD_GetNumDrivenAxles(self)

    def Initialize(self, chassis, axles, driven_axles):
        r"""Initialize(ChShaftsDriveline2WD self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, ChAxleList axles, vector_int driven_axles)"""
        return _vehicle.ChShaftsDriveline2WD_Initialize(self, chassis, axles, driven_axles)

    def Synchronize(self, time, driver_inputs, driveshaft_torque):
        r"""Synchronize(ChShaftsDriveline2WD self, double time, DriverInputs driver_inputs, double driveshaft_torque)"""
        return _vehicle.ChShaftsDriveline2WD_Synchronize(self, time, driver_inputs, driveshaft_torque)

    def GetSpindleTorque(self, axle, side):
        r"""GetSpindleTorque(ChShaftsDriveline2WD self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChShaftsDriveline2WD_GetSpindleTorque(self, axle, side)

    def Disconnect(self):
        r"""Disconnect(ChShaftsDriveline2WD self)"""
        return _vehicle.ChShaftsDriveline2WD_Disconnect(self)

    def GetOutputDriveshaftSpeed(self):
        r"""GetOutputDriveshaftSpeed(ChShaftsDriveline2WD self) -> double"""
        return _vehicle.ChShaftsDriveline2WD_GetOutputDriveshaftSpeed(self)

# Register ChShaftsDriveline2WD in _vehicle:
_vehicle.ChShaftsDriveline2WD_swigregister(ChShaftsDriveline2WD)

class ChShaftsDriveline4WD(ChDrivelineWV):
    r"""Proxy of C++ chrono::vehicle::ChShaftsDriveline4WD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChShaftsDriveline4WD

    def GetTemplateName(self):
        r"""GetTemplateName(ChShaftsDriveline4WD self) -> std::string"""
        return _vehicle.ChShaftsDriveline4WD_GetTemplateName(self)

    def SetMotorBlockDirection(self, dir):
        r"""SetMotorBlockDirection(ChShaftsDriveline4WD self, ChVectorD dir)"""
        return _vehicle.ChShaftsDriveline4WD_SetMotorBlockDirection(self, dir)

    def SetAxleDirection(self, dir):
        r"""SetAxleDirection(ChShaftsDriveline4WD self, ChVectorD dir)"""
        return _vehicle.ChShaftsDriveline4WD_SetAxleDirection(self, dir)

    def LockAxleDifferential(self, axle, lock):
        r"""LockAxleDifferential(ChShaftsDriveline4WD self, int axle, bool lock)"""
        return _vehicle.ChShaftsDriveline4WD_LockAxleDifferential(self, axle, lock)

    def LockCentralDifferential(self, which, lock):
        r"""LockCentralDifferential(ChShaftsDriveline4WD self, int which, bool lock)"""
        return _vehicle.ChShaftsDriveline4WD_LockCentralDifferential(self, which, lock)

    def GetNumDrivenAxles(self):
        r"""GetNumDrivenAxles(ChShaftsDriveline4WD self) -> int"""
        return _vehicle.ChShaftsDriveline4WD_GetNumDrivenAxles(self)

    def Initialize(self, chassis, axles, driven_axles):
        r"""Initialize(ChShaftsDriveline4WD self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, ChAxleList axles, vector_int driven_axles)"""
        return _vehicle.ChShaftsDriveline4WD_Initialize(self, chassis, axles, driven_axles)

    def Synchronize(self, time, driver_inputs, driveshaft_torque):
        r"""Synchronize(ChShaftsDriveline4WD self, double time, DriverInputs driver_inputs, double driveshaft_torque)"""
        return _vehicle.ChShaftsDriveline4WD_Synchronize(self, time, driver_inputs, driveshaft_torque)

    def GetSpindleTorque(self, axle, side):
        r"""GetSpindleTorque(ChShaftsDriveline4WD self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChShaftsDriveline4WD_GetSpindleTorque(self, axle, side)

    def Disconnect(self):
        r"""Disconnect(ChShaftsDriveline4WD self)"""
        return _vehicle.ChShaftsDriveline4WD_Disconnect(self)

    def GetOutputDriveshaftSpeed(self):
        r"""GetOutputDriveshaftSpeed(ChShaftsDriveline4WD self) -> double"""
        return _vehicle.ChShaftsDriveline4WD_GetOutputDriveshaftSpeed(self)

# Register ChShaftsDriveline4WD in _vehicle:
_vehicle.ChShaftsDriveline4WD_swigregister(ChShaftsDriveline4WD)

class ChSimpleDriveline(ChDrivelineWV):
    r"""Proxy of C++ chrono::vehicle::ChSimpleDriveline class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChSimpleDriveline

    def GetTemplateName(self):
        r"""GetTemplateName(ChSimpleDriveline self) -> std::string"""
        return _vehicle.ChSimpleDriveline_GetTemplateName(self)

    def GetNumDrivenAxles(self):
        r"""GetNumDrivenAxles(ChSimpleDriveline self) -> int"""
        return _vehicle.ChSimpleDriveline_GetNumDrivenAxles(self)

    def Initialize(self, chassis, axles, driven_axles):
        r"""Initialize(ChSimpleDriveline self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, ChAxleList axles, vector_int driven_axles)"""
        return _vehicle.ChSimpleDriveline_Initialize(self, chassis, axles, driven_axles)

    def Synchronize(self, time, driver_inputs, driveshaft_torque):
        r"""Synchronize(ChSimpleDriveline self, double time, DriverInputs driver_inputs, double driveshaft_torque)"""
        return _vehicle.ChSimpleDriveline_Synchronize(self, time, driver_inputs, driveshaft_torque)

    def GetSpindleTorque(self, axle, side):
        r"""GetSpindleTorque(ChSimpleDriveline self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSimpleDriveline_GetSpindleTorque(self, axle, side)

    def Disconnect(self):
        r"""Disconnect(ChSimpleDriveline self)"""
        return _vehicle.ChSimpleDriveline_Disconnect(self)

    def GetOutputDriveshaftSpeed(self):
        r"""GetOutputDriveshaftSpeed(ChSimpleDriveline self) -> double"""
        return _vehicle.ChSimpleDriveline_GetOutputDriveshaftSpeed(self)

# Register ChSimpleDriveline in _vehicle:
_vehicle.ChSimpleDriveline_swigregister(ChSimpleDriveline)

class ChSimpleDrivelineXWD(ChDrivelineWV):
    r"""Proxy of C++ chrono::vehicle::ChSimpleDrivelineXWD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChSimpleDrivelineXWD

    def GetTemplateName(self):
        r"""GetTemplateName(ChSimpleDrivelineXWD self) -> std::string"""
        return _vehicle.ChSimpleDrivelineXWD_GetTemplateName(self)

    def GetNumDrivenAxles(self):
        r"""GetNumDrivenAxles(ChSimpleDrivelineXWD self) -> int"""
        return _vehicle.ChSimpleDrivelineXWD_GetNumDrivenAxles(self)

    def Initialize(self, chassis, axles, driven_axles):
        r"""Initialize(ChSimpleDrivelineXWD self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, ChAxleList axles, vector_int driven_axles)"""
        return _vehicle.ChSimpleDrivelineXWD_Initialize(self, chassis, axles, driven_axles)

    def Synchronize(self, time, driver_inputs, driveshaft_torque):
        r"""Synchronize(ChSimpleDrivelineXWD self, double time, DriverInputs driver_inputs, double driveshaft_torque)"""
        return _vehicle.ChSimpleDrivelineXWD_Synchronize(self, time, driver_inputs, driveshaft_torque)

    def GetSpindleTorque(self, axle, side):
        r"""GetSpindleTorque(ChSimpleDrivelineXWD self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSimpleDrivelineXWD_GetSpindleTorque(self, axle, side)

    def Disconnect(self):
        r"""Disconnect(ChSimpleDrivelineXWD self)"""
        return _vehicle.ChSimpleDrivelineXWD_Disconnect(self)

    def GetOutputDriveshaftSpeed(self):
        r"""GetOutputDriveshaftSpeed(ChSimpleDrivelineXWD self) -> double"""
        return _vehicle.ChSimpleDrivelineXWD_GetOutputDriveshaftSpeed(self)

# Register ChSimpleDrivelineXWD in _vehicle:
_vehicle.ChSimpleDrivelineXWD_swigregister(ChSimpleDrivelineXWD)

class ShaftsDriveline2WD(ChShaftsDriveline2WD):
    r"""Proxy of C++ chrono::vehicle::ShaftsDriveline2WD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ShaftsDriveline2WD self, std::string const & filename) -> ShaftsDriveline2WD
        __init__(ShaftsDriveline2WD self, rapidjson::Document const & d) -> ShaftsDriveline2WD
        """
        _vehicle.ShaftsDriveline2WD_swiginit(self, _vehicle.new_ShaftsDriveline2WD(*args))
    __swig_destroy__ = _vehicle.delete_ShaftsDriveline2WD

    def GetDriveshaftInertia(self):
        r"""GetDriveshaftInertia(ShaftsDriveline2WD self) -> double"""
        return _vehicle.ShaftsDriveline2WD_GetDriveshaftInertia(self)

    def GetDifferentialBoxInertia(self):
        r"""GetDifferentialBoxInertia(ShaftsDriveline2WD self) -> double"""
        return _vehicle.ShaftsDriveline2WD_GetDifferentialBoxInertia(self)

    def GetConicalGearRatio(self):
        r"""GetConicalGearRatio(ShaftsDriveline2WD self) -> double"""
        return _vehicle.ShaftsDriveline2WD_GetConicalGearRatio(self)

    def GetAxleDifferentialLockingLimit(self):
        r"""GetAxleDifferentialLockingLimit(ShaftsDriveline2WD self) -> double"""
        return _vehicle.ShaftsDriveline2WD_GetAxleDifferentialLockingLimit(self)

# Register ShaftsDriveline2WD in _vehicle:
_vehicle.ShaftsDriveline2WD_swigregister(ShaftsDriveline2WD)

class SimpleDriveline(ChSimpleDriveline):
    r"""Proxy of C++ chrono::vehicle::SimpleDriveline class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SimpleDriveline self, std::string const & filename) -> SimpleDriveline
        __init__(SimpleDriveline self, rapidjson::Document const & d) -> SimpleDriveline
        """
        _vehicle.SimpleDriveline_swiginit(self, _vehicle.new_SimpleDriveline(*args))
    __swig_destroy__ = _vehicle.delete_SimpleDriveline

    def GetFrontTorqueFraction(self):
        r"""GetFrontTorqueFraction(SimpleDriveline self) -> double"""
        return _vehicle.SimpleDriveline_GetFrontTorqueFraction(self)

    def GetFrontDifferentialMaxBias(self):
        r"""GetFrontDifferentialMaxBias(SimpleDriveline self) -> double"""
        return _vehicle.SimpleDriveline_GetFrontDifferentialMaxBias(self)

    def GetRearDifferentialMaxBias(self):
        r"""GetRearDifferentialMaxBias(SimpleDriveline self) -> double"""
        return _vehicle.SimpleDriveline_GetRearDifferentialMaxBias(self)

# Register SimpleDriveline in _vehicle:
_vehicle.SimpleDriveline_swigregister(SimpleDriveline)

class ShaftsDriveline4WD(ChShaftsDriveline4WD):
    r"""Proxy of C++ chrono::vehicle::ShaftsDriveline4WD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ShaftsDriveline4WD self, std::string const & filename) -> ShaftsDriveline4WD
        __init__(ShaftsDriveline4WD self, rapidjson::Document const & d) -> ShaftsDriveline4WD
        """
        _vehicle.ShaftsDriveline4WD_swiginit(self, _vehicle.new_ShaftsDriveline4WD(*args))
    __swig_destroy__ = _vehicle.delete_ShaftsDriveline4WD

    def GetCentralDifferentialBoxInertia(self):
        r"""GetCentralDifferentialBoxInertia(ShaftsDriveline4WD self) -> double"""
        return _vehicle.ShaftsDriveline4WD_GetCentralDifferentialBoxInertia(self)

    def GetFrontDifferentialBoxInertia(self):
        r"""GetFrontDifferentialBoxInertia(ShaftsDriveline4WD self) -> double"""
        return _vehicle.ShaftsDriveline4WD_GetFrontDifferentialBoxInertia(self)

    def GetRearDifferentialBoxInertia(self):
        r"""GetRearDifferentialBoxInertia(ShaftsDriveline4WD self) -> double"""
        return _vehicle.ShaftsDriveline4WD_GetRearDifferentialBoxInertia(self)

    def GetDriveshaftInertia(self):
        r"""GetDriveshaftInertia(ShaftsDriveline4WD self) -> double"""
        return _vehicle.ShaftsDriveline4WD_GetDriveshaftInertia(self)

    def GetToFrontDiffShaftInertia(self):
        r"""GetToFrontDiffShaftInertia(ShaftsDriveline4WD self) -> double"""
        return _vehicle.ShaftsDriveline4WD_GetToFrontDiffShaftInertia(self)

    def GetToRearDiffShaftInertia(self):
        r"""GetToRearDiffShaftInertia(ShaftsDriveline4WD self) -> double"""
        return _vehicle.ShaftsDriveline4WD_GetToRearDiffShaftInertia(self)

    def GetFrontConicalGearRatio(self):
        r"""GetFrontConicalGearRatio(ShaftsDriveline4WD self) -> double"""
        return _vehicle.ShaftsDriveline4WD_GetFrontConicalGearRatio(self)

    def GetRearConicalGearRatio(self):
        r"""GetRearConicalGearRatio(ShaftsDriveline4WD self) -> double"""
        return _vehicle.ShaftsDriveline4WD_GetRearConicalGearRatio(self)

    def GetAxleDifferentialLockingLimit(self):
        r"""GetAxleDifferentialLockingLimit(ShaftsDriveline4WD self) -> double"""
        return _vehicle.ShaftsDriveline4WD_GetAxleDifferentialLockingLimit(self)

    def GetCentralDifferentialLockingLimit(self):
        r"""GetCentralDifferentialLockingLimit(ShaftsDriveline4WD self) -> double"""
        return _vehicle.ShaftsDriveline4WD_GetCentralDifferentialLockingLimit(self)

# Register ShaftsDriveline4WD in _vehicle:
_vehicle.ShaftsDriveline4WD_swigregister(ShaftsDriveline4WD)

class SimpleDrivelineXWD(ChSimpleDrivelineXWD):
    r"""Proxy of C++ chrono::vehicle::SimpleDrivelineXWD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SimpleDrivelineXWD self, std::string const & filename) -> SimpleDrivelineXWD
        __init__(SimpleDrivelineXWD self, rapidjson::Document const & d) -> SimpleDrivelineXWD
        """
        _vehicle.SimpleDrivelineXWD_swiginit(self, _vehicle.new_SimpleDrivelineXWD(*args))
    __swig_destroy__ = _vehicle.delete_SimpleDrivelineXWD

    def GetDifferentialMaxBias(self):
        r"""GetDifferentialMaxBias(SimpleDrivelineXWD self) -> double"""
        return _vehicle.SimpleDrivelineXWD_GetDifferentialMaxBias(self)

# Register SimpleDrivelineXWD in _vehicle:
_vehicle.SimpleDrivelineXWD_swigregister(SimpleDrivelineXWD)

class ChDrivelineTV(ChDriveline):
    r"""Proxy of C++ chrono::vehicle::ChDrivelineTV class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChDrivelineTV

    def GetSprocketTorque(self, side):
        r"""GetSprocketTorque(ChDrivelineTV self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChDrivelineTV_GetSprocketTorque(self, side)

    def GetSprocketSpeed(self, side):
        r"""GetSprocketSpeed(ChDrivelineTV self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChDrivelineTV_GetSprocketSpeed(self, side)

    def SetGyrationMode(self, mode):
        r"""SetGyrationMode(ChDrivelineTV self, bool mode)"""
        return _vehicle.ChDrivelineTV_SetGyrationMode(self, mode)

    def Initialize(self, chassis, track_left, track_right):
        r"""Initialize(ChDrivelineTV self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, std::shared_ptr< chrono::vehicle::ChTrackAssembly > track_left, std::shared_ptr< chrono::vehicle::ChTrackAssembly > track_right)"""
        return _vehicle.ChDrivelineTV_Initialize(self, chassis, track_left, track_right)

    def LockDifferential(self, lock):
        r"""LockDifferential(ChDrivelineTV self, bool lock)"""
        return _vehicle.ChDrivelineTV_LockDifferential(self, lock)

# Register ChDrivelineTV in _vehicle:
_vehicle.ChDrivelineTV_swigregister(ChDrivelineTV)

class ChSimpleTrackDriveline(ChDrivelineTV):
    r"""Proxy of C++ chrono::vehicle::ChSimpleTrackDriveline class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChSimpleTrackDriveline

    def GetTemplateName(self):
        r"""GetTemplateName(ChSimpleTrackDriveline self) -> std::string"""
        return _vehicle.ChSimpleTrackDriveline_GetTemplateName(self)

    def Initialize(self, chassis, track_left, track_right):
        r"""Initialize(ChSimpleTrackDriveline self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, std::shared_ptr< chrono::vehicle::ChTrackAssembly > track_left, std::shared_ptr< chrono::vehicle::ChTrackAssembly > track_right)"""
        return _vehicle.ChSimpleTrackDriveline_Initialize(self, chassis, track_left, track_right)

    def Synchronize(self, time, driver_inputs, driveshaft_torque):
        r"""Synchronize(ChSimpleTrackDriveline self, double time, DriverInputs driver_inputs, double driveshaft_torque)"""
        return _vehicle.ChSimpleTrackDriveline_Synchronize(self, time, driver_inputs, driveshaft_torque)

    def GetSprocketTorque(self, side):
        r"""GetSprocketTorque(ChSimpleTrackDriveline self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSimpleTrackDriveline_GetSprocketTorque(self, side)

    def GetSprocketSpeed(self, side):
        r"""GetSprocketSpeed(ChSimpleTrackDriveline self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSimpleTrackDriveline_GetSprocketSpeed(self, side)

    def Disconnect(self):
        r"""Disconnect(ChSimpleTrackDriveline self)"""
        return _vehicle.ChSimpleTrackDriveline_Disconnect(self)

    def GetOutputDriveshaftSpeed(self):
        r"""GetOutputDriveshaftSpeed(ChSimpleTrackDriveline self) -> double"""
        return _vehicle.ChSimpleTrackDriveline_GetOutputDriveshaftSpeed(self)

# Register ChSimpleTrackDriveline in _vehicle:
_vehicle.ChSimpleTrackDriveline_swigregister(ChSimpleTrackDriveline)

class ChTrackDrivelineBDS(ChDrivelineTV):
    r"""Proxy of C++ chrono::vehicle::ChTrackDrivelineBDS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChTrackDrivelineBDS

    def GetTemplateName(self):
        r"""GetTemplateName(ChTrackDrivelineBDS self) -> std::string"""
        return _vehicle.ChTrackDrivelineBDS_GetTemplateName(self)

    def SetMotorBlockDirection(self, dir):
        r"""SetMotorBlockDirection(ChTrackDrivelineBDS self, ChVectorD dir)"""
        return _vehicle.ChTrackDrivelineBDS_SetMotorBlockDirection(self, dir)

    def SetAxleDirection(self, dir):
        r"""SetAxleDirection(ChTrackDrivelineBDS self, ChVectorD dir)"""
        return _vehicle.ChTrackDrivelineBDS_SetAxleDirection(self, dir)

    def LockDifferential(self, lock):
        r"""LockDifferential(ChTrackDrivelineBDS self, bool lock)"""
        return _vehicle.ChTrackDrivelineBDS_LockDifferential(self, lock)

    def Initialize(self, chassis, track_left, track_right):
        r"""Initialize(ChTrackDrivelineBDS self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, std::shared_ptr< chrono::vehicle::ChTrackAssembly > track_left, std::shared_ptr< chrono::vehicle::ChTrackAssembly > track_right)"""
        return _vehicle.ChTrackDrivelineBDS_Initialize(self, chassis, track_left, track_right)

    def Synchronize(self, time, driver_inputs, driveshaft_torque):
        r"""Synchronize(ChTrackDrivelineBDS self, double time, DriverInputs driver_inputs, double driveshaft_torque)"""
        return _vehicle.ChTrackDrivelineBDS_Synchronize(self, time, driver_inputs, driveshaft_torque)

    def GetSprocketTorque(self, side):
        r"""GetSprocketTorque(ChTrackDrivelineBDS self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChTrackDrivelineBDS_GetSprocketTorque(self, side)

    def GetSprocketSpeed(self, side):
        r"""GetSprocketSpeed(ChTrackDrivelineBDS self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChTrackDrivelineBDS_GetSprocketSpeed(self, side)

    def Disconnect(self):
        r"""Disconnect(ChTrackDrivelineBDS self)"""
        return _vehicle.ChTrackDrivelineBDS_Disconnect(self)

    def GetOutputDriveshaftSpeed(self):
        r"""GetOutputDriveshaftSpeed(ChTrackDrivelineBDS self) -> double"""
        return _vehicle.ChTrackDrivelineBDS_GetOutputDriveshaftSpeed(self)

# Register ChTrackDrivelineBDS in _vehicle:
_vehicle.ChTrackDrivelineBDS_swigregister(ChTrackDrivelineBDS)

class SimpleTrackDriveline(ChSimpleTrackDriveline):
    r"""Proxy of C++ chrono::vehicle::SimpleTrackDriveline class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SimpleTrackDriveline self, std::string const & filename) -> SimpleTrackDriveline
        __init__(SimpleTrackDriveline self, rapidjson::Document const & d) -> SimpleTrackDriveline
        """
        _vehicle.SimpleTrackDriveline_swiginit(self, _vehicle.new_SimpleTrackDriveline(*args))
    __swig_destroy__ = _vehicle.delete_SimpleTrackDriveline

    def GetDifferentialMaxBias(self):
        r"""GetDifferentialMaxBias(SimpleTrackDriveline self) -> double"""
        return _vehicle.SimpleTrackDriveline_GetDifferentialMaxBias(self)

# Register SimpleTrackDriveline in _vehicle:
_vehicle.SimpleTrackDriveline_swigregister(SimpleTrackDriveline)

class TrackDrivelineBDS(ChTrackDrivelineBDS):
    r"""Proxy of C++ chrono::vehicle::TrackDrivelineBDS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TrackDrivelineBDS self, std::string const & filename) -> TrackDrivelineBDS
        __init__(TrackDrivelineBDS self, rapidjson::Document const & d) -> TrackDrivelineBDS
        """
        _vehicle.TrackDrivelineBDS_swiginit(self, _vehicle.new_TrackDrivelineBDS(*args))
    __swig_destroy__ = _vehicle.delete_TrackDrivelineBDS

    def GetDriveshaftInertia(self):
        r"""GetDriveshaftInertia(TrackDrivelineBDS self) -> double"""
        return _vehicle.TrackDrivelineBDS_GetDriveshaftInertia(self)

    def GetDifferentialBoxInertia(self):
        r"""GetDifferentialBoxInertia(TrackDrivelineBDS self) -> double"""
        return _vehicle.TrackDrivelineBDS_GetDifferentialBoxInertia(self)

    def GetConicalGearRatio(self):
        r"""GetConicalGearRatio(TrackDrivelineBDS self) -> double"""
        return _vehicle.TrackDrivelineBDS_GetConicalGearRatio(self)

    def GetDifferentialLockingLimit(self):
        r"""GetDifferentialLockingLimit(TrackDrivelineBDS self) -> double"""
        return _vehicle.TrackDrivelineBDS_GetDifferentialLockingLimit(self)

# Register TrackDrivelineBDS in _vehicle:
_vehicle.TrackDrivelineBDS_swigregister(TrackDrivelineBDS)

class Generic_Driveline2WD(ChShaftsDriveline2WD):
    r"""Proxy of C++ chrono::vehicle::generic::Generic_Driveline2WD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Generic_Driveline2WD self, std::string const & name) -> Generic_Driveline2WD"""
        _vehicle.Generic_Driveline2WD_swiginit(self, _vehicle.new_Generic_Driveline2WD(name))
    __swig_destroy__ = _vehicle.delete_Generic_Driveline2WD

    def GetDriveshaftInertia(self):
        r"""GetDriveshaftInertia(Generic_Driveline2WD self) -> double"""
        return _vehicle.Generic_Driveline2WD_GetDriveshaftInertia(self)

    def GetDifferentialBoxInertia(self):
        r"""GetDifferentialBoxInertia(Generic_Driveline2WD self) -> double"""
        return _vehicle.Generic_Driveline2WD_GetDifferentialBoxInertia(self)

    def GetConicalGearRatio(self):
        r"""GetConicalGearRatio(Generic_Driveline2WD self) -> double"""
        return _vehicle.Generic_Driveline2WD_GetConicalGearRatio(self)

    def GetAxleDifferentialLockingLimit(self):
        r"""GetAxleDifferentialLockingLimit(Generic_Driveline2WD self) -> double"""
        return _vehicle.Generic_Driveline2WD_GetAxleDifferentialLockingLimit(self)

# Register Generic_Driveline2WD in _vehicle:
_vehicle.Generic_Driveline2WD_swigregister(Generic_Driveline2WD)

class Generic_SimpleDriveline(ChDrivelineWV):
    r"""Proxy of C++ chrono::vehicle::generic::Generic_SimpleDriveline class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Generic_SimpleDriveline self, std::string const & name) -> Generic_SimpleDriveline"""
        _vehicle.Generic_SimpleDriveline_swiginit(self, _vehicle.new_Generic_SimpleDriveline(name))
    __swig_destroy__ = _vehicle.delete_Generic_SimpleDriveline

    def GetTemplateName(self):
        r"""GetTemplateName(Generic_SimpleDriveline self) -> std::string"""
        return _vehicle.Generic_SimpleDriveline_GetTemplateName(self)

    def GetNumDrivenAxles(self):
        r"""GetNumDrivenAxles(Generic_SimpleDriveline self) -> int"""
        return _vehicle.Generic_SimpleDriveline_GetNumDrivenAxles(self)

    def Initialize(self, chassis, axles, driven_axles):
        r"""Initialize(Generic_SimpleDriveline self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, ChAxleList axles, vector_int driven_axles)"""
        return _vehicle.Generic_SimpleDriveline_Initialize(self, chassis, axles, driven_axles)

    def Synchronize(self, time, driver_inputs, torque):
        r"""Synchronize(Generic_SimpleDriveline self, double time, DriverInputs driver_inputs, double torque)"""
        return _vehicle.Generic_SimpleDriveline_Synchronize(self, time, driver_inputs, torque)

    def GetSpindleTorque(self, axle, side):
        r"""GetSpindleTorque(Generic_SimpleDriveline self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.Generic_SimpleDriveline_GetSpindleTorque(self, axle, side)

    def Disconnect(self):
        r"""Disconnect(Generic_SimpleDriveline self)"""
        return _vehicle.Generic_SimpleDriveline_Disconnect(self)

    def GetOutputDriveshaftSpeed(self):
        r"""GetOutputDriveshaftSpeed(Generic_SimpleDriveline self) -> double"""
        return _vehicle.Generic_SimpleDriveline_GetOutputDriveshaftSpeed(self)

# Register Generic_SimpleDriveline in _vehicle:
_vehicle.Generic_SimpleDriveline_swigregister(Generic_SimpleDriveline)

class HMMWV_Driveline2WD(ChShaftsDriveline2WD):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_Driveline2WD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(HMMWV_Driveline2WD self, std::string const & name) -> HMMWV_Driveline2WD"""
        _vehicle.HMMWV_Driveline2WD_swiginit(self, _vehicle.new_HMMWV_Driveline2WD(name))
    __swig_destroy__ = _vehicle.delete_HMMWV_Driveline2WD

    def GetDriveshaftInertia(self):
        r"""GetDriveshaftInertia(HMMWV_Driveline2WD self) -> double"""
        return _vehicle.HMMWV_Driveline2WD_GetDriveshaftInertia(self)

    def GetDifferentialBoxInertia(self):
        r"""GetDifferentialBoxInertia(HMMWV_Driveline2WD self) -> double"""
        return _vehicle.HMMWV_Driveline2WD_GetDifferentialBoxInertia(self)

    def GetConicalGearRatio(self):
        r"""GetConicalGearRatio(HMMWV_Driveline2WD self) -> double"""
        return _vehicle.HMMWV_Driveline2WD_GetConicalGearRatio(self)

    def GetAxleDifferentialLockingLimit(self):
        r"""GetAxleDifferentialLockingLimit(HMMWV_Driveline2WD self) -> double"""
        return _vehicle.HMMWV_Driveline2WD_GetAxleDifferentialLockingLimit(self)

# Register HMMWV_Driveline2WD in _vehicle:
_vehicle.HMMWV_Driveline2WD_swigregister(HMMWV_Driveline2WD)

class HMMWV_Driveline4WD(ChShaftsDriveline4WD):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_Driveline4WD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(HMMWV_Driveline4WD self, std::string const & name) -> HMMWV_Driveline4WD"""
        _vehicle.HMMWV_Driveline4WD_swiginit(self, _vehicle.new_HMMWV_Driveline4WD(name))
    __swig_destroy__ = _vehicle.delete_HMMWV_Driveline4WD

    def GetCentralDifferentialBoxInertia(self):
        r"""GetCentralDifferentialBoxInertia(HMMWV_Driveline4WD self) -> double"""
        return _vehicle.HMMWV_Driveline4WD_GetCentralDifferentialBoxInertia(self)

    def GetFrontDifferentialBoxInertia(self):
        r"""GetFrontDifferentialBoxInertia(HMMWV_Driveline4WD self) -> double"""
        return _vehicle.HMMWV_Driveline4WD_GetFrontDifferentialBoxInertia(self)

    def GetRearDifferentialBoxInertia(self):
        r"""GetRearDifferentialBoxInertia(HMMWV_Driveline4WD self) -> double"""
        return _vehicle.HMMWV_Driveline4WD_GetRearDifferentialBoxInertia(self)

    def GetDriveshaftInertia(self):
        r"""GetDriveshaftInertia(HMMWV_Driveline4WD self) -> double"""
        return _vehicle.HMMWV_Driveline4WD_GetDriveshaftInertia(self)

    def GetToFrontDiffShaftInertia(self):
        r"""GetToFrontDiffShaftInertia(HMMWV_Driveline4WD self) -> double"""
        return _vehicle.HMMWV_Driveline4WD_GetToFrontDiffShaftInertia(self)

    def GetToRearDiffShaftInertia(self):
        r"""GetToRearDiffShaftInertia(HMMWV_Driveline4WD self) -> double"""
        return _vehicle.HMMWV_Driveline4WD_GetToRearDiffShaftInertia(self)

    def GetFrontConicalGearRatio(self):
        r"""GetFrontConicalGearRatio(HMMWV_Driveline4WD self) -> double"""
        return _vehicle.HMMWV_Driveline4WD_GetFrontConicalGearRatio(self)

    def GetRearConicalGearRatio(self):
        r"""GetRearConicalGearRatio(HMMWV_Driveline4WD self) -> double"""
        return _vehicle.HMMWV_Driveline4WD_GetRearConicalGearRatio(self)

    def GetAxleDifferentialLockingLimit(self):
        r"""GetAxleDifferentialLockingLimit(HMMWV_Driveline4WD self) -> double"""
        return _vehicle.HMMWV_Driveline4WD_GetAxleDifferentialLockingLimit(self)

    def GetCentralDifferentialLockingLimit(self):
        r"""GetCentralDifferentialLockingLimit(HMMWV_Driveline4WD self) -> double"""
        return _vehicle.HMMWV_Driveline4WD_GetCentralDifferentialLockingLimit(self)

# Register HMMWV_Driveline4WD in _vehicle:
_vehicle.HMMWV_Driveline4WD_swigregister(HMMWV_Driveline4WD)

class HMMWV_SimpleDriveline(ChSimpleDriveline):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_SimpleDriveline class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(HMMWV_SimpleDriveline self, std::string const & name) -> HMMWV_SimpleDriveline"""
        _vehicle.HMMWV_SimpleDriveline_swiginit(self, _vehicle.new_HMMWV_SimpleDriveline(name))
    __swig_destroy__ = _vehicle.delete_HMMWV_SimpleDriveline

    def GetFrontTorqueFraction(self):
        r"""GetFrontTorqueFraction(HMMWV_SimpleDriveline self) -> double"""
        return _vehicle.HMMWV_SimpleDriveline_GetFrontTorqueFraction(self)

    def GetFrontDifferentialMaxBias(self):
        r"""GetFrontDifferentialMaxBias(HMMWV_SimpleDriveline self) -> double"""
        return _vehicle.HMMWV_SimpleDriveline_GetFrontDifferentialMaxBias(self)

    def GetRearDifferentialMaxBias(self):
        r"""GetRearDifferentialMaxBias(HMMWV_SimpleDriveline self) -> double"""
        return _vehicle.HMMWV_SimpleDriveline_GetRearDifferentialMaxBias(self)

# Register HMMWV_SimpleDriveline in _vehicle:
_vehicle.HMMWV_SimpleDriveline_swigregister(HMMWV_SimpleDriveline)

class Sedan_Driveline2WD(ChShaftsDriveline2WD):
    r"""Proxy of C++ chrono::vehicle::sedan::Sedan_Driveline2WD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Sedan_Driveline2WD self, std::string const & name) -> Sedan_Driveline2WD"""
        _vehicle.Sedan_Driveline2WD_swiginit(self, _vehicle.new_Sedan_Driveline2WD(name))
    __swig_destroy__ = _vehicle.delete_Sedan_Driveline2WD

    def GetDriveshaftInertia(self):
        r"""GetDriveshaftInertia(Sedan_Driveline2WD self) -> double"""
        return _vehicle.Sedan_Driveline2WD_GetDriveshaftInertia(self)

    def GetDifferentialBoxInertia(self):
        r"""GetDifferentialBoxInertia(Sedan_Driveline2WD self) -> double"""
        return _vehicle.Sedan_Driveline2WD_GetDifferentialBoxInertia(self)

    def GetConicalGearRatio(self):
        r"""GetConicalGearRatio(Sedan_Driveline2WD self) -> double"""
        return _vehicle.Sedan_Driveline2WD_GetConicalGearRatio(self)

    def GetAxleDifferentialLockingLimit(self):
        r"""GetAxleDifferentialLockingLimit(Sedan_Driveline2WD self) -> double"""
        return _vehicle.Sedan_Driveline2WD_GetAxleDifferentialLockingLimit(self)

# Register Sedan_Driveline2WD in _vehicle:
_vehicle.Sedan_Driveline2WD_swigregister(Sedan_Driveline2WD)

class CityBus_Driveline2WD(ChShaftsDriveline2WD):
    r"""Proxy of C++ chrono::vehicle::citybus::CityBus_Driveline2WD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(CityBus_Driveline2WD self, std::string const & name) -> CityBus_Driveline2WD"""
        _vehicle.CityBus_Driveline2WD_swiginit(self, _vehicle.new_CityBus_Driveline2WD(name))
    __swig_destroy__ = _vehicle.delete_CityBus_Driveline2WD

    def GetDriveshaftInertia(self):
        r"""GetDriveshaftInertia(CityBus_Driveline2WD self) -> double"""
        return _vehicle.CityBus_Driveline2WD_GetDriveshaftInertia(self)

    def GetDifferentialBoxInertia(self):
        r"""GetDifferentialBoxInertia(CityBus_Driveline2WD self) -> double"""
        return _vehicle.CityBus_Driveline2WD_GetDifferentialBoxInertia(self)

    def GetConicalGearRatio(self):
        r"""GetConicalGearRatio(CityBus_Driveline2WD self) -> double"""
        return _vehicle.CityBus_Driveline2WD_GetConicalGearRatio(self)

    def GetAxleDifferentialLockingLimit(self):
        r"""GetAxleDifferentialLockingLimit(CityBus_Driveline2WD self) -> double"""
        return _vehicle.CityBus_Driveline2WD_GetAxleDifferentialLockingLimit(self)

# Register CityBus_Driveline2WD in _vehicle:
_vehicle.CityBus_Driveline2WD_swigregister(CityBus_Driveline2WD)

class MAN_5t_SimpleDriveline(ChSimpleDriveline):
    r"""Proxy of C++ chrono::vehicle::man::MAN_5t_SimpleDriveline class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(MAN_5t_SimpleDriveline self, std::string const & name) -> MAN_5t_SimpleDriveline"""
        _vehicle.MAN_5t_SimpleDriveline_swiginit(self, _vehicle.new_MAN_5t_SimpleDriveline(name))
    __swig_destroy__ = _vehicle.delete_MAN_5t_SimpleDriveline

    def GetFrontTorqueFraction(self):
        r"""GetFrontTorqueFraction(MAN_5t_SimpleDriveline self) -> double"""
        return _vehicle.MAN_5t_SimpleDriveline_GetFrontTorqueFraction(self)

    def GetFrontDifferentialMaxBias(self):
        r"""GetFrontDifferentialMaxBias(MAN_5t_SimpleDriveline self) -> double"""
        return _vehicle.MAN_5t_SimpleDriveline_GetFrontDifferentialMaxBias(self)

    def GetRearDifferentialMaxBias(self):
        r"""GetRearDifferentialMaxBias(MAN_5t_SimpleDriveline self) -> double"""
        return _vehicle.MAN_5t_SimpleDriveline_GetRearDifferentialMaxBias(self)

# Register MAN_5t_SimpleDriveline in _vehicle:
_vehicle.MAN_5t_SimpleDriveline_swigregister(MAN_5t_SimpleDriveline)

class MAN_5t_SimpleDrivelineXWD(ChSimpleDrivelineXWD):
    r"""Proxy of C++ chrono::vehicle::man::MAN_5t_SimpleDrivelineXWD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(MAN_5t_SimpleDrivelineXWD self, std::string const & name) -> MAN_5t_SimpleDrivelineXWD"""
        _vehicle.MAN_5t_SimpleDrivelineXWD_swiginit(self, _vehicle.new_MAN_5t_SimpleDrivelineXWD(name))
    __swig_destroy__ = _vehicle.delete_MAN_5t_SimpleDrivelineXWD

    def GetDifferentialMaxBias(self):
        r"""GetDifferentialMaxBias(MAN_5t_SimpleDrivelineXWD self) -> double"""
        return _vehicle.MAN_5t_SimpleDrivelineXWD_GetDifferentialMaxBias(self)

# Register MAN_5t_SimpleDrivelineXWD in _vehicle:
_vehicle.MAN_5t_SimpleDrivelineXWD_swigregister(MAN_5t_SimpleDrivelineXWD)

class UAZBUS_Driveline2WD(ChShaftsDriveline2WD):
    r"""Proxy of C++ chrono::vehicle::uaz::UAZBUS_Driveline2WD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(UAZBUS_Driveline2WD self, std::string const & name) -> UAZBUS_Driveline2WD"""
        _vehicle.UAZBUS_Driveline2WD_swiginit(self, _vehicle.new_UAZBUS_Driveline2WD(name))
    __swig_destroy__ = _vehicle.delete_UAZBUS_Driveline2WD

    def GetDriveshaftInertia(self):
        r"""GetDriveshaftInertia(UAZBUS_Driveline2WD self) -> double"""
        return _vehicle.UAZBUS_Driveline2WD_GetDriveshaftInertia(self)

    def GetDifferentialBoxInertia(self):
        r"""GetDifferentialBoxInertia(UAZBUS_Driveline2WD self) -> double"""
        return _vehicle.UAZBUS_Driveline2WD_GetDifferentialBoxInertia(self)

    def GetConicalGearRatio(self):
        r"""GetConicalGearRatio(UAZBUS_Driveline2WD self) -> double"""
        return _vehicle.UAZBUS_Driveline2WD_GetConicalGearRatio(self)

    def GetAxleDifferentialLockingLimit(self):
        r"""GetAxleDifferentialLockingLimit(UAZBUS_Driveline2WD self) -> double"""
        return _vehicle.UAZBUS_Driveline2WD_GetAxleDifferentialLockingLimit(self)

# Register UAZBUS_Driveline2WD in _vehicle:
_vehicle.UAZBUS_Driveline2WD_swigregister(UAZBUS_Driveline2WD)

class UAZBUS_Driveline4WD(ChShaftsDriveline4WD):
    r"""Proxy of C++ chrono::vehicle::uaz::UAZBUS_Driveline4WD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(UAZBUS_Driveline4WD self, std::string const & name) -> UAZBUS_Driveline4WD"""
        _vehicle.UAZBUS_Driveline4WD_swiginit(self, _vehicle.new_UAZBUS_Driveline4WD(name))
    __swig_destroy__ = _vehicle.delete_UAZBUS_Driveline4WD

    def GetCentralDifferentialBoxInertia(self):
        r"""GetCentralDifferentialBoxInertia(UAZBUS_Driveline4WD self) -> double"""
        return _vehicle.UAZBUS_Driveline4WD_GetCentralDifferentialBoxInertia(self)

    def GetFrontDifferentialBoxInertia(self):
        r"""GetFrontDifferentialBoxInertia(UAZBUS_Driveline4WD self) -> double"""
        return _vehicle.UAZBUS_Driveline4WD_GetFrontDifferentialBoxInertia(self)

    def GetRearDifferentialBoxInertia(self):
        r"""GetRearDifferentialBoxInertia(UAZBUS_Driveline4WD self) -> double"""
        return _vehicle.UAZBUS_Driveline4WD_GetRearDifferentialBoxInertia(self)

    def GetDriveshaftInertia(self):
        r"""GetDriveshaftInertia(UAZBUS_Driveline4WD self) -> double"""
        return _vehicle.UAZBUS_Driveline4WD_GetDriveshaftInertia(self)

    def GetToFrontDiffShaftInertia(self):
        r"""GetToFrontDiffShaftInertia(UAZBUS_Driveline4WD self) -> double"""
        return _vehicle.UAZBUS_Driveline4WD_GetToFrontDiffShaftInertia(self)

    def GetToRearDiffShaftInertia(self):
        r"""GetToRearDiffShaftInertia(UAZBUS_Driveline4WD self) -> double"""
        return _vehicle.UAZBUS_Driveline4WD_GetToRearDiffShaftInertia(self)

    def GetFrontConicalGearRatio(self):
        r"""GetFrontConicalGearRatio(UAZBUS_Driveline4WD self) -> double"""
        return _vehicle.UAZBUS_Driveline4WD_GetFrontConicalGearRatio(self)

    def GetRearConicalGearRatio(self):
        r"""GetRearConicalGearRatio(UAZBUS_Driveline4WD self) -> double"""
        return _vehicle.UAZBUS_Driveline4WD_GetRearConicalGearRatio(self)

    def GetAxleDifferentialLockingLimit(self):
        r"""GetAxleDifferentialLockingLimit(UAZBUS_Driveline4WD self) -> double"""
        return _vehicle.UAZBUS_Driveline4WD_GetAxleDifferentialLockingLimit(self)

    def GetCentralDifferentialLockingLimit(self):
        r"""GetCentralDifferentialLockingLimit(UAZBUS_Driveline4WD self) -> double"""
        return _vehicle.UAZBUS_Driveline4WD_GetCentralDifferentialLockingLimit(self)

# Register UAZBUS_Driveline4WD in _vehicle:
_vehicle.UAZBUS_Driveline4WD_swigregister(UAZBUS_Driveline4WD)

class Gator_SimpleDriveline(ChDrivelineWV):
    r"""Proxy of C++ chrono::vehicle::gator::Gator_SimpleDriveline class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Gator_SimpleDriveline self, std::string const & name) -> Gator_SimpleDriveline"""
        _vehicle.Gator_SimpleDriveline_swiginit(self, _vehicle.new_Gator_SimpleDriveline(name))
    __swig_destroy__ = _vehicle.delete_Gator_SimpleDriveline

    def GetTemplateName(self):
        r"""GetTemplateName(Gator_SimpleDriveline self) -> std::string"""
        return _vehicle.Gator_SimpleDriveline_GetTemplateName(self)

    def GetNumDrivenAxles(self):
        r"""GetNumDrivenAxles(Gator_SimpleDriveline self) -> int"""
        return _vehicle.Gator_SimpleDriveline_GetNumDrivenAxles(self)

    def Initialize(self, chassis, axles, driven_axles):
        r"""Initialize(Gator_SimpleDriveline self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, ChAxleList axles, vector_int driven_axles)"""
        return _vehicle.Gator_SimpleDriveline_Initialize(self, chassis, axles, driven_axles)

    def Synchronize(self, time, driver_inputs, torque):
        r"""Synchronize(Gator_SimpleDriveline self, double time, DriverInputs driver_inputs, double torque)"""
        return _vehicle.Gator_SimpleDriveline_Synchronize(self, time, driver_inputs, torque)

    def GetSpindleTorque(self, axle, side):
        r"""GetSpindleTorque(Gator_SimpleDriveline self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.Gator_SimpleDriveline_GetSpindleTorque(self, axle, side)

    def Disconnect(self):
        r"""Disconnect(Gator_SimpleDriveline self)"""
        return _vehicle.Gator_SimpleDriveline_Disconnect(self)

    def GetOutputDriveshaftSpeed(self):
        r"""GetOutputDriveshaftSpeed(Gator_SimpleDriveline self) -> double"""
        return _vehicle.Gator_SimpleDriveline_GetOutputDriveshaftSpeed(self)

# Register Gator_SimpleDriveline in _vehicle:
_vehicle.Gator_SimpleDriveline_swigregister(Gator_SimpleDriveline)

class Gator_Driveline2WD(ChShaftsDriveline2WD):
    r"""Proxy of C++ chrono::vehicle::gator::Gator_Driveline2WD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Gator_Driveline2WD self, std::string const & name) -> Gator_Driveline2WD"""
        _vehicle.Gator_Driveline2WD_swiginit(self, _vehicle.new_Gator_Driveline2WD(name))
    __swig_destroy__ = _vehicle.delete_Gator_Driveline2WD

    def GetDriveshaftInertia(self):
        r"""GetDriveshaftInertia(Gator_Driveline2WD self) -> double"""
        return _vehicle.Gator_Driveline2WD_GetDriveshaftInertia(self)

    def GetDifferentialBoxInertia(self):
        r"""GetDifferentialBoxInertia(Gator_Driveline2WD self) -> double"""
        return _vehicle.Gator_Driveline2WD_GetDifferentialBoxInertia(self)

    def GetConicalGearRatio(self):
        r"""GetConicalGearRatio(Gator_Driveline2WD self) -> double"""
        return _vehicle.Gator_Driveline2WD_GetConicalGearRatio(self)

    def GetAxleDifferentialLockingLimit(self):
        r"""GetAxleDifferentialLockingLimit(Gator_Driveline2WD self) -> double"""
        return _vehicle.Gator_Driveline2WD_GetAxleDifferentialLockingLimit(self)

# Register Gator_Driveline2WD in _vehicle:
_vehicle.Gator_Driveline2WD_swigregister(Gator_Driveline2WD)

class RCCar_Driveline4WD(ChShaftsDriveline4WD):
    r"""Proxy of C++ chrono::vehicle::rccar::RCCar_Driveline4WD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(RCCar_Driveline4WD self, std::string const & name) -> RCCar_Driveline4WD"""
        _vehicle.RCCar_Driveline4WD_swiginit(self, _vehicle.new_RCCar_Driveline4WD(name))
    __swig_destroy__ = _vehicle.delete_RCCar_Driveline4WD

    def GetCentralDifferentialBoxInertia(self):
        r"""GetCentralDifferentialBoxInertia(RCCar_Driveline4WD self) -> double"""
        return _vehicle.RCCar_Driveline4WD_GetCentralDifferentialBoxInertia(self)

    def GetFrontDifferentialBoxInertia(self):
        r"""GetFrontDifferentialBoxInertia(RCCar_Driveline4WD self) -> double"""
        return _vehicle.RCCar_Driveline4WD_GetFrontDifferentialBoxInertia(self)

    def GetRearDifferentialBoxInertia(self):
        r"""GetRearDifferentialBoxInertia(RCCar_Driveline4WD self) -> double"""
        return _vehicle.RCCar_Driveline4WD_GetRearDifferentialBoxInertia(self)

    def GetDriveshaftInertia(self):
        r"""GetDriveshaftInertia(RCCar_Driveline4WD self) -> double"""
        return _vehicle.RCCar_Driveline4WD_GetDriveshaftInertia(self)

    def GetToFrontDiffShaftInertia(self):
        r"""GetToFrontDiffShaftInertia(RCCar_Driveline4WD self) -> double"""
        return _vehicle.RCCar_Driveline4WD_GetToFrontDiffShaftInertia(self)

    def GetToRearDiffShaftInertia(self):
        r"""GetToRearDiffShaftInertia(RCCar_Driveline4WD self) -> double"""
        return _vehicle.RCCar_Driveline4WD_GetToRearDiffShaftInertia(self)

    def GetFrontConicalGearRatio(self):
        r"""GetFrontConicalGearRatio(RCCar_Driveline4WD self) -> double"""
        return _vehicle.RCCar_Driveline4WD_GetFrontConicalGearRatio(self)

    def GetRearConicalGearRatio(self):
        r"""GetRearConicalGearRatio(RCCar_Driveline4WD self) -> double"""
        return _vehicle.RCCar_Driveline4WD_GetRearConicalGearRatio(self)

    def GetAxleDifferentialLockingLimit(self):
        r"""GetAxleDifferentialLockingLimit(RCCar_Driveline4WD self) -> double"""
        return _vehicle.RCCar_Driveline4WD_GetAxleDifferentialLockingLimit(self)

    def GetCentralDifferentialLockingLimit(self):
        r"""GetCentralDifferentialLockingLimit(RCCar_Driveline4WD self) -> double"""
        return _vehicle.RCCar_Driveline4WD_GetCentralDifferentialLockingLimit(self)

# Register RCCar_Driveline4WD in _vehicle:
_vehicle.RCCar_Driveline4WD_swigregister(RCCar_Driveline4WD)

class FEDA_Driveline4WD(ChShaftsDriveline4WD):
    r"""Proxy of C++ chrono::vehicle::feda::FEDA_Driveline4WD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(FEDA_Driveline4WD self, std::string const & name) -> FEDA_Driveline4WD"""
        _vehicle.FEDA_Driveline4WD_swiginit(self, _vehicle.new_FEDA_Driveline4WD(name))
    __swig_destroy__ = _vehicle.delete_FEDA_Driveline4WD

    def GetCentralDifferentialBoxInertia(self):
        r"""GetCentralDifferentialBoxInertia(FEDA_Driveline4WD self) -> double"""
        return _vehicle.FEDA_Driveline4WD_GetCentralDifferentialBoxInertia(self)

    def GetFrontDifferentialBoxInertia(self):
        r"""GetFrontDifferentialBoxInertia(FEDA_Driveline4WD self) -> double"""
        return _vehicle.FEDA_Driveline4WD_GetFrontDifferentialBoxInertia(self)

    def GetRearDifferentialBoxInertia(self):
        r"""GetRearDifferentialBoxInertia(FEDA_Driveline4WD self) -> double"""
        return _vehicle.FEDA_Driveline4WD_GetRearDifferentialBoxInertia(self)

    def GetDriveshaftInertia(self):
        r"""GetDriveshaftInertia(FEDA_Driveline4WD self) -> double"""
        return _vehicle.FEDA_Driveline4WD_GetDriveshaftInertia(self)

    def GetToFrontDiffShaftInertia(self):
        r"""GetToFrontDiffShaftInertia(FEDA_Driveline4WD self) -> double"""
        return _vehicle.FEDA_Driveline4WD_GetToFrontDiffShaftInertia(self)

    def GetToRearDiffShaftInertia(self):
        r"""GetToRearDiffShaftInertia(FEDA_Driveline4WD self) -> double"""
        return _vehicle.FEDA_Driveline4WD_GetToRearDiffShaftInertia(self)

    def GetFrontConicalGearRatio(self):
        r"""GetFrontConicalGearRatio(FEDA_Driveline4WD self) -> double"""
        return _vehicle.FEDA_Driveline4WD_GetFrontConicalGearRatio(self)

    def GetRearConicalGearRatio(self):
        r"""GetRearConicalGearRatio(FEDA_Driveline4WD self) -> double"""
        return _vehicle.FEDA_Driveline4WD_GetRearConicalGearRatio(self)

    def GetAxleDifferentialLockingLimit(self):
        r"""GetAxleDifferentialLockingLimit(FEDA_Driveline4WD self) -> double"""
        return _vehicle.FEDA_Driveline4WD_GetAxleDifferentialLockingLimit(self)

    def GetCentralDifferentialLockingLimit(self):
        r"""GetCentralDifferentialLockingLimit(FEDA_Driveline4WD self) -> double"""
        return _vehicle.FEDA_Driveline4WD_GetCentralDifferentialLockingLimit(self)

# Register FEDA_Driveline4WD in _vehicle:
_vehicle.FEDA_Driveline4WD_swigregister(FEDA_Driveline4WD)

class M113_SimpleDriveline(ChSimpleTrackDriveline):
    r"""Proxy of C++ chrono::vehicle::m113::M113_SimpleDriveline class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(M113_SimpleDriveline self) -> M113_SimpleDriveline"""
        _vehicle.M113_SimpleDriveline_swiginit(self, _vehicle.new_M113_SimpleDriveline())
    __swig_destroy__ = _vehicle.delete_M113_SimpleDriveline

    def GetDifferentialMaxBias(self):
        r"""GetDifferentialMaxBias(M113_SimpleDriveline self) -> double"""
        return _vehicle.M113_SimpleDriveline_GetDifferentialMaxBias(self)

# Register M113_SimpleDriveline in _vehicle:
_vehicle.M113_SimpleDriveline_swigregister(M113_SimpleDriveline)

class M113_DrivelineBDS(ChTrackDrivelineBDS):
    r"""Proxy of C++ chrono::vehicle::m113::M113_DrivelineBDS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(M113_DrivelineBDS self) -> M113_DrivelineBDS"""
        _vehicle.M113_DrivelineBDS_swiginit(self, _vehicle.new_M113_DrivelineBDS())
    __swig_destroy__ = _vehicle.delete_M113_DrivelineBDS

    def GetDriveshaftInertia(self):
        r"""GetDriveshaftInertia(M113_DrivelineBDS self) -> double"""
        return _vehicle.M113_DrivelineBDS_GetDriveshaftInertia(self)

    def GetDifferentialBoxInertia(self):
        r"""GetDifferentialBoxInertia(M113_DrivelineBDS self) -> double"""
        return _vehicle.M113_DrivelineBDS_GetDifferentialBoxInertia(self)

    def GetConicalGearRatio(self):
        r"""GetConicalGearRatio(M113_DrivelineBDS self) -> double"""
        return _vehicle.M113_DrivelineBDS_GetConicalGearRatio(self)

    def GetDifferentialLockingLimit(self):
        r"""GetDifferentialLockingLimit(M113_DrivelineBDS self) -> double"""
        return _vehicle.M113_DrivelineBDS_GetDifferentialLockingLimit(self)

# Register M113_DrivelineBDS in _vehicle:
_vehicle.M113_DrivelineBDS_swigregister(M113_DrivelineBDS)

class ChWheel(ChPart):
    r"""Proxy of C++ chrono::vehicle::ChWheel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChWheel

    def GetTemplateName(self):
        r"""GetTemplateName(ChWheel self) -> std::string"""
        return _vehicle.ChWheel_GetTemplateName(self)

    def GetRadius(self):
        r"""GetRadius(ChWheel self) -> double"""
        return _vehicle.ChWheel_GetRadius(self)

    def GetWidth(self):
        r"""GetWidth(ChWheel self) -> double"""
        return _vehicle.ChWheel_GetWidth(self)

    def Initialize(self, spindle, side, offset=0):
        r"""Initialize(ChWheel self, std::shared_ptr< chrono::ChBody > spindle, chrono::vehicle::VehicleSide side, double offset=0)"""
        return _vehicle.ChWheel_Initialize(self, spindle, side, offset)

    def SetCollide(self, state):
        r"""SetCollide(ChWheel self, bool state)"""
        return _vehicle.ChWheel_SetCollide(self, state)

    def Synchronize(self):
        r"""Synchronize(ChWheel self)"""
        return _vehicle.ChWheel_Synchronize(self)

    def GetTire(self):
        r"""GetTire(ChWheel self) -> std::shared_ptr< chrono::vehicle::ChTire >"""
        return _vehicle.ChWheel_GetTire(self)

    def SetTire(self, tire):
        r"""SetTire(ChWheel self, std::shared_ptr< chrono::vehicle::ChTire > tire)"""
        return _vehicle.ChWheel_SetTire(self, tire)

    def GetSpindle(self):
        r"""GetSpindle(ChWheel self) -> std::shared_ptr< chrono::ChBody >"""
        return _vehicle.ChWheel_GetSpindle(self)

    def GetSide(self):
        r"""GetSide(ChWheel self) -> chrono::vehicle::VehicleSide"""
        return _vehicle.ChWheel_GetSide(self)

    def GetPos(self):
        r"""GetPos(ChWheel self) -> ChVectorD"""
        return _vehicle.ChWheel_GetPos(self)

    def GetState(self):
        r"""GetState(ChWheel self) -> WheelState"""
        return _vehicle.ChWheel_GetState(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChWheel self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChWheel_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChWheel self)"""
        return _vehicle.ChWheel_RemoveVisualizationAssets(self)

    def GetMeshFilename(self):
        r"""GetMeshFilename(ChWheel self) -> std::string const &"""
        return _vehicle.ChWheel_GetMeshFilename(self)

# Register ChWheel in _vehicle:
_vehicle.ChWheel_swigregister(ChWheel)

class Wheel(ChWheel):
    r"""Proxy of C++ chrono::vehicle::Wheel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Wheel self, std::string const & filename) -> Wheel
        __init__(Wheel self, rapidjson::Document const & d) -> Wheel
        """
        _vehicle.Wheel_swiginit(self, _vehicle.new_Wheel(*args))
    __swig_destroy__ = _vehicle.delete_Wheel

    def GetWheelMass(self):
        r"""GetWheelMass(Wheel self) -> double"""
        return _vehicle.Wheel_GetWheelMass(self)

    def GetWheelInertia(self):
        r"""GetWheelInertia(Wheel self) -> ChVectorD"""
        return _vehicle.Wheel_GetWheelInertia(self)

    def GetRadius(self):
        r"""GetRadius(Wheel self) -> double"""
        return _vehicle.Wheel_GetRadius(self)

    def GetWidth(self):
        r"""GetWidth(Wheel self) -> double"""
        return _vehicle.Wheel_GetWidth(self)

    def SetRadius(self, rad):
        r"""SetRadius(Wheel self, double rad)"""
        return _vehicle.Wheel_SetRadius(self, rad)

    def SetWidth(self, width):
        r"""SetWidth(Wheel self, double width)"""
        return _vehicle.Wheel_SetWidth(self, width)

# Register Wheel in _vehicle:
_vehicle.Wheel_swigregister(Wheel)

class ChBrake(ChPart):
    r"""Proxy of C++ chrono::vehicle::ChBrake class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChBrake

    def Initialize(self, chassis, suspension, side):
        r"""Initialize(ChBrake self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, std::shared_ptr< chrono::vehicle::ChSuspension > suspension, chrono::vehicle::VehicleSide side)"""
        return _vehicle.ChBrake_Initialize(self, chassis, suspension, side)

    def Synchronize(self, modulation):
        r"""Synchronize(ChBrake self, double modulation)"""
        return _vehicle.ChBrake_Synchronize(self, modulation)

    def EnableLocking(self, val):
        r"""EnableLocking(ChBrake self, bool val)"""
        return _vehicle.ChBrake_EnableLocking(self, val)

    def GetBrakeTorque(self):
        r"""GetBrakeTorque(ChBrake self) -> double"""
        return _vehicle.ChBrake_GetBrakeTorque(self)

# Register ChBrake in _vehicle:
_vehicle.ChBrake_swigregister(ChBrake)

class ChBrakeSimple(ChBrake):
    r"""Proxy of C++ chrono::vehicle::ChBrakeSimple class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChBrakeSimple

    def GetTemplateName(self):
        r"""GetTemplateName(ChBrakeSimple self) -> std::string"""
        return _vehicle.ChBrakeSimple_GetTemplateName(self)

    def Initialize(self, chassis, suspension, side):
        r"""Initialize(ChBrakeSimple self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, std::shared_ptr< chrono::vehicle::ChSuspension > suspension, chrono::vehicle::VehicleSide side)"""
        return _vehicle.ChBrakeSimple_Initialize(self, chassis, suspension, side)

    def Synchronize(self, modulation):
        r"""Synchronize(ChBrakeSimple self, double modulation)"""
        return _vehicle.ChBrakeSimple_Synchronize(self, modulation)

    def GetBrakeTorque(self):
        r"""GetBrakeTorque(ChBrakeSimple self) -> double"""
        return _vehicle.ChBrakeSimple_GetBrakeTorque(self)

    def GetBrakeSpeed(self):
        r"""GetBrakeSpeed(ChBrakeSimple self) -> double"""
        return _vehicle.ChBrakeSimple_GetBrakeSpeed(self)

# Register ChBrakeSimple in _vehicle:
_vehicle.ChBrakeSimple_swigregister(ChBrakeSimple)

class ChBrakeShafts(ChBrake):
    r"""Proxy of C++ chrono::vehicle::ChBrakeShafts class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChBrakeShafts

    def GetTemplateName(self):
        r"""GetTemplateName(ChBrakeShafts self) -> std::string"""
        return _vehicle.ChBrakeShafts_GetTemplateName(self)

    def Initialize(self, chassis, suspension, side):
        r"""Initialize(ChBrakeShafts self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, std::shared_ptr< chrono::vehicle::ChSuspension > suspension, chrono::vehicle::VehicleSide side)"""
        return _vehicle.ChBrakeShafts_Initialize(self, chassis, suspension, side)

    def Synchronize(self, modulation):
        r"""Synchronize(ChBrakeShafts self, double modulation)"""
        return _vehicle.ChBrakeShafts_Synchronize(self, modulation)

    def GetBrakeTorque(self):
        r"""GetBrakeTorque(ChBrakeShafts self) -> double"""
        return _vehicle.ChBrakeShafts_GetBrakeTorque(self)

# Register ChBrakeShafts in _vehicle:
_vehicle.ChBrakeShafts_swigregister(ChBrakeShafts)

class BrakeSimple(ChBrakeSimple):
    r"""Proxy of C++ chrono::vehicle::BrakeSimple class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(BrakeSimple self, std::string const & filename) -> BrakeSimple
        __init__(BrakeSimple self, rapidjson::Document const & d) -> BrakeSimple
        """
        _vehicle.BrakeSimple_swiginit(self, _vehicle.new_BrakeSimple(*args))
    __swig_destroy__ = _vehicle.delete_BrakeSimple

    def GetMaxBrakingTorque(self):
        r"""GetMaxBrakingTorque(BrakeSimple self) -> double"""
        return _vehicle.BrakeSimple_GetMaxBrakingTorque(self)

# Register BrakeSimple in _vehicle:
_vehicle.BrakeSimple_swigregister(BrakeSimple)

class BrakeShafts(ChBrakeShafts):
    r"""Proxy of C++ chrono::vehicle::BrakeShafts class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(BrakeShafts self, std::string const & filename) -> BrakeShafts
        __init__(BrakeShafts self, rapidjson::Document const & d) -> BrakeShafts
        """
        _vehicle.BrakeShafts_swiginit(self, _vehicle.new_BrakeShafts(*args))
    __swig_destroy__ = _vehicle.delete_BrakeShafts

    def GetShaftInertia(self):
        r"""GetShaftInertia(BrakeShafts self) -> double"""
        return _vehicle.BrakeShafts_GetShaftInertia(self)

    def GetMaxBrakingTorque(self):
        r"""GetMaxBrakingTorque(BrakeShafts self) -> double"""
        return _vehicle.BrakeShafts_GetMaxBrakingTorque(self)

# Register BrakeShafts in _vehicle:
_vehicle.BrakeShafts_swigregister(BrakeShafts)

class ChTire(ChPart):
    r"""Proxy of C++ chrono::vehicle::ChTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    CollisionType_SINGLE_POINT = _vehicle.ChTire_CollisionType_SINGLE_POINT
    
    CollisionType_FOUR_POINTS = _vehicle.ChTire_CollisionType_FOUR_POINTS
    
    CollisionType_ENVELOPE = _vehicle.ChTire_CollisionType_ENVELOPE
    
    __swig_destroy__ = _vehicle.delete_ChTire

    def SetStepsize(self, val):
        r"""SetStepsize(ChTire self, double val)"""
        return _vehicle.ChTire_SetStepsize(self, val)

    def GetStepsize(self):
        r"""GetStepsize(ChTire self) -> double"""
        return _vehicle.ChTire_GetStepsize(self)

    def SetCollisionType(self, collision_type):
        r"""SetCollisionType(ChTire self, chrono::vehicle::ChTire::CollisionType collision_type)"""
        return _vehicle.ChTire_SetCollisionType(self, collision_type)

    def SetPressure(self, pressure):
        r"""SetPressure(ChTire self, double pressure)"""
        return _vehicle.ChTire_SetPressure(self, pressure)

    def GetPressure(self):
        r"""GetPressure(ChTire self) -> double"""
        return _vehicle.ChTire_GetPressure(self)

    def GetRadius(self):
        r"""GetRadius(ChTire self) -> double"""
        return _vehicle.ChTire_GetRadius(self)

    def GetWidth(self):
        r"""GetWidth(ChTire self) -> double"""
        return _vehicle.ChTire_GetWidth(self)

    def GetTireMass(self):
        r"""GetTireMass(ChTire self) -> double"""
        return _vehicle.ChTire_GetTireMass(self)

    def GetTireInertia(self):
        r"""GetTireInertia(ChTire self) -> ChVectorD"""
        return _vehicle.ChTire_GetTireInertia(self)

    def ReportTireForce(self, terrain):
        r"""ReportTireForce(ChTire self, ChTerrain terrain) -> TerrainForce"""
        return _vehicle.ChTire_ReportTireForce(self, terrain)

    def ReportTireForceLocal(self, terrain, tire_frame):
        r"""ReportTireForceLocal(ChTire self, ChTerrain terrain, ChCoordsysD tire_frame) -> TerrainForce"""
        return _vehicle.ChTire_ReportTireForceLocal(self, terrain, tire_frame)

    def GetSlipAngle(self):
        r"""GetSlipAngle(ChTire self) -> double"""
        return _vehicle.ChTire_GetSlipAngle(self)

    def GetLongitudinalSlip(self):
        r"""GetLongitudinalSlip(ChTire self) -> double"""
        return _vehicle.ChTire_GetLongitudinalSlip(self)

    def GetCamberAngle(self):
        r"""GetCamberAngle(ChTire self) -> double"""
        return _vehicle.ChTire_GetCamberAngle(self)

    @staticmethod
    def EstimateInertia(tire_width, aspect_ratio, rim_diameter, tire_mass, t_factor=2):
        r"""EstimateInertia(double tire_width, double aspect_ratio, double rim_diameter, double tire_mass, double t_factor=2) -> ChVectorD"""
        return _vehicle.ChTire_EstimateInertia(tire_width, aspect_ratio, rim_diameter, tire_mass, t_factor)

    def GetDeflection(self):
        r"""GetDeflection(ChTire self) -> double"""
        return _vehicle.ChTire_GetDeflection(self)

    def GetMeshFilename(self):
        r"""GetMeshFilename(ChTire self) -> std::string const &"""
        return _vehicle.ChTire_GetMeshFilename(self)

    def Initialize(self, wheel):
        r"""Initialize(ChTire self, std::shared_ptr< chrono::vehicle::ChWheel > wheel)"""
        return _vehicle.ChTire_Initialize(self, wheel)

    def Synchronize(self, time, terrain):
        r"""Synchronize(ChTire self, double time, ChTerrain terrain)"""
        return _vehicle.ChTire_Synchronize(self, time, terrain)

    def Advance(self, step):
        r"""Advance(ChTire self, double step)"""
        return _vehicle.ChTire_Advance(self, step)

# Register ChTire in _vehicle:
_vehicle.ChTire_swigregister(ChTire)

def ChTire_EstimateInertia(tire_width, aspect_ratio, rim_diameter, tire_mass, t_factor=2):
    r"""ChTire_EstimateInertia(double tire_width, double aspect_ratio, double rim_diameter, double tire_mass, double t_factor=2) -> ChVectorD"""
    return _vehicle.ChTire_EstimateInertia(tire_width, aspect_ratio, rim_diameter, tire_mass, t_factor)

class ChTMeasyTire(object):
    r"""Proxy of C++ chrono::vehicle::ChTMeasyTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChTMeasyTire

    def GetTemplateName(self):
        r"""GetTemplateName(ChTMeasyTire self) -> std::string"""
        return _vehicle.ChTMeasyTire_GetTemplateName(self)

    def GetRadius(self):
        r"""GetRadius(ChTMeasyTire self) -> double"""
        return _vehicle.ChTMeasyTire_GetRadius(self)

    def SetGammaLimit(self, gamma_limit):
        r"""SetGammaLimit(ChTMeasyTire self, double gamma_limit)"""
        return _vehicle.ChTMeasyTire_SetGammaLimit(self, gamma_limit)

    def GetWidth(self):
        r"""GetWidth(ChTMeasyTire self) -> double"""
        return _vehicle.ChTMeasyTire_GetWidth(self)

    def GetVisualizationWidth(self):
        r"""GetVisualizationWidth(ChTMeasyTire self) -> double"""
        return _vehicle.ChTMeasyTire_GetVisualizationWidth(self)

    def GetSlipAngle_internal(self):
        r"""GetSlipAngle_internal(ChTMeasyTire self) -> double"""
        return _vehicle.ChTMeasyTire_GetSlipAngle_internal(self)

    def GetLongitudinalSlip_internal(self):
        r"""GetLongitudinalSlip_internal(ChTMeasyTire self) -> double"""
        return _vehicle.ChTMeasyTire_GetLongitudinalSlip_internal(self)

    def GetTireOmega(self):
        r"""GetTireOmega(ChTMeasyTire self) -> double"""
        return _vehicle.ChTMeasyTire_GetTireOmega(self)

    @staticmethod
    def GetTireMaxLoad(li):
        r"""GetTireMaxLoad(unsigned int li) -> double"""
        return _vehicle.ChTMeasyTire_GetTireMaxLoad(li)

    def GuessTruck80Par(self, *args):
        r"""
        GuessTruck80Par(ChTMeasyTire self, unsigned int li, double tireWidth, double ratio, double rimDia, double pinfl_li=1.0, double pinfl_use=1.0, double damping_ratio=0.5)
        GuessTruck80Par(ChTMeasyTire self, double loadForce, double tireWidth, double ratio, double rimDia, double pinfl_li=1.0, double pinfl_use=1.0, double damping_ratio=0.5)
        """
        return _vehicle.ChTMeasyTire_GuessTruck80Par(self, *args)

    def GuessPassCar70Par(self, *args):
        r"""
        GuessPassCar70Par(ChTMeasyTire self, unsigned int li, double tireWidth, double ratio, double rimDia, double pinfl_li=1.0, double pinfl_use=1.0, double damping_ratio=0.5)
        GuessPassCar70Par(ChTMeasyTire self, double loadForce, double tireWidth, double ratio, double rimDia, double pinfl_li=1.0, double pinfl_use=1.0, double damping_ratio=0.5)
        """
        return _vehicle.ChTMeasyTire_GuessPassCar70Par(self, *args)

    def SetVerticalStiffness(self, *args):
        r"""
        SetVerticalStiffness(ChTMeasyTire self, double Cz)
        SetVerticalStiffness(ChTMeasyTire self, vector_double defl, vector_double frc)
        """
        return _vehicle.ChTMeasyTire_SetVerticalStiffness(self, *args)

    def SetFrictionCoefficient(self, coeff):
        r"""SetFrictionCoefficient(ChTMeasyTire self, double coeff)"""
        return _vehicle.ChTMeasyTire_SetFrictionCoefficient(self, coeff)

    def SetRollingResistanceCoefficient(self, rr_coeff):
        r"""SetRollingResistanceCoefficient(ChTMeasyTire self, double rr_coeff)"""
        return _vehicle.ChTMeasyTire_SetRollingResistanceCoefficient(self, rr_coeff)

    def WritePlots(self, plFileName, plTireFormat):
        r"""WritePlots(ChTMeasyTire self, std::string const & plFileName, std::string const & plTireFormat)"""
        return _vehicle.ChTMeasyTire_WritePlots(self, plFileName, plTireFormat)

    def GetDeflection(self):
        r"""GetDeflection(ChTMeasyTire self) -> double"""
        return _vehicle.ChTMeasyTire_GetDeflection(self)

    def CheckParameters(self):
        r"""CheckParameters(ChTMeasyTire self) -> bool"""
        return _vehicle.ChTMeasyTire_CheckParameters(self)

# Register ChTMeasyTire in _vehicle:
_vehicle.ChTMeasyTire_swigregister(ChTMeasyTire)

def ChTMeasyTire_GetTireMaxLoad(li):
    r"""ChTMeasyTire_GetTireMaxLoad(unsigned int li) -> double"""
    return _vehicle.ChTMeasyTire_GetTireMaxLoad(li)

class ChRigidTire(ChTire):
    r"""Proxy of C++ chrono::vehicle::ChRigidTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChRigidTire

    def GetTemplateName(self):
        r"""GetTemplateName(ChRigidTire self) -> std::string"""
        return _vehicle.ChRigidTire_GetTemplateName(self)

    def SetMeshFilename(self, mesh_file, sweep_sphere_radius=0):
        r"""SetMeshFilename(ChRigidTire self, std::string const & mesh_file, double sweep_sphere_radius=0)"""
        return _vehicle.ChRigidTire_SetMeshFilename(self, mesh_file, sweep_sphere_radius)

    def UseContactMesh(self):
        r"""UseContactMesh(ChRigidTire self) -> bool"""
        return _vehicle.ChRigidTire_UseContactMesh(self)

    def ReportTireForce(self, terrain):
        r"""ReportTireForce(ChRigidTire self, ChTerrain terrain) -> TerrainForce"""
        return _vehicle.ChRigidTire_ReportTireForce(self, terrain)

    def ReportTireForceLocal(self, terrain, tire_frame):
        r"""ReportTireForceLocal(ChRigidTire self, ChTerrain terrain, ChCoordsysD tire_frame) -> TerrainForce"""
        return _vehicle.ChRigidTire_ReportTireForceLocal(self, terrain, tire_frame)

    def GetContactMaterial(self):
        r"""GetContactMaterial(ChRigidTire self) -> std::shared_ptr< chrono::ChMaterialSurface >"""
        return _vehicle.ChRigidTire_GetContactMaterial(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChRigidTire self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChRigidTire_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChRigidTire self)"""
        return _vehicle.ChRigidTire_RemoveVisualizationAssets(self)

    def GetContactMesh(self):
        r"""GetContactMesh(ChRigidTire self) -> std::shared_ptr< geometry::ChTriangleMeshConnected >"""
        return _vehicle.ChRigidTire_GetContactMesh(self)

    def GetMeshVertexStates(self, pos, vel):
        r"""GetMeshVertexStates(ChRigidTire self, vector_ChVectorD pos, vector_ChVectorD vel)"""
        return _vehicle.ChRigidTire_GetMeshVertexStates(self, pos, vel)

# Register ChRigidTire in _vehicle:
_vehicle.ChRigidTire_swigregister(ChRigidTire)

class ChForceElementTire(ChTire):
    r"""Proxy of C++ chrono::vehicle::ChForceElementTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChForceElementTire

    def ReportTireForce(self, terrain):
        r"""ReportTireForce(ChForceElementTire self, ChTerrain terrain) -> TerrainForce"""
        return _vehicle.ChForceElementTire_ReportTireForce(self, terrain)

    def ReportTireForceLocal(self, terrain, tire_frame):
        r"""ReportTireForceLocal(ChForceElementTire self, ChTerrain terrain, ChCoordsysD tire_frame) -> TerrainForce"""
        return _vehicle.ChForceElementTire_ReportTireForceLocal(self, terrain, tire_frame)

    def ReportTireContactData(self):
        r"""ReportTireContactData(ChForceElementTire self) -> ContactData"""
        return _vehicle.ChForceElementTire_ReportTireContactData(self)

# Register ChForceElementTire in _vehicle:
_vehicle.ChForceElementTire_swigregister(ChForceElementTire)

class ContactData(object):
    r"""Proxy of C++ chrono::vehicle::ChForceElementTire::ContactData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ContactData self) -> ContactData"""
        _vehicle.ContactData_swiginit(self, _vehicle.new_ContactData())
    in_contact = property(_vehicle.ContactData_in_contact_get, _vehicle.ContactData_in_contact_set, doc=r"""in_contact : bool""")
    frame = property(_vehicle.ContactData_frame_get, _vehicle.ContactData_frame_set, doc=r"""frame : chrono::ChCoordsys<()>""")
    vel = property(_vehicle.ContactData_vel_get, _vehicle.ContactData_vel_set, doc=r"""vel : chrono::ChVector<()>""")
    normal_force = property(_vehicle.ContactData_normal_force_get, _vehicle.ContactData_normal_force_set, doc=r"""normal_force : double""")
    depth = property(_vehicle.ContactData_depth_get, _vehicle.ContactData_depth_set, doc=r"""depth : double""")
    __swig_destroy__ = _vehicle.delete_ContactData

# Register ContactData in _vehicle:
_vehicle.ContactData_swigregister(ContactData)

class ChPac89Tire(ChForceElementTire):
    r"""Proxy of C++ chrono::vehicle::ChPac89Tire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChPac89Tire

    def GetTemplateName(self):
        r"""GetTemplateName(ChPac89Tire self) -> std::string"""
        return _vehicle.ChPac89Tire_GetTemplateName(self)

    def GetRadius(self):
        r"""GetRadius(ChPac89Tire self) -> double"""
        return _vehicle.ChPac89Tire_GetRadius(self)

    def SetGammaLimit(self, gamma_limit):
        r"""SetGammaLimit(ChPac89Tire self, double gamma_limit)"""
        return _vehicle.ChPac89Tire_SetGammaLimit(self, gamma_limit)

    def GetWidth(self):
        r"""GetWidth(ChPac89Tire self) -> double"""
        return _vehicle.ChPac89Tire_GetWidth(self)

    def GetDeflection(self):
        r"""GetDeflection(ChPac89Tire self) -> double"""
        return _vehicle.ChPac89Tire_GetDeflection(self)

    def GetVisualizationWidth(self):
        r"""GetVisualizationWidth(ChPac89Tire self) -> double"""
        return _vehicle.ChPac89Tire_GetVisualizationWidth(self)

    def GetSlipAngle_internal(self):
        r"""GetSlipAngle_internal(ChPac89Tire self) -> double"""
        return _vehicle.ChPac89Tire_GetSlipAngle_internal(self)

    def GetLongitudinalSlip_internal(self):
        r"""GetLongitudinalSlip_internal(ChPac89Tire self) -> double"""
        return _vehicle.ChPac89Tire_GetLongitudinalSlip_internal(self)

    def GetCamberAngle_internal(self):
        r"""GetCamberAngle_internal(ChPac89Tire self) -> double"""
        return _vehicle.ChPac89Tire_GetCamberAngle_internal(self)

# Register ChPac89Tire in _vehicle:
_vehicle.ChPac89Tire_swigregister(ChPac89Tire)

class ChPac02Tire(ChForceElementTire):
    r"""Proxy of C++ chrono::vehicle::ChPac02Tire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChPac02Tire

    def GetTemplateName(self):
        r"""GetTemplateName(ChPac02Tire self) -> std::string"""
        return _vehicle.ChPac02Tire_GetTemplateName(self)

    def GetRadius(self):
        r"""GetRadius(ChPac02Tire self) -> double"""
        return _vehicle.ChPac02Tire_GetRadius(self)

    def SetGammaLimit(self, gamma_limit):
        r"""SetGammaLimit(ChPac02Tire self, double gamma_limit)"""
        return _vehicle.ChPac02Tire_SetGammaLimit(self, gamma_limit)

    def GetWidth(self):
        r"""GetWidth(ChPac02Tire self) -> double"""
        return _vehicle.ChPac02Tire_GetWidth(self)

    def GetDeflection(self):
        r"""GetDeflection(ChPac02Tire self) -> double"""
        return _vehicle.ChPac02Tire_GetDeflection(self)

    def GetVisualizationWidth(self):
        r"""GetVisualizationWidth(ChPac02Tire self) -> double"""
        return _vehicle.ChPac02Tire_GetVisualizationWidth(self)

    def GetSlipAngle_internal(self):
        r"""GetSlipAngle_internal(ChPac02Tire self) -> double"""
        return _vehicle.ChPac02Tire_GetSlipAngle_internal(self)

    def GetLongitudinalSlip_internal(self):
        r"""GetLongitudinalSlip_internal(ChPac02Tire self) -> double"""
        return _vehicle.ChPac02Tire_GetLongitudinalSlip_internal(self)

    def GetNormalStiffnessForce(self, depth):
        r"""GetNormalStiffnessForce(ChPac02Tire self, double depth) -> double"""
        return _vehicle.ChPac02Tire_GetNormalStiffnessForce(self, depth)

    def GetNormalDampingForce(self, depth, velocity):
        r"""GetNormalDampingForce(ChPac02Tire self, double depth, double velocity) -> double"""
        return _vehicle.ChPac02Tire_GetNormalDampingForce(self, depth, velocity)

    def GetMuRoad(self):
        r"""GetMuRoad(ChPac02Tire self) -> double"""
        return _vehicle.ChPac02Tire_GetMuRoad(self)

    def GetLongitudinalGripSaturation(self):
        r"""GetLongitudinalGripSaturation(ChPac02Tire self) -> double"""
        return _vehicle.ChPac02Tire_GetLongitudinalGripSaturation(self)

    def GetLateralGripSaturation(self):
        r"""GetLateralGripSaturation(ChPac02Tire self) -> double"""
        return _vehicle.ChPac02Tire_GetLateralGripSaturation(self)

# Register ChPac02Tire in _vehicle:
_vehicle.ChPac02Tire_swigregister(ChPac02Tire)

class ChFialaTire(ChForceElementTire):
    r"""Proxy of C++ chrono::vehicle::ChFialaTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChFialaTire

    def GetTemplateName(self):
        r"""GetTemplateName(ChFialaTire self) -> std::string"""
        return _vehicle.ChFialaTire_GetTemplateName(self)

    def GetRadius(self):
        r"""GetRadius(ChFialaTire self) -> double"""
        return _vehicle.ChFialaTire_GetRadius(self)

    def GetWidth(self):
        r"""GetWidth(ChFialaTire self) -> double"""
        return _vehicle.ChFialaTire_GetWidth(self)

    def GetVisualizationWidth(self):
        r"""GetVisualizationWidth(ChFialaTire self) -> double"""
        return _vehicle.ChFialaTire_GetVisualizationWidth(self)

    def GetSlipAngle_internal(self):
        r"""GetSlipAngle_internal(ChFialaTire self) -> double"""
        return _vehicle.ChFialaTire_GetSlipAngle_internal(self)

    def GetLongitudinalSlip_internal(self):
        r"""GetLongitudinalSlip_internal(ChFialaTire self) -> double"""
        return _vehicle.ChFialaTire_GetLongitudinalSlip_internal(self)

    def GetCamberAngle_internal(self):
        r"""GetCamberAngle_internal(ChFialaTire self) -> double"""
        return _vehicle.ChFialaTire_GetCamberAngle_internal(self)

    def GetDeflection(self):
        r"""GetDeflection(ChFialaTire self) -> double"""
        return _vehicle.ChFialaTire_GetDeflection(self)

    def GetTireOmega(self):
        r"""GetTireOmega(ChFialaTire self) -> double"""
        return _vehicle.ChFialaTire_GetTireOmega(self)

    def WritePlots(self, plFileName, plTireFormat):
        r"""WritePlots(ChFialaTire self, std::string const & plFileName, std::string const & plTireFormat)"""
        return _vehicle.ChFialaTire_WritePlots(self, plFileName, plTireFormat)

# Register ChFialaTire in _vehicle:
_vehicle.ChFialaTire_swigregister(ChFialaTire)

class TMeasyTire(ChTMeasyTire):
    r"""Proxy of C++ chrono::vehicle::TMeasyTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TMeasyTire self, std::string const & filename) -> TMeasyTire
        __init__(TMeasyTire self, rapidjson::Document const & d) -> TMeasyTire
        """
        _vehicle.TMeasyTire_swiginit(self, _vehicle.new_TMeasyTire(*args))
    __swig_destroy__ = _vehicle.delete_TMeasyTire

    def SetTMeasyParams(self):
        r"""SetTMeasyParams(TMeasyTire self)"""
        return _vehicle.TMeasyTire_SetTMeasyParams(self)

    def GetTireMass(self):
        r"""GetTireMass(TMeasyTire self) -> double"""
        return _vehicle.TMeasyTire_GetTireMass(self)

    def GetTireInertia(self):
        r"""GetTireInertia(TMeasyTire self) -> ChVectorD"""
        return _vehicle.TMeasyTire_GetTireInertia(self)

    def GetVisualizationWidth(self):
        r"""GetVisualizationWidth(TMeasyTire self) -> double"""
        return _vehicle.TMeasyTire_GetVisualizationWidth(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(TMeasyTire self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.TMeasyTire_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(TMeasyTire self)"""
        return _vehicle.TMeasyTire_RemoveVisualizationAssets(self)

# Register TMeasyTire in _vehicle:
_vehicle.TMeasyTire_swigregister(TMeasyTire)

class RigidTire(ChRigidTire):
    r"""Proxy of C++ chrono::vehicle::RigidTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RigidTire self, std::string const & filename) -> RigidTire
        __init__(RigidTire self, rapidjson::Document const & d) -> RigidTire
        """
        _vehicle.RigidTire_swiginit(self, _vehicle.new_RigidTire(*args))
    __swig_destroy__ = _vehicle.delete_RigidTire

    def GetRadius(self):
        r"""GetRadius(RigidTire self) -> double"""
        return _vehicle.RigidTire_GetRadius(self)

    def GetWidth(self):
        r"""GetWidth(RigidTire self) -> double"""
        return _vehicle.RigidTire_GetWidth(self)

    def GetTireMass(self):
        r"""GetTireMass(RigidTire self) -> double"""
        return _vehicle.RigidTire_GetTireMass(self)

    def GetTireInertia(self):
        r"""GetTireInertia(RigidTire self) -> ChVectorD"""
        return _vehicle.RigidTire_GetTireInertia(self)

# Register RigidTire in _vehicle:
_vehicle.RigidTire_swigregister(RigidTire)

class FialaTire(ChFialaTire):
    r"""Proxy of C++ chrono::vehicle::FialaTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FialaTire self, std::string const & filename) -> FialaTire
        __init__(FialaTire self, rapidjson::Document const & d) -> FialaTire
        """
        _vehicle.FialaTire_swiginit(self, _vehicle.new_FialaTire(*args))
    __swig_destroy__ = _vehicle.delete_FialaTire

    def GetNormalStiffnessForce(self, depth):
        r"""GetNormalStiffnessForce(FialaTire self, double depth) -> double"""
        return _vehicle.FialaTire_GetNormalStiffnessForce(self, depth)

    def GetNormalDampingForce(self, depth, velocity):
        r"""GetNormalDampingForce(FialaTire self, double depth, double velocity) -> double"""
        return _vehicle.FialaTire_GetNormalDampingForce(self, depth, velocity)

    def SetFialaParams(self):
        r"""SetFialaParams(FialaTire self)"""
        return _vehicle.FialaTire_SetFialaParams(self)

    def GetTireMass(self):
        r"""GetTireMass(FialaTire self) -> double"""
        return _vehicle.FialaTire_GetTireMass(self)

    def GetTireInertia(self):
        r"""GetTireInertia(FialaTire self) -> ChVectorD"""
        return _vehicle.FialaTire_GetTireInertia(self)

    def GetVisualizationWidth(self):
        r"""GetVisualizationWidth(FialaTire self) -> double"""
        return _vehicle.FialaTire_GetVisualizationWidth(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(FialaTire self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.FialaTire_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(FialaTire self)"""
        return _vehicle.FialaTire_RemoveVisualizationAssets(self)

# Register FialaTire in _vehicle:
_vehicle.FialaTire_swigregister(FialaTire)

class Pac89Tire(ChPac89Tire):
    r"""Proxy of C++ chrono::vehicle::Pac89Tire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Pac89Tire self, std::string const & filename) -> Pac89Tire
        __init__(Pac89Tire self, rapidjson::Document const & d) -> Pac89Tire
        """
        _vehicle.Pac89Tire_swiginit(self, _vehicle.new_Pac89Tire(*args))
    __swig_destroy__ = _vehicle.delete_Pac89Tire

    def GetNormalStiffnessForce(self, depth):
        r"""GetNormalStiffnessForce(Pac89Tire self, double depth) -> double"""
        return _vehicle.Pac89Tire_GetNormalStiffnessForce(self, depth)

    def GetNormalDampingForce(self, depth, velocity):
        r"""GetNormalDampingForce(Pac89Tire self, double depth, double velocity) -> double"""
        return _vehicle.Pac89Tire_GetNormalDampingForce(self, depth, velocity)

    def GetTireMass(self):
        r"""GetTireMass(Pac89Tire self) -> double"""
        return _vehicle.Pac89Tire_GetTireMass(self)

    def GetTireInertia(self):
        r"""GetTireInertia(Pac89Tire self) -> ChVectorD"""
        return _vehicle.Pac89Tire_GetTireInertia(self)

    def GetVisualizationWidth(self):
        r"""GetVisualizationWidth(Pac89Tire self) -> double"""
        return _vehicle.Pac89Tire_GetVisualizationWidth(self)

    def SetPac89Params(self):
        r"""SetPac89Params(Pac89Tire self)"""
        return _vehicle.Pac89Tire_SetPac89Params(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(Pac89Tire self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.Pac89Tire_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(Pac89Tire self)"""
        return _vehicle.Pac89Tire_RemoveVisualizationAssets(self)

# Register Pac89Tire in _vehicle:
_vehicle.Pac89Tire_swigregister(Pac89Tire)

class Pac02Tire(ChPac02Tire):
    r"""Proxy of C++ chrono::vehicle::Pac02Tire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Pac02Tire self, std::string const & filename) -> Pac02Tire
        __init__(Pac02Tire self, rapidjson::Document const & d) -> Pac02Tire
        """
        _vehicle.Pac02Tire_swiginit(self, _vehicle.new_Pac02Tire(*args))
    __swig_destroy__ = _vehicle.delete_Pac02Tire

    def GetTireMass(self):
        r"""GetTireMass(Pac02Tire self) -> double"""
        return _vehicle.Pac02Tire_GetTireMass(self)

    def GetTireInertia(self):
        r"""GetTireInertia(Pac02Tire self) -> ChVectorD"""
        return _vehicle.Pac02Tire_GetTireInertia(self)

    def GetVisualizationWidth(self):
        r"""GetVisualizationWidth(Pac02Tire self) -> double"""
        return _vehicle.Pac02Tire_GetVisualizationWidth(self)

    def SetMFParams(self):
        r"""SetMFParams(Pac02Tire self)"""
        return _vehicle.Pac02Tire_SetMFParams(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(Pac02Tire self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.Pac02Tire_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(Pac02Tire self)"""
        return _vehicle.Pac02Tire_RemoveVisualizationAssets(self)

# Register Pac02Tire in _vehicle:
_vehicle.Pac02Tire_swigregister(Pac02Tire)

class Generic_RigidTire(ChRigidTire):
    r"""Proxy of C++ chrono::vehicle::generic::Generic_RigidTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Generic_RigidTire self, std::string const & name) -> Generic_RigidTire"""
        _vehicle.Generic_RigidTire_swiginit(self, _vehicle.new_Generic_RigidTire(name))
    __swig_destroy__ = _vehicle.delete_Generic_RigidTire

    def GetRadius(self):
        r"""GetRadius(Generic_RigidTire self) -> double"""
        return _vehicle.Generic_RigidTire_GetRadius(self)

    def GetWidth(self):
        r"""GetWidth(Generic_RigidTire self) -> double"""
        return _vehicle.Generic_RigidTire_GetWidth(self)

    def GetTireMass(self):
        r"""GetTireMass(Generic_RigidTire self) -> double"""
        return _vehicle.Generic_RigidTire_GetTireMass(self)

    def GetTireInertia(self):
        r"""GetTireInertia(Generic_RigidTire self) -> ChVectorD"""
        return _vehicle.Generic_RigidTire_GetTireInertia(self)

# Register Generic_RigidTire in _vehicle:
_vehicle.Generic_RigidTire_swigregister(Generic_RigidTire)

class Generic_RigidMeshTire(ChRigidTire):
    r"""Proxy of C++ chrono::vehicle::generic::Generic_RigidMeshTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Generic_RigidMeshTire self, std::string const & name) -> Generic_RigidMeshTire"""
        _vehicle.Generic_RigidMeshTire_swiginit(self, _vehicle.new_Generic_RigidMeshTire(name))
    __swig_destroy__ = _vehicle.delete_Generic_RigidMeshTire

    def GetRadius(self):
        r"""GetRadius(Generic_RigidMeshTire self) -> double"""
        return _vehicle.Generic_RigidMeshTire_GetRadius(self)

    def GetWidth(self):
        r"""GetWidth(Generic_RigidMeshTire self) -> double"""
        return _vehicle.Generic_RigidMeshTire_GetWidth(self)

    def GetTireMass(self):
        r"""GetTireMass(Generic_RigidMeshTire self) -> double"""
        return _vehicle.Generic_RigidMeshTire_GetTireMass(self)

    def GetTireInertia(self):
        r"""GetTireInertia(Generic_RigidMeshTire self) -> ChVectorD"""
        return _vehicle.Generic_RigidMeshTire_GetTireInertia(self)

# Register Generic_RigidMeshTire in _vehicle:
_vehicle.Generic_RigidMeshTire_swigregister(Generic_RigidMeshTire)

class Generic_FialaTire(ChFialaTire):
    r"""Proxy of C++ chrono::vehicle::generic::Generic_FialaTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Generic_FialaTire self, std::string const & name) -> Generic_FialaTire"""
        _vehicle.Generic_FialaTire_swiginit(self, _vehicle.new_Generic_FialaTire(name))
    __swig_destroy__ = _vehicle.delete_Generic_FialaTire

    def GetNormalStiffnessForce(self, depth):
        r"""GetNormalStiffnessForce(Generic_FialaTire self, double depth) -> double"""
        return _vehicle.Generic_FialaTire_GetNormalStiffnessForce(self, depth)

    def GetNormalDampingForce(self, depth, velocity):
        r"""GetNormalDampingForce(Generic_FialaTire self, double depth, double velocity) -> double"""
        return _vehicle.Generic_FialaTire_GetNormalDampingForce(self, depth, velocity)

    def GetTireMass(self):
        r"""GetTireMass(Generic_FialaTire self) -> double"""
        return _vehicle.Generic_FialaTire_GetTireMass(self)

    def GetTireInertia(self):
        r"""GetTireInertia(Generic_FialaTire self) -> ChVectorD"""
        return _vehicle.Generic_FialaTire_GetTireInertia(self)

    def SetFialaParams(self):
        r"""SetFialaParams(Generic_FialaTire self)"""
        return _vehicle.Generic_FialaTire_SetFialaParams(self)

# Register Generic_FialaTire in _vehicle:
_vehicle.Generic_FialaTire_swigregister(Generic_FialaTire)

class HMMWV_RigidTire(ChRigidTire):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_RigidTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, use_mesh=False):
        r"""__init__(HMMWV_RigidTire self, std::string const & name, bool use_mesh=False) -> HMMWV_RigidTire"""
        _vehicle.HMMWV_RigidTire_swiginit(self, _vehicle.new_HMMWV_RigidTire(name, use_mesh))
    __swig_destroy__ = _vehicle.delete_HMMWV_RigidTire

    def GetRadius(self):
        r"""GetRadius(HMMWV_RigidTire self) -> double"""
        return _vehicle.HMMWV_RigidTire_GetRadius(self)

    def GetWidth(self):
        r"""GetWidth(HMMWV_RigidTire self) -> double"""
        return _vehicle.HMMWV_RigidTire_GetWidth(self)

    def GetTireMass(self):
        r"""GetTireMass(HMMWV_RigidTire self) -> double"""
        return _vehicle.HMMWV_RigidTire_GetTireMass(self)

    def GetTireInertia(self):
        r"""GetTireInertia(HMMWV_RigidTire self) -> ChVectorD"""
        return _vehicle.HMMWV_RigidTire_GetTireInertia(self)

# Register HMMWV_RigidTire in _vehicle:
_vehicle.HMMWV_RigidTire_swigregister(HMMWV_RigidTire)

class HMMWV_Pac89Tire(ChPac89Tire):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_Pac89Tire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(HMMWV_Pac89Tire self, std::string const & name) -> HMMWV_Pac89Tire"""
        _vehicle.HMMWV_Pac89Tire_swiginit(self, _vehicle.new_HMMWV_Pac89Tire(name))
    __swig_destroy__ = _vehicle.delete_HMMWV_Pac89Tire

    def GetNormalStiffnessForce(self, depth):
        r"""GetNormalStiffnessForce(HMMWV_Pac89Tire self, double depth) -> double"""
        return _vehicle.HMMWV_Pac89Tire_GetNormalStiffnessForce(self, depth)

    def GetNormalDampingForce(self, depth, velocity):
        r"""GetNormalDampingForce(HMMWV_Pac89Tire self, double depth, double velocity) -> double"""
        return _vehicle.HMMWV_Pac89Tire_GetNormalDampingForce(self, depth, velocity)

    def GetTireMass(self):
        r"""GetTireMass(HMMWV_Pac89Tire self) -> double"""
        return _vehicle.HMMWV_Pac89Tire_GetTireMass(self)

    def GetTireInertia(self):
        r"""GetTireInertia(HMMWV_Pac89Tire self) -> ChVectorD"""
        return _vehicle.HMMWV_Pac89Tire_GetTireInertia(self)

    def GetVisualizationWidth(self):
        r"""GetVisualizationWidth(HMMWV_Pac89Tire self) -> double"""
        return _vehicle.HMMWV_Pac89Tire_GetVisualizationWidth(self)

    def SetPac89Params(self):
        r"""SetPac89Params(HMMWV_Pac89Tire self)"""
        return _vehicle.HMMWV_Pac89Tire_SetPac89Params(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(HMMWV_Pac89Tire self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.HMMWV_Pac89Tire_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(HMMWV_Pac89Tire self)"""
        return _vehicle.HMMWV_Pac89Tire_RemoveVisualizationAssets(self)

# Register HMMWV_Pac89Tire in _vehicle:
_vehicle.HMMWV_Pac89Tire_swigregister(HMMWV_Pac89Tire)

class HMMWV_Pac02Tire(ChPac02Tire):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_Pac02Tire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, pressure_level=2):
        r"""__init__(HMMWV_Pac02Tire self, std::string const & name, unsigned int pressure_level=2) -> HMMWV_Pac02Tire"""
        _vehicle.HMMWV_Pac02Tire_swiginit(self, _vehicle.new_HMMWV_Pac02Tire(name, pressure_level))
    __swig_destroy__ = _vehicle.delete_HMMWV_Pac02Tire

    def GetTireMass(self):
        r"""GetTireMass(HMMWV_Pac02Tire self) -> double"""
        return _vehicle.HMMWV_Pac02Tire_GetTireMass(self)

    def GetTireInertia(self):
        r"""GetTireInertia(HMMWV_Pac02Tire self) -> ChVectorD"""
        return _vehicle.HMMWV_Pac02Tire_GetTireInertia(self)

    def GetVisualizationWidth(self):
        r"""GetVisualizationWidth(HMMWV_Pac02Tire self) -> double"""
        return _vehicle.HMMWV_Pac02Tire_GetVisualizationWidth(self)

    def SetMFParams(self):
        r"""SetMFParams(HMMWV_Pac02Tire self)"""
        return _vehicle.HMMWV_Pac02Tire_SetMFParams(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(HMMWV_Pac02Tire self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.HMMWV_Pac02Tire_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(HMMWV_Pac02Tire self)"""
        return _vehicle.HMMWV_Pac02Tire_RemoveVisualizationAssets(self)

# Register HMMWV_Pac02Tire in _vehicle:
_vehicle.HMMWV_Pac02Tire_swigregister(HMMWV_Pac02Tire)

class HMMWV_FialaTire(ChFialaTire):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_FialaTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(HMMWV_FialaTire self, std::string const & name) -> HMMWV_FialaTire"""
        _vehicle.HMMWV_FialaTire_swiginit(self, _vehicle.new_HMMWV_FialaTire(name))
    __swig_destroy__ = _vehicle.delete_HMMWV_FialaTire

    def GetNormalStiffnessForce(self, depth):
        r"""GetNormalStiffnessForce(HMMWV_FialaTire self, double depth) -> double"""
        return _vehicle.HMMWV_FialaTire_GetNormalStiffnessForce(self, depth)

    def GetNormalDampingForce(self, depth, velocity):
        r"""GetNormalDampingForce(HMMWV_FialaTire self, double depth, double velocity) -> double"""
        return _vehicle.HMMWV_FialaTire_GetNormalDampingForce(self, depth, velocity)

    def GetVisualizationWidth(self):
        r"""GetVisualizationWidth(HMMWV_FialaTire self) -> double"""
        return _vehicle.HMMWV_FialaTire_GetVisualizationWidth(self)

    def SetFialaParams(self):
        r"""SetFialaParams(HMMWV_FialaTire self)"""
        return _vehicle.HMMWV_FialaTire_SetFialaParams(self)

    def GetTireMass(self):
        r"""GetTireMass(HMMWV_FialaTire self) -> double"""
        return _vehicle.HMMWV_FialaTire_GetTireMass(self)

    def GetTireInertia(self):
        r"""GetTireInertia(HMMWV_FialaTire self) -> ChVectorD"""
        return _vehicle.HMMWV_FialaTire_GetTireInertia(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(HMMWV_FialaTire self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.HMMWV_FialaTire_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(HMMWV_FialaTire self)"""
        return _vehicle.HMMWV_FialaTire_RemoveVisualizationAssets(self)

# Register HMMWV_FialaTire in _vehicle:
_vehicle.HMMWV_FialaTire_swigregister(HMMWV_FialaTire)

class HMMWV_TMeasyTire(ChTMeasyTire):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_TMeasyTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(HMMWV_TMeasyTire self, std::string const & name) -> HMMWV_TMeasyTire"""
        _vehicle.HMMWV_TMeasyTire_swiginit(self, _vehicle.new_HMMWV_TMeasyTire(name))
    __swig_destroy__ = _vehicle.delete_HMMWV_TMeasyTire

    def GetVisualizationWidth(self):
        r"""GetVisualizationWidth(HMMWV_TMeasyTire self) -> double"""
        return _vehicle.HMMWV_TMeasyTire_GetVisualizationWidth(self)

    def SetTMeasyParams(self):
        r"""SetTMeasyParams(HMMWV_TMeasyTire self)"""
        return _vehicle.HMMWV_TMeasyTire_SetTMeasyParams(self)

    def GetTireMass(self):
        r"""GetTireMass(HMMWV_TMeasyTire self) -> double"""
        return _vehicle.HMMWV_TMeasyTire_GetTireMass(self)

    def GetTireInertia(self):
        r"""GetTireInertia(HMMWV_TMeasyTire self) -> ChVectorD"""
        return _vehicle.HMMWV_TMeasyTire_GetTireInertia(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(HMMWV_TMeasyTire self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.HMMWV_TMeasyTire_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(HMMWV_TMeasyTire self)"""
        return _vehicle.HMMWV_TMeasyTire_RemoveVisualizationAssets(self)

    def GenerateCharacteristicPlots(self, dirname):
        r"""GenerateCharacteristicPlots(HMMWV_TMeasyTire self, std::string const & dirname)"""
        return _vehicle.HMMWV_TMeasyTire_GenerateCharacteristicPlots(self, dirname)

# Register HMMWV_TMeasyTire in _vehicle:
_vehicle.HMMWV_TMeasyTire_swigregister(HMMWV_TMeasyTire)

class Sedan_TMeasyTire(ChTMeasyTire):
    r"""Proxy of C++ chrono::vehicle::sedan::Sedan_TMeasyTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Sedan_TMeasyTire self, std::string const & name) -> Sedan_TMeasyTire"""
        _vehicle.Sedan_TMeasyTire_swiginit(self, _vehicle.new_Sedan_TMeasyTire(name))
    __swig_destroy__ = _vehicle.delete_Sedan_TMeasyTire

    def GetVisualizationWidth(self):
        r"""GetVisualizationWidth(Sedan_TMeasyTire self) -> double"""
        return _vehicle.Sedan_TMeasyTire_GetVisualizationWidth(self)

    def SetTMeasyParams(self):
        r"""SetTMeasyParams(Sedan_TMeasyTire self)"""
        return _vehicle.Sedan_TMeasyTire_SetTMeasyParams(self)

    def GetTireMass(self):
        r"""GetTireMass(Sedan_TMeasyTire self) -> double"""
        return _vehicle.Sedan_TMeasyTire_GetTireMass(self)

    def GetTireInertia(self):
        r"""GetTireInertia(Sedan_TMeasyTire self) -> ChVectorD"""
        return _vehicle.Sedan_TMeasyTire_GetTireInertia(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(Sedan_TMeasyTire self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.Sedan_TMeasyTire_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(Sedan_TMeasyTire self)"""
        return _vehicle.Sedan_TMeasyTire_RemoveVisualizationAssets(self)

    def GenerateCharacteristicPlots(self, dirname):
        r"""GenerateCharacteristicPlots(Sedan_TMeasyTire self, std::string const & dirname)"""
        return _vehicle.Sedan_TMeasyTire_GenerateCharacteristicPlots(self, dirname)

# Register Sedan_TMeasyTire in _vehicle:
_vehicle.Sedan_TMeasyTire_swigregister(Sedan_TMeasyTire)

class Sedan_RigidTire(ChRigidTire):
    r"""Proxy of C++ chrono::vehicle::sedan::Sedan_RigidTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, use_mesh=False):
        r"""__init__(Sedan_RigidTire self, std::string const & name, bool use_mesh=False) -> Sedan_RigidTire"""
        _vehicle.Sedan_RigidTire_swiginit(self, _vehicle.new_Sedan_RigidTire(name, use_mesh))
    __swig_destroy__ = _vehicle.delete_Sedan_RigidTire

    def GetRadius(self):
        r"""GetRadius(Sedan_RigidTire self) -> double"""
        return _vehicle.Sedan_RigidTire_GetRadius(self)

    def GetWidth(self):
        r"""GetWidth(Sedan_RigidTire self) -> double"""
        return _vehicle.Sedan_RigidTire_GetWidth(self)

    def GetTireMass(self):
        r"""GetTireMass(Sedan_RigidTire self) -> double"""
        return _vehicle.Sedan_RigidTire_GetTireMass(self)

    def GetTireInertia(self):
        r"""GetTireInertia(Sedan_RigidTire self) -> ChVectorD"""
        return _vehicle.Sedan_RigidTire_GetTireInertia(self)

# Register Sedan_RigidTire in _vehicle:
_vehicle.Sedan_RigidTire_swigregister(Sedan_RigidTire)

class CityBus_RigidTire(ChRigidTire):
    r"""Proxy of C++ chrono::vehicle::citybus::CityBus_RigidTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, use_mesh=False):
        r"""__init__(CityBus_RigidTire self, std::string const & name, bool use_mesh=False) -> CityBus_RigidTire"""
        _vehicle.CityBus_RigidTire_swiginit(self, _vehicle.new_CityBus_RigidTire(name, use_mesh))
    __swig_destroy__ = _vehicle.delete_CityBus_RigidTire

    def GetRadius(self):
        r"""GetRadius(CityBus_RigidTire self) -> double"""
        return _vehicle.CityBus_RigidTire_GetRadius(self)

    def GetWidth(self):
        r"""GetWidth(CityBus_RigidTire self) -> double"""
        return _vehicle.CityBus_RigidTire_GetWidth(self)

    def GetTireMass(self):
        r"""GetTireMass(CityBus_RigidTire self) -> double"""
        return _vehicle.CityBus_RigidTire_GetTireMass(self)

    def GetTireInertia(self):
        r"""GetTireInertia(CityBus_RigidTire self) -> ChVectorD"""
        return _vehicle.CityBus_RigidTire_GetTireInertia(self)

# Register CityBus_RigidTire in _vehicle:
_vehicle.CityBus_RigidTire_swigregister(CityBus_RigidTire)

class CityBus_TMeasyTire(ChTMeasyTire):
    r"""Proxy of C++ chrono::vehicle::citybus::CityBus_TMeasyTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(CityBus_TMeasyTire self, std::string const & name) -> CityBus_TMeasyTire"""
        _vehicle.CityBus_TMeasyTire_swiginit(self, _vehicle.new_CityBus_TMeasyTire(name))
    __swig_destroy__ = _vehicle.delete_CityBus_TMeasyTire

    def GetVisualizationWidth(self):
        r"""GetVisualizationWidth(CityBus_TMeasyTire self) -> double"""
        return _vehicle.CityBus_TMeasyTire_GetVisualizationWidth(self)

    def SetTMeasyParams(self):
        r"""SetTMeasyParams(CityBus_TMeasyTire self)"""
        return _vehicle.CityBus_TMeasyTire_SetTMeasyParams(self)

    def GetTireMass(self):
        r"""GetTireMass(CityBus_TMeasyTire self) -> double"""
        return _vehicle.CityBus_TMeasyTire_GetTireMass(self)

    def GetTireInertia(self):
        r"""GetTireInertia(CityBus_TMeasyTire self) -> ChVectorD"""
        return _vehicle.CityBus_TMeasyTire_GetTireInertia(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(CityBus_TMeasyTire self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.CityBus_TMeasyTire_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(CityBus_TMeasyTire self)"""
        return _vehicle.CityBus_TMeasyTire_RemoveVisualizationAssets(self)

    def GenerateCharacteristicPlots(self, dirname):
        r"""GenerateCharacteristicPlots(CityBus_TMeasyTire self, std::string const & dirname)"""
        return _vehicle.CityBus_TMeasyTire_GenerateCharacteristicPlots(self, dirname)

# Register CityBus_TMeasyTire in _vehicle:
_vehicle.CityBus_TMeasyTire_swigregister(CityBus_TMeasyTire)

class MAN_5t_TMeasyTire(ChTMeasyTire):
    r"""Proxy of C++ chrono::vehicle::man::MAN_5t_TMeasyTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(MAN_5t_TMeasyTire self, std::string const & name) -> MAN_5t_TMeasyTire"""
        _vehicle.MAN_5t_TMeasyTire_swiginit(self, _vehicle.new_MAN_5t_TMeasyTire(name))
    __swig_destroy__ = _vehicle.delete_MAN_5t_TMeasyTire

    def GetVisualizationWidth(self):
        r"""GetVisualizationWidth(MAN_5t_TMeasyTire self) -> double"""
        return _vehicle.MAN_5t_TMeasyTire_GetVisualizationWidth(self)

    def SetTMeasyParams(self):
        r"""SetTMeasyParams(MAN_5t_TMeasyTire self)"""
        return _vehicle.MAN_5t_TMeasyTire_SetTMeasyParams(self)

    def GetTireMass(self):
        r"""GetTireMass(MAN_5t_TMeasyTire self) -> double"""
        return _vehicle.MAN_5t_TMeasyTire_GetTireMass(self)

    def GetTireInertia(self):
        r"""GetTireInertia(MAN_5t_TMeasyTire self) -> ChVectorD"""
        return _vehicle.MAN_5t_TMeasyTire_GetTireInertia(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(MAN_5t_TMeasyTire self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.MAN_5t_TMeasyTire_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(MAN_5t_TMeasyTire self)"""
        return _vehicle.MAN_5t_TMeasyTire_RemoveVisualizationAssets(self)

    def GenerateCharacteristicPlots(self, dirname):
        r"""GenerateCharacteristicPlots(MAN_5t_TMeasyTire self, std::string const & dirname)"""
        return _vehicle.MAN_5t_TMeasyTire_GenerateCharacteristicPlots(self, dirname)

# Register MAN_5t_TMeasyTire in _vehicle:
_vehicle.MAN_5t_TMeasyTire_swigregister(MAN_5t_TMeasyTire)

class UAZBUS_TMeasyTireFront(ChTMeasyTire):
    r"""Proxy of C++ chrono::vehicle::uaz::UAZBUS_TMeasyTireFront class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(UAZBUS_TMeasyTireFront self, std::string const & name) -> UAZBUS_TMeasyTireFront"""
        _vehicle.UAZBUS_TMeasyTireFront_swiginit(self, _vehicle.new_UAZBUS_TMeasyTireFront(name))
    __swig_destroy__ = _vehicle.delete_UAZBUS_TMeasyTireFront

    def GetVisualizationWidth(self):
        r"""GetVisualizationWidth(UAZBUS_TMeasyTireFront self) -> double"""
        return _vehicle.UAZBUS_TMeasyTireFront_GetVisualizationWidth(self)

    def SetTMeasyParams(self):
        r"""SetTMeasyParams(UAZBUS_TMeasyTireFront self)"""
        return _vehicle.UAZBUS_TMeasyTireFront_SetTMeasyParams(self)

    def GetTireMass(self):
        r"""GetTireMass(UAZBUS_TMeasyTireFront self) -> double"""
        return _vehicle.UAZBUS_TMeasyTireFront_GetTireMass(self)

    def GetTireInertia(self):
        r"""GetTireInertia(UAZBUS_TMeasyTireFront self) -> ChVectorD"""
        return _vehicle.UAZBUS_TMeasyTireFront_GetTireInertia(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(UAZBUS_TMeasyTireFront self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.UAZBUS_TMeasyTireFront_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(UAZBUS_TMeasyTireFront self)"""
        return _vehicle.UAZBUS_TMeasyTireFront_RemoveVisualizationAssets(self)

    def GenerateCharacteristicPlots(self, dirname):
        r"""GenerateCharacteristicPlots(UAZBUS_TMeasyTireFront self, std::string const & dirname)"""
        return _vehicle.UAZBUS_TMeasyTireFront_GenerateCharacteristicPlots(self, dirname)

# Register UAZBUS_TMeasyTireFront in _vehicle:
_vehicle.UAZBUS_TMeasyTireFront_swigregister(UAZBUS_TMeasyTireFront)

class UAZBUS_TMeasyTireRear(ChTMeasyTire):
    r"""Proxy of C++ chrono::vehicle::uaz::UAZBUS_TMeasyTireRear class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(UAZBUS_TMeasyTireRear self, std::string const & name) -> UAZBUS_TMeasyTireRear"""
        _vehicle.UAZBUS_TMeasyTireRear_swiginit(self, _vehicle.new_UAZBUS_TMeasyTireRear(name))
    __swig_destroy__ = _vehicle.delete_UAZBUS_TMeasyTireRear

    def GetVisualizationWidth(self):
        r"""GetVisualizationWidth(UAZBUS_TMeasyTireRear self) -> double"""
        return _vehicle.UAZBUS_TMeasyTireRear_GetVisualizationWidth(self)

    def SetTMeasyParams(self):
        r"""SetTMeasyParams(UAZBUS_TMeasyTireRear self)"""
        return _vehicle.UAZBUS_TMeasyTireRear_SetTMeasyParams(self)

    def GetTireMass(self):
        r"""GetTireMass(UAZBUS_TMeasyTireRear self) -> double"""
        return _vehicle.UAZBUS_TMeasyTireRear_GetTireMass(self)

    def GetTireInertia(self):
        r"""GetTireInertia(UAZBUS_TMeasyTireRear self) -> ChVectorD"""
        return _vehicle.UAZBUS_TMeasyTireRear_GetTireInertia(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(UAZBUS_TMeasyTireRear self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.UAZBUS_TMeasyTireRear_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(UAZBUS_TMeasyTireRear self)"""
        return _vehicle.UAZBUS_TMeasyTireRear_RemoveVisualizationAssets(self)

    def GenerateCharacteristicPlots(self, dirname):
        r"""GenerateCharacteristicPlots(UAZBUS_TMeasyTireRear self, std::string const & dirname)"""
        return _vehicle.UAZBUS_TMeasyTireRear_GenerateCharacteristicPlots(self, dirname)

# Register UAZBUS_TMeasyTireRear in _vehicle:
_vehicle.UAZBUS_TMeasyTireRear_swigregister(UAZBUS_TMeasyTireRear)

class UAZBUS_RigidTire(ChRigidTire):
    r"""Proxy of C++ chrono::vehicle::uaz::UAZBUS_RigidTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, use_mesh=False):
        r"""__init__(UAZBUS_RigidTire self, std::string const & name, bool use_mesh=False) -> UAZBUS_RigidTire"""
        _vehicle.UAZBUS_RigidTire_swiginit(self, _vehicle.new_UAZBUS_RigidTire(name, use_mesh))
    __swig_destroy__ = _vehicle.delete_UAZBUS_RigidTire

    def GetRadius(self):
        r"""GetRadius(UAZBUS_RigidTire self) -> double"""
        return _vehicle.UAZBUS_RigidTire_GetRadius(self)

    def GetWidth(self):
        r"""GetWidth(UAZBUS_RigidTire self) -> double"""
        return _vehicle.UAZBUS_RigidTire_GetWidth(self)

    def GetTireMass(self):
        r"""GetTireMass(UAZBUS_RigidTire self) -> double"""
        return _vehicle.UAZBUS_RigidTire_GetTireMass(self)

    def GetTireInertia(self):
        r"""GetTireInertia(UAZBUS_RigidTire self) -> ChVectorD"""
        return _vehicle.UAZBUS_RigidTire_GetTireInertia(self)

# Register UAZBUS_RigidTire in _vehicle:
_vehicle.UAZBUS_RigidTire_swigregister(UAZBUS_RigidTire)

class UAZBUS_Pac02Tire(ChPac02Tire):
    r"""Proxy of C++ chrono::vehicle::uaz::UAZBUS_Pac02Tire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, pressure_level=2):
        r"""__init__(UAZBUS_Pac02Tire self, std::string const & name, unsigned int pressure_level=2) -> UAZBUS_Pac02Tire"""
        _vehicle.UAZBUS_Pac02Tire_swiginit(self, _vehicle.new_UAZBUS_Pac02Tire(name, pressure_level))
    __swig_destroy__ = _vehicle.delete_UAZBUS_Pac02Tire

    def GetTireMass(self):
        r"""GetTireMass(UAZBUS_Pac02Tire self) -> double"""
        return _vehicle.UAZBUS_Pac02Tire_GetTireMass(self)

    def GetTireInertia(self):
        r"""GetTireInertia(UAZBUS_Pac02Tire self) -> ChVectorD"""
        return _vehicle.UAZBUS_Pac02Tire_GetTireInertia(self)

    def GetVisualizationWidth(self):
        r"""GetVisualizationWidth(UAZBUS_Pac02Tire self) -> double"""
        return _vehicle.UAZBUS_Pac02Tire_GetVisualizationWidth(self)

    def SetMFParams(self):
        r"""SetMFParams(UAZBUS_Pac02Tire self)"""
        return _vehicle.UAZBUS_Pac02Tire_SetMFParams(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(UAZBUS_Pac02Tire self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.UAZBUS_Pac02Tire_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(UAZBUS_Pac02Tire self)"""
        return _vehicle.UAZBUS_Pac02Tire_RemoveVisualizationAssets(self)

# Register UAZBUS_Pac02Tire in _vehicle:
_vehicle.UAZBUS_Pac02Tire_swigregister(UAZBUS_Pac02Tire)

class Gator_RigidTire_Front(ChRigidTire):
    r"""Proxy of C++ chrono::vehicle::gator::Gator_RigidTire_Front class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, use_mesh=False):
        r"""__init__(Gator_RigidTire_Front self, std::string const & name, bool use_mesh=False) -> Gator_RigidTire_Front"""
        _vehicle.Gator_RigidTire_Front_swiginit(self, _vehicle.new_Gator_RigidTire_Front(name, use_mesh))
    __swig_destroy__ = _vehicle.delete_Gator_RigidTire_Front

    def GetRadius(self):
        r"""GetRadius(Gator_RigidTire_Front self) -> double"""
        return _vehicle.Gator_RigidTire_Front_GetRadius(self)

    def GetWidth(self):
        r"""GetWidth(Gator_RigidTire_Front self) -> double"""
        return _vehicle.Gator_RigidTire_Front_GetWidth(self)

    def GetTireMass(self):
        r"""GetTireMass(Gator_RigidTire_Front self) -> double"""
        return _vehicle.Gator_RigidTire_Front_GetTireMass(self)

    def GetTireInertia(self):
        r"""GetTireInertia(Gator_RigidTire_Front self) -> ChVectorD"""
        return _vehicle.Gator_RigidTire_Front_GetTireInertia(self)

# Register Gator_RigidTire_Front in _vehicle:
_vehicle.Gator_RigidTire_Front_swigregister(Gator_RigidTire_Front)

class Gator_RigidTire_Rear(ChRigidTire):
    r"""Proxy of C++ chrono::vehicle::gator::Gator_RigidTire_Rear class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, use_mesh=False):
        r"""__init__(Gator_RigidTire_Rear self, std::string const & name, bool use_mesh=False) -> Gator_RigidTire_Rear"""
        _vehicle.Gator_RigidTire_Rear_swiginit(self, _vehicle.new_Gator_RigidTire_Rear(name, use_mesh))
    __swig_destroy__ = _vehicle.delete_Gator_RigidTire_Rear

    def GetRadius(self):
        r"""GetRadius(Gator_RigidTire_Rear self) -> double"""
        return _vehicle.Gator_RigidTire_Rear_GetRadius(self)

    def GetWidth(self):
        r"""GetWidth(Gator_RigidTire_Rear self) -> double"""
        return _vehicle.Gator_RigidTire_Rear_GetWidth(self)

    def GetTireMass(self):
        r"""GetTireMass(Gator_RigidTire_Rear self) -> double"""
        return _vehicle.Gator_RigidTire_Rear_GetTireMass(self)

    def GetTireInertia(self):
        r"""GetTireInertia(Gator_RigidTire_Rear self) -> ChVectorD"""
        return _vehicle.Gator_RigidTire_Rear_GetTireInertia(self)

# Register Gator_RigidTire_Rear in _vehicle:
_vehicle.Gator_RigidTire_Rear_swigregister(Gator_RigidTire_Rear)

class Gator_TMeasyTire_Front(ChTMeasyTire):
    r"""Proxy of C++ chrono::vehicle::gator::Gator_TMeasyTire_Front class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Gator_TMeasyTire_Front self, std::string const & name) -> Gator_TMeasyTire_Front"""
        _vehicle.Gator_TMeasyTire_Front_swiginit(self, _vehicle.new_Gator_TMeasyTire_Front(name))
    __swig_destroy__ = _vehicle.delete_Gator_TMeasyTire_Front

    def GetVisualizationWidth(self):
        r"""GetVisualizationWidth(Gator_TMeasyTire_Front self) -> double"""
        return _vehicle.Gator_TMeasyTire_Front_GetVisualizationWidth(self)

    def SetTMeasyParams(self):
        r"""SetTMeasyParams(Gator_TMeasyTire_Front self)"""
        return _vehicle.Gator_TMeasyTire_Front_SetTMeasyParams(self)

    def GetTireMass(self):
        r"""GetTireMass(Gator_TMeasyTire_Front self) -> double"""
        return _vehicle.Gator_TMeasyTire_Front_GetTireMass(self)

    def GetTireInertia(self):
        r"""GetTireInertia(Gator_TMeasyTire_Front self) -> ChVectorD"""
        return _vehicle.Gator_TMeasyTire_Front_GetTireInertia(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(Gator_TMeasyTire_Front self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.Gator_TMeasyTire_Front_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(Gator_TMeasyTire_Front self)"""
        return _vehicle.Gator_TMeasyTire_Front_RemoveVisualizationAssets(self)

    def GenerateCharacteristicPlots(self, dirname):
        r"""GenerateCharacteristicPlots(Gator_TMeasyTire_Front self, std::string const & dirname)"""
        return _vehicle.Gator_TMeasyTire_Front_GenerateCharacteristicPlots(self, dirname)

# Register Gator_TMeasyTire_Front in _vehicle:
_vehicle.Gator_TMeasyTire_Front_swigregister(Gator_TMeasyTire_Front)

class Gator_TMeasyTire_Rear(ChTMeasyTire):
    r"""Proxy of C++ chrono::vehicle::gator::Gator_TMeasyTire_Rear class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Gator_TMeasyTire_Rear self, std::string const & name) -> Gator_TMeasyTire_Rear"""
        _vehicle.Gator_TMeasyTire_Rear_swiginit(self, _vehicle.new_Gator_TMeasyTire_Rear(name))
    __swig_destroy__ = _vehicle.delete_Gator_TMeasyTire_Rear

    def GetVisualizationWidth(self):
        r"""GetVisualizationWidth(Gator_TMeasyTire_Rear self) -> double"""
        return _vehicle.Gator_TMeasyTire_Rear_GetVisualizationWidth(self)

    def SetTMeasyParams(self):
        r"""SetTMeasyParams(Gator_TMeasyTire_Rear self)"""
        return _vehicle.Gator_TMeasyTire_Rear_SetTMeasyParams(self)

    def GetTireMass(self):
        r"""GetTireMass(Gator_TMeasyTire_Rear self) -> double"""
        return _vehicle.Gator_TMeasyTire_Rear_GetTireMass(self)

    def GetTireInertia(self):
        r"""GetTireInertia(Gator_TMeasyTire_Rear self) -> ChVectorD"""
        return _vehicle.Gator_TMeasyTire_Rear_GetTireInertia(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(Gator_TMeasyTire_Rear self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.Gator_TMeasyTire_Rear_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(Gator_TMeasyTire_Rear self)"""
        return _vehicle.Gator_TMeasyTire_Rear_RemoveVisualizationAssets(self)

    def GenerateCharacteristicPlots(self, dirname):
        r"""GenerateCharacteristicPlots(Gator_TMeasyTire_Rear self, std::string const & dirname)"""
        return _vehicle.Gator_TMeasyTire_Rear_GenerateCharacteristicPlots(self, dirname)

# Register Gator_TMeasyTire_Rear in _vehicle:
_vehicle.Gator_TMeasyTire_Rear_swigregister(Gator_TMeasyTire_Rear)

class RCCar_RigidTire(ChRigidTire):
    r"""Proxy of C++ chrono::vehicle::rccar::RCCar_RigidTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, use_mesh=False):
        r"""__init__(RCCar_RigidTire self, std::string const & name, bool use_mesh=False) -> RCCar_RigidTire"""
        _vehicle.RCCar_RigidTire_swiginit(self, _vehicle.new_RCCar_RigidTire(name, use_mesh))
    __swig_destroy__ = _vehicle.delete_RCCar_RigidTire

    def GetRadius(self):
        r"""GetRadius(RCCar_RigidTire self) -> double"""
        return _vehicle.RCCar_RigidTire_GetRadius(self)

    def GetWidth(self):
        r"""GetWidth(RCCar_RigidTire self) -> double"""
        return _vehicle.RCCar_RigidTire_GetWidth(self)

    def GetTireMass(self):
        r"""GetTireMass(RCCar_RigidTire self) -> double"""
        return _vehicle.RCCar_RigidTire_GetTireMass(self)

    def GetTireInertia(self):
        r"""GetTireInertia(RCCar_RigidTire self) -> ChVectorD"""
        return _vehicle.RCCar_RigidTire_GetTireInertia(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(RCCar_RigidTire self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.RCCar_RigidTire_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(RCCar_RigidTire self)"""
        return _vehicle.RCCar_RigidTire_RemoveVisualizationAssets(self)

# Register RCCar_RigidTire in _vehicle:
_vehicle.RCCar_RigidTire_swigregister(RCCar_RigidTire)

class FEDA_Pac02Tire(ChPac02Tire):
    r"""Proxy of C++ chrono::vehicle::feda::FEDA_Pac02Tire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, pressure_level=2):
        r"""__init__(FEDA_Pac02Tire self, std::string const & name, unsigned int pressure_level=2) -> FEDA_Pac02Tire"""
        _vehicle.FEDA_Pac02Tire_swiginit(self, _vehicle.new_FEDA_Pac02Tire(name, pressure_level))
    __swig_destroy__ = _vehicle.delete_FEDA_Pac02Tire

    def GetTireMass(self):
        r"""GetTireMass(FEDA_Pac02Tire self) -> double"""
        return _vehicle.FEDA_Pac02Tire_GetTireMass(self)

    def GetTireInertia(self):
        r"""GetTireInertia(FEDA_Pac02Tire self) -> ChVectorD"""
        return _vehicle.FEDA_Pac02Tire_GetTireInertia(self)

    def GetVisualizationWidth(self):
        r"""GetVisualizationWidth(FEDA_Pac02Tire self) -> double"""
        return _vehicle.FEDA_Pac02Tire_GetVisualizationWidth(self)

    def SetMFParams(self):
        r"""SetMFParams(FEDA_Pac02Tire self)"""
        return _vehicle.FEDA_Pac02Tire_SetMFParams(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(FEDA_Pac02Tire self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.FEDA_Pac02Tire_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(FEDA_Pac02Tire self)"""
        return _vehicle.FEDA_Pac02Tire_RemoveVisualizationAssets(self)

# Register FEDA_Pac02Tire in _vehicle:
_vehicle.FEDA_Pac02Tire_swigregister(FEDA_Pac02Tire)

class FEDA_RigidTire(ChRigidTire):
    r"""Proxy of C++ chrono::vehicle::feda::FEDA_RigidTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, use_mesh=False):
        r"""__init__(FEDA_RigidTire self, std::string const & name, bool use_mesh=False) -> FEDA_RigidTire"""
        _vehicle.FEDA_RigidTire_swiginit(self, _vehicle.new_FEDA_RigidTire(name, use_mesh))
    __swig_destroy__ = _vehicle.delete_FEDA_RigidTire

    def GetRadius(self):
        r"""GetRadius(FEDA_RigidTire self) -> double"""
        return _vehicle.FEDA_RigidTire_GetRadius(self)

    def GetWidth(self):
        r"""GetWidth(FEDA_RigidTire self) -> double"""
        return _vehicle.FEDA_RigidTire_GetWidth(self)

    def GetTireMass(self):
        r"""GetTireMass(FEDA_RigidTire self) -> double"""
        return _vehicle.FEDA_RigidTire_GetTireMass(self)

    def GetTireInertia(self):
        r"""GetTireInertia(FEDA_RigidTire self) -> ChVectorD"""
        return _vehicle.FEDA_RigidTire_GetTireInertia(self)

# Register FEDA_RigidTire in _vehicle:
_vehicle.FEDA_RigidTire_swigregister(FEDA_RigidTire)

class ChAxle(object):
    r"""Proxy of C++ chrono::vehicle::ChAxle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChAxle self) -> ChAxle"""
        _vehicle.ChAxle_swiginit(self, _vehicle.new_ChAxle())
    __swig_destroy__ = _vehicle.delete_ChAxle

    def SetOutput(self, state):
        r"""SetOutput(ChAxle self, bool state)"""
        return _vehicle.ChAxle_SetOutput(self, state)

    def Initialize(self, chassis, subchassis, steering, susp_location, arb_location, wheel_separation=0, left_ang_vel=0, right_ang_vel=0):
        r"""Initialize(ChAxle self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, std::shared_ptr< chrono::vehicle::ChSubchassis > subchassis, std::shared_ptr< chrono::vehicle::ChSteering > steering, ChVectorD susp_location, ChVectorD arb_location, double wheel_separation=0, double left_ang_vel=0, double right_ang_vel=0)"""
        return _vehicle.ChAxle_Initialize(self, chassis, subchassis, steering, susp_location, arb_location, wheel_separation, left_ang_vel, right_ang_vel)

    def Synchronize(self, time, driver_inputs):
        r"""Synchronize(ChAxle self, double time, DriverInputs driver_inputs)"""
        return _vehicle.ChAxle_Synchronize(self, time, driver_inputs)

    def GetWheels(self):
        r"""GetWheels(ChAxle self) -> ChWheelList"""
        return _vehicle.ChAxle_GetWheels(self)

    def GetWheel(self, *args):
        r"""GetWheel(ChAxle self, chrono::vehicle::VehicleSide side, chrono::vehicle::WheelLocation location=SINGLE) -> std::shared_ptr< chrono::vehicle::ChWheel >"""
        return _vehicle.ChAxle_GetWheel(self, *args)

    def GetBrake(self, side):
        r"""GetBrake(ChAxle self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::vehicle::ChBrake >"""
        return _vehicle.ChAxle_GetBrake(self, side)
    m_suspension = property(_vehicle.ChAxle_m_suspension_get, _vehicle.ChAxle_m_suspension_set, doc=r"""m_suspension : std::shared_ptr<(chrono::vehicle::ChSuspension)>""")
    m_brake_left = property(_vehicle.ChAxle_m_brake_left_get, _vehicle.ChAxle_m_brake_left_set, doc=r"""m_brake_left : std::shared_ptr<(chrono::vehicle::ChBrake)>""")
    m_brake_right = property(_vehicle.ChAxle_m_brake_right_get, _vehicle.ChAxle_m_brake_right_set, doc=r"""m_brake_right : std::shared_ptr<(chrono::vehicle::ChBrake)>""")
    m_antirollbar = property(_vehicle.ChAxle_m_antirollbar_get, _vehicle.ChAxle_m_antirollbar_set, doc=r"""m_antirollbar : std::shared_ptr<(ChAntirollBar)>""")
    m_wheels = property(_vehicle.ChAxle_m_wheels_get, _vehicle.ChAxle_m_wheels_set, doc=r"""m_wheels : chrono::vehicle::ChWheelList""")

# Register ChAxle in _vehicle:
_vehicle.ChAxle_swigregister(ChAxle)

class ChWheeledVehicle(ChVehicle):
    r"""Proxy of C++ chrono::vehicle::ChWheeledVehicle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChWheeledVehicle

    def GetTemplateName(self):
        r"""GetTemplateName(ChWheeledVehicle self) -> std::string"""
        return _vehicle.ChWheeledVehicle_GetTemplateName(self)

    def GetAxles(self):
        r"""GetAxles(ChWheeledVehicle self) -> ChAxleList"""
        return _vehicle.ChWheeledVehicle_GetAxles(self)

    def GetAxle(self, id):
        r"""GetAxle(ChWheeledVehicle self, int id) -> std::shared_ptr< chrono::vehicle::ChAxle >"""
        return _vehicle.ChWheeledVehicle_GetAxle(self, id)

    def GetSuspension(self, id):
        r"""GetSuspension(ChWheeledVehicle self, int id) -> std::shared_ptr< chrono::vehicle::ChSuspension >"""
        return _vehicle.ChWheeledVehicle_GetSuspension(self, id)

    def GetSteerings(self):
        r"""GetSteerings(ChWheeledVehicle self) -> chrono::vehicle::ChSteeringList const &"""
        return _vehicle.ChWheeledVehicle_GetSteerings(self)

    def GetSteering(self, id):
        r"""GetSteering(ChWheeledVehicle self, int id) -> std::shared_ptr< chrono::vehicle::ChSteering >"""
        return _vehicle.ChWheeledVehicle_GetSteering(self, id)

    def GetWheel(self, *args):
        r"""GetWheel(ChWheeledVehicle self, int axle, chrono::vehicle::VehicleSide side, chrono::vehicle::WheelLocation location=SINGLE) -> std::shared_ptr< chrono::vehicle::ChWheel >"""
        return _vehicle.ChWheeledVehicle_GetWheel(self, *args)

    def GetTire(self, *args):
        r"""GetTire(ChWheeledVehicle self, int axle, chrono::vehicle::VehicleSide side, chrono::vehicle::WheelLocation location=SINGLE) -> std::shared_ptr< chrono::vehicle::ChTire >"""
        return _vehicle.ChWheeledVehicle_GetTire(self, *args)

    def GetBrake(self, axle, side):
        r"""GetBrake(ChWheeledVehicle self, int axle, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::vehicle::ChBrake >"""
        return _vehicle.ChWheeledVehicle_GetBrake(self, axle, side)

    def GetDriveline(self):
        r"""GetDriveline(ChWheeledVehicle self) -> std::shared_ptr< chrono::vehicle::ChDrivelineWV >"""
        return _vehicle.ChWheeledVehicle_GetDriveline(self)

    def GetSubchassis(self, id):
        r"""GetSubchassis(ChWheeledVehicle self, int id) -> std::shared_ptr< chrono::vehicle::ChSubchassis >"""
        return _vehicle.ChWheeledVehicle_GetSubchassis(self, id)

    def GetNumberAxles(self):
        r"""GetNumberAxles(ChWheeledVehicle self) -> int"""
        return _vehicle.ChWheeledVehicle_GetNumberAxles(self)

    def GetSpindlePos(self, axle, side):
        r"""GetSpindlePos(ChWheeledVehicle self, int axle, chrono::vehicle::VehicleSide side) -> ChVectorD"""
        return _vehicle.ChWheeledVehicle_GetSpindlePos(self, axle, side)

    def GetSpindleRot(self, axle, side):
        r"""GetSpindleRot(ChWheeledVehicle self, int axle, chrono::vehicle::VehicleSide side) -> ChQuaternionD"""
        return _vehicle.ChWheeledVehicle_GetSpindleRot(self, axle, side)

    def GetSpindleLinVel(self, axle, side):
        r"""GetSpindleLinVel(ChWheeledVehicle self, int axle, chrono::vehicle::VehicleSide side) -> ChVectorD"""
        return _vehicle.ChWheeledVehicle_GetSpindleLinVel(self, axle, side)

    def GetSpindleAngVel(self, axle, side):
        r"""GetSpindleAngVel(ChWheeledVehicle self, int axle, chrono::vehicle::VehicleSide side) -> ChVectorD"""
        return _vehicle.ChWheeledVehicle_GetSpindleAngVel(self, axle, side)

    def GetSpindleOmega(self, axle, side):
        r"""GetSpindleOmega(ChWheeledVehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChWheeledVehicle_GetSpindleOmega(self, axle, side)

    def GetWheelbase(self):
        r"""GetWheelbase(ChWheeledVehicle self) -> double"""
        return _vehicle.ChWheeledVehicle_GetWheelbase(self)

    def GetWheeltrack(self, id):
        r"""GetWheeltrack(ChWheeledVehicle self, int id) -> double"""
        return _vehicle.ChWheeledVehicle_GetWheeltrack(self, id)

    def GetMinTurningRadius(self):
        r"""GetMinTurningRadius(ChWheeledVehicle self) -> double"""
        return _vehicle.ChWheeledVehicle_GetMinTurningRadius(self)

    def GetMaxSteeringAngle(self):
        r"""GetMaxSteeringAngle(ChWheeledVehicle self) -> double"""
        return _vehicle.ChWheeledVehicle_GetMaxSteeringAngle(self)

    def SetSubchassisVisualizationType(self, vis):
        r"""SetSubchassisVisualizationType(ChWheeledVehicle self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChWheeledVehicle_SetSubchassisVisualizationType(self, vis)

    def SetSuspensionVisualizationType(self, vis):
        r"""SetSuspensionVisualizationType(ChWheeledVehicle self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChWheeledVehicle_SetSuspensionVisualizationType(self, vis)

    def SetSteeringVisualizationType(self, vis):
        r"""SetSteeringVisualizationType(ChWheeledVehicle self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChWheeledVehicle_SetSteeringVisualizationType(self, vis)

    def SetWheelVisualizationType(self, vis):
        r"""SetWheelVisualizationType(ChWheeledVehicle self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChWheeledVehicle_SetWheelVisualizationType(self, vis)

    def SetTireVisualizationType(self, vis):
        r"""SetTireVisualizationType(ChWheeledVehicle self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChWheeledVehicle_SetTireVisualizationType(self, vis)

    def SetWheelCollide(self, state):
        r"""SetWheelCollide(ChWheeledVehicle self, bool state)"""
        return _vehicle.ChWheeledVehicle_SetWheelCollide(self, state)

    def SetChassisVehicleCollide(self, state):
        r"""SetChassisVehicleCollide(ChWheeledVehicle self, bool state)"""
        return _vehicle.ChWheeledVehicle_SetChassisVehicleCollide(self, state)

    def SetSuspensionOutput(self, id, state):
        r"""SetSuspensionOutput(ChWheeledVehicle self, int id, bool state)"""
        return _vehicle.ChWheeledVehicle_SetSuspensionOutput(self, id, state)

    def SetSteeringOutput(self, id, state):
        r"""SetSteeringOutput(ChWheeledVehicle self, int id, bool state)"""
        return _vehicle.ChWheeledVehicle_SetSteeringOutput(self, id, state)

    def SetSubchassisOutput(self, id, state):
        r"""SetSubchassisOutput(ChWheeledVehicle self, int id, bool state)"""
        return _vehicle.ChWheeledVehicle_SetSubchassisOutput(self, id, state)

    def SetAntirollbarOutput(self, id, state):
        r"""SetAntirollbarOutput(ChWheeledVehicle self, int id, bool state)"""
        return _vehicle.ChWheeledVehicle_SetAntirollbarOutput(self, id, state)

    def SetDrivelineOutput(self, state):
        r"""SetDrivelineOutput(ChWheeledVehicle self, bool state)"""
        return _vehicle.ChWheeledVehicle_SetDrivelineOutput(self, state)

    def InitializeTire(self, *args):
        r"""InitializeTire(ChWheeledVehicle self, std::shared_ptr< chrono::vehicle::ChTire > tire, std::shared_ptr< chrono::vehicle::ChWheel > wheel, chrono::vehicle::VisualizationType tire_vis=PRIMITIVES, chrono::vehicle::ChTire::CollisionType tire_coll=SINGLE_POINT)"""
        return _vehicle.ChWheeledVehicle_InitializeTire(self, *args)

    def InitializeInertiaProperties(self):
        r"""InitializeInertiaProperties(ChWheeledVehicle self)"""
        return _vehicle.ChWheeledVehicle_InitializeInertiaProperties(self)

    def Synchronize(self, time, driver_inputs, terrain):
        r"""Synchronize(ChWheeledVehicle self, double time, DriverInputs driver_inputs, ChTerrain terrain)"""
        return _vehicle.ChWheeledVehicle_Synchronize(self, time, driver_inputs, terrain)

    def Advance(self, step):
        r"""Advance(ChWheeledVehicle self, double step)"""
        return _vehicle.ChWheeledVehicle_Advance(self, step)

    def LockAxleDifferential(self, axle, lock):
        r"""LockAxleDifferential(ChWheeledVehicle self, int axle, bool lock)"""
        return _vehicle.ChWheeledVehicle_LockAxleDifferential(self, axle, lock)

    def LockCentralDifferential(self, which, lock):
        r"""LockCentralDifferential(ChWheeledVehicle self, int which, bool lock)"""
        return _vehicle.ChWheeledVehicle_LockCentralDifferential(self, which, lock)

    def EnableBrakeLocking(self, lock):
        r"""EnableBrakeLocking(ChWheeledVehicle self, bool lock)"""
        return _vehicle.ChWheeledVehicle_EnableBrakeLocking(self, lock)

    def ApplyParkingBrake(self, lock):
        r"""ApplyParkingBrake(ChWheeledVehicle self, bool lock)"""
        return _vehicle.ChWheeledVehicle_ApplyParkingBrake(self, lock)

    def ParkingBrake(self):
        r"""ParkingBrake(ChWheeledVehicle self) -> bool"""
        return _vehicle.ChWheeledVehicle_ParkingBrake(self)

    def DisconnectDriveline(self):
        r"""DisconnectDriveline(ChWheeledVehicle self)"""
        return _vehicle.ChWheeledVehicle_DisconnectDriveline(self)

    def LogConstraintViolations(self):
        r"""LogConstraintViolations(ChWheeledVehicle self)"""
        return _vehicle.ChWheeledVehicle_LogConstraintViolations(self)

    def LogSubsystemTypes(self):
        r"""LogSubsystemTypes(ChWheeledVehicle self)"""
        return _vehicle.ChWheeledVehicle_LogSubsystemTypes(self)

    def ExportComponentList(self, *args):
        r"""
        ExportComponentList(ChWheeledVehicle self) -> std::string
        ExportComponentList(ChWheeledVehicle self, std::string const & filename)
        """
        return _vehicle.ChWheeledVehicle_ExportComponentList(self, *args)

# Register ChWheeledVehicle in _vehicle:
_vehicle.ChWheeledVehicle_swigregister(ChWheeledVehicle)

class ChWheeledTrailer(object):
    r"""Proxy of C++ chrono::vehicle::ChWheeledTrailer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChWheeledTrailer

    def GetName(self):
        r"""GetName(ChWheeledTrailer self) -> std::string const &"""
        return _vehicle.ChWheeledTrailer_GetName(self)

    def SetName(self, name):
        r"""SetName(ChWheeledTrailer self, std::string const & name)"""
        return _vehicle.ChWheeledTrailer_SetName(self, name)

    def GetNumberAxles(self):
        r"""GetNumberAxles(ChWheeledTrailer self) -> int"""
        return _vehicle.ChWheeledTrailer_GetNumberAxles(self)

    def GetTemplateName(self):
        r"""GetTemplateName(ChWheeledTrailer self) -> std::string"""
        return _vehicle.ChWheeledTrailer_GetTemplateName(self)

    def GetChassis(self):
        r"""GetChassis(ChWheeledTrailer self) -> std::shared_ptr< chrono::vehicle::ChChassisRear >"""
        return _vehicle.ChWheeledTrailer_GetChassis(self)

    def GetAxles(self):
        r"""GetAxles(ChWheeledTrailer self) -> ChAxleList"""
        return _vehicle.ChWheeledTrailer_GetAxles(self)

    def GetAxle(self, id):
        r"""GetAxle(ChWheeledTrailer self, int id) -> std::shared_ptr< chrono::vehicle::ChAxle >"""
        return _vehicle.ChWheeledTrailer_GetAxle(self, id)

    def SetChassisVisualizationType(self, vis):
        r"""SetChassisVisualizationType(ChWheeledTrailer self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChWheeledTrailer_SetChassisVisualizationType(self, vis)

    def SetSuspensionVisualizationType(self, vis):
        r"""SetSuspensionVisualizationType(ChWheeledTrailer self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChWheeledTrailer_SetSuspensionVisualizationType(self, vis)

    def SetWheelVisualizationType(self, vis):
        r"""SetWheelVisualizationType(ChWheeledTrailer self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChWheeledTrailer_SetWheelVisualizationType(self, vis)

    def SetTireVisualizationType(self, vis):
        r"""SetTireVisualizationType(ChWheeledTrailer self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChWheeledTrailer_SetTireVisualizationType(self, vis)

    def Initialize(self, frontChassis):
        r"""Initialize(ChWheeledTrailer self, std::shared_ptr< chrono::vehicle::ChChassis > frontChassis)"""
        return _vehicle.ChWheeledTrailer_Initialize(self, frontChassis)

    def InitializeTire(self, *args):
        r"""InitializeTire(ChWheeledTrailer self, std::shared_ptr< chrono::vehicle::ChTire > tire, std::shared_ptr< chrono::vehicle::ChWheel > wheel, chrono::vehicle::VisualizationType tire_vis=PRIMITIVES, chrono::vehicle::ChTire::CollisionType tire_coll=SINGLE_POINT)"""
        return _vehicle.ChWheeledTrailer_InitializeTire(self, *args)

    def Synchronize(self, time, driver_inputs, terrain):
        r"""Synchronize(ChWheeledTrailer self, double time, DriverInputs driver_inputs, ChTerrain terrain)"""
        return _vehicle.ChWheeledTrailer_Synchronize(self, time, driver_inputs, terrain)

    def Advance(self, step):
        r"""Advance(ChWheeledTrailer self, double step)"""
        return _vehicle.ChWheeledTrailer_Advance(self, step)

# Register ChWheeledTrailer in _vehicle:
_vehicle.ChWheeledTrailer_swigregister(ChWheeledTrailer)

class WheeledVehicle(ChWheeledVehicle):
    r"""Proxy of C++ chrono::vehicle::WheeledVehicle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(WheeledVehicle self, std::string const & filename, chrono::ChContactMethod contact_method=NSC, bool create_powertrain=True, bool create_tires=True) -> WheeledVehicle
        __init__(WheeledVehicle self, ChSystem system, std::string const & filename, bool create_powertrain=True, bool create_tires=True) -> WheeledVehicle
        """
        _vehicle.WheeledVehicle_swiginit(self, _vehicle.new_WheeledVehicle(*args))
    __swig_destroy__ = _vehicle.delete_WheeledVehicle

    def GetNumberAxles(self):
        r"""GetNumberAxles(WheeledVehicle self) -> int"""
        return _vehicle.WheeledVehicle_GetNumberAxles(self)

    def GetWheelbase(self):
        r"""GetWheelbase(WheeledVehicle self) -> double"""
        return _vehicle.WheeledVehicle_GetWheelbase(self)

    def GetMinTurningRadius(self):
        r"""GetMinTurningRadius(WheeledVehicle self) -> double"""
        return _vehicle.WheeledVehicle_GetMinTurningRadius(self)

    def GetMaxSteeringAngle(self):
        r"""GetMaxSteeringAngle(WheeledVehicle self) -> double"""
        return _vehicle.WheeledVehicle_GetMaxSteeringAngle(self)

    def Initialize(self, chassisPos, chassisFwdVel=0):
        r"""Initialize(WheeledVehicle self, ChCoordsysD chassisPos, double chassisFwdVel=0)"""
        return _vehicle.WheeledVehicle_Initialize(self, chassisPos, chassisFwdVel)

# Register WheeledVehicle in _vehicle:
_vehicle.WheeledVehicle_swigregister(WheeledVehicle)

class WheeledTrailer(ChWheeledTrailer):
    r"""Proxy of C++ chrono::vehicle::WheeledTrailer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, system, filename, create_tires=True):
        r"""__init__(WheeledTrailer self, ChSystem system, std::string const & filename, bool create_tires=True) -> WheeledTrailer"""
        _vehicle.WheeledTrailer_swiginit(self, _vehicle.new_WheeledTrailer(system, filename, create_tires))
    __swig_destroy__ = _vehicle.delete_WheeledTrailer

    def GetNumberAxles(self):
        r"""GetNumberAxles(WheeledTrailer self) -> int"""
        return _vehicle.WheeledTrailer_GetNumberAxles(self)

    def Initialize(self, frontChassis):
        r"""Initialize(WheeledTrailer self, std::shared_ptr< chrono::vehicle::ChChassis > frontChassis)"""
        return _vehicle.WheeledTrailer_Initialize(self, frontChassis)

# Register WheeledTrailer in _vehicle:
_vehicle.WheeledTrailer_swigregister(WheeledTrailer)

class ChSuspensionTestRig(object):
    r"""Proxy of C++ chrono::vehicle::ChSuspensionTestRig class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChSuspensionTestRig

    def SetDriver(self, driver):
        r"""SetDriver(ChSuspensionTestRig self, std::shared_ptr< chrono::vehicle::ChSuspensionTestRigDriver > driver)"""
        return _vehicle.ChSuspensionTestRig_SetDriver(self, driver)

    def SetInitialRideHeight(self, height):
        r"""SetInitialRideHeight(ChSuspensionTestRig self, double height)"""
        return _vehicle.ChSuspensionTestRig_SetInitialRideHeight(self, height)

    def SetDisplacementLimit(self, limit):
        r"""SetDisplacementLimit(ChSuspensionTestRig self, double limit)"""
        return _vehicle.ChSuspensionTestRig_SetDisplacementLimit(self, limit)

    def IncludeSteeringMechanism(self, index):
        r"""IncludeSteeringMechanism(ChSuspensionTestRig self, int index)"""
        return _vehicle.ChSuspensionTestRig_IncludeSteeringMechanism(self, index)

    def IncludeSubchassis(self, index):
        r"""IncludeSubchassis(ChSuspensionTestRig self, int index)"""
        return _vehicle.ChSuspensionTestRig_IncludeSubchassis(self, index)

    def SetSuspensionVisualizationType(self, vis):
        r"""SetSuspensionVisualizationType(ChSuspensionTestRig self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChSuspensionTestRig_SetSuspensionVisualizationType(self, vis)

    def SetSteeringVisualizationType(self, vis):
        r"""SetSteeringVisualizationType(ChSuspensionTestRig self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChSuspensionTestRig_SetSteeringVisualizationType(self, vis)

    def SetSubchassisVisualizationType(self, vis):
        r"""SetSubchassisVisualizationType(ChSuspensionTestRig self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChSuspensionTestRig_SetSubchassisVisualizationType(self, vis)

    def SetWheelVisualizationType(self, vis):
        r"""SetWheelVisualizationType(ChSuspensionTestRig self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChSuspensionTestRig_SetWheelVisualizationType(self, vis)

    def SetTireVisualizationType(self, vis):
        r"""SetTireVisualizationType(ChSuspensionTestRig self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChSuspensionTestRig_SetTireVisualizationType(self, vis)

    def Initialize(self):
        r"""Initialize(ChSuspensionTestRig self)"""
        return _vehicle.ChSuspensionTestRig_Initialize(self)

    def Advance(self, step):
        r"""Advance(ChSuspensionTestRig self, double step)"""
        return _vehicle.ChSuspensionTestRig_Advance(self, step)

    def GetVehicle(self):
        r"""GetVehicle(ChSuspensionTestRig self) -> ChWheeledVehicle"""
        return _vehicle.ChSuspensionTestRig_GetVehicle(self)

    def GetSpindlePos(self, axle, side):
        r"""GetSpindlePos(ChSuspensionTestRig self, int axle, chrono::vehicle::VehicleSide side) -> ChVectorD"""
        return _vehicle.ChSuspensionTestRig_GetSpindlePos(self, axle, side)

    def GetSpindleRot(self, axle, side):
        r"""GetSpindleRot(ChSuspensionTestRig self, int axle, chrono::vehicle::VehicleSide side) -> ChQuaternionD"""
        return _vehicle.ChSuspensionTestRig_GetSpindleRot(self, axle, side)

    def GetSpindleLinVel(self, axle, side):
        r"""GetSpindleLinVel(ChSuspensionTestRig self, int axle, chrono::vehicle::VehicleSide side) -> ChVectorD"""
        return _vehicle.ChSuspensionTestRig_GetSpindleLinVel(self, axle, side)

    def GetSpindleAngVel(self, axle, side):
        r"""GetSpindleAngVel(ChSuspensionTestRig self, int axle, chrono::vehicle::VehicleSide side) -> ChVectorD"""
        return _vehicle.ChSuspensionTestRig_GetSpindleAngVel(self, axle, side)

    def GetSteeringInput(self):
        r"""GetSteeringInput(ChSuspensionTestRig self) -> double"""
        return _vehicle.ChSuspensionTestRig_GetSteeringInput(self)

    def GetActuatorDisp(self, axle, side):
        r"""GetActuatorDisp(ChSuspensionTestRig self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSuspensionTestRig_GetActuatorDisp(self, axle, side)

    def GetActuatorForce(self, axle, side):
        r"""GetActuatorForce(ChSuspensionTestRig self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSuspensionTestRig_GetActuatorForce(self, axle, side)

    def GetWheelTravel(self, axle, side):
        r"""GetWheelTravel(ChSuspensionTestRig self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSuspensionTestRig_GetWheelTravel(self, axle, side)

    def GetRideHeight(self, axle):
        r"""GetRideHeight(ChSuspensionTestRig self, int axle) -> double"""
        return _vehicle.ChSuspensionTestRig_GetRideHeight(self, axle)

    def GetDriverMessage(self):
        r"""GetDriverMessage(ChSuspensionTestRig self) -> std::string"""
        return _vehicle.ChSuspensionTestRig_GetDriverMessage(self)

    def DriverEnded(self):
        r"""DriverEnded(ChSuspensionTestRig self) -> bool"""
        return _vehicle.ChSuspensionTestRig_DriverEnded(self)

    def LogConstraintViolations(self):
        r"""LogConstraintViolations(ChSuspensionTestRig self)"""
        return _vehicle.ChSuspensionTestRig_LogConstraintViolations(self)

    def SetOutput(self, type, out_dir, out_name, output_step):
        r"""SetOutput(ChSuspensionTestRig self, chrono::vehicle::ChVehicleOutput::Type type, std::string const & out_dir, std::string const & out_name, double output_step)"""
        return _vehicle.ChSuspensionTestRig_SetOutput(self, type, out_dir, out_name, output_step)

    def SetPlotOutput(self, output_step):
        r"""SetPlotOutput(ChSuspensionTestRig self, double output_step)"""
        return _vehicle.ChSuspensionTestRig_SetPlotOutput(self, output_step)

    def PlotOutput(self, out_dir, out_name):
        r"""PlotOutput(ChSuspensionTestRig self, std::string const & out_dir, std::string const & out_name)"""
        return _vehicle.ChSuspensionTestRig_PlotOutput(self, out_dir, out_name)

# Register ChSuspensionTestRig in _vehicle:
_vehicle.ChSuspensionTestRig_swigregister(ChSuspensionTestRig)

class ChSuspensionTestRigPlatform(ChSuspensionTestRig):
    r"""Proxy of C++ chrono::vehicle::ChSuspensionTestRigPlatform class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChSuspensionTestRigPlatform self, std::shared_ptr< chrono::vehicle::ChWheeledVehicle > vehicle, vector_int axle_index, double displ_limit) -> ChSuspensionTestRigPlatform
        __init__(ChSuspensionTestRigPlatform self, std::string const & spec_filename) -> ChSuspensionTestRigPlatform
        """
        _vehicle.ChSuspensionTestRigPlatform_swiginit(self, _vehicle.new_ChSuspensionTestRigPlatform(*args))
    __swig_destroy__ = _vehicle.delete_ChSuspensionTestRigPlatform

    def GetActuatorDisp(self, axle, side):
        r"""GetActuatorDisp(ChSuspensionTestRigPlatform self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSuspensionTestRigPlatform_GetActuatorDisp(self, axle, side)

    def GetActuatorForce(self, axle, side):
        r"""GetActuatorForce(ChSuspensionTestRigPlatform self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSuspensionTestRigPlatform_GetActuatorForce(self, axle, side)

    def GetRideHeight(self, axle):
        r"""GetRideHeight(ChSuspensionTestRigPlatform self, int axle) -> double"""
        return _vehicle.ChSuspensionTestRigPlatform_GetRideHeight(self, axle)

# Register ChSuspensionTestRigPlatform in _vehicle:
_vehicle.ChSuspensionTestRigPlatform_swigregister(ChSuspensionTestRigPlatform)

class ChSuspensionTestRigPushrod(ChSuspensionTestRig):
    r"""Proxy of C++ chrono::vehicle::ChSuspensionTestRigPushrod class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChSuspensionTestRigPushrod self, std::shared_ptr< chrono::vehicle::ChWheeledVehicle > vehicle, vector_int axle_index, double displ_limit) -> ChSuspensionTestRigPushrod
        __init__(ChSuspensionTestRigPushrod self, std::string const & spec_filename) -> ChSuspensionTestRigPushrod
        """
        _vehicle.ChSuspensionTestRigPushrod_swiginit(self, _vehicle.new_ChSuspensionTestRigPushrod(*args))
    __swig_destroy__ = _vehicle.delete_ChSuspensionTestRigPushrod

    def GetActuatorDisp(self, axle, side):
        r"""GetActuatorDisp(ChSuspensionTestRigPushrod self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSuspensionTestRigPushrod_GetActuatorDisp(self, axle, side)

    def GetActuatorForce(self, axle, side):
        r"""GetActuatorForce(ChSuspensionTestRigPushrod self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSuspensionTestRigPushrod_GetActuatorForce(self, axle, side)

    def GetRideHeight(self, axle):
        r"""GetRideHeight(ChSuspensionTestRigPushrod self, int axle) -> double"""
        return _vehicle.ChSuspensionTestRigPushrod_GetRideHeight(self, axle)

# Register ChSuspensionTestRigPushrod in _vehicle:
_vehicle.ChSuspensionTestRigPushrod_swigregister(ChSuspensionTestRigPushrod)

class ChSprocket(ChPart):
    r"""Proxy of C++ chrono::vehicle::ChSprocket class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChSprocket

    def GetNumTeeth(self):
        r"""GetNumTeeth(ChSprocket self) -> int"""
        return _vehicle.ChSprocket_GetNumTeeth(self)

    def GetAssemblyRadius(self):
        r"""GetAssemblyRadius(ChSprocket self) -> double"""
        return _vehicle.ChSprocket_GetAssemblyRadius(self)

    def GetAddendumRadius(self):
        r"""GetAddendumRadius(ChSprocket self) -> double"""
        return _vehicle.ChSprocket_GetAddendumRadius(self)

    def GetGearBody(self):
        r"""GetGearBody(ChSprocket self) -> std::shared_ptr< chrono::ChBody >"""
        return _vehicle.ChSprocket_GetGearBody(self)

    def GetAxle(self):
        r"""GetAxle(ChSprocket self) -> std::shared_ptr< chrono::ChShaft >"""
        return _vehicle.ChSprocket_GetAxle(self)

    def GetRevolute(self):
        r"""GetRevolute(ChSprocket self) -> std::shared_ptr< chrono::ChLinkLockRevolute >"""
        return _vehicle.ChSprocket_GetRevolute(self)

    def GetAxleSpeed(self):
        r"""GetAxleSpeed(ChSprocket self) -> double"""
        return _vehicle.ChSprocket_GetAxleSpeed(self)

    def SetCollide(self, val):
        r"""SetCollide(ChSprocket self, bool val)"""
        return _vehicle.ChSprocket_SetCollide(self, val)

    def GetContactMaterial(self):
        r"""GetContactMaterial(ChSprocket self) -> std::shared_ptr< chrono::ChMaterialSurface >"""
        return _vehicle.ChSprocket_GetContactMaterial(self)

    def DisableLateralContact(self):
        r"""DisableLateralContact(ChSprocket self)"""
        return _vehicle.ChSprocket_DisableLateralContact(self)

    def Initialize(self, chassis, location, track):
        r"""Initialize(ChSprocket self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, ChVectorD location, ChTrackAssembly track)"""
        return _vehicle.ChSprocket_Initialize(self, chassis, location, track)

    def ApplyAxleTorque(self, torque):
        r"""ApplyAxleTorque(ChSprocket self, double torque)"""
        return _vehicle.ChSprocket_ApplyAxleTorque(self, torque)

    def CreateVisualizationMesh(self, *args):
        r"""CreateVisualizationMesh(ChSprocket self, double radius, double width, double delta, ChColor color=chrono::ChColor(1, 1, 1)) -> std::shared_ptr< geometry::ChTriangleMeshConnected >"""
        return _vehicle.ChSprocket_CreateVisualizationMesh(self, *args)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChSprocket self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChSprocket_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChSprocket self)"""
        return _vehicle.ChSprocket_RemoveVisualizationAssets(self)

    def LogConstraintViolations(self):
        r"""LogConstraintViolations(ChSprocket self)"""
        return _vehicle.ChSprocket_LogConstraintViolations(self)

# Register ChSprocket in _vehicle:
_vehicle.ChSprocket_swigregister(ChSprocket)

class ChSprocketSinglePin(ChSprocket):
    r"""Proxy of C++ chrono::vehicle::ChSprocketSinglePin class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChSprocketSinglePin

    def GetTemplateName(self):
        r"""GetTemplateName(ChSprocketSinglePin self) -> std::string"""
        return _vehicle.ChSprocketSinglePin_GetTemplateName(self)

    def GetProfile(self):
        r"""GetProfile(ChSprocketSinglePin self) -> std::shared_ptr< geometry::ChLinePath >"""
        return _vehicle.ChSprocketSinglePin_GetProfile(self)

    def GetCollisionCallback(self, track):
        r"""GetCollisionCallback(ChSprocketSinglePin self, ChTrackAssembly track) -> std::shared_ptr< chrono::ChSystem::CustomCollisionCallback >"""
        return _vehicle.ChSprocketSinglePin_GetCollisionCallback(self, track)

# Register ChSprocketSinglePin in _vehicle:
_vehicle.ChSprocketSinglePin_swigregister(ChSprocketSinglePin)

class ChSprocketDoublePin(ChSprocket):
    r"""Proxy of C++ chrono::vehicle::ChSprocketDoublePin class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChSprocketDoublePin

    def GetTemplateName(self):
        r"""GetTemplateName(ChSprocketDoublePin self) -> std::string"""
        return _vehicle.ChSprocketDoublePin_GetTemplateName(self)

    def GetProfile(self):
        r"""GetProfile(ChSprocketDoublePin self) -> std::shared_ptr< geometry::ChLinePath >"""
        return _vehicle.ChSprocketDoublePin_GetProfile(self)

    def GetCollisionCallback(self, track):
        r"""GetCollisionCallback(ChSprocketDoublePin self, ChTrackAssembly track) -> std::shared_ptr< chrono::ChSystem::CustomCollisionCallback >"""
        return _vehicle.ChSprocketDoublePin_GetCollisionCallback(self, track)

# Register ChSprocketDoublePin in _vehicle:
_vehicle.ChSprocketDoublePin_swigregister(ChSprocketDoublePin)

class ChSprocketBand(ChSprocket):
    r"""Proxy of C++ chrono::vehicle::ChSprocketBand class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChSprocketBand

    def GetTemplateName(self):
        r"""GetTemplateName(ChSprocketBand self) -> std::string"""
        return _vehicle.ChSprocketBand_GetTemplateName(self)

    def GetProfile(self):
        r"""GetProfile(ChSprocketBand self) -> std::shared_ptr< geometry::ChLinePath >"""
        return _vehicle.ChSprocketBand_GetProfile(self)

    def GetCollisionCallback(self, track):
        r"""GetCollisionCallback(ChSprocketBand self, ChTrackAssembly track) -> std::shared_ptr< chrono::ChSystem::CustomCollisionCallback >"""
        return _vehicle.ChSprocketBand_GetCollisionCallback(self, track)

# Register ChSprocketBand in _vehicle:
_vehicle.ChSprocketBand_swigregister(ChSprocketBand)

class SprocketSinglePin(ChSprocketSinglePin):
    r"""Proxy of C++ chrono::vehicle::SprocketSinglePin class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SprocketSinglePin self, std::string const & filename) -> SprocketSinglePin
        __init__(SprocketSinglePin self, rapidjson::Document const & d) -> SprocketSinglePin
        """
        _vehicle.SprocketSinglePin_swiginit(self, _vehicle.new_SprocketSinglePin(*args))
    __swig_destroy__ = _vehicle.delete_SprocketSinglePin

    def GetNumTeeth(self):
        r"""GetNumTeeth(SprocketSinglePin self) -> int"""
        return _vehicle.SprocketSinglePin_GetNumTeeth(self)

    def GetAssemblyRadius(self):
        r"""GetAssemblyRadius(SprocketSinglePin self) -> double"""
        return _vehicle.SprocketSinglePin_GetAssemblyRadius(self)

    def GetAddendumRadius(self):
        r"""GetAddendumRadius(SprocketSinglePin self) -> double"""
        return _vehicle.SprocketSinglePin_GetAddendumRadius(self)

    def GetGearMass(self):
        r"""GetGearMass(SprocketSinglePin self) -> double"""
        return _vehicle.SprocketSinglePin_GetGearMass(self)

    def GetGearInertia(self):
        r"""GetGearInertia(SprocketSinglePin self) -> ChVectorD"""
        return _vehicle.SprocketSinglePin_GetGearInertia(self)

    def GetAxleInertia(self):
        r"""GetAxleInertia(SprocketSinglePin self) -> double"""
        return _vehicle.SprocketSinglePin_GetAxleInertia(self)

    def GetSeparation(self):
        r"""GetSeparation(SprocketSinglePin self) -> double"""
        return _vehicle.SprocketSinglePin_GetSeparation(self)

    def GetOuterRadius(self):
        r"""GetOuterRadius(SprocketSinglePin self) -> double"""
        return _vehicle.SprocketSinglePin_GetOuterRadius(self)

    def GetArcRadius(self):
        r"""GetArcRadius(SprocketSinglePin self) -> double"""
        return _vehicle.SprocketSinglePin_GetArcRadius(self)

    def GetArcCentersRadius(self):
        r"""GetArcCentersRadius(SprocketSinglePin self) -> double"""
        return _vehicle.SprocketSinglePin_GetArcCentersRadius(self)

    def GetLateralBacklash(self):
        r"""GetLateralBacklash(SprocketSinglePin self) -> double"""
        return _vehicle.SprocketSinglePin_GetLateralBacklash(self)

# Register SprocketSinglePin in _vehicle:
_vehicle.SprocketSinglePin_swigregister(SprocketSinglePin)

class SprocketDoublePin(ChSprocketDoublePin):
    r"""Proxy of C++ chrono::vehicle::SprocketDoublePin class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SprocketDoublePin self, std::string const & filename) -> SprocketDoublePin
        __init__(SprocketDoublePin self, rapidjson::Document const & d) -> SprocketDoublePin
        """
        _vehicle.SprocketDoublePin_swiginit(self, _vehicle.new_SprocketDoublePin(*args))
    __swig_destroy__ = _vehicle.delete_SprocketDoublePin

    def GetNumTeeth(self):
        r"""GetNumTeeth(SprocketDoublePin self) -> int"""
        return _vehicle.SprocketDoublePin_GetNumTeeth(self)

    def GetAssemblyRadius(self):
        r"""GetAssemblyRadius(SprocketDoublePin self) -> double"""
        return _vehicle.SprocketDoublePin_GetAssemblyRadius(self)

    def GetAddendumRadius(self):
        r"""GetAddendumRadius(SprocketDoublePin self) -> double"""
        return _vehicle.SprocketDoublePin_GetAddendumRadius(self)

    def GetGearMass(self):
        r"""GetGearMass(SprocketDoublePin self) -> double"""
        return _vehicle.SprocketDoublePin_GetGearMass(self)

    def GetGearInertia(self):
        r"""GetGearInertia(SprocketDoublePin self) -> ChVectorD"""
        return _vehicle.SprocketDoublePin_GetGearInertia(self)

    def GetAxleInertia(self):
        r"""GetAxleInertia(SprocketDoublePin self) -> double"""
        return _vehicle.SprocketDoublePin_GetAxleInertia(self)

    def GetSeparation(self):
        r"""GetSeparation(SprocketDoublePin self) -> double"""
        return _vehicle.SprocketDoublePin_GetSeparation(self)

    def GetOuterRadius(self):
        r"""GetOuterRadius(SprocketDoublePin self) -> double"""
        return _vehicle.SprocketDoublePin_GetOuterRadius(self)

    def GetArcRadius(self):
        r"""GetArcRadius(SprocketDoublePin self) -> double"""
        return _vehicle.SprocketDoublePin_GetArcRadius(self)

    def GetArcCenterHeight(self):
        r"""GetArcCenterHeight(SprocketDoublePin self) -> double"""
        return _vehicle.SprocketDoublePin_GetArcCenterHeight(self)

    def GetArcCenterOffset(self):
        r"""GetArcCenterOffset(SprocketDoublePin self) -> double"""
        return _vehicle.SprocketDoublePin_GetArcCenterOffset(self)

    def GetLateralBacklash(self):
        r"""GetLateralBacklash(SprocketDoublePin self) -> double"""
        return _vehicle.SprocketDoublePin_GetLateralBacklash(self)

# Register SprocketDoublePin in _vehicle:
_vehicle.SprocketDoublePin_swigregister(SprocketDoublePin)

class SprocketBand(ChSprocketBand):
    r"""Proxy of C++ chrono::vehicle::SprocketBand class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SprocketBand self, std::string const & filename) -> SprocketBand
        __init__(SprocketBand self, rapidjson::Document const & d) -> SprocketBand
        """
        _vehicle.SprocketBand_swiginit(self, _vehicle.new_SprocketBand(*args))
    __swig_destroy__ = _vehicle.delete_SprocketBand

    def GetNumTeeth(self):
        r"""GetNumTeeth(SprocketBand self) -> int"""
        return _vehicle.SprocketBand_GetNumTeeth(self)

    def GetAssemblyRadius(self):
        r"""GetAssemblyRadius(SprocketBand self) -> double"""
        return _vehicle.SprocketBand_GetAssemblyRadius(self)

    def GetAddendumRadius(self):
        r"""GetAddendumRadius(SprocketBand self) -> double"""
        return _vehicle.SprocketBand_GetAddendumRadius(self)

    def GetGearMass(self):
        r"""GetGearMass(SprocketBand self) -> double"""
        return _vehicle.SprocketBand_GetGearMass(self)

    def GetGearInertia(self):
        r"""GetGearInertia(SprocketBand self) -> ChVectorD"""
        return _vehicle.SprocketBand_GetGearInertia(self)

    def GetAxleInertia(self):
        r"""GetAxleInertia(SprocketBand self) -> double"""
        return _vehicle.SprocketBand_GetAxleInertia(self)

    def GetSeparation(self):
        r"""GetSeparation(SprocketBand self) -> double"""
        return _vehicle.SprocketBand_GetSeparation(self)

    def GetOuterRadius(self):
        r"""GetOuterRadius(SprocketBand self) -> double"""
        return _vehicle.SprocketBand_GetOuterRadius(self)

    def GetBaseWidth(self):
        r"""GetBaseWidth(SprocketBand self) -> double"""
        return _vehicle.SprocketBand_GetBaseWidth(self)

    def GetTipWidth(self):
        r"""GetTipWidth(SprocketBand self) -> double"""
        return _vehicle.SprocketBand_GetTipWidth(self)

    def GetToothDepth(self):
        r"""GetToothDepth(SprocketBand self) -> double"""
        return _vehicle.SprocketBand_GetToothDepth(self)

    def GetArcRadius(self):
        r"""GetArcRadius(SprocketBand self) -> double"""
        return _vehicle.SprocketBand_GetArcRadius(self)

    def GetLateralBacklash(self):
        r"""GetLateralBacklash(SprocketBand self) -> double"""
        return _vehicle.SprocketBand_GetLateralBacklash(self)

# Register SprocketBand in _vehicle:
_vehicle.SprocketBand_swigregister(SprocketBand)

class ChIdler(ChPart):
    r"""Proxy of C++ chrono::vehicle::ChIdler class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChIdler

    def GetType(self):
        r"""GetType(ChIdler self) -> chrono::vehicle::GuidePinType"""
        return _vehicle.ChIdler_GetType(self)

    def GetIdlerWheel(self):
        r"""GetIdlerWheel(ChIdler self) -> std::shared_ptr< chrono::vehicle::ChTrackWheel >"""
        return _vehicle.ChIdler_GetIdlerWheel(self)

    def GetWheelBody(self):
        r"""GetWheelBody(ChIdler self) -> std::shared_ptr< chrono::ChBody >"""
        return _vehicle.ChIdler_GetWheelBody(self)

    def GetCarrierBody(self):
        r"""GetCarrierBody(ChIdler self) -> std::shared_ptr< chrono::ChBody >"""
        return _vehicle.ChIdler_GetCarrierBody(self)

    def GetWheelRadius(self):
        r"""GetWheelRadius(ChIdler self) -> double"""
        return _vehicle.ChIdler_GetWheelRadius(self)

    def Initialize(self, chassis, location, track):
        r"""Initialize(ChIdler self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, ChVectorD location, ChTrackAssembly track)"""
        return _vehicle.ChIdler_Initialize(self, chassis, location, track)

    def SetOutput(self, state):
        r"""SetOutput(ChIdler self, bool state)"""
        return _vehicle.ChIdler_SetOutput(self, state)

    def LogConstraintViolations(self):
        r"""LogConstraintViolations(ChIdler self)"""
        return _vehicle.ChIdler_LogConstraintViolations(self)

# Register ChIdler in _vehicle:
_vehicle.ChIdler_swigregister(ChIdler)

class ChTranslationalIdler(ChIdler):
    r"""Proxy of C++ chrono::vehicle::ChTranslationalIdler class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChTranslationalIdler

    def GetTemplateName(self):
        r"""GetTemplateName(ChTranslationalIdler self) -> std::string"""
        return _vehicle.ChTranslationalIdler_GetTemplateName(self)

    def GetCarrierBody(self):
        r"""GetCarrierBody(ChTranslationalIdler self) -> std::shared_ptr< chrono::ChBody >"""
        return _vehicle.ChTranslationalIdler_GetCarrierBody(self)

    def GetTensioner(self):
        r"""GetTensioner(ChTranslationalIdler self) -> std::shared_ptr< chrono::ChLinkTSDA >"""
        return _vehicle.ChTranslationalIdler_GetTensioner(self)

    def Initialize(self, chassis, location, track):
        r"""Initialize(ChTranslationalIdler self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, ChVectorD location, ChTrackAssembly track)"""
        return _vehicle.ChTranslationalIdler_Initialize(self, chassis, location, track)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChTranslationalIdler self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChTranslationalIdler_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChTranslationalIdler self)"""
        return _vehicle.ChTranslationalIdler_RemoveVisualizationAssets(self)

    def LogConstraintViolations(self):
        r"""LogConstraintViolations(ChTranslationalIdler self)"""
        return _vehicle.ChTranslationalIdler_LogConstraintViolations(self)

# Register ChTranslationalIdler in _vehicle:
_vehicle.ChTranslationalIdler_swigregister(ChTranslationalIdler)

class TranslationalIdler(ChTranslationalIdler):
    r"""Proxy of C++ chrono::vehicle::TranslationalIdler class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TranslationalIdler self, std::string const & filename) -> TranslationalIdler
        __init__(TranslationalIdler self, rapidjson::Document const & d) -> TranslationalIdler
        """
        _vehicle.TranslationalIdler_swiginit(self, _vehicle.new_TranslationalIdler(*args))
    __swig_destroy__ = _vehicle.delete_TranslationalIdler

    def GetCarrierMass(self):
        r"""GetCarrierMass(TranslationalIdler self) -> double"""
        return _vehicle.TranslationalIdler_GetCarrierMass(self)

    def GetCarrierInertia(self):
        r"""GetCarrierInertia(TranslationalIdler self) -> ChVectorD"""
        return _vehicle.TranslationalIdler_GetCarrierInertia(self)

    def GetCarrierVisRadius(self):
        r"""GetCarrierVisRadius(TranslationalIdler self) -> double"""
        return _vehicle.TranslationalIdler_GetCarrierVisRadius(self)

    def GetPrismaticPitchAngle(self):
        r"""GetPrismaticPitchAngle(TranslationalIdler self) -> double"""
        return _vehicle.TranslationalIdler_GetPrismaticPitchAngle(self)

    def GetTensionerForceCallback(self):
        r"""GetTensionerForceCallback(TranslationalIdler self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.TranslationalIdler_GetTensionerForceCallback(self)

    def GetTensionerFreeLength(self):
        r"""GetTensionerFreeLength(TranslationalIdler self) -> double"""
        return _vehicle.TranslationalIdler_GetTensionerFreeLength(self)

# Register TranslationalIdler in _vehicle:
_vehicle.TranslationalIdler_swigregister(TranslationalIdler)

class ChTrackWheel(ChPart):
    r"""Proxy of C++ chrono::vehicle::ChTrackWheel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChTrackWheel

    def GetType(self):
        r"""GetType(ChTrackWheel self) -> chrono::vehicle::GuidePinType"""
        return _vehicle.ChTrackWheel_GetType(self)

    def GetBody(self):
        r"""GetBody(ChTrackWheel self) -> std::shared_ptr< chrono::ChBody >"""
        return _vehicle.ChTrackWheel_GetBody(self)

    def GetRevolute(self):
        r"""GetRevolute(ChTrackWheel self) -> std::shared_ptr< chrono::ChLinkLockRevolute >"""
        return _vehicle.ChTrackWheel_GetRevolute(self)

    def GetMass(self):
        r"""GetMass(ChTrackWheel self) -> double"""
        return _vehicle.ChTrackWheel_GetMass(self)

    def GetInertia(self):
        r"""GetInertia(ChTrackWheel self) -> ChVectorD"""
        return _vehicle.ChTrackWheel_GetInertia(self)

    def GetRadius(self):
        r"""GetRadius(ChTrackWheel self) -> double"""
        return _vehicle.ChTrackWheel_GetRadius(self)

    def GetWidth(self):
        r"""GetWidth(ChTrackWheel self) -> double"""
        return _vehicle.ChTrackWheel_GetWidth(self)

    def SetCollide(self, val):
        r"""SetCollide(ChTrackWheel self, bool val)"""
        return _vehicle.ChTrackWheel_SetCollide(self, val)

    def Initialize(self, chassis, carrier, location, track):
        r"""Initialize(ChTrackWheel self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, std::shared_ptr< chrono::ChBody > carrier, ChVectorD location, ChTrackAssembly track)"""
        return _vehicle.ChTrackWheel_Initialize(self, chassis, carrier, location, track)

    def LogConstraintViolations(self):
        r"""LogConstraintViolations(ChTrackWheel self)"""
        return _vehicle.ChTrackWheel_LogConstraintViolations(self)

    def ExportComponentList(self, jsonDocument):
        r"""ExportComponentList(ChTrackWheel self, rapidjson::Document & jsonDocument)"""
        return _vehicle.ChTrackWheel_ExportComponentList(self, jsonDocument)

# Register ChTrackWheel in _vehicle:
_vehicle.ChTrackWheel_swigregister(ChTrackWheel)

class ChSingleTrackWheel(ChTrackWheel):
    r"""Proxy of C++ chrono::vehicle::ChSingleTrackWheel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChSingleTrackWheel

    def GetTemplateName(self):
        r"""GetTemplateName(ChSingleTrackWheel self) -> std::string"""
        return _vehicle.ChSingleTrackWheel_GetTemplateName(self)

    def GetType(self):
        r"""GetType(ChSingleTrackWheel self) -> chrono::vehicle::GuidePinType"""
        return _vehicle.ChSingleTrackWheel_GetType(self)

    def Initialize(self, chassis, carrier, location, track):
        r"""Initialize(ChSingleTrackWheel self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, std::shared_ptr< chrono::ChBody > carrier, ChVectorD location, ChTrackAssembly track)"""
        return _vehicle.ChSingleTrackWheel_Initialize(self, chassis, carrier, location, track)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChSingleTrackWheel self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChSingleTrackWheel_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChSingleTrackWheel self)"""
        return _vehicle.ChSingleTrackWheel_RemoveVisualizationAssets(self)

# Register ChSingleTrackWheel in _vehicle:
_vehicle.ChSingleTrackWheel_swigregister(ChSingleTrackWheel)

class ChDoubleTrackWheel(ChTrackWheel):
    r"""Proxy of C++ chrono::vehicle::ChDoubleTrackWheel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChDoubleTrackWheel

    def GetTemplateName(self):
        r"""GetTemplateName(ChDoubleTrackWheel self) -> std::string"""
        return _vehicle.ChDoubleTrackWheel_GetTemplateName(self)

    def GetType(self):
        r"""GetType(ChDoubleTrackWheel self) -> chrono::vehicle::GuidePinType"""
        return _vehicle.ChDoubleTrackWheel_GetType(self)

    def Initialize(self, chassis, carrier, location, track):
        r"""Initialize(ChDoubleTrackWheel self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, std::shared_ptr< chrono::ChBody > carrier, ChVectorD location, ChTrackAssembly track)"""
        return _vehicle.ChDoubleTrackWheel_Initialize(self, chassis, carrier, location, track)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChDoubleTrackWheel self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChDoubleTrackWheel_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChDoubleTrackWheel self)"""
        return _vehicle.ChDoubleTrackWheel_RemoveVisualizationAssets(self)

# Register ChDoubleTrackWheel in _vehicle:
_vehicle.ChDoubleTrackWheel_swigregister(ChDoubleTrackWheel)

class SingleTrackWheel(ChSingleTrackWheel):
    r"""Proxy of C++ chrono::vehicle::SingleTrackWheel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SingleTrackWheel self, std::string const & filename) -> SingleTrackWheel
        __init__(SingleTrackWheel self, rapidjson::Document const & d) -> SingleTrackWheel
        """
        _vehicle.SingleTrackWheel_swiginit(self, _vehicle.new_SingleTrackWheel(*args))
    __swig_destroy__ = _vehicle.delete_SingleTrackWheel

    def GetRadius(self):
        r"""GetRadius(SingleTrackWheel self) -> double"""
        return _vehicle.SingleTrackWheel_GetRadius(self)

    def GetWidth(self):
        r"""GetWidth(SingleTrackWheel self) -> double"""
        return _vehicle.SingleTrackWheel_GetWidth(self)

    def GetMass(self):
        r"""GetMass(SingleTrackWheel self) -> double"""
        return _vehicle.SingleTrackWheel_GetMass(self)

    def GetInertia(self):
        r"""GetInertia(SingleTrackWheel self) -> ChVectorD"""
        return _vehicle.SingleTrackWheel_GetInertia(self)

# Register SingleTrackWheel in _vehicle:
_vehicle.SingleTrackWheel_swigregister(SingleTrackWheel)

class DoubleTrackWheel(ChDoubleTrackWheel):
    r"""Proxy of C++ chrono::vehicle::DoubleTrackWheel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DoubleTrackWheel self, std::string const & filename) -> DoubleTrackWheel
        __init__(DoubleTrackWheel self, rapidjson::Document const & d) -> DoubleTrackWheel
        """
        _vehicle.DoubleTrackWheel_swiginit(self, _vehicle.new_DoubleTrackWheel(*args))
    __swig_destroy__ = _vehicle.delete_DoubleTrackWheel

    def GetRadius(self):
        r"""GetRadius(DoubleTrackWheel self) -> double"""
        return _vehicle.DoubleTrackWheel_GetRadius(self)

    def GetWidth(self):
        r"""GetWidth(DoubleTrackWheel self) -> double"""
        return _vehicle.DoubleTrackWheel_GetWidth(self)

    def GetGap(self):
        r"""GetGap(DoubleTrackWheel self) -> double"""
        return _vehicle.DoubleTrackWheel_GetGap(self)

    def GetMass(self):
        r"""GetMass(DoubleTrackWheel self) -> double"""
        return _vehicle.DoubleTrackWheel_GetMass(self)

    def GetInertia(self):
        r"""GetInertia(DoubleTrackWheel self) -> ChVectorD"""
        return _vehicle.DoubleTrackWheel_GetInertia(self)

# Register DoubleTrackWheel in _vehicle:
_vehicle.DoubleTrackWheel_swigregister(DoubleTrackWheel)

class ChTrackSuspension(ChPart):
    r"""Proxy of C++ chrono::vehicle::ChTrackSuspension class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChTrackSuspension

    def GetType(self):
        r"""GetType(ChTrackSuspension self) -> chrono::vehicle::GuidePinType"""
        return _vehicle.ChTrackSuspension_GetType(self)

    def GetRoadWheel(self):
        r"""GetRoadWheel(ChTrackSuspension self) -> std::shared_ptr< chrono::vehicle::ChTrackWheel >"""
        return _vehicle.ChTrackSuspension_GetRoadWheel(self)

    def GetWheelBody(self):
        r"""GetWheelBody(ChTrackSuspension self) -> std::shared_ptr< chrono::ChBody >"""
        return _vehicle.ChTrackSuspension_GetWheelBody(self)

    def GetCarrierBody(self):
        r"""GetCarrierBody(ChTrackSuspension self) -> std::shared_ptr< chrono::ChBody >"""
        return _vehicle.ChTrackSuspension_GetCarrierBody(self)

    def GetCarrierAngle(self):
        r"""GetCarrierAngle(ChTrackSuspension self) -> double"""
        return _vehicle.ChTrackSuspension_GetCarrierAngle(self)

    def GetWheelRevolute(self):
        r"""GetWheelRevolute(ChTrackSuspension self) -> std::shared_ptr< chrono::ChLinkLockRevolute >"""
        return _vehicle.ChTrackSuspension_GetWheelRevolute(self)

    def GetWheelRadius(self):
        r"""GetWheelRadius(ChTrackSuspension self) -> double"""
        return _vehicle.ChTrackSuspension_GetWheelRadius(self)

    def Initialize(self, chassis, location, track):
        r"""Initialize(ChTrackSuspension self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, ChVectorD location, ChTrackAssembly track)"""
        return _vehicle.ChTrackSuspension_Initialize(self, chassis, location, track)

    def ReportSuspensionForce(self):
        r"""ReportSuspensionForce(ChTrackSuspension self) -> ForceTorque"""
        return _vehicle.ChTrackSuspension_ReportSuspensionForce(self)

    def SetOutput(self, state):
        r"""SetOutput(ChTrackSuspension self, bool state)"""
        return _vehicle.ChTrackSuspension_SetOutput(self, state)

    def LogConstraintViolations(self):
        r"""LogConstraintViolations(ChTrackSuspension self)"""
        return _vehicle.ChTrackSuspension_LogConstraintViolations(self)

# Register ChTrackSuspension in _vehicle:
_vehicle.ChTrackSuspension_swigregister(ChTrackSuspension)

class ForceTorque(object):
    r"""Proxy of C++ chrono::vehicle::ChTrackSuspension::ForceTorque class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    spring_ft = property(_vehicle.ForceTorque_spring_ft_get, _vehicle.ForceTorque_spring_ft_set, doc=r"""spring_ft : double""")
    shock_ft = property(_vehicle.ForceTorque_shock_ft_get, _vehicle.ForceTorque_shock_ft_set, doc=r"""shock_ft : double""")
    spring_displ = property(_vehicle.ForceTorque_spring_displ_get, _vehicle.ForceTorque_spring_displ_set, doc=r"""spring_displ : double""")
    spring_velocity = property(_vehicle.ForceTorque_spring_velocity_get, _vehicle.ForceTorque_spring_velocity_set, doc=r"""spring_velocity : double""")
    shock_displ = property(_vehicle.ForceTorque_shock_displ_get, _vehicle.ForceTorque_shock_displ_set, doc=r"""shock_displ : double""")
    shock_velocity = property(_vehicle.ForceTorque_shock_velocity_get, _vehicle.ForceTorque_shock_velocity_set, doc=r"""shock_velocity : double""")

    def __init__(self):
        r"""__init__(ForceTorque self) -> ForceTorque"""
        _vehicle.ForceTorque_swiginit(self, _vehicle.new_ForceTorque())
    __swig_destroy__ = _vehicle.delete_ForceTorque

# Register ForceTorque in _vehicle:
_vehicle.ForceTorque_swigregister(ForceTorque)

class ChTranslationalDamperSuspension(ChTrackSuspension):
    r"""Proxy of C++ chrono::vehicle::ChTranslationalDamperSuspension class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChTranslationalDamperSuspension

    def GetTemplateName(self):
        r"""GetTemplateName(ChTranslationalDamperSuspension self) -> std::string"""
        return _vehicle.ChTranslationalDamperSuspension_GetTemplateName(self)

    def GetCarrierBody(self):
        r"""GetCarrierBody(ChTranslationalDamperSuspension self) -> std::shared_ptr< chrono::ChBody >"""
        return _vehicle.ChTranslationalDamperSuspension_GetCarrierBody(self)

    def GetCarrierAngle(self):
        r"""GetCarrierAngle(ChTranslationalDamperSuspension self) -> double"""
        return _vehicle.ChTranslationalDamperSuspension_GetCarrierAngle(self)

    def Initialize(self, chassis, location, track):
        r"""Initialize(ChTranslationalDamperSuspension self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, ChVectorD location, ChTrackAssembly track)"""
        return _vehicle.ChTranslationalDamperSuspension_Initialize(self, chassis, location, track)

    def ReportSuspensionForce(self):
        r"""ReportSuspensionForce(ChTranslationalDamperSuspension self) -> ForceTorque"""
        return _vehicle.ChTranslationalDamperSuspension_ReportSuspensionForce(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChTranslationalDamperSuspension self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChTranslationalDamperSuspension_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChTranslationalDamperSuspension self)"""
        return _vehicle.ChTranslationalDamperSuspension_RemoveVisualizationAssets(self)

    def LogConstraintViolations(self):
        r"""LogConstraintViolations(ChTranslationalDamperSuspension self)"""
        return _vehicle.ChTranslationalDamperSuspension_LogConstraintViolations(self)

# Register ChTranslationalDamperSuspension in _vehicle:
_vehicle.ChTranslationalDamperSuspension_swigregister(ChTranslationalDamperSuspension)

class ChRotationalDamperSuspension(ChTrackSuspension):
    r"""Proxy of C++ chrono::vehicle::ChRotationalDamperSuspension class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChRotationalDamperSuspension

    def GetTemplateName(self):
        r"""GetTemplateName(ChRotationalDamperSuspension self) -> std::string"""
        return _vehicle.ChRotationalDamperSuspension_GetTemplateName(self)

    def GetCarrierBody(self):
        r"""GetCarrierBody(ChRotationalDamperSuspension self) -> std::shared_ptr< chrono::ChBody >"""
        return _vehicle.ChRotationalDamperSuspension_GetCarrierBody(self)

    def GetCarrierAngle(self):
        r"""GetCarrierAngle(ChRotationalDamperSuspension self) -> double"""
        return _vehicle.ChRotationalDamperSuspension_GetCarrierAngle(self)

    def Initialize(self, chassis, location, track):
        r"""Initialize(ChRotationalDamperSuspension self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, ChVectorD location, ChTrackAssembly track)"""
        return _vehicle.ChRotationalDamperSuspension_Initialize(self, chassis, location, track)

    def ReportSuspensionForce(self):
        r"""ReportSuspensionForce(ChRotationalDamperSuspension self) -> ForceTorque"""
        return _vehicle.ChRotationalDamperSuspension_ReportSuspensionForce(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChRotationalDamperSuspension self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChRotationalDamperSuspension_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChRotationalDamperSuspension self)"""
        return _vehicle.ChRotationalDamperSuspension_RemoveVisualizationAssets(self)

    def LogConstraintViolations(self):
        r"""LogConstraintViolations(ChRotationalDamperSuspension self)"""
        return _vehicle.ChRotationalDamperSuspension_LogConstraintViolations(self)

# Register ChRotationalDamperSuspension in _vehicle:
_vehicle.ChRotationalDamperSuspension_swigregister(ChRotationalDamperSuspension)

class TranslationalDamperSuspension(ChTranslationalDamperSuspension):
    r"""Proxy of C++ chrono::vehicle::TranslationalDamperSuspension class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TranslationalDamperSuspension self, std::string const & filename, bool has_shock, bool lock_arm) -> TranslationalDamperSuspension
        __init__(TranslationalDamperSuspension self, rapidjson::Document const & d, bool has_shock, bool lock_arm) -> TranslationalDamperSuspension
        """
        _vehicle.TranslationalDamperSuspension_swiginit(self, _vehicle.new_TranslationalDamperSuspension(*args))
    __swig_destroy__ = _vehicle.delete_TranslationalDamperSuspension

    def GetArmMass(self):
        r"""GetArmMass(TranslationalDamperSuspension self) -> double"""
        return _vehicle.TranslationalDamperSuspension_GetArmMass(self)

    def GetArmInertia(self):
        r"""GetArmInertia(TranslationalDamperSuspension self) -> ChVectorD"""
        return _vehicle.TranslationalDamperSuspension_GetArmInertia(self)

    def GetArmVisRadius(self):
        r"""GetArmVisRadius(TranslationalDamperSuspension self) -> double"""
        return _vehicle.TranslationalDamperSuspension_GetArmVisRadius(self)

    def GetSpringRestAngle(self):
        r"""GetSpringRestAngle(TranslationalDamperSuspension self) -> double"""
        return _vehicle.TranslationalDamperSuspension_GetSpringRestAngle(self)

    def GetSpringTorqueFunctor(self):
        r"""GetSpringTorqueFunctor(TranslationalDamperSuspension self) -> std::shared_ptr< chrono::ChLinkRSDA::TorqueFunctor >"""
        return _vehicle.TranslationalDamperSuspension_GetSpringTorqueFunctor(self)

    def GetDamperTorqueFunctor(self):
        r"""GetDamperTorqueFunctor(TranslationalDamperSuspension self) -> std::shared_ptr< chrono::ChLinkRSDA::TorqueFunctor >"""
        return _vehicle.TranslationalDamperSuspension_GetDamperTorqueFunctor(self)

    def GetShockForceFunctor(self):
        r"""GetShockForceFunctor(TranslationalDamperSuspension self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.TranslationalDamperSuspension_GetShockForceFunctor(self)

# Register TranslationalDamperSuspension in _vehicle:
_vehicle.TranslationalDamperSuspension_swigregister(TranslationalDamperSuspension)

class RotationalDamperSuspension(ChRotationalDamperSuspension):
    r"""Proxy of C++ chrono::vehicle::RotationalDamperSuspension class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RotationalDamperSuspension self, std::string const & filename, bool has_shock, bool lock_arm) -> RotationalDamperSuspension
        __init__(RotationalDamperSuspension self, rapidjson::Document const & d, bool has_shock, bool lock_arm) -> RotationalDamperSuspension
        """
        _vehicle.RotationalDamperSuspension_swiginit(self, _vehicle.new_RotationalDamperSuspension(*args))
    __swig_destroy__ = _vehicle.delete_RotationalDamperSuspension

    def GetArmMass(self):
        r"""GetArmMass(RotationalDamperSuspension self) -> double"""
        return _vehicle.RotationalDamperSuspension_GetArmMass(self)

    def GetArmInertia(self):
        r"""GetArmInertia(RotationalDamperSuspension self) -> ChVectorD"""
        return _vehicle.RotationalDamperSuspension_GetArmInertia(self)

    def GetArmVisRadius(self):
        r"""GetArmVisRadius(RotationalDamperSuspension self) -> double"""
        return _vehicle.RotationalDamperSuspension_GetArmVisRadius(self)

    def GetSpringRestAngle(self):
        r"""GetSpringRestAngle(RotationalDamperSuspension self) -> double"""
        return _vehicle.RotationalDamperSuspension_GetSpringRestAngle(self)

    def GetSpringTorqueFunctor(self):
        r"""GetSpringTorqueFunctor(RotationalDamperSuspension self) -> std::shared_ptr< chrono::ChLinkRSDA::TorqueFunctor >"""
        return _vehicle.RotationalDamperSuspension_GetSpringTorqueFunctor(self)

    def GetShockTorqueCallback(self):
        r"""GetShockTorqueCallback(RotationalDamperSuspension self) -> std::shared_ptr< chrono::ChLinkRSDA::TorqueFunctor >"""
        return _vehicle.RotationalDamperSuspension_GetShockTorqueCallback(self)

# Register RotationalDamperSuspension in _vehicle:
_vehicle.RotationalDamperSuspension_swigregister(RotationalDamperSuspension)

class ChTrackShoe(ChPart):
    r"""Proxy of C++ chrono::vehicle::ChTrackShoe class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChTrackShoe

    def GetType(self):
        r"""GetType(ChTrackShoe self) -> chrono::vehicle::GuidePinType"""
        return _vehicle.ChTrackShoe_GetType(self)

    def GetIndex(self):
        r"""GetIndex(ChTrackShoe self) -> size_t"""
        return _vehicle.ChTrackShoe_GetIndex(self)

    def GetShoeBody(self):
        r"""GetShoeBody(ChTrackShoe self) -> std::shared_ptr< chrono::ChBody >"""
        return _vehicle.ChTrackShoe_GetShoeBody(self)

    def GetTension(self):
        r"""GetTension(ChTrackShoe self) -> ChVectorD"""
        return _vehicle.ChTrackShoe_GetTension(self)

    def GetHeight(self):
        r"""GetHeight(ChTrackShoe self) -> double"""
        return _vehicle.ChTrackShoe_GetHeight(self)

    def GetPitch(self):
        r"""GetPitch(ChTrackShoe self) -> double"""
        return _vehicle.ChTrackShoe_GetPitch(self)

    def GetLateralContactPoint(self):
        r"""GetLateralContactPoint(ChTrackShoe self) -> ChVectorD"""
        return _vehicle.ChTrackShoe_GetLateralContactPoint(self)

    def GetGroundContactGeometry(self):
        r"""GetGroundContactGeometry(ChTrackShoe self) -> ChVehicleGeometry"""
        return _vehicle.ChTrackShoe_GetGroundContactGeometry(self)

    def SetCollide(self, val):
        r"""SetCollide(ChTrackShoe self, bool val)"""
        return _vehicle.ChTrackShoe_SetCollide(self, val)

    def Initialize(self, chassis, location, rotation):
        r"""Initialize(ChTrackShoe self, std::shared_ptr< chrono::ChBodyAuxRef > chassis, ChVectorD location, ChQuaternionD rotation)"""
        return _vehicle.ChTrackShoe_Initialize(self, chassis, location, rotation)

    def SetIndex(self, index):
        r"""SetIndex(ChTrackShoe self, size_t index)"""
        return _vehicle.ChTrackShoe_SetIndex(self, index)

    def Connect(self, next, assembly, chassis, ccw):
        r"""Connect(ChTrackShoe self, std::shared_ptr< chrono::vehicle::ChTrackShoe > next, ChTrackAssembly assembly, ChChassis chassis, bool ccw)"""
        return _vehicle.ChTrackShoe_Connect(self, next, assembly, chassis, ccw)

# Register ChTrackShoe in _vehicle:
_vehicle.ChTrackShoe_swigregister(ChTrackShoe)

class ChTrackShoeBand(ChTrackShoe):
    r"""Proxy of C++ chrono::vehicle::ChTrackShoeBand class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChTrackShoeBand

    def GetPitch(self):
        r"""GetPitch(ChTrackShoeBand self) -> double"""
        return _vehicle.ChTrackShoeBand_GetPitch(self)

    def Initialize(self, chassis, location, rotation):
        r"""Initialize(ChTrackShoeBand self, std::shared_ptr< chrono::ChBodyAuxRef > chassis, ChVectorD location, ChQuaternionD rotation)"""
        return _vehicle.ChTrackShoeBand_Initialize(self, chassis, location, rotation)

    def WriteTreadVisualizationMesh(self, out_dir):
        r"""WriteTreadVisualizationMesh(ChTrackShoeBand self, std::string const & out_dir)"""
        return _vehicle.ChTrackShoeBand_WriteTreadVisualizationMesh(self, out_dir)

    def ExportTreadVisualizationMeshPovray(self, out_dir):
        r"""ExportTreadVisualizationMeshPovray(ChTrackShoeBand self, std::string const & out_dir)"""
        return _vehicle.ChTrackShoeBand_ExportTreadVisualizationMeshPovray(self, out_dir)

# Register ChTrackShoeBand in _vehicle:
_vehicle.ChTrackShoeBand_swigregister(ChTrackShoeBand)

class ChTrackShoeBandANCF(ChTrackShoeBand):
    r"""Proxy of C++ chrono::vehicle::ChTrackShoeBandANCF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ElementType_ANCF_4 = _vehicle.ChTrackShoeBandANCF_ElementType_ANCF_4
    
    ElementType_ANCF_8 = _vehicle.ChTrackShoeBandANCF_ElementType_ANCF_8
    
    __swig_destroy__ = _vehicle.delete_ChTrackShoeBandANCF

    def GetTemplateName(self):
        r"""GetTemplateName(ChTrackShoeBandANCF self) -> std::string"""
        return _vehicle.ChTrackShoeBandANCF_GetTemplateName(self)

    def GetTension(self):
        r"""GetTension(ChTrackShoeBandANCF self) -> ChVectorD"""
        return _vehicle.ChTrackShoeBandANCF_GetTension(self)

    def Initialize(self, chassis, location, rotation):
        r"""Initialize(ChTrackShoeBandANCF self, std::shared_ptr< chrono::ChBodyAuxRef > chassis, ChVectorD location, ChQuaternionD rotation)"""
        return _vehicle.ChTrackShoeBandANCF_Initialize(self, chassis, location, rotation)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChTrackShoeBandANCF self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChTrackShoeBandANCF_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChTrackShoeBandANCF self)"""
        return _vehicle.ChTrackShoeBandANCF_RemoveVisualizationAssets(self)

# Register ChTrackShoeBandANCF in _vehicle:
_vehicle.ChTrackShoeBandANCF_swigregister(ChTrackShoeBandANCF)

class ChTrackShoeBandBushing(ChTrackShoeBand):
    r"""Proxy of C++ chrono::vehicle::ChTrackShoeBandBushing class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChTrackShoeBandBushing

    def GetTemplateName(self):
        r"""GetTemplateName(ChTrackShoeBandBushing self) -> std::string"""
        return _vehicle.ChTrackShoeBandBushing_GetTemplateName(self)

    def GetTension(self):
        r"""GetTension(ChTrackShoeBandBushing self) -> ChVectorD"""
        return _vehicle.ChTrackShoeBandBushing_GetTension(self)

    def Initialize(self, chassis, location, rotation):
        r"""Initialize(ChTrackShoeBandBushing self, std::shared_ptr< chrono::ChBodyAuxRef > chassis, ChVectorD location, ChQuaternionD rotation)"""
        return _vehicle.ChTrackShoeBandBushing_Initialize(self, chassis, location, rotation)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChTrackShoeBandBushing self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChTrackShoeBandBushing_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChTrackShoeBandBushing self)"""
        return _vehicle.ChTrackShoeBandBushing_RemoveVisualizationAssets(self)

# Register ChTrackShoeBandBushing in _vehicle:
_vehicle.ChTrackShoeBandBushing_swigregister(ChTrackShoeBandBushing)

class ChTrackShoeSegmented(ChTrackShoe):
    r"""Proxy of C++ chrono::vehicle::ChTrackShoeSegmented class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChTrackShoeSegmented

    def GetSprocketContactMaterial(self):
        r"""GetSprocketContactMaterial(ChTrackShoeSegmented self) -> std::shared_ptr< chrono::ChMaterialSurface >"""
        return _vehicle.ChTrackShoeSegmented_GetSprocketContactMaterial(self)

# Register ChTrackShoeSegmented in _vehicle:
_vehicle.ChTrackShoeSegmented_swigregister(ChTrackShoeSegmented)

class ChTrackShoeSinglePin(ChTrackShoeSegmented):
    r"""Proxy of C++ chrono::vehicle::ChTrackShoeSinglePin class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChTrackShoeSinglePin

    def GetTemplateName(self):
        r"""GetTemplateName(ChTrackShoeSinglePin self) -> std::string"""
        return _vehicle.ChTrackShoeSinglePin_GetTemplateName(self)

    def GetTension(self):
        r"""GetTension(ChTrackShoeSinglePin self) -> ChVectorD"""
        return _vehicle.ChTrackShoeSinglePin_GetTension(self)

    def Initialize(self, chassis, location, rotation):
        r"""Initialize(ChTrackShoeSinglePin self, std::shared_ptr< chrono::ChBodyAuxRef > chassis, ChVectorD location, ChQuaternionD rotation)"""
        return _vehicle.ChTrackShoeSinglePin_Initialize(self, chassis, location, rotation)

# Register ChTrackShoeSinglePin in _vehicle:
_vehicle.ChTrackShoeSinglePin_swigregister(ChTrackShoeSinglePin)

class ChTrackShoeDoublePin(ChTrackShoeSegmented):
    r"""Proxy of C++ chrono::vehicle::ChTrackShoeDoublePin class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChTrackShoeDoublePin

    def GetTemplateName(self):
        r"""GetTemplateName(ChTrackShoeDoublePin self) -> std::string"""
        return _vehicle.ChTrackShoeDoublePin_GetTemplateName(self)

    def GetPitch(self):
        r"""GetPitch(ChTrackShoeDoublePin self) -> double"""
        return _vehicle.ChTrackShoeDoublePin_GetPitch(self)

    def GetTension(self):
        r"""GetTension(ChTrackShoeDoublePin self) -> ChVectorD"""
        return _vehicle.ChTrackShoeDoublePin_GetTension(self)

    def Initialize(self, chassis, location, rotation):
        r"""Initialize(ChTrackShoeDoublePin self, std::shared_ptr< chrono::ChBodyAuxRef > chassis, ChVectorD location, ChQuaternionD rotation)"""
        return _vehicle.ChTrackShoeDoublePin_Initialize(self, chassis, location, rotation)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChTrackShoeDoublePin self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChTrackShoeDoublePin_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChTrackShoeDoublePin self)"""
        return _vehicle.ChTrackShoeDoublePin_RemoveVisualizationAssets(self)

# Register ChTrackShoeDoublePin in _vehicle:
_vehicle.ChTrackShoeDoublePin_swigregister(ChTrackShoeDoublePin)

class TrackShoeBandANCF(ChTrackShoeBandANCF):
    r"""Proxy of C++ chrono::vehicle::TrackShoeBandANCF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TrackShoeBandANCF self, std::string const & filename) -> TrackShoeBandANCF
        __init__(TrackShoeBandANCF self, rapidjson::Document const & d) -> TrackShoeBandANCF
        """
        _vehicle.TrackShoeBandANCF_swiginit(self, _vehicle.new_TrackShoeBandANCF(*args))
    __swig_destroy__ = _vehicle.delete_TrackShoeBandANCF

    def GetType(self):
        r"""GetType(TrackShoeBandANCF self) -> chrono::vehicle::GuidePinType"""
        return _vehicle.TrackShoeBandANCF_GetType(self)

    def GetHeight(self):
        r"""GetHeight(TrackShoeBandANCF self) -> double"""
        return _vehicle.TrackShoeBandANCF_GetHeight(self)

    def GetTreadMass(self):
        r"""GetTreadMass(TrackShoeBandANCF self) -> double"""
        return _vehicle.TrackShoeBandANCF_GetTreadMass(self)

    def GetWebMass(self):
        r"""GetWebMass(TrackShoeBandANCF self) -> double"""
        return _vehicle.TrackShoeBandANCF_GetWebMass(self)

    def GetTreadInertia(self):
        r"""GetTreadInertia(TrackShoeBandANCF self) -> ChVectorD"""
        return _vehicle.TrackShoeBandANCF_GetTreadInertia(self)

    def GetWebInertia(self):
        r"""GetWebInertia(TrackShoeBandANCF self) -> ChVectorD"""
        return _vehicle.TrackShoeBandANCF_GetWebInertia(self)

    def GetGuideBoxDimensions(self):
        r"""GetGuideBoxDimensions(TrackShoeBandANCF self) -> ChVectorD"""
        return _vehicle.TrackShoeBandANCF_GetGuideBoxDimensions(self)

    def GetGuideBoxOffsetX(self):
        r"""GetGuideBoxOffsetX(TrackShoeBandANCF self) -> double"""
        return _vehicle.TrackShoeBandANCF_GetGuideBoxOffsetX(self)

    def GetBeltWidth(self):
        r"""GetBeltWidth(TrackShoeBandANCF self) -> double"""
        return _vehicle.TrackShoeBandANCF_GetBeltWidth(self)

    def GetToothTipLength(self):
        r"""GetToothTipLength(TrackShoeBandANCF self) -> double"""
        return _vehicle.TrackShoeBandANCF_GetToothTipLength(self)

    def GetToothBaseLength(self):
        r"""GetToothBaseLength(TrackShoeBandANCF self) -> double"""
        return _vehicle.TrackShoeBandANCF_GetToothBaseLength(self)

    def GetToothWidth(self):
        r"""GetToothWidth(TrackShoeBandANCF self) -> double"""
        return _vehicle.TrackShoeBandANCF_GetToothWidth(self)

    def GetToothHeight(self):
        r"""GetToothHeight(TrackShoeBandANCF self) -> double"""
        return _vehicle.TrackShoeBandANCF_GetToothHeight(self)

    def GetToothArcRadius(self):
        r"""GetToothArcRadius(TrackShoeBandANCF self) -> double"""
        return _vehicle.TrackShoeBandANCF_GetToothArcRadius(self)

    def GetWebLength(self):
        r"""GetWebLength(TrackShoeBandANCF self) -> double"""
        return _vehicle.TrackShoeBandANCF_GetWebLength(self)

    def GetWebThickness(self):
        r"""GetWebThickness(TrackShoeBandANCF self) -> double"""
        return _vehicle.TrackShoeBandANCF_GetWebThickness(self)

    def GetNumElementsLength(self):
        r"""GetNumElementsLength(TrackShoeBandANCF self) -> int"""
        return _vehicle.TrackShoeBandANCF_GetNumElementsLength(self)

    def GetNumElementsWidth(self):
        r"""GetNumElementsWidth(TrackShoeBandANCF self) -> int"""
        return _vehicle.TrackShoeBandANCF_GetNumElementsWidth(self)

    def GetSteelLayerThickness(self):
        r"""GetSteelLayerThickness(TrackShoeBandANCF self) -> double"""
        return _vehicle.TrackShoeBandANCF_GetSteelLayerThickness(self)

    def GetTreadLength(self):
        r"""GetTreadLength(TrackShoeBandANCF self) -> double"""
        return _vehicle.TrackShoeBandANCF_GetTreadLength(self)

    def GetTreadThickness(self):
        r"""GetTreadThickness(TrackShoeBandANCF self) -> double"""
        return _vehicle.TrackShoeBandANCF_GetTreadThickness(self)

    def GetTreadVisualizationMeshName(self):
        r"""GetTreadVisualizationMeshName(TrackShoeBandANCF self) -> std::string const &"""
        return _vehicle.TrackShoeBandANCF_GetTreadVisualizationMeshName(self)

# Register TrackShoeBandANCF in _vehicle:
_vehicle.TrackShoeBandANCF_swigregister(TrackShoeBandANCF)

class TrackShoeBandBushing(ChTrackShoeBandBushing):
    r"""Proxy of C++ chrono::vehicle::TrackShoeBandBushing class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TrackShoeBandBushing self, std::string const & filename) -> TrackShoeBandBushing
        __init__(TrackShoeBandBushing self, rapidjson::Document const & d) -> TrackShoeBandBushing
        """
        _vehicle.TrackShoeBandBushing_swiginit(self, _vehicle.new_TrackShoeBandBushing(*args))
    __swig_destroy__ = _vehicle.delete_TrackShoeBandBushing

    def GetType(self):
        r"""GetType(TrackShoeBandBushing self) -> chrono::vehicle::GuidePinType"""
        return _vehicle.TrackShoeBandBushing_GetType(self)

    def GetHeight(self):
        r"""GetHeight(TrackShoeBandBushing self) -> double"""
        return _vehicle.TrackShoeBandBushing_GetHeight(self)

    def GetTreadMass(self):
        r"""GetTreadMass(TrackShoeBandBushing self) -> double"""
        return _vehicle.TrackShoeBandBushing_GetTreadMass(self)

    def GetWebMass(self):
        r"""GetWebMass(TrackShoeBandBushing self) -> double"""
        return _vehicle.TrackShoeBandBushing_GetWebMass(self)

    def GetTreadInertia(self):
        r"""GetTreadInertia(TrackShoeBandBushing self) -> ChVectorD"""
        return _vehicle.TrackShoeBandBushing_GetTreadInertia(self)

    def GetWebInertia(self):
        r"""GetWebInertia(TrackShoeBandBushing self) -> ChVectorD"""
        return _vehicle.TrackShoeBandBushing_GetWebInertia(self)

    def GetGuideBoxDimensions(self):
        r"""GetGuideBoxDimensions(TrackShoeBandBushing self) -> ChVectorD"""
        return _vehicle.TrackShoeBandBushing_GetGuideBoxDimensions(self)

    def GetGuideBoxOffsetX(self):
        r"""GetGuideBoxOffsetX(TrackShoeBandBushing self) -> double"""
        return _vehicle.TrackShoeBandBushing_GetGuideBoxOffsetX(self)

    def GetBeltWidth(self):
        r"""GetBeltWidth(TrackShoeBandBushing self) -> double"""
        return _vehicle.TrackShoeBandBushing_GetBeltWidth(self)

    def GetToothTipLength(self):
        r"""GetToothTipLength(TrackShoeBandBushing self) -> double"""
        return _vehicle.TrackShoeBandBushing_GetToothTipLength(self)

    def GetToothBaseLength(self):
        r"""GetToothBaseLength(TrackShoeBandBushing self) -> double"""
        return _vehicle.TrackShoeBandBushing_GetToothBaseLength(self)

    def GetToothWidth(self):
        r"""GetToothWidth(TrackShoeBandBushing self) -> double"""
        return _vehicle.TrackShoeBandBushing_GetToothWidth(self)

    def GetToothHeight(self):
        r"""GetToothHeight(TrackShoeBandBushing self) -> double"""
        return _vehicle.TrackShoeBandBushing_GetToothHeight(self)

    def GetToothArcRadius(self):
        r"""GetToothArcRadius(TrackShoeBandBushing self) -> double"""
        return _vehicle.TrackShoeBandBushing_GetToothArcRadius(self)

    def GetNumWebSegments(self):
        r"""GetNumWebSegments(TrackShoeBandBushing self) -> int"""
        return _vehicle.TrackShoeBandBushing_GetNumWebSegments(self)

    def GetWebLength(self):
        r"""GetWebLength(TrackShoeBandBushing self) -> double"""
        return _vehicle.TrackShoeBandBushing_GetWebLength(self)

    def GetWebThickness(self):
        r"""GetWebThickness(TrackShoeBandBushing self) -> double"""
        return _vehicle.TrackShoeBandBushing_GetWebThickness(self)

    def GetTreadLength(self):
        r"""GetTreadLength(TrackShoeBandBushing self) -> double"""
        return _vehicle.TrackShoeBandBushing_GetTreadLength(self)

    def GetTreadThickness(self):
        r"""GetTreadThickness(TrackShoeBandBushing self) -> double"""
        return _vehicle.TrackShoeBandBushing_GetTreadThickness(self)

    def GetBushingData(self):
        r"""GetBushingData(TrackShoeBandBushing self) -> std::shared_ptr< ChVehicleBushingData >"""
        return _vehicle.TrackShoeBandBushing_GetBushingData(self)

    def GetTreadVisualizationMeshName(self):
        r"""GetTreadVisualizationMeshName(TrackShoeBandBushing self) -> std::string const &"""
        return _vehicle.TrackShoeBandBushing_GetTreadVisualizationMeshName(self)

# Register TrackShoeBandBushing in _vehicle:
_vehicle.TrackShoeBandBushing_swigregister(TrackShoeBandBushing)

class TrackShoeSinglePin(ChTrackShoeSinglePin):
    r"""Proxy of C++ chrono::vehicle::TrackShoeSinglePin class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TrackShoeSinglePin self, std::string const & filename) -> TrackShoeSinglePin
        __init__(TrackShoeSinglePin self, rapidjson::Document const & d) -> TrackShoeSinglePin
        """
        _vehicle.TrackShoeSinglePin_swiginit(self, _vehicle.new_TrackShoeSinglePin(*args))
    __swig_destroy__ = _vehicle.delete_TrackShoeSinglePin

    def GetType(self):
        r"""GetType(TrackShoeSinglePin self) -> chrono::vehicle::GuidePinType"""
        return _vehicle.TrackShoeSinglePin_GetType(self)

    def GetHeight(self):
        r"""GetHeight(TrackShoeSinglePin self) -> double"""
        return _vehicle.TrackShoeSinglePin_GetHeight(self)

    def GetPitch(self):
        r"""GetPitch(TrackShoeSinglePin self) -> double"""
        return _vehicle.TrackShoeSinglePin_GetPitch(self)

    def GetShoeMass(self):
        r"""GetShoeMass(TrackShoeSinglePin self) -> double"""
        return _vehicle.TrackShoeSinglePin_GetShoeMass(self)

    def GetShoeInertia(self):
        r"""GetShoeInertia(TrackShoeSinglePin self) -> ChVectorD"""
        return _vehicle.TrackShoeSinglePin_GetShoeInertia(self)

    def GetFrontCylinderLoc(self):
        r"""GetFrontCylinderLoc(TrackShoeSinglePin self) -> double"""
        return _vehicle.TrackShoeSinglePin_GetFrontCylinderLoc(self)

    def GetRearCylinderLoc(self):
        r"""GetRearCylinderLoc(TrackShoeSinglePin self) -> double"""
        return _vehicle.TrackShoeSinglePin_GetRearCylinderLoc(self)

    def GetCylinderRadius(self):
        r"""GetCylinderRadius(TrackShoeSinglePin self) -> double"""
        return _vehicle.TrackShoeSinglePin_GetCylinderRadius(self)

    def GetLateralContactPoint(self):
        r"""GetLateralContactPoint(TrackShoeSinglePin self) -> ChVectorD"""
        return _vehicle.TrackShoeSinglePin_GetLateralContactPoint(self)

    def GetGroundContactGeometry(self):
        r"""GetGroundContactGeometry(TrackShoeSinglePin self) -> ChVehicleGeometry"""
        return _vehicle.TrackShoeSinglePin_GetGroundContactGeometry(self)

# Register TrackShoeSinglePin in _vehicle:
_vehicle.TrackShoeSinglePin_swigregister(TrackShoeSinglePin)

class TrackShoeDoublePin(ChTrackShoeDoublePin):
    r"""Proxy of C++ chrono::vehicle::TrackShoeDoublePin class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TrackShoeDoublePin self, std::string const & filename) -> TrackShoeDoublePin
        __init__(TrackShoeDoublePin self, rapidjson::Document const & d) -> TrackShoeDoublePin
        """
        _vehicle.TrackShoeDoublePin_swiginit(self, _vehicle.new_TrackShoeDoublePin(*args))
    __swig_destroy__ = _vehicle.delete_TrackShoeDoublePin

    def GetType(self):
        r"""GetType(TrackShoeDoublePin self) -> chrono::vehicle::GuidePinType"""
        return _vehicle.TrackShoeDoublePin_GetType(self)

    def GetHeight(self):
        r"""GetHeight(TrackShoeDoublePin self) -> double"""
        return _vehicle.TrackShoeDoublePin_GetHeight(self)

    def GetShoeMass(self):
        r"""GetShoeMass(TrackShoeDoublePin self) -> double"""
        return _vehicle.TrackShoeDoublePin_GetShoeMass(self)

    def GetShoeInertia(self):
        r"""GetShoeInertia(TrackShoeDoublePin self) -> ChVectorD"""
        return _vehicle.TrackShoeDoublePin_GetShoeInertia(self)

    def GetShoeLength(self):
        r"""GetShoeLength(TrackShoeDoublePin self) -> double"""
        return _vehicle.TrackShoeDoublePin_GetShoeLength(self)

    def GetShoeWidth(self):
        r"""GetShoeWidth(TrackShoeDoublePin self) -> double"""
        return _vehicle.TrackShoeDoublePin_GetShoeWidth(self)

    def GetConnectorMass(self):
        r"""GetConnectorMass(TrackShoeDoublePin self) -> double"""
        return _vehicle.TrackShoeDoublePin_GetConnectorMass(self)

    def GetConnectorInertia(self):
        r"""GetConnectorInertia(TrackShoeDoublePin self) -> ChVectorD"""
        return _vehicle.TrackShoeDoublePin_GetConnectorInertia(self)

    def GetConnectorLength(self):
        r"""GetConnectorLength(TrackShoeDoublePin self) -> double"""
        return _vehicle.TrackShoeDoublePin_GetConnectorLength(self)

    def GetConnectorRadius(self):
        r"""GetConnectorRadius(TrackShoeDoublePin self) -> double"""
        return _vehicle.TrackShoeDoublePin_GetConnectorRadius(self)

    def GetConnectorWidth(self):
        r"""GetConnectorWidth(TrackShoeDoublePin self) -> double"""
        return _vehicle.TrackShoeDoublePin_GetConnectorWidth(self)

    def GetLateralContactPoint(self):
        r"""GetLateralContactPoint(TrackShoeDoublePin self) -> ChVectorD"""
        return _vehicle.TrackShoeDoublePin_GetLateralContactPoint(self)

    def GetGroundContactGeometry(self):
        r"""GetGroundContactGeometry(TrackShoeDoublePin self) -> ChVehicleGeometry"""
        return _vehicle.TrackShoeDoublePin_GetGroundContactGeometry(self)

# Register TrackShoeDoublePin in _vehicle:
_vehicle.TrackShoeDoublePin_swigregister(TrackShoeDoublePin)

class ChTrackAssembly(ChPart):
    r"""Proxy of C++ chrono::vehicle::ChTrackAssembly class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChTrackAssembly

    def GetVehicleSide(self):
        r"""GetVehicleSide(ChTrackAssembly self) -> chrono::vehicle::VehicleSide"""
        return _vehicle.ChTrackAssembly_GetVehicleSide(self)

    def GetNumTrackSuspensions(self):
        r"""GetNumTrackSuspensions(ChTrackAssembly self) -> size_t"""
        return _vehicle.ChTrackAssembly_GetNumTrackSuspensions(self)

    def GetNumRollers(self):
        r"""GetNumRollers(ChTrackAssembly self) -> size_t"""
        return _vehicle.ChTrackAssembly_GetNumRollers(self)

    def GetNumTrackShoes(self):
        r"""GetNumTrackShoes(ChTrackAssembly self) -> size_t"""
        return _vehicle.ChTrackAssembly_GetNumTrackShoes(self)

    def GetSprocket(self):
        r"""GetSprocket(ChTrackAssembly self) -> std::shared_ptr< chrono::vehicle::ChSprocket >"""
        return _vehicle.ChTrackAssembly_GetSprocket(self)

    def GetIdler(self):
        r"""GetIdler(ChTrackAssembly self) -> std::shared_ptr< chrono::vehicle::ChIdler >"""
        return _vehicle.ChTrackAssembly_GetIdler(self)

    def GetIdlerWheel(self):
        r"""GetIdlerWheel(ChTrackAssembly self) -> std::shared_ptr< chrono::vehicle::ChTrackWheel >"""
        return _vehicle.ChTrackAssembly_GetIdlerWheel(self)

    def GetBrake(self):
        r"""GetBrake(ChTrackAssembly self) -> std::shared_ptr< chrono::vehicle::ChTrackBrake >"""
        return _vehicle.ChTrackAssembly_GetBrake(self)

    def GetTrackSuspensions(self):
        r"""GetTrackSuspensions(ChTrackAssembly self) -> chrono::vehicle::ChTrackSuspensionList const &"""
        return _vehicle.ChTrackAssembly_GetTrackSuspensions(self)

    def GetTrackSuspension(self, id):
        r"""GetTrackSuspension(ChTrackAssembly self, size_t id) -> std::shared_ptr< chrono::vehicle::ChTrackSuspension >"""
        return _vehicle.ChTrackAssembly_GetTrackSuspension(self, id)

    def GetRoller(self, id):
        r"""GetRoller(ChTrackAssembly self, size_t id) -> std::shared_ptr< chrono::vehicle::ChTrackWheel >"""
        return _vehicle.ChTrackAssembly_GetRoller(self, id)

    def GetRoadWheel(self, id):
        r"""GetRoadWheel(ChTrackAssembly self, size_t id) -> std::shared_ptr< chrono::vehicle::ChTrackWheel >"""
        return _vehicle.ChTrackAssembly_GetRoadWheel(self, id)

    def GetTrackShoe(self, id):
        r"""GetTrackShoe(ChTrackAssembly self, size_t id) -> std::shared_ptr< chrono::vehicle::ChTrackShoe >"""
        return _vehicle.ChTrackAssembly_GetTrackShoe(self, id)

    def GetTrackShoePos(self, id):
        r"""GetTrackShoePos(ChTrackAssembly self, size_t id) -> ChVectorD"""
        return _vehicle.ChTrackAssembly_GetTrackShoePos(self, id)

    def GetTrackShoeRot(self, id):
        r"""GetTrackShoeRot(ChTrackAssembly self, size_t id) -> ChQuaternionD"""
        return _vehicle.ChTrackAssembly_GetTrackShoeRot(self, id)

    def GetTrackShoeLinVel(self, id):
        r"""GetTrackShoeLinVel(ChTrackAssembly self, size_t id) -> ChVectorD"""
        return _vehicle.ChTrackAssembly_GetTrackShoeLinVel(self, id)

    def GetTrackShoeAngVel(self, id):
        r"""GetTrackShoeAngVel(ChTrackAssembly self, size_t id) -> ChVectorD"""
        return _vehicle.ChTrackAssembly_GetTrackShoeAngVel(self, id)

    def GetTrackShoeTension(self, id):
        r"""GetTrackShoeTension(ChTrackAssembly self, size_t id) -> ChVectorD"""
        return _vehicle.ChTrackAssembly_GetTrackShoeTension(self, id)

    def GetTrackShoeState(self, id):
        r"""GetTrackShoeState(ChTrackAssembly self, size_t id) -> BodyState"""
        return _vehicle.ChTrackAssembly_GetTrackShoeState(self, id)

    def GetTrackShoeStates(self, states):
        r"""GetTrackShoeStates(ChTrackAssembly self, chrono::vehicle::BodyStates & states)"""
        return _vehicle.ChTrackAssembly_GetTrackShoeStates(self, states)

    def GetSprocketLocation(self):
        r"""GetSprocketLocation(ChTrackAssembly self) -> ChVectorD"""
        return _vehicle.ChTrackAssembly_GetSprocketLocation(self)

    def GetIdlerLocation(self):
        r"""GetIdlerLocation(ChTrackAssembly self) -> ChVectorD"""
        return _vehicle.ChTrackAssembly_GetIdlerLocation(self)

    def GetRoadWhelAssemblyLocation(self, which):
        r"""GetRoadWhelAssemblyLocation(ChTrackAssembly self, int which) -> ChVectorD"""
        return _vehicle.ChTrackAssembly_GetRoadWhelAssemblyLocation(self, which)

    def GetRollerLocation(self, which):
        r"""GetRollerLocation(ChTrackAssembly self, int which) -> ChVectorD"""
        return _vehicle.ChTrackAssembly_GetRollerLocation(self, which)

    def Initialize(self, chassis, location, create_shoes=True):
        r"""Initialize(ChTrackAssembly self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, ChVectorD location, bool create_shoes=True)"""
        return _vehicle.ChTrackAssembly_Initialize(self, chassis, location, create_shoes)

    def ReportTrackLength(self):
        r"""ReportTrackLength(ChTrackAssembly self) -> double"""
        return _vehicle.ChTrackAssembly_ReportTrackLength(self)

    def ReportSuspensionForce(self, id):
        r"""ReportSuspensionForce(ChTrackAssembly self, size_t id) -> ForceTorque"""
        return _vehicle.ChTrackAssembly_ReportSuspensionForce(self, id)

    def SetSprocketVisualizationType(self, vis):
        r"""SetSprocketVisualizationType(ChTrackAssembly self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChTrackAssembly_SetSprocketVisualizationType(self, vis)

    def SetIdlerVisualizationType(self, vis):
        r"""SetIdlerVisualizationType(ChTrackAssembly self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChTrackAssembly_SetIdlerVisualizationType(self, vis)

    def SetSuspensionVisualizationType(self, vis):
        r"""SetSuspensionVisualizationType(ChTrackAssembly self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChTrackAssembly_SetSuspensionVisualizationType(self, vis)

    def SetIdlerWheelVisualizationType(self, vis):
        r"""SetIdlerWheelVisualizationType(ChTrackAssembly self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChTrackAssembly_SetIdlerWheelVisualizationType(self, vis)

    def SetRoadWheelVisualizationType(self, vis):
        r"""SetRoadWheelVisualizationType(ChTrackAssembly self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChTrackAssembly_SetRoadWheelVisualizationType(self, vis)

    def SetRollerVisualizationType(self, vis):
        r"""SetRollerVisualizationType(ChTrackAssembly self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChTrackAssembly_SetRollerVisualizationType(self, vis)

    def SetTrackShoeVisualizationType(self, vis):
        r"""SetTrackShoeVisualizationType(ChTrackAssembly self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChTrackAssembly_SetTrackShoeVisualizationType(self, vis)

    def SetWheelCollisionType(self, roadwheel_as_cylinder, idler_as_cylinder, roller_as_cylinder):
        r"""SetWheelCollisionType(ChTrackAssembly self, bool roadwheel_as_cylinder, bool idler_as_cylinder, bool roller_as_cylinder)"""
        return _vehicle.ChTrackAssembly_SetWheelCollisionType(self, roadwheel_as_cylinder, idler_as_cylinder, roller_as_cylinder)

    def Synchronize(self, time, braking, shoe_forces):
        r"""Synchronize(ChTrackAssembly self, double time, double braking, TerrainForces shoe_forces)"""
        return _vehicle.ChTrackAssembly_Synchronize(self, time, braking, shoe_forces)

    def SetOutput(self, state):
        r"""SetOutput(ChTrackAssembly self, bool state)"""
        return _vehicle.ChTrackAssembly_SetOutput(self, state)

    def LogConstraintViolations(self):
        r"""LogConstraintViolations(ChTrackAssembly self)"""
        return _vehicle.ChTrackAssembly_LogConstraintViolations(self)

    def IsRoadwheelCylinder(self):
        r"""IsRoadwheelCylinder(ChTrackAssembly self) -> bool"""
        return _vehicle.ChTrackAssembly_IsRoadwheelCylinder(self)

    def IsIdlerCylinder(self):
        r"""IsIdlerCylinder(ChTrackAssembly self) -> bool"""
        return _vehicle.ChTrackAssembly_IsIdlerCylinder(self)

    def IsRolerCylinder(self):
        r"""IsRolerCylinder(ChTrackAssembly self) -> bool"""
        return _vehicle.ChTrackAssembly_IsRolerCylinder(self)

# Register ChTrackAssembly in _vehicle:
_vehicle.ChTrackAssembly_swigregister(ChTrackAssembly)

class ChTrackAssemblyBand(ChTrackAssembly):
    r"""Proxy of C++ chrono::vehicle::ChTrackAssemblyBand class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChTrackAssemblyBand

    def GetSprocket(self):
        r"""GetSprocket(ChTrackAssemblyBand self) -> std::shared_ptr< chrono::vehicle::ChSprocket >"""
        return _vehicle.ChTrackAssemblyBand_GetSprocket(self)

# Register ChTrackAssemblyBand in _vehicle:
_vehicle.ChTrackAssemblyBand_swigregister(ChTrackAssemblyBand)

class ChTrackAssemblyBandANCF(ChTrackAssemblyBand):
    r"""Proxy of C++ chrono::vehicle::ChTrackAssemblyBandANCF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ContactSurfaceType_NONE = _vehicle.ChTrackAssemblyBandANCF_ContactSurfaceType_NONE
    
    ContactSurfaceType_NODE_CLOUD = _vehicle.ChTrackAssemblyBandANCF_ContactSurfaceType_NODE_CLOUD
    
    ContactSurfaceType_TRIANGLE_MESH = _vehicle.ChTrackAssemblyBandANCF_ContactSurfaceType_TRIANGLE_MESH
    
    __swig_destroy__ = _vehicle.delete_ChTrackAssemblyBandANCF

    def GetTemplateName(self):
        r"""GetTemplateName(ChTrackAssemblyBandANCF self) -> std::string"""
        return _vehicle.ChTrackAssemblyBandANCF_GetTemplateName(self)

    def SetContactSurfaceType(self, type):
        r"""SetContactSurfaceType(ChTrackAssemblyBandANCF self, chrono::vehicle::ChTrackAssemblyBandANCF::ContactSurfaceType type)"""
        return _vehicle.ChTrackAssemblyBandANCF_SetContactSurfaceType(self, type)

    def GetNumTrackShoes(self):
        r"""GetNumTrackShoes(ChTrackAssemblyBandANCF self) -> size_t"""
        return _vehicle.ChTrackAssemblyBandANCF_GetNumTrackShoes(self)

    def GetTrackShoe(self, id):
        r"""GetTrackShoe(ChTrackAssemblyBandANCF self, size_t id) -> std::shared_ptr< chrono::vehicle::ChTrackShoe >"""
        return _vehicle.ChTrackAssemblyBandANCF_GetTrackShoe(self, id)

    def GetMesh(self):
        r"""GetMesh(ChTrackAssemblyBandANCF self) -> std::shared_ptr< chrono::fea::ChMesh >"""
        return _vehicle.ChTrackAssemblyBandANCF_GetMesh(self)

# Register ChTrackAssemblyBandANCF in _vehicle:
_vehicle.ChTrackAssemblyBandANCF_swigregister(ChTrackAssemblyBandANCF)

class ChTrackAssemblyBandBushing(ChTrackAssemblyBand):
    r"""Proxy of C++ chrono::vehicle::ChTrackAssemblyBandBushing class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChTrackAssemblyBandBushing

    def GetTemplateName(self):
        r"""GetTemplateName(ChTrackAssemblyBandBushing self) -> std::string"""
        return _vehicle.ChTrackAssemblyBandBushing_GetTemplateName(self)

    def GetNumTrackShoes(self):
        r"""GetNumTrackShoes(ChTrackAssemblyBandBushing self) -> size_t"""
        return _vehicle.ChTrackAssemblyBandBushing_GetNumTrackShoes(self)

    def GetTrackShoe(self, id):
        r"""GetTrackShoe(ChTrackAssemblyBandBushing self, size_t id) -> std::shared_ptr< chrono::vehicle::ChTrackShoe >"""
        return _vehicle.ChTrackAssemblyBandBushing_GetTrackShoe(self, id)

# Register ChTrackAssemblyBandBushing in _vehicle:
_vehicle.ChTrackAssemblyBandBushing_swigregister(ChTrackAssemblyBandBushing)

class ChTrackAssemblySegmented(ChTrackAssembly):
    r"""Proxy of C++ chrono::vehicle::ChTrackAssemblySegmented class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChTrackAssemblySegmented

    def EnableTrackBendingStiffness(self, val):
        r"""EnableTrackBendingStiffness(ChTrackAssemblySegmented self, bool val)"""
        return _vehicle.ChTrackAssemblySegmented_EnableTrackBendingStiffness(self, val)

    def GetTorqueFunctor(self):
        r"""GetTorqueFunctor(ChTrackAssemblySegmented self) -> std::shared_ptr< chrono::ChLinkRSDA::TorqueFunctor >"""
        return _vehicle.ChTrackAssemblySegmented_GetTorqueFunctor(self)

    def GetBushingData(self):
        r"""GetBushingData(ChTrackAssemblySegmented self) -> std::shared_ptr< ChVehicleBushingData >"""
        return _vehicle.ChTrackAssemblySegmented_GetBushingData(self)

# Register ChTrackAssemblySegmented in _vehicle:
_vehicle.ChTrackAssemblySegmented_swigregister(ChTrackAssemblySegmented)

class ChTrackAssemblySinglePin(ChTrackAssemblySegmented):
    r"""Proxy of C++ chrono::vehicle::ChTrackAssemblySinglePin class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChTrackAssemblySinglePin

    def GetTemplateName(self):
        r"""GetTemplateName(ChTrackAssemblySinglePin self) -> std::string"""
        return _vehicle.ChTrackAssemblySinglePin_GetTemplateName(self)

    def GetNumTrackShoes(self):
        r"""GetNumTrackShoes(ChTrackAssemblySinglePin self) -> size_t"""
        return _vehicle.ChTrackAssemblySinglePin_GetNumTrackShoes(self)

    def GetSprocket(self):
        r"""GetSprocket(ChTrackAssemblySinglePin self) -> std::shared_ptr< chrono::vehicle::ChSprocket >"""
        return _vehicle.ChTrackAssemblySinglePin_GetSprocket(self)

    def GetTrackShoe(self, id):
        r"""GetTrackShoe(ChTrackAssemblySinglePin self, size_t id) -> std::shared_ptr< chrono::vehicle::ChTrackShoe >"""
        return _vehicle.ChTrackAssemblySinglePin_GetTrackShoe(self, id)

# Register ChTrackAssemblySinglePin in _vehicle:
_vehicle.ChTrackAssemblySinglePin_swigregister(ChTrackAssemblySinglePin)

class ChTrackAssemblyDoublePin(ChTrackAssemblySegmented):
    r"""Proxy of C++ chrono::vehicle::ChTrackAssemblyDoublePin class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChTrackAssemblyDoublePin

    def GetTemplateName(self):
        r"""GetTemplateName(ChTrackAssemblyDoublePin self) -> std::string"""
        return _vehicle.ChTrackAssemblyDoublePin_GetTemplateName(self)

    def GetNumTrackShoes(self):
        r"""GetNumTrackShoes(ChTrackAssemblyDoublePin self) -> size_t"""
        return _vehicle.ChTrackAssemblyDoublePin_GetNumTrackShoes(self)

    def GetSprocket(self):
        r"""GetSprocket(ChTrackAssemblyDoublePin self) -> std::shared_ptr< chrono::vehicle::ChSprocket >"""
        return _vehicle.ChTrackAssemblyDoublePin_GetSprocket(self)

    def GetTrackShoe(self, id):
        r"""GetTrackShoe(ChTrackAssemblyDoublePin self, size_t id) -> std::shared_ptr< chrono::vehicle::ChTrackShoe >"""
        return _vehicle.ChTrackAssemblyDoublePin_GetTrackShoe(self, id)

# Register ChTrackAssemblyDoublePin in _vehicle:
_vehicle.ChTrackAssemblyDoublePin_swigregister(ChTrackAssemblyDoublePin)

class TrackAssemblyBandANCF(ChTrackAssemblyBandANCF):
    r"""Proxy of C++ chrono::vehicle::TrackAssemblyBandANCF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TrackAssemblyBandANCF self, std::string const & filename) -> TrackAssemblyBandANCF
        __init__(TrackAssemblyBandANCF self, rapidjson::Document const & d) -> TrackAssemblyBandANCF
        """
        _vehicle.TrackAssemblyBandANCF_swiginit(self, _vehicle.new_TrackAssemblyBandANCF(*args))
    __swig_destroy__ = _vehicle.delete_TrackAssemblyBandANCF

    def GetSprocketLocation(self):
        r"""GetSprocketLocation(TrackAssemblyBandANCF self) -> ChVectorD"""
        return _vehicle.TrackAssemblyBandANCF_GetSprocketLocation(self)

    def GetIdlerLocation(self):
        r"""GetIdlerLocation(TrackAssemblyBandANCF self) -> ChVectorD"""
        return _vehicle.TrackAssemblyBandANCF_GetIdlerLocation(self)

    def GetRoadWhelAssemblyLocation(self, which):
        r"""GetRoadWhelAssemblyLocation(TrackAssemblyBandANCF self, int which) -> ChVectorD"""
        return _vehicle.TrackAssemblyBandANCF_GetRoadWhelAssemblyLocation(self, which)

    def GetRollerLocation(self, which):
        r"""GetRollerLocation(TrackAssemblyBandANCF self, int which) -> ChVectorD"""
        return _vehicle.TrackAssemblyBandANCF_GetRollerLocation(self, which)

# Register TrackAssemblyBandANCF in _vehicle:
_vehicle.TrackAssemblyBandANCF_swigregister(TrackAssemblyBandANCF)

class TrackAssemblyBandBushing(ChTrackAssemblyBandBushing):
    r"""Proxy of C++ chrono::vehicle::TrackAssemblyBandBushing class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TrackAssemblyBandBushing self, std::string const & filename) -> TrackAssemblyBandBushing
        __init__(TrackAssemblyBandBushing self, rapidjson::Document const & d) -> TrackAssemblyBandBushing
        """
        _vehicle.TrackAssemblyBandBushing_swiginit(self, _vehicle.new_TrackAssemblyBandBushing(*args))
    __swig_destroy__ = _vehicle.delete_TrackAssemblyBandBushing

    def GetSprocketLocation(self):
        r"""GetSprocketLocation(TrackAssemblyBandBushing self) -> ChVectorD"""
        return _vehicle.TrackAssemblyBandBushing_GetSprocketLocation(self)

    def GetIdlerLocation(self):
        r"""GetIdlerLocation(TrackAssemblyBandBushing self) -> ChVectorD"""
        return _vehicle.TrackAssemblyBandBushing_GetIdlerLocation(self)

    def GetRoadWhelAssemblyLocation(self, which):
        r"""GetRoadWhelAssemblyLocation(TrackAssemblyBandBushing self, int which) -> ChVectorD"""
        return _vehicle.TrackAssemblyBandBushing_GetRoadWhelAssemblyLocation(self, which)

    def GetRollerLocation(self, which):
        r"""GetRollerLocation(TrackAssemblyBandBushing self, int which) -> ChVectorD"""
        return _vehicle.TrackAssemblyBandBushing_GetRollerLocation(self, which)

# Register TrackAssemblyBandBushing in _vehicle:
_vehicle.TrackAssemblyBandBushing_swigregister(TrackAssemblyBandBushing)

class TrackAssemblySinglePin(ChTrackAssemblySinglePin):
    r"""Proxy of C++ chrono::vehicle::TrackAssemblySinglePin class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TrackAssemblySinglePin self, std::string const & filename) -> TrackAssemblySinglePin
        __init__(TrackAssemblySinglePin self, rapidjson::Document const & d) -> TrackAssemblySinglePin
        """
        _vehicle.TrackAssemblySinglePin_swiginit(self, _vehicle.new_TrackAssemblySinglePin(*args))
    __swig_destroy__ = _vehicle.delete_TrackAssemblySinglePin

    def GetSprocketLocation(self):
        r"""GetSprocketLocation(TrackAssemblySinglePin self) -> ChVectorD"""
        return _vehicle.TrackAssemblySinglePin_GetSprocketLocation(self)

    def GetIdlerLocation(self):
        r"""GetIdlerLocation(TrackAssemblySinglePin self) -> ChVectorD"""
        return _vehicle.TrackAssemblySinglePin_GetIdlerLocation(self)

    def GetRoadWhelAssemblyLocation(self, which):
        r"""GetRoadWhelAssemblyLocation(TrackAssemblySinglePin self, int which) -> ChVectorD"""
        return _vehicle.TrackAssemblySinglePin_GetRoadWhelAssemblyLocation(self, which)

    def GetRollerLocation(self, which):
        r"""GetRollerLocation(TrackAssemblySinglePin self, int which) -> ChVectorD"""
        return _vehicle.TrackAssemblySinglePin_GetRollerLocation(self, which)

# Register TrackAssemblySinglePin in _vehicle:
_vehicle.TrackAssemblySinglePin_swigregister(TrackAssemblySinglePin)

class TrackAssemblyDoublePin(ChTrackAssemblyDoublePin):
    r"""Proxy of C++ chrono::vehicle::TrackAssemblyDoublePin class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TrackAssemblyDoublePin self, std::string const & filename) -> TrackAssemblyDoublePin
        __init__(TrackAssemblyDoublePin self, rapidjson::Document const & d) -> TrackAssemblyDoublePin
        """
        _vehicle.TrackAssemblyDoublePin_swiginit(self, _vehicle.new_TrackAssemblyDoublePin(*args))
    __swig_destroy__ = _vehicle.delete_TrackAssemblyDoublePin

    def GetSprocketLocation(self):
        r"""GetSprocketLocation(TrackAssemblyDoublePin self) -> ChVectorD"""
        return _vehicle.TrackAssemblyDoublePin_GetSprocketLocation(self)

    def GetIdlerLocation(self):
        r"""GetIdlerLocation(TrackAssemblyDoublePin self) -> ChVectorD"""
        return _vehicle.TrackAssemblyDoublePin_GetIdlerLocation(self)

    def GetRoadWhelAssemblyLocation(self, which):
        r"""GetRoadWhelAssemblyLocation(TrackAssemblyDoublePin self, int which) -> ChVectorD"""
        return _vehicle.TrackAssemblyDoublePin_GetRoadWhelAssemblyLocation(self, which)

    def GetRollerLocation(self, which):
        r"""GetRollerLocation(TrackAssemblyDoublePin self, int which) -> ChVectorD"""
        return _vehicle.TrackAssemblyDoublePin_GetRollerLocation(self, which)

# Register TrackAssemblyDoublePin in _vehicle:
_vehicle.TrackAssemblyDoublePin_swigregister(TrackAssemblyDoublePin)

class M113_SprocketBand(ChSprocketBand):
    r"""Proxy of C++ chrono::vehicle::m113::M113_SprocketBand class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_M113_SprocketBand

    def GetNumTeeth(self):
        r"""GetNumTeeth(M113_SprocketBand self) -> int"""
        return _vehicle.M113_SprocketBand_GetNumTeeth(self)

    def GetAssemblyRadius(self):
        r"""GetAssemblyRadius(M113_SprocketBand self) -> double"""
        return _vehicle.M113_SprocketBand_GetAssemblyRadius(self)

    def GetAddendumRadius(self):
        r"""GetAddendumRadius(M113_SprocketBand self) -> double"""
        return _vehicle.M113_SprocketBand_GetAddendumRadius(self)

    def GetGearMass(self):
        r"""GetGearMass(M113_SprocketBand self) -> double"""
        return _vehicle.M113_SprocketBand_GetGearMass(self)

    def GetGearInertia(self):
        r"""GetGearInertia(M113_SprocketBand self) -> ChVectorD"""
        return _vehicle.M113_SprocketBand_GetGearInertia(self)

    def GetAxleInertia(self):
        r"""GetAxleInertia(M113_SprocketBand self) -> double"""
        return _vehicle.M113_SprocketBand_GetAxleInertia(self)

    def GetSeparation(self):
        r"""GetSeparation(M113_SprocketBand self) -> double"""
        return _vehicle.M113_SprocketBand_GetSeparation(self)

    def GetOuterRadius(self):
        r"""GetOuterRadius(M113_SprocketBand self) -> double"""
        return _vehicle.M113_SprocketBand_GetOuterRadius(self)

    def GetBaseWidth(self):
        r"""GetBaseWidth(M113_SprocketBand self) -> double"""
        return _vehicle.M113_SprocketBand_GetBaseWidth(self)

    def GetTipWidth(self):
        r"""GetTipWidth(M113_SprocketBand self) -> double"""
        return _vehicle.M113_SprocketBand_GetTipWidth(self)

    def GetToothDepth(self):
        r"""GetToothDepth(M113_SprocketBand self) -> double"""
        return _vehicle.M113_SprocketBand_GetToothDepth(self)

    def GetArcRadius(self):
        r"""GetArcRadius(M113_SprocketBand self) -> double"""
        return _vehicle.M113_SprocketBand_GetArcRadius(self)

    def GetLateralBacklash(self):
        r"""GetLateralBacklash(M113_SprocketBand self) -> double"""
        return _vehicle.M113_SprocketBand_GetLateralBacklash(self)

# Register M113_SprocketBand in _vehicle:
_vehicle.M113_SprocketBand_swigregister(M113_SprocketBand)

class M113_SprocketBandLeft(M113_SprocketBand):
    r"""Proxy of C++ chrono::vehicle::m113::M113_SprocketBandLeft class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(M113_SprocketBandLeft self) -> M113_SprocketBandLeft"""
        _vehicle.M113_SprocketBandLeft_swiginit(self, _vehicle.new_M113_SprocketBandLeft())
    __swig_destroy__ = _vehicle.delete_M113_SprocketBandLeft

    def GetMeshFile(self):
        r"""GetMeshFile(M113_SprocketBandLeft self) -> std::string"""
        return _vehicle.M113_SprocketBandLeft_GetMeshFile(self)

# Register M113_SprocketBandLeft in _vehicle:
_vehicle.M113_SprocketBandLeft_swigregister(M113_SprocketBandLeft)

class M113_SprocketBandRight(M113_SprocketBand):
    r"""Proxy of C++ chrono::vehicle::m113::M113_SprocketBandRight class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(M113_SprocketBandRight self) -> M113_SprocketBandRight"""
        _vehicle.M113_SprocketBandRight_swiginit(self, _vehicle.new_M113_SprocketBandRight())
    __swig_destroy__ = _vehicle.delete_M113_SprocketBandRight

    def GetMeshFile(self):
        r"""GetMeshFile(M113_SprocketBandRight self) -> std::string"""
        return _vehicle.M113_SprocketBandRight_GetMeshFile(self)

# Register M113_SprocketBandRight in _vehicle:
_vehicle.M113_SprocketBandRight_swigregister(M113_SprocketBandRight)

class M113_SprocketSinglePin(ChSprocketSinglePin):
    r"""Proxy of C++ chrono::vehicle::m113::M113_SprocketSinglePin class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_M113_SprocketSinglePin

    def GetNumTeeth(self):
        r"""GetNumTeeth(M113_SprocketSinglePin self) -> int"""
        return _vehicle.M113_SprocketSinglePin_GetNumTeeth(self)

    def GetAssemblyRadius(self):
        r"""GetAssemblyRadius(M113_SprocketSinglePin self) -> double"""
        return _vehicle.M113_SprocketSinglePin_GetAssemblyRadius(self)

    def GetAddendumRadius(self):
        r"""GetAddendumRadius(M113_SprocketSinglePin self) -> double"""
        return _vehicle.M113_SprocketSinglePin_GetAddendumRadius(self)

    def GetGearMass(self):
        r"""GetGearMass(M113_SprocketSinglePin self) -> double"""
        return _vehicle.M113_SprocketSinglePin_GetGearMass(self)

    def GetGearInertia(self):
        r"""GetGearInertia(M113_SprocketSinglePin self) -> ChVectorD"""
        return _vehicle.M113_SprocketSinglePin_GetGearInertia(self)

    def GetAxleInertia(self):
        r"""GetAxleInertia(M113_SprocketSinglePin self) -> double"""
        return _vehicle.M113_SprocketSinglePin_GetAxleInertia(self)

    def GetSeparation(self):
        r"""GetSeparation(M113_SprocketSinglePin self) -> double"""
        return _vehicle.M113_SprocketSinglePin_GetSeparation(self)

    def GetOuterRadius(self):
        r"""GetOuterRadius(M113_SprocketSinglePin self) -> double"""
        return _vehicle.M113_SprocketSinglePin_GetOuterRadius(self)

    def GetArcRadius(self):
        r"""GetArcRadius(M113_SprocketSinglePin self) -> double"""
        return _vehicle.M113_SprocketSinglePin_GetArcRadius(self)

    def GetArcCentersRadius(self):
        r"""GetArcCentersRadius(M113_SprocketSinglePin self) -> double"""
        return _vehicle.M113_SprocketSinglePin_GetArcCentersRadius(self)

    def GetLateralBacklash(self):
        r"""GetLateralBacklash(M113_SprocketSinglePin self) -> double"""
        return _vehicle.M113_SprocketSinglePin_GetLateralBacklash(self)

# Register M113_SprocketSinglePin in _vehicle:
_vehicle.M113_SprocketSinglePin_swigregister(M113_SprocketSinglePin)

class M113_SprocketSinglePinLeft(M113_SprocketSinglePin):
    r"""Proxy of C++ chrono::vehicle::m113::M113_SprocketSinglePinLeft class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(M113_SprocketSinglePinLeft self) -> M113_SprocketSinglePinLeft"""
        _vehicle.M113_SprocketSinglePinLeft_swiginit(self, _vehicle.new_M113_SprocketSinglePinLeft())
    __swig_destroy__ = _vehicle.delete_M113_SprocketSinglePinLeft

    def GetMeshFile(self):
        r"""GetMeshFile(M113_SprocketSinglePinLeft self) -> std::string"""
        return _vehicle.M113_SprocketSinglePinLeft_GetMeshFile(self)

# Register M113_SprocketSinglePinLeft in _vehicle:
_vehicle.M113_SprocketSinglePinLeft_swigregister(M113_SprocketSinglePinLeft)

class M113_SprocketSinglePinRight(M113_SprocketSinglePin):
    r"""Proxy of C++ chrono::vehicle::m113::M113_SprocketSinglePinRight class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(M113_SprocketSinglePinRight self) -> M113_SprocketSinglePinRight"""
        _vehicle.M113_SprocketSinglePinRight_swiginit(self, _vehicle.new_M113_SprocketSinglePinRight())
    __swig_destroy__ = _vehicle.delete_M113_SprocketSinglePinRight

    def GetMeshFile(self):
        r"""GetMeshFile(M113_SprocketSinglePinRight self) -> std::string"""
        return _vehicle.M113_SprocketSinglePinRight_GetMeshFile(self)

# Register M113_SprocketSinglePinRight in _vehicle:
_vehicle.M113_SprocketSinglePinRight_swigregister(M113_SprocketSinglePinRight)

class M113_SprocketDoublePin(ChSprocketDoublePin):
    r"""Proxy of C++ chrono::vehicle::m113::M113_SprocketDoublePin class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_M113_SprocketDoublePin

    def GetNumTeeth(self):
        r"""GetNumTeeth(M113_SprocketDoublePin self) -> int"""
        return _vehicle.M113_SprocketDoublePin_GetNumTeeth(self)

    def GetAssemblyRadius(self):
        r"""GetAssemblyRadius(M113_SprocketDoublePin self) -> double"""
        return _vehicle.M113_SprocketDoublePin_GetAssemblyRadius(self)

    def GetAddendumRadius(self):
        r"""GetAddendumRadius(M113_SprocketDoublePin self) -> double"""
        return _vehicle.M113_SprocketDoublePin_GetAddendumRadius(self)

    def GetGearMass(self):
        r"""GetGearMass(M113_SprocketDoublePin self) -> double"""
        return _vehicle.M113_SprocketDoublePin_GetGearMass(self)

    def GetGearInertia(self):
        r"""GetGearInertia(M113_SprocketDoublePin self) -> ChVectorD"""
        return _vehicle.M113_SprocketDoublePin_GetGearInertia(self)

    def GetAxleInertia(self):
        r"""GetAxleInertia(M113_SprocketDoublePin self) -> double"""
        return _vehicle.M113_SprocketDoublePin_GetAxleInertia(self)

    def GetSeparation(self):
        r"""GetSeparation(M113_SprocketDoublePin self) -> double"""
        return _vehicle.M113_SprocketDoublePin_GetSeparation(self)

    def GetOuterRadius(self):
        r"""GetOuterRadius(M113_SprocketDoublePin self) -> double"""
        return _vehicle.M113_SprocketDoublePin_GetOuterRadius(self)

    def GetArcRadius(self):
        r"""GetArcRadius(M113_SprocketDoublePin self) -> double"""
        return _vehicle.M113_SprocketDoublePin_GetArcRadius(self)

    def GetArcCenterHeight(self):
        r"""GetArcCenterHeight(M113_SprocketDoublePin self) -> double"""
        return _vehicle.M113_SprocketDoublePin_GetArcCenterHeight(self)

    def GetArcCenterOffset(self):
        r"""GetArcCenterOffset(M113_SprocketDoublePin self) -> double"""
        return _vehicle.M113_SprocketDoublePin_GetArcCenterOffset(self)

    def GetLateralBacklash(self):
        r"""GetLateralBacklash(M113_SprocketDoublePin self) -> double"""
        return _vehicle.M113_SprocketDoublePin_GetLateralBacklash(self)

# Register M113_SprocketDoublePin in _vehicle:
_vehicle.M113_SprocketDoublePin_swigregister(M113_SprocketDoublePin)

class M113_SprocketDoublePinLeft(M113_SprocketDoublePin):
    r"""Proxy of C++ chrono::vehicle::m113::M113_SprocketDoublePinLeft class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(M113_SprocketDoublePinLeft self) -> M113_SprocketDoublePinLeft"""
        _vehicle.M113_SprocketDoublePinLeft_swiginit(self, _vehicle.new_M113_SprocketDoublePinLeft())
    __swig_destroy__ = _vehicle.delete_M113_SprocketDoublePinLeft

    def GetMeshFile(self):
        r"""GetMeshFile(M113_SprocketDoublePinLeft self) -> std::string"""
        return _vehicle.M113_SprocketDoublePinLeft_GetMeshFile(self)

# Register M113_SprocketDoublePinLeft in _vehicle:
_vehicle.M113_SprocketDoublePinLeft_swigregister(M113_SprocketDoublePinLeft)

class M113_SprocketDoublePinRight(M113_SprocketDoublePin):
    r"""Proxy of C++ chrono::vehicle::m113::M113_SprocketDoublePinRight class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(M113_SprocketDoublePinRight self) -> M113_SprocketDoublePinRight"""
        _vehicle.M113_SprocketDoublePinRight_swiginit(self, _vehicle.new_M113_SprocketDoublePinRight())
    __swig_destroy__ = _vehicle.delete_M113_SprocketDoublePinRight

    def GetMeshFile(self):
        r"""GetMeshFile(M113_SprocketDoublePinRight self) -> std::string"""
        return _vehicle.M113_SprocketDoublePinRight_GetMeshFile(self)

# Register M113_SprocketDoublePinRight in _vehicle:
_vehicle.M113_SprocketDoublePinRight_swigregister(M113_SprocketDoublePinRight)

class M113_Idler(ChTranslationalIdler):
    r"""Proxy of C++ chrono::vehicle::m113::M113_Idler class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, side):
        r"""__init__(M113_Idler self, std::string const & name, chrono::vehicle::VehicleSide side) -> M113_Idler"""
        _vehicle.M113_Idler_swiginit(self, _vehicle.new_M113_Idler(name, side))
    __swig_destroy__ = _vehicle.delete_M113_Idler

    def GetCarrierMass(self):
        r"""GetCarrierMass(M113_Idler self) -> double"""
        return _vehicle.M113_Idler_GetCarrierMass(self)

    def GetCarrierInertia(self):
        r"""GetCarrierInertia(M113_Idler self) -> ChVectorD"""
        return _vehicle.M113_Idler_GetCarrierInertia(self)

    def GetCarrierVisRadius(self):
        r"""GetCarrierVisRadius(M113_Idler self) -> double"""
        return _vehicle.M113_Idler_GetCarrierVisRadius(self)

    def GetPrismaticPitchAngle(self):
        r"""GetPrismaticPitchAngle(M113_Idler self) -> double"""
        return _vehicle.M113_Idler_GetPrismaticPitchAngle(self)

    def GetTensionerForceCallback(self):
        r"""GetTensionerForceCallback(M113_Idler self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.M113_Idler_GetTensionerForceCallback(self)

    def GetTensionerFreeLength(self):
        r"""GetTensionerFreeLength(M113_Idler self) -> double"""
        return _vehicle.M113_Idler_GetTensionerFreeLength(self)

# Register M113_Idler in _vehicle:
_vehicle.M113_Idler_swigregister(M113_Idler)

class M113_RoadWheel(ChDoubleTrackWheel):
    r"""Proxy of C++ chrono::vehicle::m113::M113_RoadWheel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_M113_RoadWheel

    def GetMass(self):
        r"""GetMass(M113_RoadWheel self) -> double"""
        return _vehicle.M113_RoadWheel_GetMass(self)

    def GetInertia(self):
        r"""GetInertia(M113_RoadWheel self) -> ChVectorD"""
        return _vehicle.M113_RoadWheel_GetInertia(self)

    def GetRadius(self):
        r"""GetRadius(M113_RoadWheel self) -> double"""
        return _vehicle.M113_RoadWheel_GetRadius(self)

    def GetWidth(self):
        r"""GetWidth(M113_RoadWheel self) -> double"""
        return _vehicle.M113_RoadWheel_GetWidth(self)

    def GetGap(self):
        r"""GetGap(M113_RoadWheel self) -> double"""
        return _vehicle.M113_RoadWheel_GetGap(self)

# Register M113_RoadWheel in _vehicle:
_vehicle.M113_RoadWheel_swigregister(M113_RoadWheel)

class M113_RoadWheelLeft(M113_RoadWheel):
    r"""Proxy of C++ chrono::vehicle::m113::M113_RoadWheelLeft class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, index):
        r"""__init__(M113_RoadWheelLeft self, int index) -> M113_RoadWheelLeft"""
        _vehicle.M113_RoadWheelLeft_swiginit(self, _vehicle.new_M113_RoadWheelLeft(index))
    __swig_destroy__ = _vehicle.delete_M113_RoadWheelLeft

    def GetVehicleSide(self):
        r"""GetVehicleSide(M113_RoadWheelLeft self) -> chrono::vehicle::VehicleSide"""
        return _vehicle.M113_RoadWheelLeft_GetVehicleSide(self)

    def GetMeshFile(self):
        r"""GetMeshFile(M113_RoadWheelLeft self) -> std::string"""
        return _vehicle.M113_RoadWheelLeft_GetMeshFile(self)

# Register M113_RoadWheelLeft in _vehicle:
_vehicle.M113_RoadWheelLeft_swigregister(M113_RoadWheelLeft)

class M113_RoadWheelRight(M113_RoadWheel):
    r"""Proxy of C++ chrono::vehicle::m113::M113_RoadWheelRight class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, index):
        r"""__init__(M113_RoadWheelRight self, int index) -> M113_RoadWheelRight"""
        _vehicle.M113_RoadWheelRight_swiginit(self, _vehicle.new_M113_RoadWheelRight(index))
    __swig_destroy__ = _vehicle.delete_M113_RoadWheelRight

    def GetVehicleSide(self):
        r"""GetVehicleSide(M113_RoadWheelRight self) -> chrono::vehicle::VehicleSide"""
        return _vehicle.M113_RoadWheelRight_GetVehicleSide(self)

    def GetMeshFile(self):
        r"""GetMeshFile(M113_RoadWheelRight self) -> std::string"""
        return _vehicle.M113_RoadWheelRight_GetMeshFile(self)

# Register M113_RoadWheelRight in _vehicle:
_vehicle.M113_RoadWheelRight_swigregister(M113_RoadWheelRight)

class M113_Suspension(ChTranslationalDamperSuspension):
    r"""Proxy of C++ chrono::vehicle::m113::M113_Suspension class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, side, index, use_bushings, has_shock):
        r"""__init__(M113_Suspension self, std::string const & name, chrono::vehicle::VehicleSide side, int index, bool use_bushings, bool has_shock) -> M113_Suspension"""
        _vehicle.M113_Suspension_swiginit(self, _vehicle.new_M113_Suspension(name, side, index, use_bushings, has_shock))
    __swig_destroy__ = _vehicle.delete_M113_Suspension

    def GetArmMass(self):
        r"""GetArmMass(M113_Suspension self) -> double"""
        return _vehicle.M113_Suspension_GetArmMass(self)

    def GetArmInertia(self):
        r"""GetArmInertia(M113_Suspension self) -> ChVectorD"""
        return _vehicle.M113_Suspension_GetArmInertia(self)

    def GetArmVisRadius(self):
        r"""GetArmVisRadius(M113_Suspension self) -> double"""
        return _vehicle.M113_Suspension_GetArmVisRadius(self)

    def getArmBushingData(self):
        r"""getArmBushingData(M113_Suspension self) -> std::shared_ptr< ChVehicleBushingData >"""
        return _vehicle.M113_Suspension_getArmBushingData(self)

    def GetSpringRestAngle(self):
        r"""GetSpringRestAngle(M113_Suspension self) -> double"""
        return _vehicle.M113_Suspension_GetSpringRestAngle(self)

    def GetSpringTorqueFunctor(self):
        r"""GetSpringTorqueFunctor(M113_Suspension self) -> std::shared_ptr< chrono::ChLinkRSDA::TorqueFunctor >"""
        return _vehicle.M113_Suspension_GetSpringTorqueFunctor(self)

    def GetShockForceFunctor(self):
        r"""GetShockForceFunctor(M113_Suspension self) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
        return _vehicle.M113_Suspension_GetShockForceFunctor(self)

# Register M113_Suspension in _vehicle:
_vehicle.M113_Suspension_swigregister(M113_Suspension)

class M113_TrackShoeBandANCF(ChTrackShoeBandANCF):
    r"""Proxy of C++ chrono::vehicle::m113::M113_TrackShoeBandANCF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, element_type, constrain_curvature, num_elements_length=3, num_elements_width=4):
        r"""__init__(M113_TrackShoeBandANCF self, std::string const & name, chrono::vehicle::ChTrackShoeBandANCF::ElementType element_type, bool constrain_curvature, int num_elements_length=3, int num_elements_width=4) -> M113_TrackShoeBandANCF"""
        _vehicle.M113_TrackShoeBandANCF_swiginit(self, _vehicle.new_M113_TrackShoeBandANCF(name, element_type, constrain_curvature, num_elements_length, num_elements_width))
    __swig_destroy__ = _vehicle.delete_M113_TrackShoeBandANCF

    def GetType(self):
        r"""GetType(M113_TrackShoeBandANCF self) -> chrono::vehicle::GuidePinType"""
        return _vehicle.M113_TrackShoeBandANCF_GetType(self)

    def GetHeight(self):
        r"""GetHeight(M113_TrackShoeBandANCF self) -> double"""
        return _vehicle.M113_TrackShoeBandANCF_GetHeight(self)

    def GetTreadMass(self):
        r"""GetTreadMass(M113_TrackShoeBandANCF self) -> double"""
        return _vehicle.M113_TrackShoeBandANCF_GetTreadMass(self)

    def GetWebMass(self):
        r"""GetWebMass(M113_TrackShoeBandANCF self) -> double"""
        return _vehicle.M113_TrackShoeBandANCF_GetWebMass(self)

    def GetTreadInertia(self):
        r"""GetTreadInertia(M113_TrackShoeBandANCF self) -> ChVectorD"""
        return _vehicle.M113_TrackShoeBandANCF_GetTreadInertia(self)

    def GetWebInertia(self):
        r"""GetWebInertia(M113_TrackShoeBandANCF self) -> ChVectorD"""
        return _vehicle.M113_TrackShoeBandANCF_GetWebInertia(self)

    def GetGuideBoxDimensions(self):
        r"""GetGuideBoxDimensions(M113_TrackShoeBandANCF self) -> ChVectorD"""
        return _vehicle.M113_TrackShoeBandANCF_GetGuideBoxDimensions(self)

    def GetGuideBoxOffsetX(self):
        r"""GetGuideBoxOffsetX(M113_TrackShoeBandANCF self) -> double"""
        return _vehicle.M113_TrackShoeBandANCF_GetGuideBoxOffsetX(self)

    def GetBeltWidth(self):
        r"""GetBeltWidth(M113_TrackShoeBandANCF self) -> double"""
        return _vehicle.M113_TrackShoeBandANCF_GetBeltWidth(self)

    def GetToothTipLength(self):
        r"""GetToothTipLength(M113_TrackShoeBandANCF self) -> double"""
        return _vehicle.M113_TrackShoeBandANCF_GetToothTipLength(self)

    def GetToothBaseLength(self):
        r"""GetToothBaseLength(M113_TrackShoeBandANCF self) -> double"""
        return _vehicle.M113_TrackShoeBandANCF_GetToothBaseLength(self)

    def GetToothWidth(self):
        r"""GetToothWidth(M113_TrackShoeBandANCF self) -> double"""
        return _vehicle.M113_TrackShoeBandANCF_GetToothWidth(self)

    def GetToothHeight(self):
        r"""GetToothHeight(M113_TrackShoeBandANCF self) -> double"""
        return _vehicle.M113_TrackShoeBandANCF_GetToothHeight(self)

    def GetToothArcRadius(self):
        r"""GetToothArcRadius(M113_TrackShoeBandANCF self) -> double"""
        return _vehicle.M113_TrackShoeBandANCF_GetToothArcRadius(self)

    def GetWebLength(self):
        r"""GetWebLength(M113_TrackShoeBandANCF self) -> double"""
        return _vehicle.M113_TrackShoeBandANCF_GetWebLength(self)

    def GetWebThickness(self):
        r"""GetWebThickness(M113_TrackShoeBandANCF self) -> double"""
        return _vehicle.M113_TrackShoeBandANCF_GetWebThickness(self)

    def GetNumElementsLength(self):
        r"""GetNumElementsLength(M113_TrackShoeBandANCF self) -> int"""
        return _vehicle.M113_TrackShoeBandANCF_GetNumElementsLength(self)

    def GetNumElementsWidth(self):
        r"""GetNumElementsWidth(M113_TrackShoeBandANCF self) -> int"""
        return _vehicle.M113_TrackShoeBandANCF_GetNumElementsWidth(self)

    def GetSteelLayerThickness(self):
        r"""GetSteelLayerThickness(M113_TrackShoeBandANCF self) -> double"""
        return _vehicle.M113_TrackShoeBandANCF_GetSteelLayerThickness(self)

    def GetTreadLength(self):
        r"""GetTreadLength(M113_TrackShoeBandANCF self) -> double"""
        return _vehicle.M113_TrackShoeBandANCF_GetTreadLength(self)

    def GetTreadThickness(self):
        r"""GetTreadThickness(M113_TrackShoeBandANCF self) -> double"""
        return _vehicle.M113_TrackShoeBandANCF_GetTreadThickness(self)

    def GetTreadVisualizationMeshName(self):
        r"""GetTreadVisualizationMeshName(M113_TrackShoeBandANCF self) -> std::string const &"""
        return _vehicle.M113_TrackShoeBandANCF_GetTreadVisualizationMeshName(self)

# Register M113_TrackShoeBandANCF in _vehicle:
_vehicle.M113_TrackShoeBandANCF_swigregister(M113_TrackShoeBandANCF)

class M113_TrackShoeBandBushing(ChTrackShoeBandBushing):
    r"""Proxy of C++ chrono::vehicle::m113::M113_TrackShoeBandBushing class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(M113_TrackShoeBandBushing self, std::string const & name) -> M113_TrackShoeBandBushing"""
        _vehicle.M113_TrackShoeBandBushing_swiginit(self, _vehicle.new_M113_TrackShoeBandBushing(name))
    __swig_destroy__ = _vehicle.delete_M113_TrackShoeBandBushing

    def GetType(self):
        r"""GetType(M113_TrackShoeBandBushing self) -> chrono::vehicle::GuidePinType"""
        return _vehicle.M113_TrackShoeBandBushing_GetType(self)

    def GetHeight(self):
        r"""GetHeight(M113_TrackShoeBandBushing self) -> double"""
        return _vehicle.M113_TrackShoeBandBushing_GetHeight(self)

    def GetTreadMass(self):
        r"""GetTreadMass(M113_TrackShoeBandBushing self) -> double"""
        return _vehicle.M113_TrackShoeBandBushing_GetTreadMass(self)

    def GetWebMass(self):
        r"""GetWebMass(M113_TrackShoeBandBushing self) -> double"""
        return _vehicle.M113_TrackShoeBandBushing_GetWebMass(self)

    def GetTreadInertia(self):
        r"""GetTreadInertia(M113_TrackShoeBandBushing self) -> ChVectorD"""
        return _vehicle.M113_TrackShoeBandBushing_GetTreadInertia(self)

    def GetWebInertia(self):
        r"""GetWebInertia(M113_TrackShoeBandBushing self) -> ChVectorD"""
        return _vehicle.M113_TrackShoeBandBushing_GetWebInertia(self)

    def GetGuideBoxDimensions(self):
        r"""GetGuideBoxDimensions(M113_TrackShoeBandBushing self) -> ChVectorD"""
        return _vehicle.M113_TrackShoeBandBushing_GetGuideBoxDimensions(self)

    def GetGuideBoxOffsetX(self):
        r"""GetGuideBoxOffsetX(M113_TrackShoeBandBushing self) -> double"""
        return _vehicle.M113_TrackShoeBandBushing_GetGuideBoxOffsetX(self)

    def GetBeltWidth(self):
        r"""GetBeltWidth(M113_TrackShoeBandBushing self) -> double"""
        return _vehicle.M113_TrackShoeBandBushing_GetBeltWidth(self)

    def GetToothTipLength(self):
        r"""GetToothTipLength(M113_TrackShoeBandBushing self) -> double"""
        return _vehicle.M113_TrackShoeBandBushing_GetToothTipLength(self)

    def GetToothBaseLength(self):
        r"""GetToothBaseLength(M113_TrackShoeBandBushing self) -> double"""
        return _vehicle.M113_TrackShoeBandBushing_GetToothBaseLength(self)

    def GetToothWidth(self):
        r"""GetToothWidth(M113_TrackShoeBandBushing self) -> double"""
        return _vehicle.M113_TrackShoeBandBushing_GetToothWidth(self)

    def GetToothHeight(self):
        r"""GetToothHeight(M113_TrackShoeBandBushing self) -> double"""
        return _vehicle.M113_TrackShoeBandBushing_GetToothHeight(self)

    def GetToothArcRadius(self):
        r"""GetToothArcRadius(M113_TrackShoeBandBushing self) -> double"""
        return _vehicle.M113_TrackShoeBandBushing_GetToothArcRadius(self)

    def GetNumWebSegments(self):
        r"""GetNumWebSegments(M113_TrackShoeBandBushing self) -> int"""
        return _vehicle.M113_TrackShoeBandBushing_GetNumWebSegments(self)

    def GetWebLength(self):
        r"""GetWebLength(M113_TrackShoeBandBushing self) -> double"""
        return _vehicle.M113_TrackShoeBandBushing_GetWebLength(self)

    def GetWebThickness(self):
        r"""GetWebThickness(M113_TrackShoeBandBushing self) -> double"""
        return _vehicle.M113_TrackShoeBandBushing_GetWebThickness(self)

    def GetTreadLength(self):
        r"""GetTreadLength(M113_TrackShoeBandBushing self) -> double"""
        return _vehicle.M113_TrackShoeBandBushing_GetTreadLength(self)

    def GetTreadThickness(self):
        r"""GetTreadThickness(M113_TrackShoeBandBushing self) -> double"""
        return _vehicle.M113_TrackShoeBandBushing_GetTreadThickness(self)

    def GetBushingData(self):
        r"""GetBushingData(M113_TrackShoeBandBushing self) -> std::shared_ptr< ChVehicleBushingData >"""
        return _vehicle.M113_TrackShoeBandBushing_GetBushingData(self)

    def GetTreadVisualizationMeshName(self):
        r"""GetTreadVisualizationMeshName(M113_TrackShoeBandBushing self) -> std::string const &"""
        return _vehicle.M113_TrackShoeBandBushing_GetTreadVisualizationMeshName(self)

# Register M113_TrackShoeBandBushing in _vehicle:
_vehicle.M113_TrackShoeBandBushing_swigregister(M113_TrackShoeBandBushing)

class M113_TrackShoeSinglePin(ChTrackShoeSinglePin):
    r"""Proxy of C++ chrono::vehicle::m113::M113_TrackShoeSinglePin class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(M113_TrackShoeSinglePin self, std::string const & name) -> M113_TrackShoeSinglePin"""
        _vehicle.M113_TrackShoeSinglePin_swiginit(self, _vehicle.new_M113_TrackShoeSinglePin(name))
    __swig_destroy__ = _vehicle.delete_M113_TrackShoeSinglePin

    def GetType(self):
        r"""GetType(M113_TrackShoeSinglePin self) -> chrono::vehicle::GuidePinType"""
        return _vehicle.M113_TrackShoeSinglePin_GetType(self)

    def GetHeight(self):
        r"""GetHeight(M113_TrackShoeSinglePin self) -> double"""
        return _vehicle.M113_TrackShoeSinglePin_GetHeight(self)

    def GetPitch(self):
        r"""GetPitch(M113_TrackShoeSinglePin self) -> double"""
        return _vehicle.M113_TrackShoeSinglePin_GetPitch(self)

    def GetShoeMass(self):
        r"""GetShoeMass(M113_TrackShoeSinglePin self) -> double"""
        return _vehicle.M113_TrackShoeSinglePin_GetShoeMass(self)

    def GetShoeInertia(self):
        r"""GetShoeInertia(M113_TrackShoeSinglePin self) -> ChVectorD"""
        return _vehicle.M113_TrackShoeSinglePin_GetShoeInertia(self)

    def GetFrontCylinderLoc(self):
        r"""GetFrontCylinderLoc(M113_TrackShoeSinglePin self) -> double"""
        return _vehicle.M113_TrackShoeSinglePin_GetFrontCylinderLoc(self)

    def GetRearCylinderLoc(self):
        r"""GetRearCylinderLoc(M113_TrackShoeSinglePin self) -> double"""
        return _vehicle.M113_TrackShoeSinglePin_GetRearCylinderLoc(self)

    def GetCylinderRadius(self):
        r"""GetCylinderRadius(M113_TrackShoeSinglePin self) -> double"""
        return _vehicle.M113_TrackShoeSinglePin_GetCylinderRadius(self)

    def GetLateralContactPoint(self):
        r"""GetLateralContactPoint(M113_TrackShoeSinglePin self) -> ChVectorD"""
        return _vehicle.M113_TrackShoeSinglePin_GetLateralContactPoint(self)

    def GetGroundContactGeometry(self):
        r"""GetGroundContactGeometry(M113_TrackShoeSinglePin self) -> ChVehicleGeometry"""
        return _vehicle.M113_TrackShoeSinglePin_GetGroundContactGeometry(self)

# Register M113_TrackShoeSinglePin in _vehicle:
_vehicle.M113_TrackShoeSinglePin_swigregister(M113_TrackShoeSinglePin)

class M113_TrackShoeDoublePin(ChTrackShoeDoublePin):
    r"""Proxy of C++ chrono::vehicle::m113::M113_TrackShoeDoublePin class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, topology):
        r"""__init__(M113_TrackShoeDoublePin self, std::string const & name, chrono::vehicle::DoublePinTrackShoeType topology) -> M113_TrackShoeDoublePin"""
        _vehicle.M113_TrackShoeDoublePin_swiginit(self, _vehicle.new_M113_TrackShoeDoublePin(name, topology))
    __swig_destroy__ = _vehicle.delete_M113_TrackShoeDoublePin

    def GetType(self):
        r"""GetType(M113_TrackShoeDoublePin self) -> chrono::vehicle::GuidePinType"""
        return _vehicle.M113_TrackShoeDoublePin_GetType(self)

    def GetHeight(self):
        r"""GetHeight(M113_TrackShoeDoublePin self) -> double"""
        return _vehicle.M113_TrackShoeDoublePin_GetHeight(self)

    def GetShoeMass(self):
        r"""GetShoeMass(M113_TrackShoeDoublePin self) -> double"""
        return _vehicle.M113_TrackShoeDoublePin_GetShoeMass(self)

    def GetShoeInertia(self):
        r"""GetShoeInertia(M113_TrackShoeDoublePin self) -> ChVectorD"""
        return _vehicle.M113_TrackShoeDoublePin_GetShoeInertia(self)

    def GetShoeLength(self):
        r"""GetShoeLength(M113_TrackShoeDoublePin self) -> double"""
        return _vehicle.M113_TrackShoeDoublePin_GetShoeLength(self)

    def GetShoeWidth(self):
        r"""GetShoeWidth(M113_TrackShoeDoublePin self) -> double"""
        return _vehicle.M113_TrackShoeDoublePin_GetShoeWidth(self)

    def GetLateralContactPoint(self):
        r"""GetLateralContactPoint(M113_TrackShoeDoublePin self) -> ChVectorD"""
        return _vehicle.M113_TrackShoeDoublePin_GetLateralContactPoint(self)

    def GetConnectorMass(self):
        r"""GetConnectorMass(M113_TrackShoeDoublePin self) -> double"""
        return _vehicle.M113_TrackShoeDoublePin_GetConnectorMass(self)

    def GetConnectorInertia(self):
        r"""GetConnectorInertia(M113_TrackShoeDoublePin self) -> ChVectorD"""
        return _vehicle.M113_TrackShoeDoublePin_GetConnectorInertia(self)

    def GetConnectorLength(self):
        r"""GetConnectorLength(M113_TrackShoeDoublePin self) -> double"""
        return _vehicle.M113_TrackShoeDoublePin_GetConnectorLength(self)

    def GetConnectorRadius(self):
        r"""GetConnectorRadius(M113_TrackShoeDoublePin self) -> double"""
        return _vehicle.M113_TrackShoeDoublePin_GetConnectorRadius(self)

    def GetConnectorWidth(self):
        r"""GetConnectorWidth(M113_TrackShoeDoublePin self) -> double"""
        return _vehicle.M113_TrackShoeDoublePin_GetConnectorWidth(self)

    def GetGroundContactGeometry(self):
        r"""GetGroundContactGeometry(M113_TrackShoeDoublePin self) -> ChVehicleGeometry"""
        return _vehicle.M113_TrackShoeDoublePin_GetGroundContactGeometry(self)

# Register M113_TrackShoeDoublePin in _vehicle:
_vehicle.M113_TrackShoeDoublePin_swigregister(M113_TrackShoeDoublePin)

class M113_TrackAssemblyBandANCF(ChTrackAssemblyBandANCF):
    r"""Proxy of C++ chrono::vehicle::m113::M113_TrackAssemblyBandANCF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, side, brake_type, element_type, constrain_curvature, num_elements_length, num_elements_width, use_suspension_bushings):
        r"""__init__(M113_TrackAssemblyBandANCF self, chrono::vehicle::VehicleSide side, chrono::vehicle::BrakeType brake_type, chrono::vehicle::ChTrackShoeBandANCF::ElementType element_type, bool constrain_curvature, int num_elements_length, int num_elements_width, bool use_suspension_bushings) -> M113_TrackAssemblyBandANCF"""
        _vehicle.M113_TrackAssemblyBandANCF_swiginit(self, _vehicle.new_M113_TrackAssemblyBandANCF(side, brake_type, element_type, constrain_curvature, num_elements_length, num_elements_width, use_suspension_bushings))

    def GetSprocketLocation(self):
        r"""GetSprocketLocation(M113_TrackAssemblyBandANCF self) -> ChVectorD"""
        return _vehicle.M113_TrackAssemblyBandANCF_GetSprocketLocation(self)

    def GetIdlerLocation(self):
        r"""GetIdlerLocation(M113_TrackAssemblyBandANCF self) -> ChVectorD"""
        return _vehicle.M113_TrackAssemblyBandANCF_GetIdlerLocation(self)

    def GetRoadWhelAssemblyLocation(self, which):
        r"""GetRoadWhelAssemblyLocation(M113_TrackAssemblyBandANCF self, int which) -> ChVectorD"""
        return _vehicle.M113_TrackAssemblyBandANCF_GetRoadWhelAssemblyLocation(self, which)
    __swig_destroy__ = _vehicle.delete_M113_TrackAssemblyBandANCF

# Register M113_TrackAssemblyBandANCF in _vehicle:
_vehicle.M113_TrackAssemblyBandANCF_swigregister(M113_TrackAssemblyBandANCF)

class M113_TrackAssemblyBandBushing(ChTrackAssemblyBandBushing):
    r"""Proxy of C++ chrono::vehicle::m113::M113_TrackAssemblyBandBushing class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, side, brake_type, use_suspension_bushings):
        r"""__init__(M113_TrackAssemblyBandBushing self, chrono::vehicle::VehicleSide side, chrono::vehicle::BrakeType brake_type, bool use_suspension_bushings) -> M113_TrackAssemblyBandBushing"""
        _vehicle.M113_TrackAssemblyBandBushing_swiginit(self, _vehicle.new_M113_TrackAssemblyBandBushing(side, brake_type, use_suspension_bushings))

    def GetSprocketLocation(self):
        r"""GetSprocketLocation(M113_TrackAssemblyBandBushing self) -> ChVectorD"""
        return _vehicle.M113_TrackAssemblyBandBushing_GetSprocketLocation(self)

    def GetIdlerLocation(self):
        r"""GetIdlerLocation(M113_TrackAssemblyBandBushing self) -> ChVectorD"""
        return _vehicle.M113_TrackAssemblyBandBushing_GetIdlerLocation(self)

    def GetRoadWhelAssemblyLocation(self, which):
        r"""GetRoadWhelAssemblyLocation(M113_TrackAssemblyBandBushing self, int which) -> ChVectorD"""
        return _vehicle.M113_TrackAssemblyBandBushing_GetRoadWhelAssemblyLocation(self, which)
    __swig_destroy__ = _vehicle.delete_M113_TrackAssemblyBandBushing

# Register M113_TrackAssemblyBandBushing in _vehicle:
_vehicle.M113_TrackAssemblyBandBushing_swigregister(M113_TrackAssemblyBandBushing)

class M113_TrackAssemblySinglePin(ChTrackAssemblySinglePin):
    r"""Proxy of C++ chrono::vehicle::m113::M113_TrackAssemblySinglePin class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, side, brake_type, use_track_bushings, use_suspension_bushings, use_track_RSDA):
        r"""__init__(M113_TrackAssemblySinglePin self, chrono::vehicle::VehicleSide side, chrono::vehicle::BrakeType brake_type, bool use_track_bushings, bool use_suspension_bushings, bool use_track_RSDA) -> M113_TrackAssemblySinglePin"""
        _vehicle.M113_TrackAssemblySinglePin_swiginit(self, _vehicle.new_M113_TrackAssemblySinglePin(side, brake_type, use_track_bushings, use_suspension_bushings, use_track_RSDA))

    def GetSprocketLocation(self):
        r"""GetSprocketLocation(M113_TrackAssemblySinglePin self) -> ChVectorD"""
        return _vehicle.M113_TrackAssemblySinglePin_GetSprocketLocation(self)

    def GetIdlerLocation(self):
        r"""GetIdlerLocation(M113_TrackAssemblySinglePin self) -> ChVectorD"""
        return _vehicle.M113_TrackAssemblySinglePin_GetIdlerLocation(self)

    def GetRoadWhelAssemblyLocation(self, which):
        r"""GetRoadWhelAssemblyLocation(M113_TrackAssemblySinglePin self, int which) -> ChVectorD"""
        return _vehicle.M113_TrackAssemblySinglePin_GetRoadWhelAssemblyLocation(self, which)
    __swig_destroy__ = _vehicle.delete_M113_TrackAssemblySinglePin

# Register M113_TrackAssemblySinglePin in _vehicle:
_vehicle.M113_TrackAssemblySinglePin_swigregister(M113_TrackAssemblySinglePin)

class M113_TrackAssemblyDoublePin(ChTrackAssemblyDoublePin):
    r"""Proxy of C++ chrono::vehicle::m113::M113_TrackAssemblyDoublePin class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, side, topology, brake_type, use_track_bushings, use_suspension_bushings, use_track_RSDA):
        r"""__init__(M113_TrackAssemblyDoublePin self, chrono::vehicle::VehicleSide side, chrono::vehicle::DoublePinTrackShoeType topology, chrono::vehicle::BrakeType brake_type, bool use_track_bushings, bool use_suspension_bushings, bool use_track_RSDA) -> M113_TrackAssemblyDoublePin"""
        _vehicle.M113_TrackAssemblyDoublePin_swiginit(self, _vehicle.new_M113_TrackAssemblyDoublePin(side, topology, brake_type, use_track_bushings, use_suspension_bushings, use_track_RSDA))

    def GetSprocketLocation(self):
        r"""GetSprocketLocation(M113_TrackAssemblyDoublePin self) -> ChVectorD"""
        return _vehicle.M113_TrackAssemblyDoublePin_GetSprocketLocation(self)

    def GetIdlerLocation(self):
        r"""GetIdlerLocation(M113_TrackAssemblyDoublePin self) -> ChVectorD"""
        return _vehicle.M113_TrackAssemblyDoublePin_GetIdlerLocation(self)

    def GetRoadWhelAssemblyLocation(self, which):
        r"""GetRoadWhelAssemblyLocation(M113_TrackAssemblyDoublePin self, int which) -> ChVectorD"""
        return _vehicle.M113_TrackAssemblyDoublePin_GetRoadWhelAssemblyLocation(self, which)
    __swig_destroy__ = _vehicle.delete_M113_TrackAssemblyDoublePin

# Register M113_TrackAssemblyDoublePin in _vehicle:
_vehicle.M113_TrackAssemblyDoublePin_swigregister(M113_TrackAssemblyDoublePin)

class ChTrackBrake(ChPart):
    r"""Proxy of C++ chrono::vehicle::ChTrackBrake class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChTrackBrake

    def Initialize(self, chassis, sprocket):
        r"""Initialize(ChTrackBrake self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, std::shared_ptr< chrono::vehicle::ChSprocket > sprocket)"""
        return _vehicle.ChTrackBrake_Initialize(self, chassis, sprocket)

    def Synchronize(self, braking):
        r"""Synchronize(ChTrackBrake self, double braking)"""
        return _vehicle.ChTrackBrake_Synchronize(self, braking)

    def GetBrakeTorque(self):
        r"""GetBrakeTorque(ChTrackBrake self) -> double"""
        return _vehicle.ChTrackBrake_GetBrakeTorque(self)

# Register ChTrackBrake in _vehicle:
_vehicle.ChTrackBrake_swigregister(ChTrackBrake)

class ChTrackBrakeSimple(ChTrackBrake):
    r"""Proxy of C++ chrono::vehicle::ChTrackBrakeSimple class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChTrackBrakeSimple

    def GetTemplateName(self):
        r"""GetTemplateName(ChTrackBrakeSimple self) -> std::string"""
        return _vehicle.ChTrackBrakeSimple_GetTemplateName(self)

    def Initialize(self, chassis, sprocket):
        r"""Initialize(ChTrackBrakeSimple self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, std::shared_ptr< chrono::vehicle::ChSprocket > sprocket)"""
        return _vehicle.ChTrackBrakeSimple_Initialize(self, chassis, sprocket)

    def Synchronize(self, braking):
        r"""Synchronize(ChTrackBrakeSimple self, double braking)"""
        return _vehicle.ChTrackBrakeSimple_Synchronize(self, braking)

    def GetBrakeTorque(self):
        r"""GetBrakeTorque(ChTrackBrakeSimple self) -> double"""
        return _vehicle.ChTrackBrakeSimple_GetBrakeTorque(self)

    def GetBrakeSpeed(self):
        r"""GetBrakeSpeed(ChTrackBrakeSimple self) -> double"""
        return _vehicle.ChTrackBrakeSimple_GetBrakeSpeed(self)

# Register ChTrackBrakeSimple in _vehicle:
_vehicle.ChTrackBrakeSimple_swigregister(ChTrackBrakeSimple)

class ChTrackBrakeShafts(ChTrackBrake):
    r"""Proxy of C++ chrono::vehicle::ChTrackBrakeShafts class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChTrackBrakeShafts

    def GetTemplateName(self):
        r"""GetTemplateName(ChTrackBrakeShafts self) -> std::string"""
        return _vehicle.ChTrackBrakeShafts_GetTemplateName(self)

    def Initialize(self, chassis, sprocket):
        r"""Initialize(ChTrackBrakeShafts self, std::shared_ptr< chrono::vehicle::ChChassis > chassis, std::shared_ptr< chrono::vehicle::ChSprocket > sprocket)"""
        return _vehicle.ChTrackBrakeShafts_Initialize(self, chassis, sprocket)

    def Synchronize(self, braking):
        r"""Synchronize(ChTrackBrakeShafts self, double braking)"""
        return _vehicle.ChTrackBrakeShafts_Synchronize(self, braking)

    def GetBrakeTorque(self):
        r"""GetBrakeTorque(ChTrackBrakeShafts self) -> double"""
        return _vehicle.ChTrackBrakeShafts_GetBrakeTorque(self)

# Register ChTrackBrakeShafts in _vehicle:
_vehicle.ChTrackBrakeShafts_swigregister(ChTrackBrakeShafts)

class TrackBrakeSimple(ChTrackBrakeSimple):
    r"""Proxy of C++ chrono::vehicle::TrackBrakeSimple class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TrackBrakeSimple self, std::string const & filename) -> TrackBrakeSimple
        __init__(TrackBrakeSimple self, rapidjson::Document const & d) -> TrackBrakeSimple
        """
        _vehicle.TrackBrakeSimple_swiginit(self, _vehicle.new_TrackBrakeSimple(*args))
    __swig_destroy__ = _vehicle.delete_TrackBrakeSimple

    def GetMaxBrakingTorque(self):
        r"""GetMaxBrakingTorque(TrackBrakeSimple self) -> double"""
        return _vehicle.TrackBrakeSimple_GetMaxBrakingTorque(self)

# Register TrackBrakeSimple in _vehicle:
_vehicle.TrackBrakeSimple_swigregister(TrackBrakeSimple)

class TrackBrakeShafts(ChTrackBrakeShafts):
    r"""Proxy of C++ chrono::vehicle::TrackBrakeShafts class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TrackBrakeShafts self, std::string const & filename) -> TrackBrakeShafts
        __init__(TrackBrakeShafts self, rapidjson::Document const & d) -> TrackBrakeShafts
        """
        _vehicle.TrackBrakeShafts_swiginit(self, _vehicle.new_TrackBrakeShafts(*args))
    __swig_destroy__ = _vehicle.delete_TrackBrakeShafts

    def GetShaftInertia(self):
        r"""GetShaftInertia(TrackBrakeShafts self) -> double"""
        return _vehicle.TrackBrakeShafts_GetShaftInertia(self)

    def GetMaxBrakingTorque(self):
        r"""GetMaxBrakingTorque(TrackBrakeShafts self) -> double"""
        return _vehicle.TrackBrakeShafts_GetMaxBrakingTorque(self)

# Register TrackBrakeShafts in _vehicle:
_vehicle.TrackBrakeShafts_swigregister(TrackBrakeShafts)

class ChTrackContactManager(pychrono.core.ReportContactCallback):
    r"""Proxy of C++ chrono::vehicle::ChTrackContactManager class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChTrackContactManager self) -> ChTrackContactManager"""
        _vehicle.ChTrackContactManager_swiginit(self, _vehicle.new_ChTrackContactManager())

    def MonitorContacts(self, flags):
        r"""MonitorContacts(ChTrackContactManager self, int flags)"""
        return _vehicle.ChTrackContactManager_MonitorContacts(self, flags)

    def SetContactCollection(self, val):
        r"""SetContactCollection(ChTrackContactManager self, bool val)"""
        return _vehicle.ChTrackContactManager_SetContactCollection(self, val)

    def WriteContacts(self, filename):
        r"""WriteContacts(ChTrackContactManager self, std::string const & filename)"""
        return _vehicle.ChTrackContactManager_WriteContacts(self, filename)

    def SetTrackShoeIndexLeft(self, idx):
        r"""SetTrackShoeIndexLeft(ChTrackContactManager self, size_t idx)"""
        return _vehicle.ChTrackContactManager_SetTrackShoeIndexLeft(self, idx)

    def SetTrackShoeIndexRight(self, idx):
        r"""SetTrackShoeIndexRight(ChTrackContactManager self, size_t idx)"""
        return _vehicle.ChTrackContactManager_SetTrackShoeIndexRight(self, idx)

    def SetRenderNormals(self, val):
        r"""SetRenderNormals(ChTrackContactManager self, bool val)"""
        return _vehicle.ChTrackContactManager_SetRenderNormals(self, val)

    def SetRenderForces(self, val, scale):
        r"""SetRenderForces(ChTrackContactManager self, bool val, double scale)"""
        return _vehicle.ChTrackContactManager_SetRenderForces(self, val, scale)

    def Process(self, *args):
        r"""
        Process(ChTrackContactManager self, ChTrackedVehicle vehicle)
        Process(ChTrackContactManager self, chrono::vehicle::ChTrackTestRig * rig)
        """
        return _vehicle.ChTrackContactManager_Process(self, *args)

    def InContact(self, part):
        r"""InContact(ChTrackContactManager self, chrono::vehicle::TrackedCollisionFlag::Enum part) -> bool"""
        return _vehicle.ChTrackContactManager_InContact(self, part)

    def GetSprocketResistiveTorque(self, side):
        r"""GetSprocketResistiveTorque(ChTrackContactManager self, chrono::vehicle::VehicleSide side) -> ChVectorD"""
        return _vehicle.ChTrackContactManager_GetSprocketResistiveTorque(self, side)
    __swig_destroy__ = _vehicle.delete_ChTrackContactManager

# Register ChTrackContactManager in _vehicle:
_vehicle.ChTrackContactManager_swigregister(ChTrackContactManager)

class ChTrackCollisionManager(object):
    r"""Proxy of C++ chrono::vehicle::ChTrackCollisionManager class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChTrackCollisionManager

# Register ChTrackCollisionManager in _vehicle:
_vehicle.ChTrackCollisionManager_swigregister(ChTrackCollisionManager)

class ChTrackCustomContact(pychrono.core.ChLoadContainer):
    r"""Proxy of C++ chrono::vehicle::ChTrackCustomContact class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChTrackCustomContact

    def OverridesIdlerContact(self):
        r"""OverridesIdlerContact(ChTrackCustomContact self) -> bool"""
        return _vehicle.ChTrackCustomContact_OverridesIdlerContact(self)

    def OverridesWheelContact(self):
        r"""OverridesWheelContact(ChTrackCustomContact self) -> bool"""
        return _vehicle.ChTrackCustomContact_OverridesWheelContact(self)

    def OverridesGroundContact(self):
        r"""OverridesGroundContact(ChTrackCustomContact self) -> bool"""
        return _vehicle.ChTrackCustomContact_OverridesGroundContact(self)

    def ComputeIdlerContactForce(self, cinfo, idlerBody, shoeBody, forceShoe):
        r"""ComputeIdlerContactForce(ChTrackCustomContact self, ChCollisionInfo cinfo, std::shared_ptr< chrono::ChBody > idlerBody, std::shared_ptr< chrono::ChBody > shoeBody, ChVectorD forceShoe)"""
        return _vehicle.ChTrackCustomContact_ComputeIdlerContactForce(self, cinfo, idlerBody, shoeBody, forceShoe)

    def ComputeWheelContactForce(self, cinfo, wheelBody, shoeBody, forceShoe):
        r"""ComputeWheelContactForce(ChTrackCustomContact self, ChCollisionInfo cinfo, std::shared_ptr< chrono::ChBody > wheelBody, std::shared_ptr< chrono::ChBody > shoeBody, ChVectorD forceShoe)"""
        return _vehicle.ChTrackCustomContact_ComputeWheelContactForce(self, cinfo, wheelBody, shoeBody, forceShoe)

    def ComputeGroundContactForce(self, cinfo, groundBody, shoeBody, forceShoe):
        r"""ComputeGroundContactForce(ChTrackCustomContact self, ChCollisionInfo cinfo, std::shared_ptr< chrono::ChBody > groundBody, std::shared_ptr< chrono::ChBody > shoeBody, ChVectorD forceShoe)"""
        return _vehicle.ChTrackCustomContact_ComputeGroundContactForce(self, cinfo, groundBody, shoeBody, forceShoe)

    def __init__(self):
        r"""__init__(ChTrackCustomContact self) -> ChTrackCustomContact"""
        _vehicle.ChTrackCustomContact_swiginit(self, _vehicle.new_ChTrackCustomContact())

# Register ChTrackCustomContact in _vehicle:
_vehicle.ChTrackCustomContact_swigregister(ChTrackCustomContact)

class ChTrackedVehicle(ChVehicle):
    r"""Proxy of C++ chrono::vehicle::ChTrackedVehicle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChTrackedVehicle

    def GetTemplateName(self):
        r"""GetTemplateName(ChTrackedVehicle self) -> std::string"""
        return _vehicle.ChTrackedVehicle_GetTemplateName(self)

    def GetTrackAssembly(self, side):
        r"""GetTrackAssembly(ChTrackedVehicle self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::vehicle::ChTrackAssembly >"""
        return _vehicle.ChTrackedVehicle_GetTrackAssembly(self, side)

    def GetDriveline(self):
        r"""GetDriveline(ChTrackedVehicle self) -> std::shared_ptr< chrono::vehicle::ChDrivelineTV >"""
        return _vehicle.ChTrackedVehicle_GetDriveline(self)

    def GetNumTrackSuspensions(self, side):
        r"""GetNumTrackSuspensions(ChTrackedVehicle self, chrono::vehicle::VehicleSide side) -> size_t"""
        return _vehicle.ChTrackedVehicle_GetNumTrackSuspensions(self, side)

    def GetNumTrackShoes(self, side):
        r"""GetNumTrackShoes(ChTrackedVehicle self, chrono::vehicle::VehicleSide side) -> size_t"""
        return _vehicle.ChTrackedVehicle_GetNumTrackShoes(self, side)

    def GetTrackShoe(self, side, id):
        r"""GetTrackShoe(ChTrackedVehicle self, chrono::vehicle::VehicleSide side, size_t id) -> std::shared_ptr< chrono::vehicle::ChTrackShoe >"""
        return _vehicle.ChTrackedVehicle_GetTrackShoe(self, side, id)

    def GetTrackShoeState(self, side, shoe_id):
        r"""GetTrackShoeState(ChTrackedVehicle self, chrono::vehicle::VehicleSide side, size_t shoe_id) -> BodyState"""
        return _vehicle.ChTrackedVehicle_GetTrackShoeState(self, side, shoe_id)

    def GetTrackShoeStates(self, side, states):
        r"""GetTrackShoeStates(ChTrackedVehicle self, chrono::vehicle::VehicleSide side, chrono::vehicle::BodyStates & states)"""
        return _vehicle.ChTrackedVehicle_GetTrackShoeStates(self, side, states)

    def SetSprocketVisualizationType(self, vis):
        r"""SetSprocketVisualizationType(ChTrackedVehicle self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChTrackedVehicle_SetSprocketVisualizationType(self, vis)

    def SetIdlerVisualizationType(self, vis):
        r"""SetIdlerVisualizationType(ChTrackedVehicle self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChTrackedVehicle_SetIdlerVisualizationType(self, vis)

    def SetSuspensionVisualizationType(self, vis):
        r"""SetSuspensionVisualizationType(ChTrackedVehicle self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChTrackedVehicle_SetSuspensionVisualizationType(self, vis)

    def SetIdlerWheelVisualizationType(self, vis):
        r"""SetIdlerWheelVisualizationType(ChTrackedVehicle self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChTrackedVehicle_SetIdlerWheelVisualizationType(self, vis)

    def SetRoadWheelVisualizationType(self, vis):
        r"""SetRoadWheelVisualizationType(ChTrackedVehicle self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChTrackedVehicle_SetRoadWheelVisualizationType(self, vis)

    def SetRollerVisualizationType(self, vis):
        r"""SetRollerVisualizationType(ChTrackedVehicle self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChTrackedVehicle_SetRollerVisualizationType(self, vis)

    def SetTrackShoeVisualizationType(self, vis):
        r"""SetTrackShoeVisualizationType(ChTrackedVehicle self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChTrackedVehicle_SetTrackShoeVisualizationType(self, vis)

    def SetSprocketCollide(self, state):
        r"""SetSprocketCollide(ChTrackedVehicle self, bool state)"""
        return _vehicle.ChTrackedVehicle_SetSprocketCollide(self, state)

    def SetIdlerCollide(self, state):
        r"""SetIdlerCollide(ChTrackedVehicle self, bool state)"""
        return _vehicle.ChTrackedVehicle_SetIdlerCollide(self, state)

    def SetRoadWheelCollide(self, state):
        r"""SetRoadWheelCollide(ChTrackedVehicle self, bool state)"""
        return _vehicle.ChTrackedVehicle_SetRoadWheelCollide(self, state)

    def SetRollerCollide(self, state):
        r"""SetRollerCollide(ChTrackedVehicle self, bool state)"""
        return _vehicle.ChTrackedVehicle_SetRollerCollide(self, state)

    def SetTrackShoeCollide(self, state):
        r"""SetTrackShoeCollide(ChTrackedVehicle self, bool state)"""
        return _vehicle.ChTrackedVehicle_SetTrackShoeCollide(self, state)

    def SetCollide(self, flags):
        r"""SetCollide(ChTrackedVehicle self, int flags)"""
        return _vehicle.ChTrackedVehicle_SetCollide(self, flags)

    def SetChassisVehicleCollide(self, state):
        r"""SetChassisVehicleCollide(ChTrackedVehicle self, bool state)"""
        return _vehicle.ChTrackedVehicle_SetChassisVehicleCollide(self, state)

    def EnableCustomContact(self, callback):
        r"""EnableCustomContact(ChTrackedVehicle self, std::shared_ptr< chrono::vehicle::ChTrackCustomContact > callback)"""
        return _vehicle.ChTrackedVehicle_EnableCustomContact(self, callback)

    def MonitorContacts(self, flags):
        r"""MonitorContacts(ChTrackedVehicle self, int flags)"""
        return _vehicle.ChTrackedVehicle_MonitorContacts(self, flags)

    def SetRenderContactNormals(self, val):
        r"""SetRenderContactNormals(ChTrackedVehicle self, bool val)"""
        return _vehicle.ChTrackedVehicle_SetRenderContactNormals(self, val)

    def SetRenderContactForces(self, val, scale):
        r"""SetRenderContactForces(ChTrackedVehicle self, bool val, double scale)"""
        return _vehicle.ChTrackedVehicle_SetRenderContactForces(self, val, scale)

    def SetContactCollection(self, val):
        r"""SetContactCollection(ChTrackedVehicle self, bool val)"""
        return _vehicle.ChTrackedVehicle_SetContactCollection(self, val)

    def IsPartInContact(self, part):
        r"""IsPartInContact(ChTrackedVehicle self, chrono::vehicle::TrackedCollisionFlag::Enum part) -> bool"""
        return _vehicle.ChTrackedVehicle_IsPartInContact(self, part)

    def GetSprocketResistiveTorque(self, side):
        r"""GetSprocketResistiveTorque(ChTrackedVehicle self, chrono::vehicle::VehicleSide side) -> ChVectorD"""
        return _vehicle.ChTrackedVehicle_GetSprocketResistiveTorque(self, side)

    def WriteContacts(self, filename):
        r"""WriteContacts(ChTrackedVehicle self, std::string const & filename)"""
        return _vehicle.ChTrackedVehicle_WriteContacts(self, filename)

    def SetTrackAssemblyOutput(self, side, state):
        r"""SetTrackAssemblyOutput(ChTrackedVehicle self, chrono::vehicle::VehicleSide side, bool state)"""
        return _vehicle.ChTrackedVehicle_SetTrackAssemblyOutput(self, side, state)

    def Initialize(self, chassisPos, chassisFwdVel=0):
        r"""Initialize(ChTrackedVehicle self, ChCoordsysD chassisPos, double chassisFwdVel=0)"""
        return _vehicle.ChTrackedVehicle_Initialize(self, chassisPos, chassisFwdVel)

    def InitializeInertiaProperties(self):
        r"""InitializeInertiaProperties(ChTrackedVehicle self)"""
        return _vehicle.ChTrackedVehicle_InitializeInertiaProperties(self)

    def Synchronize(self, time, driver_inputs, shoe_forces_left, shoe_forces_right):
        r"""Synchronize(ChTrackedVehicle self, double time, DriverInputs driver_inputs, TerrainForces shoe_forces_left, TerrainForces shoe_forces_right)"""
        return _vehicle.ChTrackedVehicle_Synchronize(self, time, driver_inputs, shoe_forces_left, shoe_forces_right)

    def Advance(self, step):
        r"""Advance(ChTrackedVehicle self, double step)"""
        return _vehicle.ChTrackedVehicle_Advance(self, step)

    def LockDifferential(self, lock):
        r"""LockDifferential(ChTrackedVehicle self, bool lock)"""
        return _vehicle.ChTrackedVehicle_LockDifferential(self, lock)

    def DisconnectDriveline(self):
        r"""DisconnectDriveline(ChTrackedVehicle self)"""
        return _vehicle.ChTrackedVehicle_DisconnectDriveline(self)

    def LogConstraintViolations(self):
        r"""LogConstraintViolations(ChTrackedVehicle self)"""
        return _vehicle.ChTrackedVehicle_LogConstraintViolations(self)

    def ExportComponentList(self, *args):
        r"""
        ExportComponentList(ChTrackedVehicle self) -> std::string
        ExportComponentList(ChTrackedVehicle self, std::string const & filename)
        """
        return _vehicle.ChTrackedVehicle_ExportComponentList(self, *args)

# Register ChTrackedVehicle in _vehicle:
_vehicle.ChTrackedVehicle_swigregister(ChTrackedVehicle)

class TrackedVehicle(ChTrackedVehicle):
    r"""Proxy of C++ chrono::vehicle::TrackedVehicle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TrackedVehicle self, std::string const & filename, chrono::ChContactMethod contact_method=NSC) -> TrackedVehicle
        __init__(TrackedVehicle self, ChSystem system, std::string const & filename) -> TrackedVehicle
        """
        _vehicle.TrackedVehicle_swiginit(self, _vehicle.new_TrackedVehicle(*args))
    __swig_destroy__ = _vehicle.delete_TrackedVehicle

    def Initialize(self, chassisPos, chassisFwdVel=0):
        r"""Initialize(TrackedVehicle self, ChCoordsysD chassisPos, double chassisFwdVel=0)"""
        return _vehicle.TrackedVehicle_Initialize(self, chassisPos, chassisFwdVel)

# Register TrackedVehicle in _vehicle:
_vehicle.TrackedVehicle_swigregister(TrackedVehicle)

class Generic_Wheel(ChWheel):
    r"""Proxy of C++ chrono::vehicle::generic::Generic_Wheel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Generic_Wheel self, std::string const & name) -> Generic_Wheel"""
        _vehicle.Generic_Wheel_swiginit(self, _vehicle.new_Generic_Wheel(name))
    __swig_destroy__ = _vehicle.delete_Generic_Wheel

    def GetWheelMass(self):
        r"""GetWheelMass(Generic_Wheel self) -> double"""
        return _vehicle.Generic_Wheel_GetWheelMass(self)

    def GetWheelInertia(self):
        r"""GetWheelInertia(Generic_Wheel self) -> ChVectorD"""
        return _vehicle.Generic_Wheel_GetWheelInertia(self)

    def GetRadius(self):
        r"""GetRadius(Generic_Wheel self) -> double"""
        return _vehicle.Generic_Wheel_GetRadius(self)

    def GetWidth(self):
        r"""GetWidth(Generic_Wheel self) -> double"""
        return _vehicle.Generic_Wheel_GetWidth(self)

# Register Generic_Wheel in _vehicle:
_vehicle.Generic_Wheel_swigregister(Generic_Wheel)

class HMMWV_Wheel(ChWheel):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_Wheel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(HMMWV_Wheel self, std::string const & name) -> HMMWV_Wheel"""
        _vehicle.HMMWV_Wheel_swiginit(self, _vehicle.new_HMMWV_Wheel(name))
    __swig_destroy__ = _vehicle.delete_HMMWV_Wheel

    def GetWheelMass(self):
        r"""GetWheelMass(HMMWV_Wheel self) -> double"""
        return _vehicle.HMMWV_Wheel_GetWheelMass(self)

    def GetWheelInertia(self):
        r"""GetWheelInertia(HMMWV_Wheel self) -> ChVectorD"""
        return _vehicle.HMMWV_Wheel_GetWheelInertia(self)

    def GetRadius(self):
        r"""GetRadius(HMMWV_Wheel self) -> double"""
        return _vehicle.HMMWV_Wheel_GetRadius(self)

    def GetWidth(self):
        r"""GetWidth(HMMWV_Wheel self) -> double"""
        return _vehicle.HMMWV_Wheel_GetWidth(self)

    def Initialize(self, spindle, side, offset=0):
        r"""Initialize(HMMWV_Wheel self, std::shared_ptr< chrono::ChBody > spindle, chrono::vehicle::VehicleSide side, double offset=0)"""
        return _vehicle.HMMWV_Wheel_Initialize(self, spindle, side, offset)

# Register HMMWV_Wheel in _vehicle:
_vehicle.HMMWV_Wheel_swigregister(HMMWV_Wheel)

class Sedan_Wheel(ChWheel):
    r"""Proxy of C++ chrono::vehicle::sedan::Sedan_Wheel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Sedan_Wheel self, std::string const & name) -> Sedan_Wheel"""
        _vehicle.Sedan_Wheel_swiginit(self, _vehicle.new_Sedan_Wheel(name))
    __swig_destroy__ = _vehicle.delete_Sedan_Wheel

    def GetWheelMass(self):
        r"""GetWheelMass(Sedan_Wheel self) -> double"""
        return _vehicle.Sedan_Wheel_GetWheelMass(self)

    def GetWheelInertia(self):
        r"""GetWheelInertia(Sedan_Wheel self) -> ChVectorD"""
        return _vehicle.Sedan_Wheel_GetWheelInertia(self)

    def GetRadius(self):
        r"""GetRadius(Sedan_Wheel self) -> double"""
        return _vehicle.Sedan_Wheel_GetRadius(self)

    def GetWidth(self):
        r"""GetWidth(Sedan_Wheel self) -> double"""
        return _vehicle.Sedan_Wheel_GetWidth(self)

# Register Sedan_Wheel in _vehicle:
_vehicle.Sedan_Wheel_swigregister(Sedan_Wheel)

class CityBus_Wheel(ChWheel):
    r"""Proxy of C++ chrono::vehicle::citybus::CityBus_Wheel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(CityBus_Wheel self, std::string const & name) -> CityBus_Wheel"""
        _vehicle.CityBus_Wheel_swiginit(self, _vehicle.new_CityBus_Wheel(name))
    __swig_destroy__ = _vehicle.delete_CityBus_Wheel

    def GetWheelMass(self):
        r"""GetWheelMass(CityBus_Wheel self) -> double"""
        return _vehicle.CityBus_Wheel_GetWheelMass(self)

    def GetWheelInertia(self):
        r"""GetWheelInertia(CityBus_Wheel self) -> ChVectorD"""
        return _vehicle.CityBus_Wheel_GetWheelInertia(self)

    def GetRadius(self):
        r"""GetRadius(CityBus_Wheel self) -> double"""
        return _vehicle.CityBus_Wheel_GetRadius(self)

    def GetWidth(self):
        r"""GetWidth(CityBus_Wheel self) -> double"""
        return _vehicle.CityBus_Wheel_GetWidth(self)

# Register CityBus_Wheel in _vehicle:
_vehicle.CityBus_Wheel_swigregister(CityBus_Wheel)

class MAN_5t_Wheel(ChWheel):
    r"""Proxy of C++ chrono::vehicle::man::MAN_5t_Wheel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(MAN_5t_Wheel self, std::string const & name) -> MAN_5t_Wheel"""
        _vehicle.MAN_5t_Wheel_swiginit(self, _vehicle.new_MAN_5t_Wheel(name))
    __swig_destroy__ = _vehicle.delete_MAN_5t_Wheel

    def GetWheelMass(self):
        r"""GetWheelMass(MAN_5t_Wheel self) -> double"""
        return _vehicle.MAN_5t_Wheel_GetWheelMass(self)

    def GetWheelInertia(self):
        r"""GetWheelInertia(MAN_5t_Wheel self) -> ChVectorD"""
        return _vehicle.MAN_5t_Wheel_GetWheelInertia(self)

    def GetRadius(self):
        r"""GetRadius(MAN_5t_Wheel self) -> double"""
        return _vehicle.MAN_5t_Wheel_GetRadius(self)

    def GetWidth(self):
        r"""GetWidth(MAN_5t_Wheel self) -> double"""
        return _vehicle.MAN_5t_Wheel_GetWidth(self)

# Register MAN_5t_Wheel in _vehicle:
_vehicle.MAN_5t_Wheel_swigregister(MAN_5t_Wheel)

class UAZBUS_Wheel(ChWheel):
    r"""Proxy of C++ chrono::vehicle::uaz::UAZBUS_Wheel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(UAZBUS_Wheel self, std::string const & name) -> UAZBUS_Wheel"""
        _vehicle.UAZBUS_Wheel_swiginit(self, _vehicle.new_UAZBUS_Wheel(name))
    __swig_destroy__ = _vehicle.delete_UAZBUS_Wheel

    def GetWheelMass(self):
        r"""GetWheelMass(UAZBUS_Wheel self) -> double"""
        return _vehicle.UAZBUS_Wheel_GetWheelMass(self)

    def GetWheelInertia(self):
        r"""GetWheelInertia(UAZBUS_Wheel self) -> ChVectorD"""
        return _vehicle.UAZBUS_Wheel_GetWheelInertia(self)

    def GetRadius(self):
        r"""GetRadius(UAZBUS_Wheel self) -> double"""
        return _vehicle.UAZBUS_Wheel_GetRadius(self)

    def GetWidth(self):
        r"""GetWidth(UAZBUS_Wheel self) -> double"""
        return _vehicle.UAZBUS_Wheel_GetWidth(self)

# Register UAZBUS_Wheel in _vehicle:
_vehicle.UAZBUS_Wheel_swigregister(UAZBUS_Wheel)

class Gator_Wheel(ChWheel):
    r"""Proxy of C++ chrono::vehicle::gator::Gator_Wheel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Gator_Wheel self, std::string const & name) -> Gator_Wheel"""
        _vehicle.Gator_Wheel_swiginit(self, _vehicle.new_Gator_Wheel(name))
    __swig_destroy__ = _vehicle.delete_Gator_Wheel

    def GetWheelMass(self):
        r"""GetWheelMass(Gator_Wheel self) -> double"""
        return _vehicle.Gator_Wheel_GetWheelMass(self)

    def GetWheelInertia(self):
        r"""GetWheelInertia(Gator_Wheel self) -> ChVectorD"""
        return _vehicle.Gator_Wheel_GetWheelInertia(self)

    def GetRadius(self):
        r"""GetRadius(Gator_Wheel self) -> double"""
        return _vehicle.Gator_Wheel_GetRadius(self)

    def GetWidth(self):
        r"""GetWidth(Gator_Wheel self) -> double"""
        return _vehicle.Gator_Wheel_GetWidth(self)

# Register Gator_Wheel in _vehicle:
_vehicle.Gator_Wheel_swigregister(Gator_Wheel)

class RCCar_Wheel(ChWheel):
    r"""Proxy of C++ chrono::vehicle::rccar::RCCar_Wheel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_RCCar_Wheel

    def GetWheelMass(self):
        r"""GetWheelMass(RCCar_Wheel self) -> double"""
        return _vehicle.RCCar_Wheel_GetWheelMass(self)

    def GetWheelInertia(self):
        r"""GetWheelInertia(RCCar_Wheel self) -> ChVectorD"""
        return _vehicle.RCCar_Wheel_GetWheelInertia(self)

    def GetRadius(self):
        r"""GetRadius(RCCar_Wheel self) -> double"""
        return _vehicle.RCCar_Wheel_GetRadius(self)

    def GetWidth(self):
        r"""GetWidth(RCCar_Wheel self) -> double"""
        return _vehicle.RCCar_Wheel_GetWidth(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(RCCar_Wheel self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.RCCar_Wheel_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(RCCar_Wheel self)"""
        return _vehicle.RCCar_Wheel_RemoveVisualizationAssets(self)

# Register RCCar_Wheel in _vehicle:
_vehicle.RCCar_Wheel_swigregister(RCCar_Wheel)

class RCCar_WheelLeft(RCCar_Wheel):
    r"""Proxy of C++ chrono::vehicle::rccar::RCCar_WheelLeft class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(RCCar_WheelLeft self, std::string const & name) -> RCCar_WheelLeft"""
        _vehicle.RCCar_WheelLeft_swiginit(self, _vehicle.new_RCCar_WheelLeft(name))
    __swig_destroy__ = _vehicle.delete_RCCar_WheelLeft

    def GetMeshName(self):
        r"""GetMeshName(RCCar_WheelLeft self) -> std::string"""
        return _vehicle.RCCar_WheelLeft_GetMeshName(self)

    def GetMeshFile(self):
        r"""GetMeshFile(RCCar_WheelLeft self) -> std::string"""
        return _vehicle.RCCar_WheelLeft_GetMeshFile(self)

# Register RCCar_WheelLeft in _vehicle:
_vehicle.RCCar_WheelLeft_swigregister(RCCar_WheelLeft)

class RCCar_WheelRight(RCCar_Wheel):
    r"""Proxy of C++ chrono::vehicle::rccar::RCCar_WheelRight class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(RCCar_WheelRight self, std::string const & name) -> RCCar_WheelRight"""
        _vehicle.RCCar_WheelRight_swiginit(self, _vehicle.new_RCCar_WheelRight(name))
    __swig_destroy__ = _vehicle.delete_RCCar_WheelRight

    def GetMeshName(self):
        r"""GetMeshName(RCCar_WheelRight self) -> std::string"""
        return _vehicle.RCCar_WheelRight_GetMeshName(self)

    def GetMeshFile(self):
        r"""GetMeshFile(RCCar_WheelRight self) -> std::string"""
        return _vehicle.RCCar_WheelRight_GetMeshFile(self)

# Register RCCar_WheelRight in _vehicle:
_vehicle.RCCar_WheelRight_swigregister(RCCar_WheelRight)

class FEDA_Wheel(ChWheel):
    r"""Proxy of C++ chrono::vehicle::feda::FEDA_Wheel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(FEDA_Wheel self, std::string const & name) -> FEDA_Wheel"""
        _vehicle.FEDA_Wheel_swiginit(self, _vehicle.new_FEDA_Wheel(name))
    __swig_destroy__ = _vehicle.delete_FEDA_Wheel

    def GetWheelMass(self):
        r"""GetWheelMass(FEDA_Wheel self) -> double"""
        return _vehicle.FEDA_Wheel_GetWheelMass(self)

    def GetWheelInertia(self):
        r"""GetWheelInertia(FEDA_Wheel self) -> ChVectorD"""
        return _vehicle.FEDA_Wheel_GetWheelInertia(self)

    def GetRadius(self):
        r"""GetRadius(FEDA_Wheel self) -> double"""
        return _vehicle.FEDA_Wheel_GetRadius(self)

    def GetWidth(self):
        r"""GetWidth(FEDA_Wheel self) -> double"""
        return _vehicle.FEDA_Wheel_GetWidth(self)

# Register FEDA_Wheel in _vehicle:
_vehicle.FEDA_Wheel_swigregister(FEDA_Wheel)

class Generic_BrakeSimple(ChBrakeSimple):
    r"""Proxy of C++ chrono::vehicle::generic::Generic_BrakeSimple class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Generic_BrakeSimple self, std::string const & name) -> Generic_BrakeSimple"""
        _vehicle.Generic_BrakeSimple_swiginit(self, _vehicle.new_Generic_BrakeSimple(name))
    __swig_destroy__ = _vehicle.delete_Generic_BrakeSimple

    def GetMaxBrakingTorque(self):
        r"""GetMaxBrakingTorque(Generic_BrakeSimple self) -> double"""
        return _vehicle.Generic_BrakeSimple_GetMaxBrakingTorque(self)

# Register Generic_BrakeSimple in _vehicle:
_vehicle.Generic_BrakeSimple_swigregister(Generic_BrakeSimple)

class HMMWV_BrakeSimple(ChBrakeSimple):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_BrakeSimple class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(HMMWV_BrakeSimple self, std::string const & name) -> HMMWV_BrakeSimple"""
        _vehicle.HMMWV_BrakeSimple_swiginit(self, _vehicle.new_HMMWV_BrakeSimple(name))
    __swig_destroy__ = _vehicle.delete_HMMWV_BrakeSimple

    def GetMaxBrakingTorque(self):
        r"""GetMaxBrakingTorque(HMMWV_BrakeSimple self) -> double"""
        return _vehicle.HMMWV_BrakeSimple_GetMaxBrakingTorque(self)

# Register HMMWV_BrakeSimple in _vehicle:
_vehicle.HMMWV_BrakeSimple_swigregister(HMMWV_BrakeSimple)

class HMMWV_BrakeShafts(ChBrakeShafts):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_BrakeShafts class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(HMMWV_BrakeShafts self, std::string const & name) -> HMMWV_BrakeShafts"""
        _vehicle.HMMWV_BrakeShafts_swiginit(self, _vehicle.new_HMMWV_BrakeShafts(name))
    __swig_destroy__ = _vehicle.delete_HMMWV_BrakeShafts

    def GetMaxBrakingTorque(self):
        r"""GetMaxBrakingTorque(HMMWV_BrakeShafts self) -> double"""
        return _vehicle.HMMWV_BrakeShafts_GetMaxBrakingTorque(self)

    def GetShaftInertia(self):
        r"""GetShaftInertia(HMMWV_BrakeShafts self) -> double"""
        return _vehicle.HMMWV_BrakeShafts_GetShaftInertia(self)

# Register HMMWV_BrakeShafts in _vehicle:
_vehicle.HMMWV_BrakeShafts_swigregister(HMMWV_BrakeShafts)

class Sedan_BrakeSimple(ChBrakeSimple):
    r"""Proxy of C++ chrono::vehicle::sedan::Sedan_BrakeSimple class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Sedan_BrakeSimple self, std::string const & name) -> Sedan_BrakeSimple"""
        _vehicle.Sedan_BrakeSimple_swiginit(self, _vehicle.new_Sedan_BrakeSimple(name))
    __swig_destroy__ = _vehicle.delete_Sedan_BrakeSimple

    def GetMaxBrakingTorque(self):
        r"""GetMaxBrakingTorque(Sedan_BrakeSimple self) -> double"""
        return _vehicle.Sedan_BrakeSimple_GetMaxBrakingTorque(self)

# Register Sedan_BrakeSimple in _vehicle:
_vehicle.Sedan_BrakeSimple_swigregister(Sedan_BrakeSimple)

class Sedan_BrakeShafts(ChBrakeShafts):
    r"""Proxy of C++ chrono::vehicle::sedan::Sedan_BrakeShafts class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Sedan_BrakeShafts self, std::string const & name) -> Sedan_BrakeShafts"""
        _vehicle.Sedan_BrakeShafts_swiginit(self, _vehicle.new_Sedan_BrakeShafts(name))
    __swig_destroy__ = _vehicle.delete_Sedan_BrakeShafts

    def GetMaxBrakingTorque(self):
        r"""GetMaxBrakingTorque(Sedan_BrakeShafts self) -> double"""
        return _vehicle.Sedan_BrakeShafts_GetMaxBrakingTorque(self)

    def GetShaftInertia(self):
        r"""GetShaftInertia(Sedan_BrakeShafts self) -> double"""
        return _vehicle.Sedan_BrakeShafts_GetShaftInertia(self)

# Register Sedan_BrakeShafts in _vehicle:
_vehicle.Sedan_BrakeShafts_swigregister(Sedan_BrakeShafts)

class CityBus_BrakeSimple(ChBrakeSimple):
    r"""Proxy of C++ chrono::vehicle::citybus::CityBus_BrakeSimple class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(CityBus_BrakeSimple self, std::string const & name) -> CityBus_BrakeSimple"""
        _vehicle.CityBus_BrakeSimple_swiginit(self, _vehicle.new_CityBus_BrakeSimple(name))
    __swig_destroy__ = _vehicle.delete_CityBus_BrakeSimple

    def GetMaxBrakingTorque(self):
        r"""GetMaxBrakingTorque(CityBus_BrakeSimple self) -> double"""
        return _vehicle.CityBus_BrakeSimple_GetMaxBrakingTorque(self)

# Register CityBus_BrakeSimple in _vehicle:
_vehicle.CityBus_BrakeSimple_swigregister(CityBus_BrakeSimple)

class CityBus_BrakeShafts(ChBrakeShafts):
    r"""Proxy of C++ chrono::vehicle::citybus::CityBus_BrakeShafts class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(CityBus_BrakeShafts self, std::string const & name) -> CityBus_BrakeShafts"""
        _vehicle.CityBus_BrakeShafts_swiginit(self, _vehicle.new_CityBus_BrakeShafts(name))
    __swig_destroy__ = _vehicle.delete_CityBus_BrakeShafts

    def GetMaxBrakingTorque(self):
        r"""GetMaxBrakingTorque(CityBus_BrakeShafts self) -> double"""
        return _vehicle.CityBus_BrakeShafts_GetMaxBrakingTorque(self)

    def GetShaftInertia(self):
        r"""GetShaftInertia(CityBus_BrakeShafts self) -> double"""
        return _vehicle.CityBus_BrakeShafts_GetShaftInertia(self)

# Register CityBus_BrakeShafts in _vehicle:
_vehicle.CityBus_BrakeShafts_swigregister(CityBus_BrakeShafts)

class MAN_5t_BrakeSimple(ChBrakeSimple):
    r"""Proxy of C++ chrono::vehicle::man::MAN_5t_BrakeSimple class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(MAN_5t_BrakeSimple self, std::string const & name) -> MAN_5t_BrakeSimple"""
        _vehicle.MAN_5t_BrakeSimple_swiginit(self, _vehicle.new_MAN_5t_BrakeSimple(name))
    __swig_destroy__ = _vehicle.delete_MAN_5t_BrakeSimple

    def GetMaxBrakingTorque(self):
        r"""GetMaxBrakingTorque(MAN_5t_BrakeSimple self) -> double"""
        return _vehicle.MAN_5t_BrakeSimple_GetMaxBrakingTorque(self)

# Register MAN_5t_BrakeSimple in _vehicle:
_vehicle.MAN_5t_BrakeSimple_swigregister(MAN_5t_BrakeSimple)

class MAN_5t_BrakeShafts(ChBrakeShafts):
    r"""Proxy of C++ chrono::vehicle::man::MAN_5t_BrakeShafts class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(MAN_5t_BrakeShafts self, std::string const & name) -> MAN_5t_BrakeShafts"""
        _vehicle.MAN_5t_BrakeShafts_swiginit(self, _vehicle.new_MAN_5t_BrakeShafts(name))
    __swig_destroy__ = _vehicle.delete_MAN_5t_BrakeShafts

    def GetMaxBrakingTorque(self):
        r"""GetMaxBrakingTorque(MAN_5t_BrakeShafts self) -> double"""
        return _vehicle.MAN_5t_BrakeShafts_GetMaxBrakingTorque(self)

    def GetShaftInertia(self):
        r"""GetShaftInertia(MAN_5t_BrakeShafts self) -> double"""
        return _vehicle.MAN_5t_BrakeShafts_GetShaftInertia(self)

# Register MAN_5t_BrakeShafts in _vehicle:
_vehicle.MAN_5t_BrakeShafts_swigregister(MAN_5t_BrakeShafts)

class UAZBUS_BrakeSimpleFront(ChBrakeSimple):
    r"""Proxy of C++ chrono::vehicle::uaz::UAZBUS_BrakeSimpleFront class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(UAZBUS_BrakeSimpleFront self, std::string const & name) -> UAZBUS_BrakeSimpleFront"""
        _vehicle.UAZBUS_BrakeSimpleFront_swiginit(self, _vehicle.new_UAZBUS_BrakeSimpleFront(name))
    __swig_destroy__ = _vehicle.delete_UAZBUS_BrakeSimpleFront

    def GetMaxBrakingTorque(self):
        r"""GetMaxBrakingTorque(UAZBUS_BrakeSimpleFront self) -> double"""
        return _vehicle.UAZBUS_BrakeSimpleFront_GetMaxBrakingTorque(self)

# Register UAZBUS_BrakeSimpleFront in _vehicle:
_vehicle.UAZBUS_BrakeSimpleFront_swigregister(UAZBUS_BrakeSimpleFront)

class UAZBUS_BrakeSimpleRear(ChBrakeSimple):
    r"""Proxy of C++ chrono::vehicle::uaz::UAZBUS_BrakeSimpleRear class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(UAZBUS_BrakeSimpleRear self, std::string const & name) -> UAZBUS_BrakeSimpleRear"""
        _vehicle.UAZBUS_BrakeSimpleRear_swiginit(self, _vehicle.new_UAZBUS_BrakeSimpleRear(name))
    __swig_destroy__ = _vehicle.delete_UAZBUS_BrakeSimpleRear

    def GetMaxBrakingTorque(self):
        r"""GetMaxBrakingTorque(UAZBUS_BrakeSimpleRear self) -> double"""
        return _vehicle.UAZBUS_BrakeSimpleRear_GetMaxBrakingTorque(self)

# Register UAZBUS_BrakeSimpleRear in _vehicle:
_vehicle.UAZBUS_BrakeSimpleRear_swigregister(UAZBUS_BrakeSimpleRear)

class UAZBUS_BrakeShaftsFront(ChBrakeShafts):
    r"""Proxy of C++ chrono::vehicle::uaz::UAZBUS_BrakeShaftsFront class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(UAZBUS_BrakeShaftsFront self, std::string const & name) -> UAZBUS_BrakeShaftsFront"""
        _vehicle.UAZBUS_BrakeShaftsFront_swiginit(self, _vehicle.new_UAZBUS_BrakeShaftsFront(name))
    __swig_destroy__ = _vehicle.delete_UAZBUS_BrakeShaftsFront

    def GetMaxBrakingTorque(self):
        r"""GetMaxBrakingTorque(UAZBUS_BrakeShaftsFront self) -> double"""
        return _vehicle.UAZBUS_BrakeShaftsFront_GetMaxBrakingTorque(self)

    def GetShaftInertia(self):
        r"""GetShaftInertia(UAZBUS_BrakeShaftsFront self) -> double"""
        return _vehicle.UAZBUS_BrakeShaftsFront_GetShaftInertia(self)

# Register UAZBUS_BrakeShaftsFront in _vehicle:
_vehicle.UAZBUS_BrakeShaftsFront_swigregister(UAZBUS_BrakeShaftsFront)

class UAZBUS_BrakeShaftsRear(ChBrakeShafts):
    r"""Proxy of C++ chrono::vehicle::uaz::UAZBUS_BrakeShaftsRear class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(UAZBUS_BrakeShaftsRear self, std::string const & name) -> UAZBUS_BrakeShaftsRear"""
        _vehicle.UAZBUS_BrakeShaftsRear_swiginit(self, _vehicle.new_UAZBUS_BrakeShaftsRear(name))
    __swig_destroy__ = _vehicle.delete_UAZBUS_BrakeShaftsRear

    def GetMaxBrakingTorque(self):
        r"""GetMaxBrakingTorque(UAZBUS_BrakeShaftsRear self) -> double"""
        return _vehicle.UAZBUS_BrakeShaftsRear_GetMaxBrakingTorque(self)

    def GetShaftInertia(self):
        r"""GetShaftInertia(UAZBUS_BrakeShaftsRear self) -> double"""
        return _vehicle.UAZBUS_BrakeShaftsRear_GetShaftInertia(self)

# Register UAZBUS_BrakeShaftsRear in _vehicle:
_vehicle.UAZBUS_BrakeShaftsRear_swigregister(UAZBUS_BrakeShaftsRear)

class Gator_BrakeSimple(ChBrakeSimple):
    r"""Proxy of C++ chrono::vehicle::gator::Gator_BrakeSimple class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Gator_BrakeSimple self, std::string const & name) -> Gator_BrakeSimple"""
        _vehicle.Gator_BrakeSimple_swiginit(self, _vehicle.new_Gator_BrakeSimple(name))
    __swig_destroy__ = _vehicle.delete_Gator_BrakeSimple

    def GetMaxBrakingTorque(self):
        r"""GetMaxBrakingTorque(Gator_BrakeSimple self) -> double"""
        return _vehicle.Gator_BrakeSimple_GetMaxBrakingTorque(self)

# Register Gator_BrakeSimple in _vehicle:
_vehicle.Gator_BrakeSimple_swigregister(Gator_BrakeSimple)

class Gator_BrakeShafts(ChBrakeShafts):
    r"""Proxy of C++ chrono::vehicle::gator::Gator_BrakeShafts class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Gator_BrakeShafts self, std::string const & name) -> Gator_BrakeShafts"""
        _vehicle.Gator_BrakeShafts_swiginit(self, _vehicle.new_Gator_BrakeShafts(name))
    __swig_destroy__ = _vehicle.delete_Gator_BrakeShafts

    def GetMaxBrakingTorque(self):
        r"""GetMaxBrakingTorque(Gator_BrakeShafts self) -> double"""
        return _vehicle.Gator_BrakeShafts_GetMaxBrakingTorque(self)

    def GetShaftInertia(self):
        r"""GetShaftInertia(Gator_BrakeShafts self) -> double"""
        return _vehicle.Gator_BrakeShafts_GetShaftInertia(self)

# Register Gator_BrakeShafts in _vehicle:
_vehicle.Gator_BrakeShafts_swigregister(Gator_BrakeShafts)

class RCCar_BrakeSimple(ChBrakeSimple):
    r"""Proxy of C++ chrono::vehicle::rccar::RCCar_BrakeSimple class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(RCCar_BrakeSimple self, std::string const & name) -> RCCar_BrakeSimple"""
        _vehicle.RCCar_BrakeSimple_swiginit(self, _vehicle.new_RCCar_BrakeSimple(name))
    __swig_destroy__ = _vehicle.delete_RCCar_BrakeSimple

    def GetMaxBrakingTorque(self):
        r"""GetMaxBrakingTorque(RCCar_BrakeSimple self) -> double"""
        return _vehicle.RCCar_BrakeSimple_GetMaxBrakingTorque(self)

# Register RCCar_BrakeSimple in _vehicle:
_vehicle.RCCar_BrakeSimple_swigregister(RCCar_BrakeSimple)

class FEDA_BrakeSimple(ChBrakeSimple):
    r"""Proxy of C++ chrono::vehicle::feda::FEDA_BrakeSimple class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(FEDA_BrakeSimple self, std::string const & name) -> FEDA_BrakeSimple"""
        _vehicle.FEDA_BrakeSimple_swiginit(self, _vehicle.new_FEDA_BrakeSimple(name))
    __swig_destroy__ = _vehicle.delete_FEDA_BrakeSimple

    def GetMaxBrakingTorque(self):
        r"""GetMaxBrakingTorque(FEDA_BrakeSimple self) -> double"""
        return _vehicle.FEDA_BrakeSimple_GetMaxBrakingTorque(self)

# Register FEDA_BrakeSimple in _vehicle:
_vehicle.FEDA_BrakeSimple_swigregister(FEDA_BrakeSimple)

class FEDA_BrakeShafts(ChBrakeShafts):
    r"""Proxy of C++ chrono::vehicle::feda::FEDA_BrakeShafts class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(FEDA_BrakeShafts self, std::string const & name) -> FEDA_BrakeShafts"""
        _vehicle.FEDA_BrakeShafts_swiginit(self, _vehicle.new_FEDA_BrakeShafts(name))
    __swig_destroy__ = _vehicle.delete_FEDA_BrakeShafts

    def GetMaxBrakingTorque(self):
        r"""GetMaxBrakingTorque(FEDA_BrakeShafts self) -> double"""
        return _vehicle.FEDA_BrakeShafts_GetMaxBrakingTorque(self)

    def GetShaftInertia(self):
        r"""GetShaftInertia(FEDA_BrakeShafts self) -> double"""
        return _vehicle.FEDA_BrakeShafts_GetShaftInertia(self)

# Register FEDA_BrakeShafts in _vehicle:
_vehicle.FEDA_BrakeShafts_swigregister(FEDA_BrakeShafts)

class M113_BrakeSimple(ChTrackBrakeSimple):
    r"""Proxy of C++ chrono::vehicle::m113::M113_BrakeSimple class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(M113_BrakeSimple self, std::string const & name) -> M113_BrakeSimple"""
        _vehicle.M113_BrakeSimple_swiginit(self, _vehicle.new_M113_BrakeSimple(name))
    __swig_destroy__ = _vehicle.delete_M113_BrakeSimple

    def GetMaxBrakingTorque(self):
        r"""GetMaxBrakingTorque(M113_BrakeSimple self) -> double"""
        return _vehicle.M113_BrakeSimple_GetMaxBrakingTorque(self)

# Register M113_BrakeSimple in _vehicle:
_vehicle.M113_BrakeSimple_swigregister(M113_BrakeSimple)

class M113_BrakeShafts(ChTrackBrakeShafts):
    r"""Proxy of C++ chrono::vehicle::m113::M113_BrakeShafts class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(M113_BrakeShafts self, std::string const & name) -> M113_BrakeShafts"""
        _vehicle.M113_BrakeShafts_swiginit(self, _vehicle.new_M113_BrakeShafts(name))
    __swig_destroy__ = _vehicle.delete_M113_BrakeShafts

    def GetMaxBrakingTorque(self):
        r"""GetMaxBrakingTorque(M113_BrakeShafts self) -> double"""
        return _vehicle.M113_BrakeShafts_GetMaxBrakingTorque(self)

    def GetShaftInertia(self):
        r"""GetShaftInertia(M113_BrakeShafts self) -> double"""
        return _vehicle.M113_BrakeShafts_GetShaftInertia(self)

# Register M113_BrakeShafts in _vehicle:
_vehicle.M113_BrakeShafts_swigregister(M113_BrakeShafts)

class Generic_Vehicle(ChWheeledVehicle):
    r"""Proxy of C++ chrono::vehicle::generic::Generic_Vehicle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Generic_Vehicle self, bool const fixed, chrono::vehicle::SuspensionTypeWV suspType, chrono::ChContactMethod contactMethod=NSC) -> Generic_Vehicle"""
        _vehicle.Generic_Vehicle_swiginit(self, _vehicle.new_Generic_Vehicle(*args))
    __swig_destroy__ = _vehicle.delete_Generic_Vehicle

    def GetNumberAxles(self):
        r"""GetNumberAxles(Generic_Vehicle self) -> int"""
        return _vehicle.Generic_Vehicle_GetNumberAxles(self)

    def GetWheelbase(self):
        r"""GetWheelbase(Generic_Vehicle self) -> double"""
        return _vehicle.Generic_Vehicle_GetWheelbase(self)

    def GetMinTurningRadius(self):
        r"""GetMinTurningRadius(Generic_Vehicle self) -> double"""
        return _vehicle.Generic_Vehicle_GetMinTurningRadius(self)

    def GetMaxSteeringAngle(self):
        r"""GetMaxSteeringAngle(Generic_Vehicle self) -> double"""
        return _vehicle.Generic_Vehicle_GetMaxSteeringAngle(self)

    def GetSpringForce(self, axle, side):
        r"""GetSpringForce(Generic_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.Generic_Vehicle_GetSpringForce(self, axle, side)

    def GetSpringLength(self, axle, side):
        r"""GetSpringLength(Generic_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.Generic_Vehicle_GetSpringLength(self, axle, side)

    def GetSpringDeformation(self, axle, side):
        r"""GetSpringDeformation(Generic_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.Generic_Vehicle_GetSpringDeformation(self, axle, side)

    def GetShockForce(self, axle, side):
        r"""GetShockForce(Generic_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.Generic_Vehicle_GetShockForce(self, axle, side)

    def GetShockLength(self, axle, side):
        r"""GetShockLength(Generic_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.Generic_Vehicle_GetShockLength(self, axle, side)

    def GetShockVelocity(self, axle, side):
        r"""GetShockVelocity(Generic_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.Generic_Vehicle_GetShockVelocity(self, axle, side)

    def Initialize(self, chassisPos, chassisFwdVel=0):
        r"""Initialize(Generic_Vehicle self, ChCoordsysD chassisPos, double chassisFwdVel=0)"""
        return _vehicle.Generic_Vehicle_Initialize(self, chassisPos, chassisFwdVel)

    def LogHardpointLocations(self):
        r"""LogHardpointLocations(Generic_Vehicle self)"""
        return _vehicle.Generic_Vehicle_LogHardpointLocations(self)

    def DebugLog(self, what):
        r"""DebugLog(Generic_Vehicle self, int what)"""
        return _vehicle.Generic_Vehicle_DebugLog(self, what)

# Register Generic_Vehicle in _vehicle:
_vehicle.Generic_Vehicle_swigregister(Generic_Vehicle)

class HMMWV(object):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_HMMWV

    def SetContactMethod(self, val):
        r"""SetContactMethod(HMMWV self, chrono::ChContactMethod val)"""
        return _vehicle.HMMWV_SetContactMethod(self, val)

    def SetCollisionSystemType(self, collsys_type):
        r"""SetCollisionSystemType(HMMWV self, chrono::collision::ChCollisionSystemType collsys_type)"""
        return _vehicle.HMMWV_SetCollisionSystemType(self, collsys_type)

    def SetChassisFixed(self, val):
        r"""SetChassisFixed(HMMWV self, bool val)"""
        return _vehicle.HMMWV_SetChassisFixed(self, val)

    def SetChassisCollisionType(self, val):
        r"""SetChassisCollisionType(HMMWV self, chrono::vehicle::CollisionType val)"""
        return _vehicle.HMMWV_SetChassisCollisionType(self, val)

    def SetSteeringType(self, val):
        r"""SetSteeringType(HMMWV self, chrono::vehicle::SteeringTypeWV val)"""
        return _vehicle.HMMWV_SetSteeringType(self, val)

    def SetDriveType(self, val):
        r"""SetDriveType(HMMWV self, chrono::vehicle::DrivelineTypeWV val)"""
        return _vehicle.HMMWV_SetDriveType(self, val)

    def SetBrakeType(self, brake_type):
        r"""SetBrakeType(HMMWV self, chrono::vehicle::BrakeType brake_type)"""
        return _vehicle.HMMWV_SetBrakeType(self, brake_type)

    def SetEngineType(self, val):
        r"""SetEngineType(HMMWV self, chrono::vehicle::EngineModelType val)"""
        return _vehicle.HMMWV_SetEngineType(self, val)

    def SetTransmissionType(self, val):
        r"""SetTransmissionType(HMMWV self, chrono::vehicle::TransmissionModelType val)"""
        return _vehicle.HMMWV_SetTransmissionType(self, val)

    def SetTireType(self, val):
        r"""SetTireType(HMMWV self, chrono::vehicle::TireModelType val)"""
        return _vehicle.HMMWV_SetTireType(self, val)

    def SetTireCollisionType(self, collision_type):
        r"""SetTireCollisionType(HMMWV self, chrono::vehicle::ChTire::CollisionType collision_type)"""
        return _vehicle.HMMWV_SetTireCollisionType(self, collision_type)

    def SetInitPosition(self, pos):
        r"""SetInitPosition(HMMWV self, ChCoordsysD pos)"""
        return _vehicle.HMMWV_SetInitPosition(self, pos)

    def SetInitFwdVel(self, fwdVel):
        r"""SetInitFwdVel(HMMWV self, double fwdVel)"""
        return _vehicle.HMMWV_SetInitFwdVel(self, fwdVel)

    def SetInitWheelAngVel(self, omega):
        r"""SetInitWheelAngVel(HMMWV self, vector_double omega)"""
        return _vehicle.HMMWV_SetInitWheelAngVel(self, omega)

    def SetTireStepSize(self, step_size):
        r"""SetTireStepSize(HMMWV self, double step_size)"""
        return _vehicle.HMMWV_SetTireStepSize(self, step_size)

    def EnableBrakeLocking(self, lock):
        r"""EnableBrakeLocking(HMMWV self, bool lock)"""
        return _vehicle.HMMWV_EnableBrakeLocking(self, lock)

    def GetSystem(self):
        r"""GetSystem(HMMWV self) -> ChSystem"""
        return _vehicle.HMMWV_GetSystem(self)

    def GetVehicle(self):
        r"""GetVehicle(HMMWV self) -> ChWheeledVehicle"""
        return _vehicle.HMMWV_GetVehicle(self)

    def GetChassis(self):
        r"""GetChassis(HMMWV self) -> std::shared_ptr< chrono::vehicle::ChChassis >"""
        return _vehicle.HMMWV_GetChassis(self)

    def GetChassisBody(self):
        r"""GetChassisBody(HMMWV self) -> std::shared_ptr< chrono::ChBodyAuxRef >"""
        return _vehicle.HMMWV_GetChassisBody(self)

    def Initialize(self):
        r"""Initialize(HMMWV self)"""
        return _vehicle.HMMWV_Initialize(self)

    def LockAxleDifferential(self, axle, lock):
        r"""LockAxleDifferential(HMMWV self, int axle, bool lock)"""
        return _vehicle.HMMWV_LockAxleDifferential(self, axle, lock)

    def LockCentralDifferential(self, which, lock):
        r"""LockCentralDifferential(HMMWV self, int which, bool lock)"""
        return _vehicle.HMMWV_LockCentralDifferential(self, which, lock)

    def SetAerodynamicDrag(self, Cd, area, air_density):
        r"""SetAerodynamicDrag(HMMWV self, double Cd, double area, double air_density)"""
        return _vehicle.HMMWV_SetAerodynamicDrag(self, Cd, area, air_density)

    def SetChassisVisualizationType(self, vis):
        r"""SetChassisVisualizationType(HMMWV self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.HMMWV_SetChassisVisualizationType(self, vis)

    def SetSuspensionVisualizationType(self, vis):
        r"""SetSuspensionVisualizationType(HMMWV self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.HMMWV_SetSuspensionVisualizationType(self, vis)

    def SetSteeringVisualizationType(self, vis):
        r"""SetSteeringVisualizationType(HMMWV self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.HMMWV_SetSteeringVisualizationType(self, vis)

    def SetWheelVisualizationType(self, vis):
        r"""SetWheelVisualizationType(HMMWV self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.HMMWV_SetWheelVisualizationType(self, vis)

    def SetTireVisualizationType(self, vis):
        r"""SetTireVisualizationType(HMMWV self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.HMMWV_SetTireVisualizationType(self, vis)

    def Synchronize(self, time, driver_inputs, terrain):
        r"""Synchronize(HMMWV self, double time, DriverInputs driver_inputs, ChTerrain terrain)"""
        return _vehicle.HMMWV_Synchronize(self, time, driver_inputs, terrain)

    def Advance(self, step):
        r"""Advance(HMMWV self, double step)"""
        return _vehicle.HMMWV_Advance(self, step)

# Register HMMWV in _vehicle:
_vehicle.HMMWV_swigregister(HMMWV)

class HMMWV_Full(HMMWV):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_Full class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(HMMWV_Full self) -> HMMWV_Full
        __init__(HMMWV_Full self, ChSystem system) -> HMMWV_Full
        """
        _vehicle.HMMWV_Full_swiginit(self, _vehicle.new_HMMWV_Full(*args))

    def SetRigidSteeringColumn(self, val):
        r"""SetRigidSteeringColumn(HMMWV_Full self, bool val)"""
        return _vehicle.HMMWV_Full_SetRigidSteeringColumn(self, val)

    def UseTierodBodies(self, val):
        r"""UseTierodBodies(HMMWV_Full self, bool val)"""
        return _vehicle.HMMWV_Full_UseTierodBodies(self, val)

    def LogHardpointLocations(self):
        r"""LogHardpointLocations(HMMWV_Full self)"""
        return _vehicle.HMMWV_Full_LogHardpointLocations(self)

    def DebugLog(self, what):
        r"""DebugLog(HMMWV_Full self, int what)"""
        return _vehicle.HMMWV_Full_DebugLog(self, what)
    __swig_destroy__ = _vehicle.delete_HMMWV_Full

# Register HMMWV_Full in _vehicle:
_vehicle.HMMWV_Full_swigregister(HMMWV_Full)

class HMMWV_Reduced(HMMWV):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_Reduced class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(HMMWV_Reduced self) -> HMMWV_Reduced
        __init__(HMMWV_Reduced self, ChSystem system) -> HMMWV_Reduced
        """
        _vehicle.HMMWV_Reduced_swiginit(self, _vehicle.new_HMMWV_Reduced(*args))
    __swig_destroy__ = _vehicle.delete_HMMWV_Reduced

# Register HMMWV_Reduced in _vehicle:
_vehicle.HMMWV_Reduced_swigregister(HMMWV_Reduced)

class HMMWV_Vehicle(ChWheeledVehicle):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_Vehicle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_HMMWV_Vehicle

    def GetNumberAxles(self):
        r"""GetNumberAxles(HMMWV_Vehicle self) -> int"""
        return _vehicle.HMMWV_Vehicle_GetNumberAxles(self)

    def GetWheelbase(self):
        r"""GetWheelbase(HMMWV_Vehicle self) -> double"""
        return _vehicle.HMMWV_Vehicle_GetWheelbase(self)

    def GetMinTurningRadius(self):
        r"""GetMinTurningRadius(HMMWV_Vehicle self) -> double"""
        return _vehicle.HMMWV_Vehicle_GetMinTurningRadius(self)

    def GetMaxSteeringAngle(self):
        r"""GetMaxSteeringAngle(HMMWV_Vehicle self) -> double"""
        return _vehicle.HMMWV_Vehicle_GetMaxSteeringAngle(self)

    def SetInitWheelAngVel(self, omega):
        r"""SetInitWheelAngVel(HMMWV_Vehicle self, vector_double omega)"""
        return _vehicle.HMMWV_Vehicle_SetInitWheelAngVel(self, omega)

# Register HMMWV_Vehicle in _vehicle:
_vehicle.HMMWV_Vehicle_swigregister(HMMWV_Vehicle)

class HMMWV_VehicleReduced(HMMWV_Vehicle):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_VehicleReduced class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(HMMWV_VehicleReduced self, bool const fixed, chrono::vehicle::DrivelineTypeWV drive_type, chrono::vehicle::BrakeType brake_type, chrono::vehicle::SteeringTypeWV steering_type, chrono::ChContactMethod contact_method, chrono::vehicle::CollisionType chassis_collision_type) -> HMMWV_VehicleReduced
        __init__(HMMWV_VehicleReduced self, ChSystem system, bool const fixed, chrono::vehicle::DrivelineTypeWV drive_type, chrono::vehicle::BrakeType brake_type, chrono::vehicle::SteeringTypeWV steering_type, chrono::vehicle::CollisionType chassis_collision_type) -> HMMWV_VehicleReduced
        """
        _vehicle.HMMWV_VehicleReduced_swiginit(self, _vehicle.new_HMMWV_VehicleReduced(*args))
    __swig_destroy__ = _vehicle.delete_HMMWV_VehicleReduced

    def Initialize(self, chassisPos, chassisFwdVel=0):
        r"""Initialize(HMMWV_VehicleReduced self, ChCoordsysD chassisPos, double chassisFwdVel=0)"""
        return _vehicle.HMMWV_VehicleReduced_Initialize(self, chassisPos, chassisFwdVel)

# Register HMMWV_VehicleReduced in _vehicle:
_vehicle.HMMWV_VehicleReduced_swigregister(HMMWV_VehicleReduced)

class HMMWV_VehicleFull(HMMWV_Vehicle):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_VehicleFull class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(HMMWV_VehicleFull self, bool const fixed, chrono::vehicle::DrivelineTypeWV drive_type, chrono::vehicle::BrakeType brake_type, chrono::vehicle::SteeringTypeWV steering_type, bool use_tierod_bodies, bool rigid_steering_column, chrono::ChContactMethod contact_method, chrono::vehicle::CollisionType chassis_collision_type) -> HMMWV_VehicleFull
        __init__(HMMWV_VehicleFull self, ChSystem system, bool const fixed, chrono::vehicle::DrivelineTypeWV drive_type, chrono::vehicle::BrakeType brake_type, chrono::vehicle::SteeringTypeWV steering_type, bool use_tierod_bodies, bool rigid_steering_column, chrono::vehicle::CollisionType chassis_collision_type) -> HMMWV_VehicleFull
        """
        _vehicle.HMMWV_VehicleFull_swiginit(self, _vehicle.new_HMMWV_VehicleFull(*args))
    __swig_destroy__ = _vehicle.delete_HMMWV_VehicleFull

    def GetSpringForce(self, axle, side):
        r"""GetSpringForce(HMMWV_VehicleFull self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.HMMWV_VehicleFull_GetSpringForce(self, axle, side)

    def GetSpringLength(self, axle, side):
        r"""GetSpringLength(HMMWV_VehicleFull self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.HMMWV_VehicleFull_GetSpringLength(self, axle, side)

    def GetSpringDeformation(self, axle, side):
        r"""GetSpringDeformation(HMMWV_VehicleFull self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.HMMWV_VehicleFull_GetSpringDeformation(self, axle, side)

    def GetShockForce(self, axle, side):
        r"""GetShockForce(HMMWV_VehicleFull self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.HMMWV_VehicleFull_GetShockForce(self, axle, side)

    def GetShockLength(self, axle, side):
        r"""GetShockLength(HMMWV_VehicleFull self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.HMMWV_VehicleFull_GetShockLength(self, axle, side)

    def GetShockVelocity(self, axle, side):
        r"""GetShockVelocity(HMMWV_VehicleFull self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.HMMWV_VehicleFull_GetShockVelocity(self, axle, side)

    def Initialize(self, chassisPos, chassisFwdVel=0):
        r"""Initialize(HMMWV_VehicleFull self, ChCoordsysD chassisPos, double chassisFwdVel=0)"""
        return _vehicle.HMMWV_VehicleFull_Initialize(self, chassisPos, chassisFwdVel)

    def LogHardpointLocations(self):
        r"""LogHardpointLocations(HMMWV_VehicleFull self)"""
        return _vehicle.HMMWV_VehicleFull_LogHardpointLocations(self)

    def DebugLog(self, what):
        r"""DebugLog(HMMWV_VehicleFull self, int what)"""
        return _vehicle.HMMWV_VehicleFull_DebugLog(self, what)

# Register HMMWV_VehicleFull in _vehicle:
_vehicle.HMMWV_VehicleFull_swigregister(HMMWV_VehicleFull)

class Sedan(object):
    r"""Proxy of C++ chrono::vehicle::sedan::Sedan class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Sedan self) -> Sedan
        __init__(Sedan self, ChSystem system) -> Sedan
        """
        _vehicle.Sedan_swiginit(self, _vehicle.new_Sedan(*args))
    __swig_destroy__ = _vehicle.delete_Sedan

    def SetContactMethod(self, val):
        r"""SetContactMethod(Sedan self, chrono::ChContactMethod val)"""
        return _vehicle.Sedan_SetContactMethod(self, val)

    def SetChassisFixed(self, val):
        r"""SetChassisFixed(Sedan self, bool val)"""
        return _vehicle.Sedan_SetChassisFixed(self, val)

    def SetChassisCollisionType(self, val):
        r"""SetChassisCollisionType(Sedan self, chrono::vehicle::CollisionType val)"""
        return _vehicle.Sedan_SetChassisCollisionType(self, val)

    def SetBrakeType(self, brake_type):
        r"""SetBrakeType(Sedan self, chrono::vehicle::BrakeType brake_type)"""
        return _vehicle.Sedan_SetBrakeType(self, brake_type)

    def SetTireType(self, val):
        r"""SetTireType(Sedan self, chrono::vehicle::TireModelType val)"""
        return _vehicle.Sedan_SetTireType(self, val)

    def SetInitPosition(self, pos):
        r"""SetInitPosition(Sedan self, ChCoordsysD pos)"""
        return _vehicle.Sedan_SetInitPosition(self, pos)

    def SetInitFwdVel(self, fwdVel):
        r"""SetInitFwdVel(Sedan self, double fwdVel)"""
        return _vehicle.Sedan_SetInitFwdVel(self, fwdVel)

    def SetInitWheelAngVel(self, omega):
        r"""SetInitWheelAngVel(Sedan self, vector_double omega)"""
        return _vehicle.Sedan_SetInitWheelAngVel(self, omega)

    def SetTireStepSize(self, step_size):
        r"""SetTireStepSize(Sedan self, double step_size)"""
        return _vehicle.Sedan_SetTireStepSize(self, step_size)

    def EnableBrakeLocking(self, lock):
        r"""EnableBrakeLocking(Sedan self, bool lock)"""
        return _vehicle.Sedan_EnableBrakeLocking(self, lock)

    def GetSystem(self):
        r"""GetSystem(Sedan self) -> ChSystem"""
        return _vehicle.Sedan_GetSystem(self)

    def GetVehicle(self):
        r"""GetVehicle(Sedan self) -> ChWheeledVehicle"""
        return _vehicle.Sedan_GetVehicle(self)

    def GetChassis(self):
        r"""GetChassis(Sedan self) -> std::shared_ptr< chrono::vehicle::ChChassis >"""
        return _vehicle.Sedan_GetChassis(self)

    def GetChassisBody(self):
        r"""GetChassisBody(Sedan self) -> std::shared_ptr< chrono::ChBodyAuxRef >"""
        return _vehicle.Sedan_GetChassisBody(self)

    def Initialize(self):
        r"""Initialize(Sedan self)"""
        return _vehicle.Sedan_Initialize(self)

    def LockAxleDifferential(self, axle, lock):
        r"""LockAxleDifferential(Sedan self, int axle, bool lock)"""
        return _vehicle.Sedan_LockAxleDifferential(self, axle, lock)

    def SetAerodynamicDrag(self, Cd, area, air_density):
        r"""SetAerodynamicDrag(Sedan self, double Cd, double area, double air_density)"""
        return _vehicle.Sedan_SetAerodynamicDrag(self, Cd, area, air_density)

    def SetChassisVisualizationType(self, vis):
        r"""SetChassisVisualizationType(Sedan self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.Sedan_SetChassisVisualizationType(self, vis)

    def SetSuspensionVisualizationType(self, vis):
        r"""SetSuspensionVisualizationType(Sedan self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.Sedan_SetSuspensionVisualizationType(self, vis)

    def SetSteeringVisualizationType(self, vis):
        r"""SetSteeringVisualizationType(Sedan self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.Sedan_SetSteeringVisualizationType(self, vis)

    def SetWheelVisualizationType(self, vis):
        r"""SetWheelVisualizationType(Sedan self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.Sedan_SetWheelVisualizationType(self, vis)

    def SetTireVisualizationType(self, vis):
        r"""SetTireVisualizationType(Sedan self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.Sedan_SetTireVisualizationType(self, vis)

    def Synchronize(self, time, driver_inputs, terrain):
        r"""Synchronize(Sedan self, double time, DriverInputs driver_inputs, ChTerrain terrain)"""
        return _vehicle.Sedan_Synchronize(self, time, driver_inputs, terrain)

    def Advance(self, step):
        r"""Advance(Sedan self, double step)"""
        return _vehicle.Sedan_Advance(self, step)

    def LogHardpointLocations(self):
        r"""LogHardpointLocations(Sedan self)"""
        return _vehicle.Sedan_LogHardpointLocations(self)

    def DebugLog(self, what):
        r"""DebugLog(Sedan self, int what)"""
        return _vehicle.Sedan_DebugLog(self, what)

# Register Sedan in _vehicle:
_vehicle.Sedan_swigregister(Sedan)

class Sedan_Vehicle(ChWheeledVehicle):
    r"""Proxy of C++ chrono::vehicle::sedan::Sedan_Vehicle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Sedan_Vehicle self, bool const fixed, chrono::vehicle::BrakeType brake_type, chrono::ChContactMethod contact_method=NSC, chrono::vehicle::CollisionType chassis_collision_type=NONE) -> Sedan_Vehicle
        __init__(Sedan_Vehicle self, ChSystem system, bool const fixed, chrono::vehicle::BrakeType brake_type, chrono::vehicle::CollisionType chassis_collision_type=NONE) -> Sedan_Vehicle
        """
        _vehicle.Sedan_Vehicle_swiginit(self, _vehicle.new_Sedan_Vehicle(*args))
    __swig_destroy__ = _vehicle.delete_Sedan_Vehicle

    def GetNumberAxles(self):
        r"""GetNumberAxles(Sedan_Vehicle self) -> int"""
        return _vehicle.Sedan_Vehicle_GetNumberAxles(self)

    def GetWheelbase(self):
        r"""GetWheelbase(Sedan_Vehicle self) -> double"""
        return _vehicle.Sedan_Vehicle_GetWheelbase(self)

    def GetMinTurningRadius(self):
        r"""GetMinTurningRadius(Sedan_Vehicle self) -> double"""
        return _vehicle.Sedan_Vehicle_GetMinTurningRadius(self)

    def GetMaxSteeringAngle(self):
        r"""GetMaxSteeringAngle(Sedan_Vehicle self) -> double"""
        return _vehicle.Sedan_Vehicle_GetMaxSteeringAngle(self)

    def SetInitWheelAngVel(self, omega):
        r"""SetInitWheelAngVel(Sedan_Vehicle self, vector_double omega)"""
        return _vehicle.Sedan_Vehicle_SetInitWheelAngVel(self, omega)

    def GetSpringForce(self, axle, side):
        r"""GetSpringForce(Sedan_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.Sedan_Vehicle_GetSpringForce(self, axle, side)

    def GetSpringLength(self, axle, side):
        r"""GetSpringLength(Sedan_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.Sedan_Vehicle_GetSpringLength(self, axle, side)

    def GetSpringDeformation(self, axle, side):
        r"""GetSpringDeformation(Sedan_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.Sedan_Vehicle_GetSpringDeformation(self, axle, side)

    def GetShockForce(self, axle, side):
        r"""GetShockForce(Sedan_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.Sedan_Vehicle_GetShockForce(self, axle, side)

    def GetShockLength(self, axle, side):
        r"""GetShockLength(Sedan_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.Sedan_Vehicle_GetShockLength(self, axle, side)

    def GetShockVelocity(self, axle, side):
        r"""GetShockVelocity(Sedan_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.Sedan_Vehicle_GetShockVelocity(self, axle, side)

    def Initialize(self, chassisPos, chassisFwdVel=0):
        r"""Initialize(Sedan_Vehicle self, ChCoordsysD chassisPos, double chassisFwdVel=0)"""
        return _vehicle.Sedan_Vehicle_Initialize(self, chassisPos, chassisFwdVel)

    def LogHardpointLocations(self):
        r"""LogHardpointLocations(Sedan_Vehicle self)"""
        return _vehicle.Sedan_Vehicle_LogHardpointLocations(self)

    def DebugLog(self, what):
        r"""DebugLog(Sedan_Vehicle self, int what)"""
        return _vehicle.Sedan_Vehicle_DebugLog(self, what)

# Register Sedan_Vehicle in _vehicle:
_vehicle.Sedan_Vehicle_swigregister(Sedan_Vehicle)

class CityBus(object):
    r"""Proxy of C++ chrono::vehicle::citybus::CityBus class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CityBus self) -> CityBus
        __init__(CityBus self, ChSystem system) -> CityBus
        """
        _vehicle.CityBus_swiginit(self, _vehicle.new_CityBus(*args))
    __swig_destroy__ = _vehicle.delete_CityBus

    def SetContactMethod(self, val):
        r"""SetContactMethod(CityBus self, chrono::ChContactMethod val)"""
        return _vehicle.CityBus_SetContactMethod(self, val)

    def SetChassisFixed(self, val):
        r"""SetChassisFixed(CityBus self, bool val)"""
        return _vehicle.CityBus_SetChassisFixed(self, val)

    def SetChassisCollisionType(self, val):
        r"""SetChassisCollisionType(CityBus self, chrono::vehicle::CollisionType val)"""
        return _vehicle.CityBus_SetChassisCollisionType(self, val)

    def SetBrakeType(self, brake_type):
        r"""SetBrakeType(CityBus self, chrono::vehicle::BrakeType brake_type)"""
        return _vehicle.CityBus_SetBrakeType(self, brake_type)

    def SetTireType(self, val):
        r"""SetTireType(CityBus self, chrono::vehicle::TireModelType val)"""
        return _vehicle.CityBus_SetTireType(self, val)

    def SetInitPosition(self, pos):
        r"""SetInitPosition(CityBus self, ChCoordsysD pos)"""
        return _vehicle.CityBus_SetInitPosition(self, pos)

    def SetInitFwdVel(self, fwdVel):
        r"""SetInitFwdVel(CityBus self, double fwdVel)"""
        return _vehicle.CityBus_SetInitFwdVel(self, fwdVel)

    def SetInitWheelAngVel(self, omega):
        r"""SetInitWheelAngVel(CityBus self, vector_double omega)"""
        return _vehicle.CityBus_SetInitWheelAngVel(self, omega)

    def SetTireStepSize(self, step_size):
        r"""SetTireStepSize(CityBus self, double step_size)"""
        return _vehicle.CityBus_SetTireStepSize(self, step_size)

    def EnableBrakeLocking(self, lock):
        r"""EnableBrakeLocking(CityBus self, bool lock)"""
        return _vehicle.CityBus_EnableBrakeLocking(self, lock)

    def GetSystem(self):
        r"""GetSystem(CityBus self) -> ChSystem"""
        return _vehicle.CityBus_GetSystem(self)

    def GetVehicle(self):
        r"""GetVehicle(CityBus self) -> ChWheeledVehicle"""
        return _vehicle.CityBus_GetVehicle(self)

    def GetChassis(self):
        r"""GetChassis(CityBus self) -> std::shared_ptr< chrono::vehicle::ChChassis >"""
        return _vehicle.CityBus_GetChassis(self)

    def GetChassisBody(self):
        r"""GetChassisBody(CityBus self) -> std::shared_ptr< chrono::ChBodyAuxRef >"""
        return _vehicle.CityBus_GetChassisBody(self)

    def Initialize(self):
        r"""Initialize(CityBus self)"""
        return _vehicle.CityBus_Initialize(self)

    def SetAerodynamicDrag(self, Cd, area, air_density):
        r"""SetAerodynamicDrag(CityBus self, double Cd, double area, double air_density)"""
        return _vehicle.CityBus_SetAerodynamicDrag(self, Cd, area, air_density)

    def SetChassisVisualizationType(self, vis):
        r"""SetChassisVisualizationType(CityBus self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.CityBus_SetChassisVisualizationType(self, vis)

    def SetSuspensionVisualizationType(self, vis):
        r"""SetSuspensionVisualizationType(CityBus self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.CityBus_SetSuspensionVisualizationType(self, vis)

    def SetSteeringVisualizationType(self, vis):
        r"""SetSteeringVisualizationType(CityBus self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.CityBus_SetSteeringVisualizationType(self, vis)

    def SetWheelVisualizationType(self, vis):
        r"""SetWheelVisualizationType(CityBus self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.CityBus_SetWheelVisualizationType(self, vis)

    def SetTireVisualizationType(self, vis):
        r"""SetTireVisualizationType(CityBus self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.CityBus_SetTireVisualizationType(self, vis)

    def Synchronize(self, time, driver_inputs, terrain):
        r"""Synchronize(CityBus self, double time, DriverInputs driver_inputs, ChTerrain terrain)"""
        return _vehicle.CityBus_Synchronize(self, time, driver_inputs, terrain)

    def Advance(self, step):
        r"""Advance(CityBus self, double step)"""
        return _vehicle.CityBus_Advance(self, step)

    def LogHardpointLocations(self):
        r"""LogHardpointLocations(CityBus self)"""
        return _vehicle.CityBus_LogHardpointLocations(self)

    def DebugLog(self, what):
        r"""DebugLog(CityBus self, int what)"""
        return _vehicle.CityBus_DebugLog(self, what)

# Register CityBus in _vehicle:
_vehicle.CityBus_swigregister(CityBus)

class CityBus_Vehicle(ChWheeledVehicle):
    r"""Proxy of C++ chrono::vehicle::citybus::CityBus_Vehicle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CityBus_Vehicle self, bool const fixed, chrono::vehicle::BrakeType brake_type, chrono::ChContactMethod contact_method=NSC, chrono::vehicle::CollisionType chassis_collision_type=NONE) -> CityBus_Vehicle
        __init__(CityBus_Vehicle self, ChSystem system, bool const fixed, chrono::vehicle::BrakeType brake_type, chrono::vehicle::CollisionType chassis_collision_type=NONE) -> CityBus_Vehicle
        """
        _vehicle.CityBus_Vehicle_swiginit(self, _vehicle.new_CityBus_Vehicle(*args))
    __swig_destroy__ = _vehicle.delete_CityBus_Vehicle

    def GetNumberAxles(self):
        r"""GetNumberAxles(CityBus_Vehicle self) -> int"""
        return _vehicle.CityBus_Vehicle_GetNumberAxles(self)

    def GetWheelbase(self):
        r"""GetWheelbase(CityBus_Vehicle self) -> double"""
        return _vehicle.CityBus_Vehicle_GetWheelbase(self)

    def GetMinTurningRadius(self):
        r"""GetMinTurningRadius(CityBus_Vehicle self) -> double"""
        return _vehicle.CityBus_Vehicle_GetMinTurningRadius(self)

    def GetMaxSteeringAngle(self):
        r"""GetMaxSteeringAngle(CityBus_Vehicle self) -> double"""
        return _vehicle.CityBus_Vehicle_GetMaxSteeringAngle(self)

    def SetInitWheelAngVel(self, omega):
        r"""SetInitWheelAngVel(CityBus_Vehicle self, vector_double omega)"""
        return _vehicle.CityBus_Vehicle_SetInitWheelAngVel(self, omega)

    def GetSpringForce(self, axle, side):
        r"""GetSpringForce(CityBus_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.CityBus_Vehicle_GetSpringForce(self, axle, side)

    def GetSpringLength(self, axle, side):
        r"""GetSpringLength(CityBus_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.CityBus_Vehicle_GetSpringLength(self, axle, side)

    def GetSpringDeformation(self, axle, side):
        r"""GetSpringDeformation(CityBus_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.CityBus_Vehicle_GetSpringDeformation(self, axle, side)

    def GetShockForce(self, axle, side):
        r"""GetShockForce(CityBus_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.CityBus_Vehicle_GetShockForce(self, axle, side)

    def GetShockLength(self, axle, side):
        r"""GetShockLength(CityBus_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.CityBus_Vehicle_GetShockLength(self, axle, side)

    def GetShockVelocity(self, axle, side):
        r"""GetShockVelocity(CityBus_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.CityBus_Vehicle_GetShockVelocity(self, axle, side)

    def Initialize(self, chassisPos, chassisFwdVel=0):
        r"""Initialize(CityBus_Vehicle self, ChCoordsysD chassisPos, double chassisFwdVel=0)"""
        return _vehicle.CityBus_Vehicle_Initialize(self, chassisPos, chassisFwdVel)

    def LogHardpointLocations(self):
        r"""LogHardpointLocations(CityBus_Vehicle self)"""
        return _vehicle.CityBus_Vehicle_LogHardpointLocations(self)

    def DebugLog(self, what):
        r"""DebugLog(CityBus_Vehicle self, int what)"""
        return _vehicle.CityBus_Vehicle_DebugLog(self, what)

# Register CityBus_Vehicle in _vehicle:
_vehicle.CityBus_Vehicle_swigregister(CityBus_Vehicle)

class MAN_5t(object):
    r"""Proxy of C++ chrono::vehicle::man::MAN_5t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MAN_5t self) -> MAN_5t
        __init__(MAN_5t self, ChSystem system) -> MAN_5t
        """
        _vehicle.MAN_5t_swiginit(self, _vehicle.new_MAN_5t(*args))
    __swig_destroy__ = _vehicle.delete_MAN_5t

    def SetContactMethod(self, val):
        r"""SetContactMethod(MAN_5t self, chrono::ChContactMethod val)"""
        return _vehicle.MAN_5t_SetContactMethod(self, val)

    def SetChassisFixed(self, val):
        r"""SetChassisFixed(MAN_5t self, bool val)"""
        return _vehicle.MAN_5t_SetChassisFixed(self, val)

    def SetChassisCollisionType(self, val):
        r"""SetChassisCollisionType(MAN_5t self, chrono::vehicle::CollisionType val)"""
        return _vehicle.MAN_5t_SetChassisCollisionType(self, val)

    def SetEngineType(self, val):
        r"""SetEngineType(MAN_5t self, chrono::vehicle::EngineModelType val)"""
        return _vehicle.MAN_5t_SetEngineType(self, val)

    def SetTransmissionType(self, val):
        r"""SetTransmissionType(MAN_5t self, chrono::vehicle::TransmissionModelType val)"""
        return _vehicle.MAN_5t_SetTransmissionType(self, val)

    def SetBrakeType(self, brake_type):
        r"""SetBrakeType(MAN_5t self, chrono::vehicle::BrakeType brake_type)"""
        return _vehicle.MAN_5t_SetBrakeType(self, brake_type)

    def SetTireType(self, val):
        r"""SetTireType(MAN_5t self, chrono::vehicle::TireModelType val)"""
        return _vehicle.MAN_5t_SetTireType(self, val)

    def SetInitPosition(self, pos):
        r"""SetInitPosition(MAN_5t self, ChCoordsysD pos)"""
        return _vehicle.MAN_5t_SetInitPosition(self, pos)

    def SetInitFwdVel(self, fwdVel):
        r"""SetInitFwdVel(MAN_5t self, double fwdVel)"""
        return _vehicle.MAN_5t_SetInitFwdVel(self, fwdVel)

    def SetInitWheelAngVel(self, omega):
        r"""SetInitWheelAngVel(MAN_5t self, vector_double omega)"""
        return _vehicle.MAN_5t_SetInitWheelAngVel(self, omega)

    def SetTireStepSize(self, step_size):
        r"""SetTireStepSize(MAN_5t self, double step_size)"""
        return _vehicle.MAN_5t_SetTireStepSize(self, step_size)

    def EnableBrakeLocking(self, lock):
        r"""EnableBrakeLocking(MAN_5t self, bool lock)"""
        return _vehicle.MAN_5t_EnableBrakeLocking(self, lock)

    def GetSystem(self):
        r"""GetSystem(MAN_5t self) -> ChSystem"""
        return _vehicle.MAN_5t_GetSystem(self)

    def GetVehicle(self):
        r"""GetVehicle(MAN_5t self) -> ChWheeledVehicle"""
        return _vehicle.MAN_5t_GetVehicle(self)

    def GetChassis(self):
        r"""GetChassis(MAN_5t self) -> std::shared_ptr< chrono::vehicle::ChChassis >"""
        return _vehicle.MAN_5t_GetChassis(self)

    def GetChassisBody(self):
        r"""GetChassisBody(MAN_5t self) -> std::shared_ptr< chrono::ChBodyAuxRef >"""
        return _vehicle.MAN_5t_GetChassisBody(self)

    def Initialize(self):
        r"""Initialize(MAN_5t self)"""
        return _vehicle.MAN_5t_Initialize(self)

    def SetAerodynamicDrag(self, Cd, area, air_density):
        r"""SetAerodynamicDrag(MAN_5t self, double Cd, double area, double air_density)"""
        return _vehicle.MAN_5t_SetAerodynamicDrag(self, Cd, area, air_density)

    def SetChassisVisualizationType(self, vis):
        r"""SetChassisVisualizationType(MAN_5t self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.MAN_5t_SetChassisVisualizationType(self, vis)

    def SetSuspensionVisualizationType(self, vis):
        r"""SetSuspensionVisualizationType(MAN_5t self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.MAN_5t_SetSuspensionVisualizationType(self, vis)

    def SetSteeringVisualizationType(self, vis):
        r"""SetSteeringVisualizationType(MAN_5t self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.MAN_5t_SetSteeringVisualizationType(self, vis)

    def SetWheelVisualizationType(self, vis):
        r"""SetWheelVisualizationType(MAN_5t self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.MAN_5t_SetWheelVisualizationType(self, vis)

    def SetTireVisualizationType(self, vis):
        r"""SetTireVisualizationType(MAN_5t self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.MAN_5t_SetTireVisualizationType(self, vis)

    def Synchronize(self, time, driver_inputs, terrain):
        r"""Synchronize(MAN_5t self, double time, DriverInputs driver_inputs, ChTerrain terrain)"""
        return _vehicle.MAN_5t_Synchronize(self, time, driver_inputs, terrain)

    def Advance(self, step):
        r"""Advance(MAN_5t self, double step)"""
        return _vehicle.MAN_5t_Advance(self, step)

    def LogHardpointLocations(self):
        r"""LogHardpointLocations(MAN_5t self)"""
        return _vehicle.MAN_5t_LogHardpointLocations(self)

    def DebugLog(self, what):
        r"""DebugLog(MAN_5t self, int what)"""
        return _vehicle.MAN_5t_DebugLog(self, what)

# Register MAN_5t in _vehicle:
_vehicle.MAN_5t_swigregister(MAN_5t)

class MAN_7t(object):
    r"""Proxy of C++ chrono::vehicle::man::MAN_7t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MAN_7t self) -> MAN_7t
        __init__(MAN_7t self, ChSystem system) -> MAN_7t
        """
        _vehicle.MAN_7t_swiginit(self, _vehicle.new_MAN_7t(*args))
    __swig_destroy__ = _vehicle.delete_MAN_7t

    def SetContactMethod(self, val):
        r"""SetContactMethod(MAN_7t self, chrono::ChContactMethod val)"""
        return _vehicle.MAN_7t_SetContactMethod(self, val)

    def SetChassisFixed(self, val):
        r"""SetChassisFixed(MAN_7t self, bool val)"""
        return _vehicle.MAN_7t_SetChassisFixed(self, val)

    def SetChassisCollisionType(self, val):
        r"""SetChassisCollisionType(MAN_7t self, chrono::vehicle::CollisionType val)"""
        return _vehicle.MAN_7t_SetChassisCollisionType(self, val)

    def SetDriveline6WD(self, val):
        r"""SetDriveline6WD(MAN_7t self, bool val)"""
        return _vehicle.MAN_7t_SetDriveline6WD(self, val)

    def SetEngineType(self, val):
        r"""SetEngineType(MAN_7t self, chrono::vehicle::EngineModelType val)"""
        return _vehicle.MAN_7t_SetEngineType(self, val)

    def SetTransmissionType(self, val):
        r"""SetTransmissionType(MAN_7t self, chrono::vehicle::TransmissionModelType val)"""
        return _vehicle.MAN_7t_SetTransmissionType(self, val)

    def SetBrakeType(self, brake_type):
        r"""SetBrakeType(MAN_7t self, chrono::vehicle::BrakeType brake_type)"""
        return _vehicle.MAN_7t_SetBrakeType(self, brake_type)

    def SetTireType(self, val):
        r"""SetTireType(MAN_7t self, chrono::vehicle::TireModelType val)"""
        return _vehicle.MAN_7t_SetTireType(self, val)

    def SetInitPosition(self, pos):
        r"""SetInitPosition(MAN_7t self, ChCoordsysD pos)"""
        return _vehicle.MAN_7t_SetInitPosition(self, pos)

    def SetInitFwdVel(self, fwdVel):
        r"""SetInitFwdVel(MAN_7t self, double fwdVel)"""
        return _vehicle.MAN_7t_SetInitFwdVel(self, fwdVel)

    def SetInitWheelAngVel(self, omega):
        r"""SetInitWheelAngVel(MAN_7t self, vector_double omega)"""
        return _vehicle.MAN_7t_SetInitWheelAngVel(self, omega)

    def SetTireStepSize(self, step_size):
        r"""SetTireStepSize(MAN_7t self, double step_size)"""
        return _vehicle.MAN_7t_SetTireStepSize(self, step_size)

    def EnableBrakeLocking(self, lock):
        r"""EnableBrakeLocking(MAN_7t self, bool lock)"""
        return _vehicle.MAN_7t_EnableBrakeLocking(self, lock)

    def GetSystem(self):
        r"""GetSystem(MAN_7t self) -> ChSystem"""
        return _vehicle.MAN_7t_GetSystem(self)

    def GetVehicle(self):
        r"""GetVehicle(MAN_7t self) -> ChWheeledVehicle"""
        return _vehicle.MAN_7t_GetVehicle(self)

    def GetChassis(self):
        r"""GetChassis(MAN_7t self) -> std::shared_ptr< chrono::vehicle::ChChassis >"""
        return _vehicle.MAN_7t_GetChassis(self)

    def GetChassisBody(self):
        r"""GetChassisBody(MAN_7t self) -> std::shared_ptr< chrono::ChBodyAuxRef >"""
        return _vehicle.MAN_7t_GetChassisBody(self)

    def Initialize(self):
        r"""Initialize(MAN_7t self)"""
        return _vehicle.MAN_7t_Initialize(self)

    def SetAerodynamicDrag(self, Cd, area, air_density):
        r"""SetAerodynamicDrag(MAN_7t self, double Cd, double area, double air_density)"""
        return _vehicle.MAN_7t_SetAerodynamicDrag(self, Cd, area, air_density)

    def SetChassisVisualizationType(self, vis):
        r"""SetChassisVisualizationType(MAN_7t self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.MAN_7t_SetChassisVisualizationType(self, vis)

    def SetSuspensionVisualizationType(self, vis):
        r"""SetSuspensionVisualizationType(MAN_7t self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.MAN_7t_SetSuspensionVisualizationType(self, vis)

    def SetSteeringVisualizationType(self, vis):
        r"""SetSteeringVisualizationType(MAN_7t self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.MAN_7t_SetSteeringVisualizationType(self, vis)

    def SetWheelVisualizationType(self, vis):
        r"""SetWheelVisualizationType(MAN_7t self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.MAN_7t_SetWheelVisualizationType(self, vis)

    def SetTireVisualizationType(self, vis):
        r"""SetTireVisualizationType(MAN_7t self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.MAN_7t_SetTireVisualizationType(self, vis)

    def Synchronize(self, time, driver_inputs, terrain):
        r"""Synchronize(MAN_7t self, double time, DriverInputs driver_inputs, ChTerrain terrain)"""
        return _vehicle.MAN_7t_Synchronize(self, time, driver_inputs, terrain)

    def Advance(self, step):
        r"""Advance(MAN_7t self, double step)"""
        return _vehicle.MAN_7t_Advance(self, step)

    def LogHardpointLocations(self):
        r"""LogHardpointLocations(MAN_7t self)"""
        return _vehicle.MAN_7t_LogHardpointLocations(self)

    def DebugLog(self, what):
        r"""DebugLog(MAN_7t self, int what)"""
        return _vehicle.MAN_7t_DebugLog(self, what)

# Register MAN_7t in _vehicle:
_vehicle.MAN_7t_swigregister(MAN_7t)

class MAN_10t(object):
    r"""Proxy of C++ chrono::vehicle::man::MAN_10t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MAN_10t self) -> MAN_10t
        __init__(MAN_10t self, ChSystem system) -> MAN_10t
        """
        _vehicle.MAN_10t_swiginit(self, _vehicle.new_MAN_10t(*args))
    __swig_destroy__ = _vehicle.delete_MAN_10t

    def SetContactMethod(self, val):
        r"""SetContactMethod(MAN_10t self, chrono::ChContactMethod val)"""
        return _vehicle.MAN_10t_SetContactMethod(self, val)

    def SetChassisFixed(self, val):
        r"""SetChassisFixed(MAN_10t self, bool val)"""
        return _vehicle.MAN_10t_SetChassisFixed(self, val)

    def SetChassisCollisionType(self, val):
        r"""SetChassisCollisionType(MAN_10t self, chrono::vehicle::CollisionType val)"""
        return _vehicle.MAN_10t_SetChassisCollisionType(self, val)

    def SetDriveline8WD(self, val):
        r"""SetDriveline8WD(MAN_10t self, bool val)"""
        return _vehicle.MAN_10t_SetDriveline8WD(self, val)

    def SetEngineType(self, val):
        r"""SetEngineType(MAN_10t self, chrono::vehicle::EngineModelType val)"""
        return _vehicle.MAN_10t_SetEngineType(self, val)

    def SetTransmissionType(self, val):
        r"""SetTransmissionType(MAN_10t self, chrono::vehicle::TransmissionModelType val)"""
        return _vehicle.MAN_10t_SetTransmissionType(self, val)

    def SetBrakeType(self, brake_type):
        r"""SetBrakeType(MAN_10t self, chrono::vehicle::BrakeType brake_type)"""
        return _vehicle.MAN_10t_SetBrakeType(self, brake_type)

    def SetTireType(self, val):
        r"""SetTireType(MAN_10t self, chrono::vehicle::TireModelType val)"""
        return _vehicle.MAN_10t_SetTireType(self, val)

    def SetInitPosition(self, pos):
        r"""SetInitPosition(MAN_10t self, ChCoordsysD pos)"""
        return _vehicle.MAN_10t_SetInitPosition(self, pos)

    def SetInitFwdVel(self, fwdVel):
        r"""SetInitFwdVel(MAN_10t self, double fwdVel)"""
        return _vehicle.MAN_10t_SetInitFwdVel(self, fwdVel)

    def SetInitWheelAngVel(self, omega):
        r"""SetInitWheelAngVel(MAN_10t self, vector_double omega)"""
        return _vehicle.MAN_10t_SetInitWheelAngVel(self, omega)

    def SetTireStepSize(self, step_size):
        r"""SetTireStepSize(MAN_10t self, double step_size)"""
        return _vehicle.MAN_10t_SetTireStepSize(self, step_size)

    def EnableBrakeLocking(self, lock):
        r"""EnableBrakeLocking(MAN_10t self, bool lock)"""
        return _vehicle.MAN_10t_EnableBrakeLocking(self, lock)

    def GetSystem(self):
        r"""GetSystem(MAN_10t self) -> ChSystem"""
        return _vehicle.MAN_10t_GetSystem(self)

    def GetVehicle(self):
        r"""GetVehicle(MAN_10t self) -> ChWheeledVehicle"""
        return _vehicle.MAN_10t_GetVehicle(self)

    def GetChassis(self):
        r"""GetChassis(MAN_10t self) -> std::shared_ptr< chrono::vehicle::ChChassis >"""
        return _vehicle.MAN_10t_GetChassis(self)

    def GetChassisBody(self):
        r"""GetChassisBody(MAN_10t self) -> std::shared_ptr< chrono::ChBodyAuxRef >"""
        return _vehicle.MAN_10t_GetChassisBody(self)

    def Initialize(self):
        r"""Initialize(MAN_10t self)"""
        return _vehicle.MAN_10t_Initialize(self)

    def SetAerodynamicDrag(self, Cd, area, air_density):
        r"""SetAerodynamicDrag(MAN_10t self, double Cd, double area, double air_density)"""
        return _vehicle.MAN_10t_SetAerodynamicDrag(self, Cd, area, air_density)

    def SetChassisVisualizationType(self, vis):
        r"""SetChassisVisualizationType(MAN_10t self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.MAN_10t_SetChassisVisualizationType(self, vis)

    def SetSuspensionVisualizationType(self, vis):
        r"""SetSuspensionVisualizationType(MAN_10t self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.MAN_10t_SetSuspensionVisualizationType(self, vis)

    def SetSteeringVisualizationType(self, vis):
        r"""SetSteeringVisualizationType(MAN_10t self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.MAN_10t_SetSteeringVisualizationType(self, vis)

    def SetWheelVisualizationType(self, vis):
        r"""SetWheelVisualizationType(MAN_10t self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.MAN_10t_SetWheelVisualizationType(self, vis)

    def SetTireVisualizationType(self, vis):
        r"""SetTireVisualizationType(MAN_10t self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.MAN_10t_SetTireVisualizationType(self, vis)

    def Synchronize(self, time, driver_inputs, terrain):
        r"""Synchronize(MAN_10t self, double time, DriverInputs driver_inputs, ChTerrain terrain)"""
        return _vehicle.MAN_10t_Synchronize(self, time, driver_inputs, terrain)

    def Advance(self, step):
        r"""Advance(MAN_10t self, double step)"""
        return _vehicle.MAN_10t_Advance(self, step)

    def LogHardpointLocations(self):
        r"""LogHardpointLocations(MAN_10t self)"""
        return _vehicle.MAN_10t_LogHardpointLocations(self)

    def DebugLog(self, what):
        r"""DebugLog(MAN_10t self, int what)"""
        return _vehicle.MAN_10t_DebugLog(self, what)

# Register MAN_10t in _vehicle:
_vehicle.MAN_10t_swigregister(MAN_10t)

class MAN_5t_Vehicle(ChWheeledVehicle):
    r"""Proxy of C++ chrono::vehicle::man::MAN_5t_Vehicle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MAN_5t_Vehicle self, bool const fixed, chrono::vehicle::BrakeType brake_type, chrono::ChContactMethod contact_method, chrono::vehicle::CollisionType chassis_collision_type=NONE) -> MAN_5t_Vehicle
        __init__(MAN_5t_Vehicle self, ChSystem system, bool const fixed, chrono::vehicle::BrakeType brake_type, chrono::vehicle::CollisionType chassis_collision_type=NONE) -> MAN_5t_Vehicle
        """
        _vehicle.MAN_5t_Vehicle_swiginit(self, _vehicle.new_MAN_5t_Vehicle(*args))
    __swig_destroy__ = _vehicle.delete_MAN_5t_Vehicle

    def GetNumberAxles(self):
        r"""GetNumberAxles(MAN_5t_Vehicle self) -> int"""
        return _vehicle.MAN_5t_Vehicle_GetNumberAxles(self)

    def GetWheelbase(self):
        r"""GetWheelbase(MAN_5t_Vehicle self) -> double"""
        return _vehicle.MAN_5t_Vehicle_GetWheelbase(self)

    def GetMinTurningRadius(self):
        r"""GetMinTurningRadius(MAN_5t_Vehicle self) -> double"""
        return _vehicle.MAN_5t_Vehicle_GetMinTurningRadius(self)

    def GetMaxSteeringAngle(self):
        r"""GetMaxSteeringAngle(MAN_5t_Vehicle self) -> double"""
        return _vehicle.MAN_5t_Vehicle_GetMaxSteeringAngle(self)

    def SetInitWheelAngVel(self, omega):
        r"""SetInitWheelAngVel(MAN_5t_Vehicle self, vector_double omega)"""
        return _vehicle.MAN_5t_Vehicle_SetInitWheelAngVel(self, omega)

    def GetSpringForce(self, axle, side):
        r"""GetSpringForce(MAN_5t_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.MAN_5t_Vehicle_GetSpringForce(self, axle, side)

    def GetSpringLength(self, axle, side):
        r"""GetSpringLength(MAN_5t_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.MAN_5t_Vehicle_GetSpringLength(self, axle, side)

    def GetSpringDeformation(self, axle, side):
        r"""GetSpringDeformation(MAN_5t_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.MAN_5t_Vehicle_GetSpringDeformation(self, axle, side)

    def GetShockForce(self, axle, side):
        r"""GetShockForce(MAN_5t_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.MAN_5t_Vehicle_GetShockForce(self, axle, side)

    def GetShockLength(self, axle, side):
        r"""GetShockLength(MAN_5t_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.MAN_5t_Vehicle_GetShockLength(self, axle, side)

    def GetShockVelocity(self, axle, side):
        r"""GetShockVelocity(MAN_5t_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.MAN_5t_Vehicle_GetShockVelocity(self, axle, side)

    def Initialize(self, chassisPos, chassisFwdVel=0):
        r"""Initialize(MAN_5t_Vehicle self, ChCoordsysD chassisPos, double chassisFwdVel=0)"""
        return _vehicle.MAN_5t_Vehicle_Initialize(self, chassisPos, chassisFwdVel)

    def LogHardpointLocations(self):
        r"""LogHardpointLocations(MAN_5t_Vehicle self)"""
        return _vehicle.MAN_5t_Vehicle_LogHardpointLocations(self)

    def DebugLog(self, what):
        r"""DebugLog(MAN_5t_Vehicle self, int what)"""
        return _vehicle.MAN_5t_Vehicle_DebugLog(self, what)

# Register MAN_5t_Vehicle in _vehicle:
_vehicle.MAN_5t_Vehicle_swigregister(MAN_5t_Vehicle)

class MAN_7t_Vehicle(ChWheeledVehicle):
    r"""Proxy of C++ chrono::vehicle::man::MAN_7t_Vehicle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MAN_7t_Vehicle self, bool const fixed, chrono::vehicle::BrakeType brake_type, chrono::ChContactMethod contact_method=NSC, chrono::vehicle::CollisionType chassis_collision_type=NONE, bool use_6WD_drivetrain=False) -> MAN_7t_Vehicle
        __init__(MAN_7t_Vehicle self, ChSystem system, bool const fixed, chrono::vehicle::BrakeType brake_type, chrono::vehicle::CollisionType chassis_collision_type=NONE, bool use_6WD_drivetrain=False) -> MAN_7t_Vehicle
        """
        _vehicle.MAN_7t_Vehicle_swiginit(self, _vehicle.new_MAN_7t_Vehicle(*args))
    __swig_destroy__ = _vehicle.delete_MAN_7t_Vehicle

    def GetNumberAxles(self):
        r"""GetNumberAxles(MAN_7t_Vehicle self) -> int"""
        return _vehicle.MAN_7t_Vehicle_GetNumberAxles(self)

    def GetWheelbase(self):
        r"""GetWheelbase(MAN_7t_Vehicle self) -> double"""
        return _vehicle.MAN_7t_Vehicle_GetWheelbase(self)

    def GetMinTurningRadius(self):
        r"""GetMinTurningRadius(MAN_7t_Vehicle self) -> double"""
        return _vehicle.MAN_7t_Vehicle_GetMinTurningRadius(self)

    def GetMaxSteeringAngle(self):
        r"""GetMaxSteeringAngle(MAN_7t_Vehicle self) -> double"""
        return _vehicle.MAN_7t_Vehicle_GetMaxSteeringAngle(self)

    def SetInitWheelAngVel(self, omega):
        r"""SetInitWheelAngVel(MAN_7t_Vehicle self, vector_double omega)"""
        return _vehicle.MAN_7t_Vehicle_SetInitWheelAngVel(self, omega)

    def GetSpringForce(self, axle, side):
        r"""GetSpringForce(MAN_7t_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.MAN_7t_Vehicle_GetSpringForce(self, axle, side)

    def GetSpringLength(self, axle, side):
        r"""GetSpringLength(MAN_7t_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.MAN_7t_Vehicle_GetSpringLength(self, axle, side)

    def GetSpringDeformation(self, axle, side):
        r"""GetSpringDeformation(MAN_7t_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.MAN_7t_Vehicle_GetSpringDeformation(self, axle, side)

    def GetShockForce(self, axle, side):
        r"""GetShockForce(MAN_7t_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.MAN_7t_Vehicle_GetShockForce(self, axle, side)

    def GetShockLength(self, axle, side):
        r"""GetShockLength(MAN_7t_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.MAN_7t_Vehicle_GetShockLength(self, axle, side)

    def GetShockVelocity(self, axle, side):
        r"""GetShockVelocity(MAN_7t_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.MAN_7t_Vehicle_GetShockVelocity(self, axle, side)

    def Initialize(self, chassisPos, chassisFwdVel=0):
        r"""Initialize(MAN_7t_Vehicle self, ChCoordsysD chassisPos, double chassisFwdVel=0)"""
        return _vehicle.MAN_7t_Vehicle_Initialize(self, chassisPos, chassisFwdVel)

    def LogHardpointLocations(self):
        r"""LogHardpointLocations(MAN_7t_Vehicle self)"""
        return _vehicle.MAN_7t_Vehicle_LogHardpointLocations(self)

    def DebugLog(self, what):
        r"""DebugLog(MAN_7t_Vehicle self, int what)"""
        return _vehicle.MAN_7t_Vehicle_DebugLog(self, what)

# Register MAN_7t_Vehicle in _vehicle:
_vehicle.MAN_7t_Vehicle_swigregister(MAN_7t_Vehicle)

class MAN_10t_Vehicle(ChWheeledVehicle):
    r"""Proxy of C++ chrono::vehicle::man::MAN_10t_Vehicle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MAN_10t_Vehicle self, bool const fixed, chrono::vehicle::BrakeType brake_type, chrono::ChContactMethod contact_method=NSC, chrono::vehicle::CollisionType chassis_collision_type=NONE, bool use_8WD_drivetrain=False) -> MAN_10t_Vehicle
        __init__(MAN_10t_Vehicle self, ChSystem system, bool const fixed, chrono::vehicle::BrakeType brake_type, chrono::vehicle::CollisionType chassis_collision_type=NONE, bool use_8WD_drivetrain=False) -> MAN_10t_Vehicle
        """
        _vehicle.MAN_10t_Vehicle_swiginit(self, _vehicle.new_MAN_10t_Vehicle(*args))
    __swig_destroy__ = _vehicle.delete_MAN_10t_Vehicle

    def GetNumberAxles(self):
        r"""GetNumberAxles(MAN_10t_Vehicle self) -> int"""
        return _vehicle.MAN_10t_Vehicle_GetNumberAxles(self)

    def GetWheelbase(self):
        r"""GetWheelbase(MAN_10t_Vehicle self) -> double"""
        return _vehicle.MAN_10t_Vehicle_GetWheelbase(self)

    def GetMinTurningRadius(self):
        r"""GetMinTurningRadius(MAN_10t_Vehicle self) -> double"""
        return _vehicle.MAN_10t_Vehicle_GetMinTurningRadius(self)

    def GetMaxSteeringAngle(self):
        r"""GetMaxSteeringAngle(MAN_10t_Vehicle self) -> double"""
        return _vehicle.MAN_10t_Vehicle_GetMaxSteeringAngle(self)

    def SetInitWheelAngVel(self, omega):
        r"""SetInitWheelAngVel(MAN_10t_Vehicle self, vector_double omega)"""
        return _vehicle.MAN_10t_Vehicle_SetInitWheelAngVel(self, omega)

    def GetSpringForce(self, axle, side):
        r"""GetSpringForce(MAN_10t_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.MAN_10t_Vehicle_GetSpringForce(self, axle, side)

    def GetSpringLength(self, axle, side):
        r"""GetSpringLength(MAN_10t_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.MAN_10t_Vehicle_GetSpringLength(self, axle, side)

    def GetSpringDeformation(self, axle, side):
        r"""GetSpringDeformation(MAN_10t_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.MAN_10t_Vehicle_GetSpringDeformation(self, axle, side)

    def GetShockForce(self, axle, side):
        r"""GetShockForce(MAN_10t_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.MAN_10t_Vehicle_GetShockForce(self, axle, side)

    def GetShockLength(self, axle, side):
        r"""GetShockLength(MAN_10t_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.MAN_10t_Vehicle_GetShockLength(self, axle, side)

    def GetShockVelocity(self, axle, side):
        r"""GetShockVelocity(MAN_10t_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.MAN_10t_Vehicle_GetShockVelocity(self, axle, side)

    def Initialize(self, chassisPos, chassisFwdVel=0):
        r"""Initialize(MAN_10t_Vehicle self, ChCoordsysD chassisPos, double chassisFwdVel=0)"""
        return _vehicle.MAN_10t_Vehicle_Initialize(self, chassisPos, chassisFwdVel)

    def LogHardpointLocations(self):
        r"""LogHardpointLocations(MAN_10t_Vehicle self)"""
        return _vehicle.MAN_10t_Vehicle_LogHardpointLocations(self)

    def DebugLog(self, what):
        r"""DebugLog(MAN_10t_Vehicle self, int what)"""
        return _vehicle.MAN_10t_Vehicle_DebugLog(self, what)

# Register MAN_10t_Vehicle in _vehicle:
_vehicle.MAN_10t_Vehicle_swigregister(MAN_10t_Vehicle)

class UAZBUS(object):
    r"""Proxy of C++ chrono::vehicle::uaz::UAZBUS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(UAZBUS self) -> UAZBUS
        __init__(UAZBUS self, ChSystem system) -> UAZBUS
        """
        _vehicle.UAZBUS_swiginit(self, _vehicle.new_UAZBUS(*args))
    __swig_destroy__ = _vehicle.delete_UAZBUS

    def SetContactMethod(self, val):
        r"""SetContactMethod(UAZBUS self, chrono::ChContactMethod val)"""
        return _vehicle.UAZBUS_SetContactMethod(self, val)

    def SetChassisFixed(self, val):
        r"""SetChassisFixed(UAZBUS self, bool val)"""
        return _vehicle.UAZBUS_SetChassisFixed(self, val)

    def SetChassisCollisionType(self, val):
        r"""SetChassisCollisionType(UAZBUS self, chrono::vehicle::CollisionType val)"""
        return _vehicle.UAZBUS_SetChassisCollisionType(self, val)

    def SetBrakeType(self, brake_type):
        r"""SetBrakeType(UAZBUS self, chrono::vehicle::BrakeType brake_type)"""
        return _vehicle.UAZBUS_SetBrakeType(self, brake_type)

    def SetEngineType(self, val):
        r"""SetEngineType(UAZBUS self, chrono::vehicle::EngineModelType val)"""
        return _vehicle.UAZBUS_SetEngineType(self, val)

    def SetTransmissionType(self, val):
        r"""SetTransmissionType(UAZBUS self, chrono::vehicle::TransmissionModelType val)"""
        return _vehicle.UAZBUS_SetTransmissionType(self, val)

    def SetTireType(self, val):
        r"""SetTireType(UAZBUS self, chrono::vehicle::TireModelType val)"""
        return _vehicle.UAZBUS_SetTireType(self, val)

    def SetInitPosition(self, pos):
        r"""SetInitPosition(UAZBUS self, ChCoordsysD pos)"""
        return _vehicle.UAZBUS_SetInitPosition(self, pos)

    def SetInitFwdVel(self, fwdVel):
        r"""SetInitFwdVel(UAZBUS self, double fwdVel)"""
        return _vehicle.UAZBUS_SetInitFwdVel(self, fwdVel)

    def SetInitWheelAngVel(self, omega):
        r"""SetInitWheelAngVel(UAZBUS self, vector_double omega)"""
        return _vehicle.UAZBUS_SetInitWheelAngVel(self, omega)

    def SetTireStepSize(self, step_size):
        r"""SetTireStepSize(UAZBUS self, double step_size)"""
        return _vehicle.UAZBUS_SetTireStepSize(self, step_size)

    def EnableBrakeLocking(self, lock):
        r"""EnableBrakeLocking(UAZBUS self, bool lock)"""
        return _vehicle.UAZBUS_EnableBrakeLocking(self, lock)

    def GetSystem(self):
        r"""GetSystem(UAZBUS self) -> ChSystem"""
        return _vehicle.UAZBUS_GetSystem(self)

    def GetVehicle(self):
        r"""GetVehicle(UAZBUS self) -> ChWheeledVehicle"""
        return _vehicle.UAZBUS_GetVehicle(self)

    def GetChassis(self):
        r"""GetChassis(UAZBUS self) -> std::shared_ptr< chrono::vehicle::ChChassis >"""
        return _vehicle.UAZBUS_GetChassis(self)

    def GetChassisBody(self):
        r"""GetChassisBody(UAZBUS self) -> std::shared_ptr< chrono::ChBodyAuxRef >"""
        return _vehicle.UAZBUS_GetChassisBody(self)

    def Initialize(self):
        r"""Initialize(UAZBUS self)"""
        return _vehicle.UAZBUS_Initialize(self)

    def LockAxleDifferential(self, axle, lock):
        r"""LockAxleDifferential(UAZBUS self, int axle, bool lock)"""
        return _vehicle.UAZBUS_LockAxleDifferential(self, axle, lock)

    def LockCentralDifferential(self, which, lock):
        r"""LockCentralDifferential(UAZBUS self, int which, bool lock)"""
        return _vehicle.UAZBUS_LockCentralDifferential(self, which, lock)

    def SetAerodynamicDrag(self, Cd, area, air_density):
        r"""SetAerodynamicDrag(UAZBUS self, double Cd, double area, double air_density)"""
        return _vehicle.UAZBUS_SetAerodynamicDrag(self, Cd, area, air_density)

    def SetChassisVisualizationType(self, vis):
        r"""SetChassisVisualizationType(UAZBUS self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.UAZBUS_SetChassisVisualizationType(self, vis)

    def SetSuspensionVisualizationType(self, vis):
        r"""SetSuspensionVisualizationType(UAZBUS self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.UAZBUS_SetSuspensionVisualizationType(self, vis)

    def SetSteeringVisualizationType(self, vis):
        r"""SetSteeringVisualizationType(UAZBUS self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.UAZBUS_SetSteeringVisualizationType(self, vis)

    def SetWheelVisualizationType(self, vis):
        r"""SetWheelVisualizationType(UAZBUS self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.UAZBUS_SetWheelVisualizationType(self, vis)

    def SetTireVisualizationType(self, vis):
        r"""SetTireVisualizationType(UAZBUS self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.UAZBUS_SetTireVisualizationType(self, vis)

    def Synchronize(self, time, driver_inputs, terrain):
        r"""Synchronize(UAZBUS self, double time, DriverInputs driver_inputs, ChTerrain terrain)"""
        return _vehicle.UAZBUS_Synchronize(self, time, driver_inputs, terrain)

    def Advance(self, step):
        r"""Advance(UAZBUS self, double step)"""
        return _vehicle.UAZBUS_Advance(self, step)

    def LogHardpointLocations(self):
        r"""LogHardpointLocations(UAZBUS self)"""
        return _vehicle.UAZBUS_LogHardpointLocations(self)

    def DebugLog(self, what):
        r"""DebugLog(UAZBUS self, int what)"""
        return _vehicle.UAZBUS_DebugLog(self, what)

# Register UAZBUS in _vehicle:
_vehicle.UAZBUS_swigregister(UAZBUS)

class UAZBUS_Vehicle(ChWheeledVehicle):
    r"""Proxy of C++ chrono::vehicle::uaz::UAZBUS_Vehicle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(UAZBUS_Vehicle self, bool const fixed, chrono::vehicle::BrakeType brake_type, chrono::vehicle::SteeringTypeWV steering_model, chrono::ChContactMethod contact_method=NSC, chrono::vehicle::CollisionType chassis_collision_type=NONE) -> UAZBUS_Vehicle
        __init__(UAZBUS_Vehicle self, ChSystem system, bool const fixed, chrono::vehicle::BrakeType brake_type, chrono::vehicle::SteeringTypeWV steering_model, chrono::vehicle::CollisionType chassis_collision_type=NONE) -> UAZBUS_Vehicle
        """
        _vehicle.UAZBUS_Vehicle_swiginit(self, _vehicle.new_UAZBUS_Vehicle(*args))
    __swig_destroy__ = _vehicle.delete_UAZBUS_Vehicle

    def GetNumberAxles(self):
        r"""GetNumberAxles(UAZBUS_Vehicle self) -> int"""
        return _vehicle.UAZBUS_Vehicle_GetNumberAxles(self)

    def GetWheelbase(self):
        r"""GetWheelbase(UAZBUS_Vehicle self) -> double"""
        return _vehicle.UAZBUS_Vehicle_GetWheelbase(self)

    def GetMinTurningRadius(self):
        r"""GetMinTurningRadius(UAZBUS_Vehicle self) -> double"""
        return _vehicle.UAZBUS_Vehicle_GetMinTurningRadius(self)

    def GetMaxSteeringAngle(self):
        r"""GetMaxSteeringAngle(UAZBUS_Vehicle self) -> double"""
        return _vehicle.UAZBUS_Vehicle_GetMaxSteeringAngle(self)

    def SetInitWheelAngVel(self, omega):
        r"""SetInitWheelAngVel(UAZBUS_Vehicle self, vector_double omega)"""
        return _vehicle.UAZBUS_Vehicle_SetInitWheelAngVel(self, omega)

    def GetSpringForce(self, axle, side):
        r"""GetSpringForce(UAZBUS_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.UAZBUS_Vehicle_GetSpringForce(self, axle, side)

    def GetSpringLength(self, axle, side):
        r"""GetSpringLength(UAZBUS_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.UAZBUS_Vehicle_GetSpringLength(self, axle, side)

    def GetSpringDeformation(self, axle, side):
        r"""GetSpringDeformation(UAZBUS_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.UAZBUS_Vehicle_GetSpringDeformation(self, axle, side)

    def GetShockForce(self, axle, side):
        r"""GetShockForce(UAZBUS_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.UAZBUS_Vehicle_GetShockForce(self, axle, side)

    def GetShockLength(self, axle, side):
        r"""GetShockLength(UAZBUS_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.UAZBUS_Vehicle_GetShockLength(self, axle, side)

    def GetShockVelocity(self, axle, side):
        r"""GetShockVelocity(UAZBUS_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.UAZBUS_Vehicle_GetShockVelocity(self, axle, side)

    def Initialize(self, chassisPos, chassisFwdVel=0):
        r"""Initialize(UAZBUS_Vehicle self, ChCoordsysD chassisPos, double chassisFwdVel=0)"""
        return _vehicle.UAZBUS_Vehicle_Initialize(self, chassisPos, chassisFwdVel)

    def LogHardpointLocations(self):
        r"""LogHardpointLocations(UAZBUS_Vehicle self)"""
        return _vehicle.UAZBUS_Vehicle_LogHardpointLocations(self)

    def DebugLog(self, what):
        r"""DebugLog(UAZBUS_Vehicle self, int what)"""
        return _vehicle.UAZBUS_Vehicle_DebugLog(self, what)

# Register UAZBUS_Vehicle in _vehicle:
_vehicle.UAZBUS_Vehicle_swigregister(UAZBUS_Vehicle)

class Gator(object):
    r"""Proxy of C++ chrono::vehicle::gator::Gator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Gator self) -> Gator
        __init__(Gator self, ChSystem system) -> Gator
        """
        _vehicle.Gator_swiginit(self, _vehicle.new_Gator(*args))
    __swig_destroy__ = _vehicle.delete_Gator

    def SetContactMethod(self, contact_method):
        r"""SetContactMethod(Gator self, chrono::ChContactMethod contact_method)"""
        return _vehicle.Gator_SetContactMethod(self, contact_method)

    def SetChassisFixed(self, val):
        r"""SetChassisFixed(Gator self, bool val)"""
        return _vehicle.Gator_SetChassisFixed(self, val)

    def SetChassisCollisionType(self, chassis_collision_type):
        r"""SetChassisCollisionType(Gator self, chrono::vehicle::CollisionType chassis_collision_type)"""
        return _vehicle.Gator_SetChassisCollisionType(self, chassis_collision_type)

    def SetBrakeType(self, brake_type):
        r"""SetBrakeType(Gator self, chrono::vehicle::BrakeType brake_type)"""
        return _vehicle.Gator_SetBrakeType(self, brake_type)

    def SetDrivelineType(self, driveline_type):
        r"""SetDrivelineType(Gator self, chrono::vehicle::DrivelineTypeWV driveline_type)"""
        return _vehicle.Gator_SetDrivelineType(self, driveline_type)

    def SetTireType(self, tire_type):
        r"""SetTireType(Gator self, chrono::vehicle::TireModelType tire_type)"""
        return _vehicle.Gator_SetTireType(self, tire_type)

    def SetTireCollisionType(self, collision_type):
        r"""SetTireCollisionType(Gator self, chrono::vehicle::ChTire::CollisionType collision_type)"""
        return _vehicle.Gator_SetTireCollisionType(self, collision_type)

    def SetInitPosition(self, pos):
        r"""SetInitPosition(Gator self, ChCoordsysD pos)"""
        return _vehicle.Gator_SetInitPosition(self, pos)

    def SetInitFwdVel(self, fwdVel):
        r"""SetInitFwdVel(Gator self, double fwdVel)"""
        return _vehicle.Gator_SetInitFwdVel(self, fwdVel)

    def SetInitWheelAngVel(self, omega):
        r"""SetInitWheelAngVel(Gator self, vector_double omega)"""
        return _vehicle.Gator_SetInitWheelAngVel(self, omega)

    def SetTireStepSize(self, step_size):
        r"""SetTireStepSize(Gator self, double step_size)"""
        return _vehicle.Gator_SetTireStepSize(self, step_size)

    def EnableBrakeLocking(self, lock):
        r"""EnableBrakeLocking(Gator self, bool lock)"""
        return _vehicle.Gator_EnableBrakeLocking(self, lock)

    def GetSystem(self):
        r"""GetSystem(Gator self) -> ChSystem"""
        return _vehicle.Gator_GetSystem(self)

    def GetVehicle(self):
        r"""GetVehicle(Gator self) -> ChWheeledVehicle"""
        return _vehicle.Gator_GetVehicle(self)

    def GetChassis(self):
        r"""GetChassis(Gator self) -> std::shared_ptr< chrono::vehicle::ChChassis >"""
        return _vehicle.Gator_GetChassis(self)

    def GetChassisBody(self):
        r"""GetChassisBody(Gator self) -> std::shared_ptr< chrono::ChBodyAuxRef >"""
        return _vehicle.Gator_GetChassisBody(self)

    def Initialize(self):
        r"""Initialize(Gator self)"""
        return _vehicle.Gator_Initialize(self)

    def LockAxleDifferential(self, axle, lock):
        r"""LockAxleDifferential(Gator self, int axle, bool lock)"""
        return _vehicle.Gator_LockAxleDifferential(self, axle, lock)

    def SetAerodynamicDrag(self, Cd, area, air_density):
        r"""SetAerodynamicDrag(Gator self, double Cd, double area, double air_density)"""
        return _vehicle.Gator_SetAerodynamicDrag(self, Cd, area, air_density)

    def SetChassisVisualizationType(self, vis):
        r"""SetChassisVisualizationType(Gator self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.Gator_SetChassisVisualizationType(self, vis)

    def SetSuspensionVisualizationType(self, vis):
        r"""SetSuspensionVisualizationType(Gator self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.Gator_SetSuspensionVisualizationType(self, vis)

    def SetSteeringVisualizationType(self, vis):
        r"""SetSteeringVisualizationType(Gator self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.Gator_SetSteeringVisualizationType(self, vis)

    def SetWheelVisualizationType(self, vis):
        r"""SetWheelVisualizationType(Gator self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.Gator_SetWheelVisualizationType(self, vis)

    def SetTireVisualizationType(self, vis):
        r"""SetTireVisualizationType(Gator self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.Gator_SetTireVisualizationType(self, vis)

    def Synchronize(self, time, driver_inputs, terrain):
        r"""Synchronize(Gator self, double time, DriverInputs driver_inputs, ChTerrain terrain)"""
        return _vehicle.Gator_Synchronize(self, time, driver_inputs, terrain)

    def Advance(self, step):
        r"""Advance(Gator self, double step)"""
        return _vehicle.Gator_Advance(self, step)

    def LogHardpointLocations(self):
        r"""LogHardpointLocations(Gator self)"""
        return _vehicle.Gator_LogHardpointLocations(self)

    def DebugLog(self, what):
        r"""DebugLog(Gator self, int what)"""
        return _vehicle.Gator_DebugLog(self, what)

# Register Gator in _vehicle:
_vehicle.Gator_swigregister(Gator)

class Gator_Vehicle(ChWheeledVehicle):
    r"""Proxy of C++ chrono::vehicle::gator::Gator_Vehicle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Gator_Vehicle self, bool const fixed, chrono::vehicle::DrivelineTypeWV driveline_type, chrono::vehicle::BrakeType brake_type, chrono::ChContactMethod contact_method, chrono::vehicle::CollisionType chassis_collision_type) -> Gator_Vehicle
        __init__(Gator_Vehicle self, ChSystem system, bool const fixed, chrono::vehicle::DrivelineTypeWV driveline_type, chrono::vehicle::BrakeType brake_type, chrono::vehicle::CollisionType chassis_collision_type) -> Gator_Vehicle
        """
        _vehicle.Gator_Vehicle_swiginit(self, _vehicle.new_Gator_Vehicle(*args))
    __swig_destroy__ = _vehicle.delete_Gator_Vehicle

    def GetNumberAxles(self):
        r"""GetNumberAxles(Gator_Vehicle self) -> int"""
        return _vehicle.Gator_Vehicle_GetNumberAxles(self)

    def GetWheelbase(self):
        r"""GetWheelbase(Gator_Vehicle self) -> double"""
        return _vehicle.Gator_Vehicle_GetWheelbase(self)

    def GetMinTurningRadius(self):
        r"""GetMinTurningRadius(Gator_Vehicle self) -> double"""
        return _vehicle.Gator_Vehicle_GetMinTurningRadius(self)

    def GetMaxSteeringAngle(self):
        r"""GetMaxSteeringAngle(Gator_Vehicle self) -> double"""
        return _vehicle.Gator_Vehicle_GetMaxSteeringAngle(self)

    def SetInitWheelAngVel(self, omega):
        r"""SetInitWheelAngVel(Gator_Vehicle self, vector_double omega)"""
        return _vehicle.Gator_Vehicle_SetInitWheelAngVel(self, omega)

    def GetShockForce(self, axle, side):
        r"""GetShockForce(Gator_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.Gator_Vehicle_GetShockForce(self, axle, side)

    def GetShockLength(self, axle, side):
        r"""GetShockLength(Gator_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.Gator_Vehicle_GetShockLength(self, axle, side)

    def GetShockVelocity(self, axle, side):
        r"""GetShockVelocity(Gator_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.Gator_Vehicle_GetShockVelocity(self, axle, side)

    def Initialize(self, chassisPos, chassisFwdVel=0):
        r"""Initialize(Gator_Vehicle self, ChCoordsysD chassisPos, double chassisFwdVel=0)"""
        return _vehicle.Gator_Vehicle_Initialize(self, chassisPos, chassisFwdVel)

    def LogHardpointLocations(self):
        r"""LogHardpointLocations(Gator_Vehicle self)"""
        return _vehicle.Gator_Vehicle_LogHardpointLocations(self)

    def DebugLog(self, what):
        r"""DebugLog(Gator_Vehicle self, int what)"""
        return _vehicle.Gator_Vehicle_DebugLog(self, what)

# Register Gator_Vehicle in _vehicle:
_vehicle.Gator_Vehicle_swigregister(Gator_Vehicle)

class RCCar(object):
    r"""Proxy of C++ chrono::vehicle::rccar::RCCar class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RCCar self) -> RCCar
        __init__(RCCar self, ChSystem system) -> RCCar
        """
        _vehicle.RCCar_swiginit(self, _vehicle.new_RCCar(*args))
    __swig_destroy__ = _vehicle.delete_RCCar

    def SetContactMethod(self, val):
        r"""SetContactMethod(RCCar self, chrono::ChContactMethod val)"""
        return _vehicle.RCCar_SetContactMethod(self, val)

    def SetChassisFixed(self, val):
        r"""SetChassisFixed(RCCar self, bool val)"""
        return _vehicle.RCCar_SetChassisFixed(self, val)

    def SetChassisCollisionType(self, val):
        r"""SetChassisCollisionType(RCCar self, chrono::vehicle::CollisionType val)"""
        return _vehicle.RCCar_SetChassisCollisionType(self, val)

    def SetTireType(self, val):
        r"""SetTireType(RCCar self, chrono::vehicle::TireModelType val)"""
        return _vehicle.RCCar_SetTireType(self, val)

    def SetInitPosition(self, pos):
        r"""SetInitPosition(RCCar self, ChCoordsysD pos)"""
        return _vehicle.RCCar_SetInitPosition(self, pos)

    def SetInitFwdVel(self, fwdVel):
        r"""SetInitFwdVel(RCCar self, double fwdVel)"""
        return _vehicle.RCCar_SetInitFwdVel(self, fwdVel)

    def SetInitWheelAngVel(self, omega):
        r"""SetInitWheelAngVel(RCCar self, vector_double omega)"""
        return _vehicle.RCCar_SetInitWheelAngVel(self, omega)

    def SetTireStepSize(self, step_size):
        r"""SetTireStepSize(RCCar self, double step_size)"""
        return _vehicle.RCCar_SetTireStepSize(self, step_size)

    def GetSystem(self):
        r"""GetSystem(RCCar self) -> ChSystem"""
        return _vehicle.RCCar_GetSystem(self)

    def GetVehicle(self):
        r"""GetVehicle(RCCar self) -> ChWheeledVehicle"""
        return _vehicle.RCCar_GetVehicle(self)

    def GetChassis(self):
        r"""GetChassis(RCCar self) -> std::shared_ptr< chrono::vehicle::ChChassis >"""
        return _vehicle.RCCar_GetChassis(self)

    def GetChassisBody(self):
        r"""GetChassisBody(RCCar self) -> std::shared_ptr< chrono::ChBodyAuxRef >"""
        return _vehicle.RCCar_GetChassisBody(self)

    def Initialize(self):
        r"""Initialize(RCCar self)"""
        return _vehicle.RCCar_Initialize(self)

    def LockAxleDifferential(self, axle, lock):
        r"""LockAxleDifferential(RCCar self, int axle, bool lock)"""
        return _vehicle.RCCar_LockAxleDifferential(self, axle, lock)

    def SetAerodynamicDrag(self, Cd, area, air_density):
        r"""SetAerodynamicDrag(RCCar self, double Cd, double area, double air_density)"""
        return _vehicle.RCCar_SetAerodynamicDrag(self, Cd, area, air_density)

    def SetChassisVisualizationType(self, vis):
        r"""SetChassisVisualizationType(RCCar self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.RCCar_SetChassisVisualizationType(self, vis)

    def SetSuspensionVisualizationType(self, vis):
        r"""SetSuspensionVisualizationType(RCCar self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.RCCar_SetSuspensionVisualizationType(self, vis)

    def SetSteeringVisualizationType(self, vis):
        r"""SetSteeringVisualizationType(RCCar self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.RCCar_SetSteeringVisualizationType(self, vis)

    def SetWheelVisualizationType(self, vis):
        r"""SetWheelVisualizationType(RCCar self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.RCCar_SetWheelVisualizationType(self, vis)

    def SetTireVisualizationType(self, vis):
        r"""SetTireVisualizationType(RCCar self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.RCCar_SetTireVisualizationType(self, vis)

    def SetMaxMotorVoltageRatio(self, voltage_ratio):
        r"""SetMaxMotorVoltageRatio(RCCar self, double voltage_ratio)"""
        return _vehicle.RCCar_SetMaxMotorVoltageRatio(self, voltage_ratio)

    def SetStallTorque(self, stall_torque):
        r"""SetStallTorque(RCCar self, double stall_torque)"""
        return _vehicle.RCCar_SetStallTorque(self, stall_torque)

    def SetTireRollingResistance(self, rolling_resistance):
        r"""SetTireRollingResistance(RCCar self, double rolling_resistance)"""
        return _vehicle.RCCar_SetTireRollingResistance(self, rolling_resistance)

    def Synchronize(self, time, driver_inputs, terrain):
        r"""Synchronize(RCCar self, double time, DriverInputs driver_inputs, ChTerrain terrain)"""
        return _vehicle.RCCar_Synchronize(self, time, driver_inputs, terrain)

    def Advance(self, step):
        r"""Advance(RCCar self, double step)"""
        return _vehicle.RCCar_Advance(self, step)

    def LogHardpointLocations(self):
        r"""LogHardpointLocations(RCCar self)"""
        return _vehicle.RCCar_LogHardpointLocations(self)

    def DebugLog(self, what):
        r"""DebugLog(RCCar self, int what)"""
        return _vehicle.RCCar_DebugLog(self, what)

# Register RCCar in _vehicle:
_vehicle.RCCar_swigregister(RCCar)

class RCCar_Vehicle(ChWheeledVehicle):
    r"""Proxy of C++ chrono::vehicle::rccar::RCCar_Vehicle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RCCar_Vehicle self, bool const fixed, chrono::ChContactMethod contact_method, chrono::vehicle::CollisionType chassis_collision_type) -> RCCar_Vehicle
        __init__(RCCar_Vehicle self, ChSystem system, bool const fixed, chrono::vehicle::CollisionType chassis_collision_type) -> RCCar_Vehicle
        """
        _vehicle.RCCar_Vehicle_swiginit(self, _vehicle.new_RCCar_Vehicle(*args))
    __swig_destroy__ = _vehicle.delete_RCCar_Vehicle

    def GetNumberAxles(self):
        r"""GetNumberAxles(RCCar_Vehicle self) -> int"""
        return _vehicle.RCCar_Vehicle_GetNumberAxles(self)

    def GetWheelbase(self):
        r"""GetWheelbase(RCCar_Vehicle self) -> double"""
        return _vehicle.RCCar_Vehicle_GetWheelbase(self)

    def GetMinTurningRadius(self):
        r"""GetMinTurningRadius(RCCar_Vehicle self) -> double"""
        return _vehicle.RCCar_Vehicle_GetMinTurningRadius(self)

    def GetMaxSteeringAngle(self):
        r"""GetMaxSteeringAngle(RCCar_Vehicle self) -> double"""
        return _vehicle.RCCar_Vehicle_GetMaxSteeringAngle(self)

    def SetInitWheelAngVel(self, omega):
        r"""SetInitWheelAngVel(RCCar_Vehicle self, vector_double omega)"""
        return _vehicle.RCCar_Vehicle_SetInitWheelAngVel(self, omega)

    def GetSpringForce(self, axle, side):
        r"""GetSpringForce(RCCar_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.RCCar_Vehicle_GetSpringForce(self, axle, side)

    def GetSpringLength(self, axle, side):
        r"""GetSpringLength(RCCar_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.RCCar_Vehicle_GetSpringLength(self, axle, side)

    def GetSpringDeformation(self, axle, side):
        r"""GetSpringDeformation(RCCar_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.RCCar_Vehicle_GetSpringDeformation(self, axle, side)

    def GetShockForce(self, axle, side):
        r"""GetShockForce(RCCar_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.RCCar_Vehicle_GetShockForce(self, axle, side)

    def GetShockLength(self, axle, side):
        r"""GetShockLength(RCCar_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.RCCar_Vehicle_GetShockLength(self, axle, side)

    def GetShockVelocity(self, axle, side):
        r"""GetShockVelocity(RCCar_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.RCCar_Vehicle_GetShockVelocity(self, axle, side)

    def Initialize(self, chassisPos, chassisFwdVel=0):
        r"""Initialize(RCCar_Vehicle self, ChCoordsysD chassisPos, double chassisFwdVel=0)"""
        return _vehicle.RCCar_Vehicle_Initialize(self, chassisPos, chassisFwdVel)

    def LogHardpointLocations(self):
        r"""LogHardpointLocations(RCCar_Vehicle self)"""
        return _vehicle.RCCar_Vehicle_LogHardpointLocations(self)

    def DebugLog(self, what):
        r"""DebugLog(RCCar_Vehicle self, int what)"""
        return _vehicle.RCCar_Vehicle_DebugLog(self, what)

# Register RCCar_Vehicle in _vehicle:
_vehicle.RCCar_Vehicle_swigregister(RCCar_Vehicle)

class FEDA(object):
    r"""Proxy of C++ chrono::vehicle::feda::FEDA class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DamperMode_FSD = _vehicle.FEDA_DamperMode_FSD
    
    DamperMode_PASSIVE_LOW = _vehicle.FEDA_DamperMode_PASSIVE_LOW
    
    DamperMode_PASSIVE_HIGH = _vehicle.FEDA_DamperMode_PASSIVE_HIGH
    

    def __init__(self, *args):
        r"""
        __init__(FEDA self) -> FEDA
        __init__(FEDA self, ChSystem system) -> FEDA
        """
        _vehicle.FEDA_swiginit(self, _vehicle.new_FEDA(*args))
    __swig_destroy__ = _vehicle.delete_FEDA

    def SetContactMethod(self, val):
        r"""SetContactMethod(FEDA self, chrono::ChContactMethod val)"""
        return _vehicle.FEDA_SetContactMethod(self, val)

    def SetChassisFixed(self, val):
        r"""SetChassisFixed(FEDA self, bool val)"""
        return _vehicle.FEDA_SetChassisFixed(self, val)

    def SetChassisCollisionType(self, val):
        r"""SetChassisCollisionType(FEDA self, chrono::vehicle::CollisionType val)"""
        return _vehicle.FEDA_SetChassisCollisionType(self, val)

    def SetBrakeType(self, brake_type):
        r"""SetBrakeType(FEDA self, chrono::vehicle::BrakeType brake_type)"""
        return _vehicle.FEDA_SetBrakeType(self, brake_type)

    def SetEngineType(self, val):
        r"""SetEngineType(FEDA self, chrono::vehicle::EngineModelType val)"""
        return _vehicle.FEDA_SetEngineType(self, val)

    def SetTransmissionType(self, val):
        r"""SetTransmissionType(FEDA self, chrono::vehicle::TransmissionModelType val)"""
        return _vehicle.FEDA_SetTransmissionType(self, val)

    def SetTireType(self, val):
        r"""SetTireType(FEDA self, chrono::vehicle::TireModelType val)"""
        return _vehicle.FEDA_SetTireType(self, val)

    def SetTireCollisionType(self, collType):
        r"""SetTireCollisionType(FEDA self, chrono::vehicle::ChTire::CollisionType collType)"""
        return _vehicle.FEDA_SetTireCollisionType(self, collType)

    def SetTirePressure(self, pressure):
        r"""SetTirePressure(FEDA self, double pressure)"""
        return _vehicle.FEDA_SetTirePressure(self, pressure)

    def SetInitPosition(self, pos):
        r"""SetInitPosition(FEDA self, ChCoordsysD pos)"""
        return _vehicle.FEDA_SetInitPosition(self, pos)

    def SetInitFwdVel(self, fwdVel):
        r"""SetInitFwdVel(FEDA self, double fwdVel)"""
        return _vehicle.FEDA_SetInitFwdVel(self, fwdVel)

    def SetInitWheelAngVel(self, omega):
        r"""SetInitWheelAngVel(FEDA self, vector_double omega)"""
        return _vehicle.FEDA_SetInitWheelAngVel(self, omega)

    def SetTireStepSize(self, step_size):
        r"""SetTireStepSize(FEDA self, double step_size)"""
        return _vehicle.FEDA_SetTireStepSize(self, step_size)

    def SetRideHeight_Low(self):
        r"""SetRideHeight_Low(FEDA self)"""
        return _vehicle.FEDA_SetRideHeight_Low(self)

    def SetRideHeight_OnRoad(self):
        r"""SetRideHeight_OnRoad(FEDA self)"""
        return _vehicle.FEDA_SetRideHeight_OnRoad(self)

    def SetRideHeight_ObstacleCrossing(self):
        r"""SetRideHeight_ObstacleCrossing(FEDA self)"""
        return _vehicle.FEDA_SetRideHeight_ObstacleCrossing(self)

    def SetDamperMode(self, *args):
        r"""SetDamperMode(FEDA self, chrono::vehicle::feda::FEDA::DamperMode theDamperMode=FSD)"""
        return _vehicle.FEDA_SetDamperMode(self, *args)

    def GetSystem(self):
        r"""GetSystem(FEDA self) -> ChSystem"""
        return _vehicle.FEDA_GetSystem(self)

    def GetVehicle(self):
        r"""GetVehicle(FEDA self) -> ChWheeledVehicle"""
        return _vehicle.FEDA_GetVehicle(self)

    def GetChassis(self):
        r"""GetChassis(FEDA self) -> std::shared_ptr< chrono::vehicle::ChChassis >"""
        return _vehicle.FEDA_GetChassis(self)

    def GetChassisBody(self):
        r"""GetChassisBody(FEDA self) -> std::shared_ptr< chrono::ChBodyAuxRef >"""
        return _vehicle.FEDA_GetChassisBody(self)

    def GetTransmission(self):
        r"""GetTransmission(FEDA self) -> std::shared_ptr< ChTransmission >"""
        return _vehicle.FEDA_GetTransmission(self)

    def Initialize(self):
        r"""Initialize(FEDA self)"""
        return _vehicle.FEDA_Initialize(self)

    def LockAxleDifferential(self, axle, lock):
        r"""LockAxleDifferential(FEDA self, int axle, bool lock)"""
        return _vehicle.FEDA_LockAxleDifferential(self, axle, lock)

    def SetAerodynamicDrag(self, Cd, area, air_density):
        r"""SetAerodynamicDrag(FEDA self, double Cd, double area, double air_density)"""
        return _vehicle.FEDA_SetAerodynamicDrag(self, Cd, area, air_density)

    def SetChassisVisualizationType(self, vis):
        r"""SetChassisVisualizationType(FEDA self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.FEDA_SetChassisVisualizationType(self, vis)

    def SetSuspensionVisualizationType(self, vis):
        r"""SetSuspensionVisualizationType(FEDA self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.FEDA_SetSuspensionVisualizationType(self, vis)

    def SetSteeringVisualizationType(self, vis):
        r"""SetSteeringVisualizationType(FEDA self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.FEDA_SetSteeringVisualizationType(self, vis)

    def SetWheelVisualizationType(self, vis):
        r"""SetWheelVisualizationType(FEDA self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.FEDA_SetWheelVisualizationType(self, vis)

    def SetTireVisualizationType(self, vis):
        r"""SetTireVisualizationType(FEDA self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.FEDA_SetTireVisualizationType(self, vis)

    def Synchronize(self, time, driver_inputs, terrain):
        r"""Synchronize(FEDA self, double time, DriverInputs driver_inputs, ChTerrain terrain)"""
        return _vehicle.FEDA_Synchronize(self, time, driver_inputs, terrain)

    def Advance(self, step):
        r"""Advance(FEDA self, double step)"""
        return _vehicle.FEDA_Advance(self, step)

    def LogHardpointLocations(self):
        r"""LogHardpointLocations(FEDA self)"""
        return _vehicle.FEDA_LogHardpointLocations(self)

    def DebugLog(self, what):
        r"""DebugLog(FEDA self, int what)"""
        return _vehicle.FEDA_DebugLog(self, what)

# Register FEDA in _vehicle:
_vehicle.FEDA_swigregister(FEDA)

class FEDA_Vehicle(ChWheeledVehicle):
    r"""Proxy of C++ chrono::vehicle::feda::FEDA_Vehicle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FEDA_Vehicle self, bool const fixed=False, chrono::vehicle::BrakeType brake_type=SIMPLE, chrono::ChContactMethod contact_method=NSC, chrono::vehicle::CollisionType chassis_collision_type=NONE, int ride_height=1, int damperMode=2) -> FEDA_Vehicle
        __init__(FEDA_Vehicle self, ChSystem system, bool const fixed=False, chrono::vehicle::BrakeType brake_type=SIMPLE, chrono::vehicle::CollisionType chassis_collision_type=NONE, int ride_height=1, int damperMode=2) -> FEDA_Vehicle
        """
        _vehicle.FEDA_Vehicle_swiginit(self, _vehicle.new_FEDA_Vehicle(*args))
    __swig_destroy__ = _vehicle.delete_FEDA_Vehicle

    def GetNumberAxles(self):
        r"""GetNumberAxles(FEDA_Vehicle self) -> int"""
        return _vehicle.FEDA_Vehicle_GetNumberAxles(self)

    def GetWheelbase(self):
        r"""GetWheelbase(FEDA_Vehicle self) -> double"""
        return _vehicle.FEDA_Vehicle_GetWheelbase(self)

    def GetMinTurningRadius(self):
        r"""GetMinTurningRadius(FEDA_Vehicle self) -> double"""
        return _vehicle.FEDA_Vehicle_GetMinTurningRadius(self)

    def GetMaxSteeringAngle(self):
        r"""GetMaxSteeringAngle(FEDA_Vehicle self) -> double"""
        return _vehicle.FEDA_Vehicle_GetMaxSteeringAngle(self)

    def SetInitWheelAngVel(self, omega):
        r"""SetInitWheelAngVel(FEDA_Vehicle self, vector_double omega)"""
        return _vehicle.FEDA_Vehicle_SetInitWheelAngVel(self, omega)

    def GetSpringForce(self, axle, side):
        r"""GetSpringForce(FEDA_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.FEDA_Vehicle_GetSpringForce(self, axle, side)

    def GetSpringLength(self, axle, side):
        r"""GetSpringLength(FEDA_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.FEDA_Vehicle_GetSpringLength(self, axle, side)

    def GetSpringDeformation(self, axle, side):
        r"""GetSpringDeformation(FEDA_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.FEDA_Vehicle_GetSpringDeformation(self, axle, side)

    def GetShockForce(self, axle, side):
        r"""GetShockForce(FEDA_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.FEDA_Vehicle_GetShockForce(self, axle, side)

    def GetShockLength(self, axle, side):
        r"""GetShockLength(FEDA_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.FEDA_Vehicle_GetShockLength(self, axle, side)

    def GetShockVelocity(self, axle, side):
        r"""GetShockVelocity(FEDA_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.FEDA_Vehicle_GetShockVelocity(self, axle, side)

    def SetRideHeight(self, theConfig):
        r"""SetRideHeight(FEDA_Vehicle self, int theConfig)"""
        return _vehicle.FEDA_Vehicle_SetRideHeight(self, theConfig)

    def Initialize(self, chassisPos, chassisFwdVel=0):
        r"""Initialize(FEDA_Vehicle self, ChCoordsysD chassisPos, double chassisFwdVel=0)"""
        return _vehicle.FEDA_Vehicle_Initialize(self, chassisPos, chassisFwdVel)

    def LogHardpointLocations(self):
        r"""LogHardpointLocations(FEDA_Vehicle self)"""
        return _vehicle.FEDA_Vehicle_LogHardpointLocations(self)

    def DebugLog(self, what):
        r"""DebugLog(FEDA_Vehicle self, int what)"""
        return _vehicle.FEDA_Vehicle_DebugLog(self, what)

# Register FEDA_Vehicle in _vehicle:
_vehicle.FEDA_Vehicle_swigregister(FEDA_Vehicle)

class M113(object):
    r"""Proxy of C++ chrono::vehicle::m113::M113 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(M113 self) -> M113
        __init__(M113 self, ChSystem system) -> M113
        """
        _vehicle.M113_swiginit(self, _vehicle.new_M113(*args))
    __swig_destroy__ = _vehicle.delete_M113

    def SetContactMethod(self, val):
        r"""SetContactMethod(M113 self, chrono::ChContactMethod val)"""
        return _vehicle.M113_SetContactMethod(self, val)

    def SetChassisFixed(self, val):
        r"""SetChassisFixed(M113 self, bool val)"""
        return _vehicle.M113_SetChassisFixed(self, val)

    def SetChassisCollisionType(self, val):
        r"""SetChassisCollisionType(M113 self, chrono::vehicle::CollisionType val)"""
        return _vehicle.M113_SetChassisCollisionType(self, val)

    def SetWheelCollisionType(self, roadwheel_as_cylinder, idler_as_cylinder):
        r"""SetWheelCollisionType(M113 self, bool roadwheel_as_cylinder, bool idler_as_cylinder)"""
        return _vehicle.M113_SetWheelCollisionType(self, roadwheel_as_cylinder, idler_as_cylinder)

    def SetBrakeType(self, brake_type):
        r"""SetBrakeType(M113 self, chrono::vehicle::BrakeType brake_type)"""
        return _vehicle.M113_SetBrakeType(self, brake_type)

    def SetTrackShoeType(self, shoe_type):
        r"""SetTrackShoeType(M113 self, chrono::vehicle::TrackShoeType shoe_type)"""
        return _vehicle.M113_SetTrackShoeType(self, shoe_type)

    def SetDoublePinTrackShoeType(self, topology):
        r"""SetDoublePinTrackShoeType(M113 self, chrono::vehicle::DoublePinTrackShoeType topology)"""
        return _vehicle.M113_SetDoublePinTrackShoeType(self, topology)

    def SetANCFTrackShoeElementType(self, type):
        r"""SetANCFTrackShoeElementType(M113 self, chrono::vehicle::ChTrackShoeBandANCF::ElementType type)"""
        return _vehicle.M113_SetANCFTrackShoeElementType(self, type)

    def SetANCFTrackShoeNumElements(self, num_elements_length, num_elements_width):
        r"""SetANCFTrackShoeNumElements(M113 self, int num_elements_length, int num_elements_width)"""
        return _vehicle.M113_SetANCFTrackShoeNumElements(self, num_elements_length, num_elements_width)

    def SetANCFTrackShoeCurvatureConstraints(self, constrain_curvature):
        r"""SetANCFTrackShoeCurvatureConstraints(M113 self, bool constrain_curvature)"""
        return _vehicle.M113_SetANCFTrackShoeCurvatureConstraints(self, constrain_curvature)

    def SetDrivelineType(self, driveline_type):
        r"""SetDrivelineType(M113 self, chrono::vehicle::DrivelineTypeTV driveline_type)"""
        return _vehicle.M113_SetDrivelineType(self, driveline_type)

    def SetEngineType(self, val):
        r"""SetEngineType(M113 self, chrono::vehicle::EngineModelType val)"""
        return _vehicle.M113_SetEngineType(self, val)

    def SetTransmissionType(self, val):
        r"""SetTransmissionType(M113 self, chrono::vehicle::TransmissionModelType val)"""
        return _vehicle.M113_SetTransmissionType(self, val)

    def SetTrackBushings(self, val):
        r"""SetTrackBushings(M113 self, bool val)"""
        return _vehicle.M113_SetTrackBushings(self, val)

    def SetSuspensionBushings(self, val):
        r"""SetSuspensionBushings(M113 self, bool val)"""
        return _vehicle.M113_SetSuspensionBushings(self, val)

    def SetTrackStiffness(self, val):
        r"""SetTrackStiffness(M113 self, bool val)"""
        return _vehicle.M113_SetTrackStiffness(self, val)

    def SetInitPosition(self, pos):
        r"""SetInitPosition(M113 self, ChCoordsysD pos)"""
        return _vehicle.M113_SetInitPosition(self, pos)

    def SetInitFwdVel(self, fwdVel):
        r"""SetInitFwdVel(M113 self, double fwdVel)"""
        return _vehicle.M113_SetInitFwdVel(self, fwdVel)

    def SetCollisionSystemType(self, collsys_type):
        r"""SetCollisionSystemType(M113 self, chrono::collision::ChCollisionSystemType collsys_type)"""
        return _vehicle.M113_SetCollisionSystemType(self, collsys_type)

    def SetGyrationMode(self, val):
        r"""SetGyrationMode(M113 self, bool val)"""
        return _vehicle.M113_SetGyrationMode(self, val)

    def SetAerodynamicDrag(self, Cd, area, air_density):
        r"""SetAerodynamicDrag(M113 self, double Cd, double area, double air_density)"""
        return _vehicle.M113_SetAerodynamicDrag(self, Cd, area, air_density)

    def CreateTrack(self, val):
        r"""CreateTrack(M113 self, bool val)"""
        return _vehicle.M113_CreateTrack(self, val)

    def GetSystem(self):
        r"""GetSystem(M113 self) -> ChSystem"""
        return _vehicle.M113_GetSystem(self)

    def GetVehicle(self):
        r"""GetVehicle(M113 self) -> ChTrackedVehicle"""
        return _vehicle.M113_GetVehicle(self)

    def GetChassis(self):
        r"""GetChassis(M113 self) -> std::shared_ptr< chrono::vehicle::ChChassis >"""
        return _vehicle.M113_GetChassis(self)

    def GetChassisBody(self):
        r"""GetChassisBody(M113 self) -> std::shared_ptr< chrono::ChBodyAuxRef >"""
        return _vehicle.M113_GetChassisBody(self)

    def GetDriveline(self):
        r"""GetDriveline(M113 self) -> std::shared_ptr< chrono::vehicle::ChDrivelineTV >"""
        return _vehicle.M113_GetDriveline(self)

    def Initialize(self):
        r"""Initialize(M113 self)"""
        return _vehicle.M113_Initialize(self)

    def SetChassisVisualizationType(self, vis):
        r"""SetChassisVisualizationType(M113 self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.M113_SetChassisVisualizationType(self, vis)

    def SetSprocketVisualizationType(self, vis):
        r"""SetSprocketVisualizationType(M113 self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.M113_SetSprocketVisualizationType(self, vis)

    def SetIdlerVisualizationType(self, vis):
        r"""SetIdlerVisualizationType(M113 self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.M113_SetIdlerVisualizationType(self, vis)

    def SetSuspensionVisualizationType(self, vis):
        r"""SetSuspensionVisualizationType(M113 self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.M113_SetSuspensionVisualizationType(self, vis)

    def SetIdlerWheelVisualizationType(self, vis):
        r"""SetIdlerWheelVisualizationType(M113 self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.M113_SetIdlerWheelVisualizationType(self, vis)

    def SetRoadWheelVisualizationType(self, vis):
        r"""SetRoadWheelVisualizationType(M113 self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.M113_SetRoadWheelVisualizationType(self, vis)

    def SetTrackShoeVisualizationType(self, vis):
        r"""SetTrackShoeVisualizationType(M113 self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.M113_SetTrackShoeVisualizationType(self, vis)

    def Synchronize(self, time, driver_inputs, shoe_forces_left, shoe_forces_right):
        r"""Synchronize(M113 self, double time, DriverInputs driver_inputs, TerrainForces shoe_forces_left, TerrainForces shoe_forces_right)"""
        return _vehicle.M113_Synchronize(self, time, driver_inputs, shoe_forces_left, shoe_forces_right)

    def Advance(self, step):
        r"""Advance(M113 self, double step)"""
        return _vehicle.M113_Advance(self, step)

    def LogConstraintViolations(self):
        r"""LogConstraintViolations(M113 self)"""
        return _vehicle.M113_LogConstraintViolations(self)

# Register M113 in _vehicle:
_vehicle.M113_swigregister(M113)

class M113_Vehicle(ChTrackedVehicle):
    r"""Proxy of C++ chrono::vehicle::m113::M113_Vehicle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_M113_Vehicle

    def CreateTrack(self, val):
        r"""CreateTrack(M113_Vehicle self, bool val)"""
        return _vehicle.M113_Vehicle_CreateTrack(self, val)

    def Initialize(self, chassisPos, chassisFwdVel=0):
        r"""Initialize(M113_Vehicle self, ChCoordsysD chassisPos, double chassisFwdVel=0)"""
        return _vehicle.M113_Vehicle_Initialize(self, chassisPos, chassisFwdVel)

# Register M113_Vehicle in _vehicle:
_vehicle.M113_Vehicle_swigregister(M113_Vehicle)

class M113_Vehicle_SinglePin(M113_Vehicle):
    r"""Proxy of C++ chrono::vehicle::m113::M113_Vehicle_SinglePin class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(M113_Vehicle_SinglePin self, bool fixed, chrono::vehicle::DrivelineTypeTV driveline_type, chrono::vehicle::BrakeType brake_type, bool use_track_bushings, bool use_suspension_bushings, bool use_track_RSDA, chrono::ChContactMethod contact_method=NSC, chrono::vehicle::CollisionType chassis_collision_type=NONE) -> M113_Vehicle_SinglePin
        __init__(M113_Vehicle_SinglePin self, bool fixed, chrono::vehicle::DrivelineTypeTV driveline_type, chrono::vehicle::BrakeType brake_type, bool use_track_bushings, bool use_suspension_bushings, bool use_track_RSDA, ChSystem system, chrono::vehicle::CollisionType chassis_collision_type=NONE) -> M113_Vehicle_SinglePin
        """
        _vehicle.M113_Vehicle_SinglePin_swiginit(self, _vehicle.new_M113_Vehicle_SinglePin(*args))
    __swig_destroy__ = _vehicle.delete_M113_Vehicle_SinglePin

# Register M113_Vehicle_SinglePin in _vehicle:
_vehicle.M113_Vehicle_SinglePin_swigregister(M113_Vehicle_SinglePin)

class M113_Vehicle_DoublePin(M113_Vehicle):
    r"""Proxy of C++ chrono::vehicle::m113::M113_Vehicle_DoublePin class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(M113_Vehicle_DoublePin self, bool fixed, chrono::vehicle::DoublePinTrackShoeType shoe_topology, chrono::vehicle::DrivelineTypeTV driveline_type, chrono::vehicle::BrakeType brake_type, bool use_track_bushings, bool use_suspension_bushings, bool use_track_RSDA, chrono::ChContactMethod contact_method=NSC, chrono::vehicle::CollisionType chassis_collision_type=NONE) -> M113_Vehicle_DoublePin
        __init__(M113_Vehicle_DoublePin self, bool fixed, chrono::vehicle::DoublePinTrackShoeType shoe_topology, chrono::vehicle::DrivelineTypeTV driveline_type, chrono::vehicle::BrakeType brake_type, bool use_track_bushings, bool use_suspension_bushings, bool use_track_RSDA, ChSystem system, chrono::vehicle::CollisionType chassis_collision_type=NONE) -> M113_Vehicle_DoublePin
        """
        _vehicle.M113_Vehicle_DoublePin_swiginit(self, _vehicle.new_M113_Vehicle_DoublePin(*args))
    __swig_destroy__ = _vehicle.delete_M113_Vehicle_DoublePin

# Register M113_Vehicle_DoublePin in _vehicle:
_vehicle.M113_Vehicle_DoublePin_swigregister(M113_Vehicle_DoublePin)

class M113_Vehicle_BandBushing(M113_Vehicle):
    r"""Proxy of C++ chrono::vehicle::m113::M113_Vehicle_BandBushing class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(M113_Vehicle_BandBushing self, bool fixed, chrono::vehicle::DrivelineTypeTV driveline_type, chrono::vehicle::BrakeType brake_type, bool use_suspension_bushings, chrono::ChContactMethod contact_method=NSC, chrono::vehicle::CollisionType chassis_collision_type=NONE) -> M113_Vehicle_BandBushing
        __init__(M113_Vehicle_BandBushing self, bool fixed, chrono::vehicle::DrivelineTypeTV driveline_type, chrono::vehicle::BrakeType brake_type, bool use_suspension_bushings, ChSystem system, chrono::vehicle::CollisionType chassis_collision_type=NONE) -> M113_Vehicle_BandBushing
        """
        _vehicle.M113_Vehicle_BandBushing_swiginit(self, _vehicle.new_M113_Vehicle_BandBushing(*args))
    __swig_destroy__ = _vehicle.delete_M113_Vehicle_BandBushing

# Register M113_Vehicle_BandBushing in _vehicle:
_vehicle.M113_Vehicle_BandBushing_swigregister(M113_Vehicle_BandBushing)

class M113_Vehicle_BandANCF(M113_Vehicle):
    r"""Proxy of C++ chrono::vehicle::m113::M113_Vehicle_BandANCF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(M113_Vehicle_BandANCF self, bool fixed, chrono::vehicle::ChTrackShoeBandANCF::ElementType element_type, bool constrain_curvature, int num_elements_length, int num_elements_width, chrono::vehicle::DrivelineTypeTV driveline_type, chrono::vehicle::BrakeType brake_type, bool use_suspension_bushings, chrono::ChContactMethod contact_method=NSC, chrono::vehicle::CollisionType chassis_collision_type=NONE) -> M113_Vehicle_BandANCF
        __init__(M113_Vehicle_BandANCF self, bool fixed, chrono::vehicle::ChTrackShoeBandANCF::ElementType element_type, bool constrain_curvature, int num_elements_length, int num_elements_width, chrono::vehicle::DrivelineTypeTV driveline_type, chrono::vehicle::BrakeType brake_type, bool use_suspension_bushings, ChSystem system, chrono::vehicle::CollisionType chassis_collision_type=NONE) -> M113_Vehicle_BandANCF
        """
        _vehicle.M113_Vehicle_BandANCF_swiginit(self, _vehicle.new_M113_Vehicle_BandANCF(*args))
    __swig_destroy__ = _vehicle.delete_M113_Vehicle_BandANCF

# Register M113_Vehicle_BandANCF in _vehicle:
_vehicle.M113_Vehicle_BandANCF_swigregister(M113_Vehicle_BandANCF)


def StraightLinePath(start, end, num_intermediate=0):
    r"""StraightLinePath(ChVectorD start, ChVectorD end, unsigned int num_intermediate=0) -> std::shared_ptr< chrono::ChBezierCurve >"""
    return _vehicle.StraightLinePath(start, end, num_intermediate)

def CirclePath(start, radius, run, left_turn=True, num_turns=1):
    r"""CirclePath(ChVectorD start, double radius, double run, bool left_turn=True, int num_turns=1) -> std::shared_ptr< chrono::ChBezierCurve >"""
    return _vehicle.CirclePath(start, radius, run, left_turn, num_turns)

def DoubleLaneChangePath(start, ramp, width, length, run, left_turn=True):
    r"""DoubleLaneChangePath(ChVectorD start, double ramp, double width, double length, double run, bool left_turn=True) -> std::shared_ptr< chrono::ChBezierCurve >"""
    return _vehicle.DoubleLaneChangePath(start, ramp, width, length, run, left_turn)

def ReadFileJSON(filename, d):
    r"""ReadFileJSON(std::string const & filename, rapidjson::Document & d)"""
    return _vehicle.ReadFileJSON(filename, d)

def ReadVectorJSON(a):
    r"""ReadVectorJSON(rapidjson::Value const & a) -> ChVectorD"""
    return _vehicle.ReadVectorJSON(a)

def ReadQuaternionJSON(a):
    r"""ReadQuaternionJSON(rapidjson::Value const & a) -> ChQuaternionD"""
    return _vehicle.ReadQuaternionJSON(a)

def ReadCoordinateSystemJSON(a):
    r"""ReadCoordinateSystemJSON(rapidjson::Value const & a) -> ChCoordsysD"""
    return _vehicle.ReadCoordinateSystemJSON(a)

def ReadColorJSON(a):
    r"""ReadColorJSON(rapidjson::Value const & a) -> ChColor"""
    return _vehicle.ReadColorJSON(a)

def ReadMaterialInfoJSON(mat):
    r"""ReadMaterialInfoJSON(rapidjson::Value const & mat) -> ChContactMaterialData"""
    return _vehicle.ReadMaterialInfoJSON(mat)

def ReadBushingDataJSON(bd):
    r"""ReadBushingDataJSON(rapidjson::Value const & bd) -> std::shared_ptr< ChVehicleBushingData >"""
    return _vehicle.ReadBushingDataJSON(bd)

def ReadVehicleJointTypeJSON(a):
    r"""ReadVehicleJointTypeJSON(rapidjson::Value const & a) -> ChVehicleJoint::Type"""
    return _vehicle.ReadVehicleJointTypeJSON(a)

def ReadVehicleGeometryJSON(d):
    r"""ReadVehicleGeometryJSON(rapidjson::Value const & d) -> ChVehicleGeometry"""
    return _vehicle.ReadVehicleGeometryJSON(d)

def ReadTSDAGeometryJSON(d):
    r"""ReadTSDAGeometryJSON(rapidjson::Value const & d) -> ChTSDAGeometry"""
    return _vehicle.ReadTSDAGeometryJSON(d)

def ReadTSDAFunctorJSON(td, free_length):
    r"""ReadTSDAFunctorJSON(rapidjson::Value const & td, double & free_length) -> std::shared_ptr< chrono::ChLinkTSDA::ForceFunctor >"""
    return _vehicle.ReadTSDAFunctorJSON(td, free_length)

def ReadRSDAFunctorJSON(td, free_angle):
    r"""ReadRSDAFunctorJSON(rapidjson::Value const & td, double & free_angle) -> std::shared_ptr< chrono::ChLinkRSDA::TorqueFunctor >"""
    return _vehicle.ReadRSDAFunctorJSON(td, free_angle)

def ReadChassisJSON(filename):
    r"""ReadChassisJSON(std::string const & filename) -> std::shared_ptr< chrono::vehicle::ChChassis >"""
    return _vehicle.ReadChassisJSON(filename)

def ReadChassisRearJSON(filename):
    r"""ReadChassisRearJSON(std::string const & filename) -> std::shared_ptr< chrono::vehicle::ChChassisRear >"""
    return _vehicle.ReadChassisRearJSON(filename)

def ReadChassisConnectorJSON(filename):
    r"""ReadChassisConnectorJSON(std::string const & filename) -> std::shared_ptr< chrono::vehicle::ChChassisConnector >"""
    return _vehicle.ReadChassisConnectorJSON(filename)

def ReadEngineJSON(filename):
    r"""ReadEngineJSON(std::string const & filename) -> std::shared_ptr< ChEngine >"""
    return _vehicle.ReadEngineJSON(filename)

def ReadTransmissionJSON(filename):
    r"""ReadTransmissionJSON(std::string const & filename) -> std::shared_ptr< ChTransmission >"""
    return _vehicle.ReadTransmissionJSON(filename)

def ReadSuspensionJSON(filename):
    r"""ReadSuspensionJSON(std::string const & filename) -> std::shared_ptr< chrono::vehicle::ChSuspension >"""
    return _vehicle.ReadSuspensionJSON(filename)

def ReadSteeringJSON(filename):
    r"""ReadSteeringJSON(std::string const & filename) -> std::shared_ptr< chrono::vehicle::ChSteering >"""
    return _vehicle.ReadSteeringJSON(filename)

def ReadDrivelineWVJSON(filename):
    r"""ReadDrivelineWVJSON(std::string const & filename) -> std::shared_ptr< chrono::vehicle::ChDrivelineWV >"""
    return _vehicle.ReadDrivelineWVJSON(filename)

def ReadAntirollbarJSON(filename):
    r"""ReadAntirollbarJSON(std::string const & filename) -> std::shared_ptr< ChAntirollBar >"""
    return _vehicle.ReadAntirollbarJSON(filename)

def ReadWheelJSON(filename):
    r"""ReadWheelJSON(std::string const & filename) -> std::shared_ptr< chrono::vehicle::ChWheel >"""
    return _vehicle.ReadWheelJSON(filename)

def ReadSubchassisJSON(filename):
    r"""ReadSubchassisJSON(std::string const & filename) -> std::shared_ptr< chrono::vehicle::ChSubchassis >"""
    return _vehicle.ReadSubchassisJSON(filename)

def ReadBrakeJSON(filename):
    r"""ReadBrakeJSON(std::string const & filename) -> std::shared_ptr< chrono::vehicle::ChBrake >"""
    return _vehicle.ReadBrakeJSON(filename)

def ReadTireJSON(filename):
    r"""ReadTireJSON(std::string const & filename) -> std::shared_ptr< chrono::vehicle::ChTire >"""
    return _vehicle.ReadTireJSON(filename)

def ReadTrackAssemblyJSON(filename):
    r"""ReadTrackAssemblyJSON(std::string const & filename) -> std::shared_ptr< chrono::vehicle::ChTrackAssembly >"""
    return _vehicle.ReadTrackAssemblyJSON(filename)

def ReadDrivelineTVJSON(filename):
    r"""ReadDrivelineTVJSON(std::string const & filename) -> std::shared_ptr< chrono::vehicle::ChDrivelineTV >"""
    return _vehicle.ReadDrivelineTVJSON(filename)

def ReadTrackBrakeJSON(filename):
    r"""ReadTrackBrakeJSON(std::string const & filename) -> std::shared_ptr< chrono::vehicle::ChTrackBrake >"""
    return _vehicle.ReadTrackBrakeJSON(filename)

def ReadIdlerJSON(filename):
    r"""ReadIdlerJSON(std::string const & filename) -> std::shared_ptr< chrono::vehicle::ChIdler >"""
    return _vehicle.ReadIdlerJSON(filename)

def ReadTrackSuspensionJSON(filename, has_shock, lock_arm):
    r"""ReadTrackSuspensionJSON(std::string const & filename, bool has_shock, bool lock_arm) -> std::shared_ptr< chrono::vehicle::ChTrackSuspension >"""
    return _vehicle.ReadTrackSuspensionJSON(filename, has_shock, lock_arm)

def ReadTrackWheelJSON(filename):
    r"""ReadTrackWheelJSON(std::string const & filename) -> std::shared_ptr< chrono::vehicle::ChTrackWheel >"""
    return _vehicle.ReadTrackWheelJSON(filename)
class ChMapData(object):
    r"""Proxy of C++ chrono::vehicle::ChMapData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChMapData self) -> ChMapData"""
        _vehicle.ChMapData_swiginit(self, _vehicle.new_ChMapData())

    def Read(self, a):
        r"""Read(ChMapData self, rapidjson::Value const & a)"""
        return _vehicle.ChMapData_Read(self, a)

    def Set(self, *args):
        r"""
        Set(ChMapData self, ChFunction_Recorder & map, double x_factor=1, double y_factor=1)
        Set(ChMapData self, std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > & vec, double x_factor=1, double y_factor=1)
        """
        return _vehicle.ChMapData_Set(self, *args)
    __swig_destroy__ = _vehicle.delete_ChMapData

# Register ChMapData in _vehicle:
_vehicle.ChMapData_swigregister(ChMapData)


def CastToChDoubleWishbone(in_obj):
    r"""CastToChDoubleWishbone(std::shared_ptr< chrono::vehicle::ChSuspension > in_obj) -> std::shared_ptr< chrono::vehicle::ChDoubleWishbone >"""
    return _vehicle.CastToChDoubleWishbone(in_obj)

def CastToChMacPhersonStrut(in_obj):
    r"""CastToChMacPhersonStrut(std::shared_ptr< chrono::vehicle::ChSuspension > in_obj) -> std::shared_ptr< chrono::vehicle::ChMacPhersonStrut >"""
    return _vehicle.CastToChMacPhersonStrut(in_obj)

def CastToChLeafspringAxle(in_obj):
    r"""CastToChLeafspringAxle(std::shared_ptr< chrono::vehicle::ChSuspension > in_obj) -> std::shared_ptr< chrono::vehicle::ChLeafspringAxle >"""
    return _vehicle.CastToChLeafspringAxle(in_obj)

def CastToChHendricksonPRIMAXX(in_obj):
    r"""CastToChHendricksonPRIMAXX(std::shared_ptr< chrono::vehicle::ChSuspension > in_obj) -> std::shared_ptr< chrono::vehicle::ChHendricksonPRIMAXX >"""
    return _vehicle.CastToChHendricksonPRIMAXX(in_obj)

def CastToChDoubleWishboneReduced(in_obj):
    r"""CastToChDoubleWishboneReduced(std::shared_ptr< chrono::vehicle::ChSuspension > in_obj) -> std::shared_ptr< chrono::vehicle::ChDoubleWishboneReduced >"""
    return _vehicle.CastToChDoubleWishboneReduced(in_obj)

def CastToChMultiLink(in_obj):
    r"""CastToChMultiLink(std::shared_ptr< chrono::vehicle::ChSuspension > in_obj) -> std::shared_ptr< chrono::vehicle::ChMultiLink >"""
    return _vehicle.CastToChMultiLink(in_obj)

def CastToChRigidPinnedAxle(in_obj):
    r"""CastToChRigidPinnedAxle(std::shared_ptr< chrono::vehicle::ChSuspension > in_obj) -> std::shared_ptr< chrono::vehicle::ChRigidPinnedAxle >"""
    return _vehicle.CastToChRigidPinnedAxle(in_obj)

def CastToChSemiTrailingArm(in_obj):
    r"""CastToChSemiTrailingArm(std::shared_ptr< chrono::vehicle::ChSuspension > in_obj) -> std::shared_ptr< chrono::vehicle::ChSemiTrailingArm >"""
    return _vehicle.CastToChSemiTrailingArm(in_obj)

def CastToChRigidSuspension(in_obj):
    r"""CastToChRigidSuspension(std::shared_ptr< chrono::vehicle::ChSuspension > in_obj) -> std::shared_ptr< chrono::vehicle::ChRigidSuspension >"""
    return _vehicle.CastToChRigidSuspension(in_obj)

def CastToChSolidAxle(in_obj):
    r"""CastToChSolidAxle(std::shared_ptr< chrono::vehicle::ChSuspension > in_obj) -> std::shared_ptr< chrono::vehicle::ChSolidAxle >"""
    return _vehicle.CastToChSolidAxle(in_obj)

def CastToChThreeLinkIRS(in_obj):
    r"""CastToChThreeLinkIRS(std::shared_ptr< chrono::vehicle::ChSuspension > in_obj) -> std::shared_ptr< chrono::vehicle::ChThreeLinkIRS >"""
    return _vehicle.CastToChThreeLinkIRS(in_obj)

def CastToChToeBarLeafspringAxle(in_obj):
    r"""CastToChToeBarLeafspringAxle(std::shared_ptr< chrono::vehicle::ChSuspension > in_obj) -> std::shared_ptr< chrono::vehicle::ChToeBarLeafspringAxle >"""
    return _vehicle.CastToChToeBarLeafspringAxle(in_obj)

def CastToChSolidBellcrankThreeLinkAxle(in_obj):
    r"""CastToChSolidBellcrankThreeLinkAxle(std::shared_ptr< chrono::vehicle::ChSuspension > in_obj) -> std::shared_ptr< chrono::vehicle::ChSolidBellcrankThreeLinkAxle >"""
    return _vehicle.CastToChSolidBellcrankThreeLinkAxle(in_obj)

def CastToChSolidThreeLinkAxle(in_obj):
    r"""CastToChSolidThreeLinkAxle(std::shared_ptr< chrono::vehicle::ChSuspension > in_obj) -> std::shared_ptr< chrono::vehicle::ChSolidThreeLinkAxle >"""
    return _vehicle.CastToChSolidThreeLinkAxle(in_obj)

def CastToChSingleWishbone(in_obj):
    r"""CastToChSingleWishbone(std::shared_ptr< chrono::vehicle::ChSuspension > in_obj) -> std::shared_ptr< chrono::vehicle::ChSingleWishbone >"""
    return _vehicle.CastToChSingleWishbone(in_obj)

def CastToChPitmanArm(in_obj):
    r"""CastToChPitmanArm(std::shared_ptr< chrono::vehicle::ChSteering > in_obj) -> std::shared_ptr< chrono::vehicle::ChPitmanArm >"""
    return _vehicle.CastToChPitmanArm(in_obj)

def CastToChPitmanArmShafts(in_obj):
    r"""CastToChPitmanArmShafts(std::shared_ptr< chrono::vehicle::ChSteering > in_obj) -> std::shared_ptr< chrono::vehicle::ChPitmanArmShafts >"""
    return _vehicle.CastToChPitmanArmShafts(in_obj)

def CastToChRackPinion(in_obj):
    r"""CastToChRackPinion(std::shared_ptr< chrono::vehicle::ChSteering > in_obj) -> std::shared_ptr< chrono::vehicle::ChRackPinion >"""
    return _vehicle.CastToChRackPinion(in_obj)

def CastToChRotaryArm(in_obj):
    r"""CastToChRotaryArm(std::shared_ptr< chrono::vehicle::ChSteering > in_obj) -> std::shared_ptr< chrono::vehicle::ChRotaryArm >"""
    return _vehicle.CastToChRotaryArm(in_obj)

def CastToChRigidChassis(in_obj):
    r"""CastToChRigidChassis(std::shared_ptr< chrono::vehicle::ChChassis > in_obj) -> std::shared_ptr< chrono::vehicle::ChRigidChassis >"""
    return _vehicle.CastToChRigidChassis(in_obj)

def CastToChRigidChassisRear(in_obj):
    r"""CastToChRigidChassisRear(std::shared_ptr< chrono::vehicle::ChChassisRear > in_obj) -> std::shared_ptr< chrono::vehicle::ChRigidChassisRear >"""
    return _vehicle.CastToChRigidChassisRear(in_obj)

def CastToChChassisConnectorArticulated(in_obj):
    r"""CastToChChassisConnectorArticulated(std::shared_ptr< chrono::vehicle::ChChassisConnector > in_obj) -> std::shared_ptr< chrono::vehicle::ChChassisConnectorArticulated >"""
    return _vehicle.CastToChChassisConnectorArticulated(in_obj)

def CastToChChassisConnectorHitch(in_obj):
    r"""CastToChChassisConnectorHitch(std::shared_ptr< chrono::vehicle::ChChassisConnector > in_obj) -> std::shared_ptr< chrono::vehicle::ChChassisConnectorHitch >"""
    return _vehicle.CastToChChassisConnectorHitch(in_obj)

def CastToChChassisConnectorTorsion(in_obj):
    r"""CastToChChassisConnectorTorsion(std::shared_ptr< chrono::vehicle::ChChassisConnector > in_obj) -> std::shared_ptr< chrono::vehicle::ChChassisConnectorTorsion >"""
    return _vehicle.CastToChChassisConnectorTorsion(in_obj)

def CastToChBalancer(in_obj):
    r"""CastToChBalancer(std::shared_ptr< chrono::vehicle::ChSubchassis > in_obj) -> std::shared_ptr< chrono::vehicle::ChBalancer >"""
    return _vehicle.CastToChBalancer(in_obj)

def CastToChTMeasyTire(in_obj):
    r"""CastToChTMeasyTire(std::shared_ptr< chrono::vehicle::ChTire > in_obj) -> std::shared_ptr< chrono::vehicle::ChTMeasyTire >"""
    return _vehicle.CastToChTMeasyTire(in_obj)

def CastToChRigidTire(in_obj):
    r"""CastToChRigidTire(std::shared_ptr< chrono::vehicle::ChTire > in_obj) -> std::shared_ptr< chrono::vehicle::ChRigidTire >"""
    return _vehicle.CastToChRigidTire(in_obj)

def CastToChReissnerTire(in_obj):
    r"""CastToChReissnerTire(std::shared_ptr< chrono::vehicle::ChTire > in_obj) -> std::shared_ptr< chrono::vehicle::ChReissnerTire >"""
    return _vehicle.CastToChReissnerTire(in_obj)

def CastToChPac89Tire(in_obj):
    r"""CastToChPac89Tire(std::shared_ptr< chrono::vehicle::ChTire > in_obj) -> std::shared_ptr< chrono::vehicle::ChPac89Tire >"""
    return _vehicle.CastToChPac89Tire(in_obj)

def CastToChPac02Tire(in_obj):
    r"""CastToChPac02Tire(std::shared_ptr< chrono::vehicle::ChTire > in_obj) -> std::shared_ptr< chrono::vehicle::ChPac02Tire >"""
    return _vehicle.CastToChPac02Tire(in_obj)

def CastToChFialaTire(in_obj):
    r"""CastToChFialaTire(std::shared_ptr< chrono::vehicle::ChTire > in_obj) -> std::shared_ptr< chrono::vehicle::ChFialaTire >"""
    return _vehicle.CastToChFialaTire(in_obj)

def CastToChEngineSimple(in_obj):
    r"""CastToChEngineSimple(std::shared_ptr< chrono::vehicle::ChEngine > in_obj) -> std::shared_ptr< chrono::vehicle::ChEngineSimple >"""
    return _vehicle.CastToChEngineSimple(in_obj)

def CastToChEngineSimpleMap(in_obj):
    r"""CastToChEngineSimpleMap(std::shared_ptr< chrono::vehicle::ChEngine > in_obj) -> std::shared_ptr< chrono::vehicle::ChEngineSimpleMap >"""
    return _vehicle.CastToChEngineSimpleMap(in_obj)

def CastToChEngineShafts(in_obj):
    r"""CastToChEngineShafts(std::shared_ptr< chrono::vehicle::ChEngine > in_obj) -> std::shared_ptr< chrono::vehicle::ChEngineShafts >"""
    return _vehicle.CastToChEngineShafts(in_obj)

def CastToEngineSimple(in_obj):
    r"""CastToEngineSimple(std::shared_ptr< chrono::vehicle::ChEngine > in_obj) -> std::shared_ptr< chrono::vehicle::EngineSimple >"""
    return _vehicle.CastToEngineSimple(in_obj)

def CastToEngineSimpleMap(in_obj):
    r"""CastToEngineSimpleMap(std::shared_ptr< chrono::vehicle::ChEngine > in_obj) -> std::shared_ptr< chrono::vehicle::EngineSimpleMap >"""
    return _vehicle.CastToEngineSimpleMap(in_obj)

def CastToEngineShafts(in_obj):
    r"""CastToEngineShafts(std::shared_ptr< chrono::vehicle::ChEngine > in_obj) -> std::shared_ptr< chrono::vehicle::EngineShafts >"""
    return _vehicle.CastToEngineShafts(in_obj)

def CastToChAutomaticTransmissionSimpleMap(in_obj):
    r"""CastToChAutomaticTransmissionSimpleMap(std::shared_ptr< chrono::vehicle::ChTransmission > in_obj) -> std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionSimpleMap >"""
    return _vehicle.CastToChAutomaticTransmissionSimpleMap(in_obj)

def CastToChAutomaticTransmissionShafts(in_obj):
    r"""CastToChAutomaticTransmissionShafts(std::shared_ptr< chrono::vehicle::ChTransmission > in_obj) -> std::shared_ptr< chrono::vehicle::ChAutomaticTransmissionShafts >"""
    return _vehicle.CastToChAutomaticTransmissionShafts(in_obj)

def CastToAutomaticTransmissionSimpleMap(in_obj):
    r"""CastToAutomaticTransmissionSimpleMap(std::shared_ptr< chrono::vehicle::ChTransmission > in_obj) -> std::shared_ptr< chrono::vehicle::AutomaticTransmissionSimpleMap >"""
    return _vehicle.CastToAutomaticTransmissionSimpleMap(in_obj)

def CastToAutomaticTransmissionShafts(in_obj):
    r"""CastToAutomaticTransmissionShafts(std::shared_ptr< chrono::vehicle::ChTransmission > in_obj) -> std::shared_ptr< chrono::vehicle::AutomaticTransmissionShafts >"""
    return _vehicle.CastToAutomaticTransmissionShafts(in_obj)

def CastToChDrivelineWV(in_obj):
    r"""CastToChDrivelineWV(std::shared_ptr< chrono::vehicle::ChDriveline > in_obj) -> std::shared_ptr< chrono::vehicle::ChDrivelineWV >"""
    return _vehicle.CastToChDrivelineWV(in_obj)

def CastToChShaftsDriveline2WD(in_obj):
    r"""CastToChShaftsDriveline2WD(std::shared_ptr< chrono::vehicle::ChDriveline > in_obj) -> std::shared_ptr< chrono::vehicle::ChShaftsDriveline2WD >"""
    return _vehicle.CastToChShaftsDriveline2WD(in_obj)

def CastToChShaftsDriveline4WD(in_obj):
    r"""CastToChShaftsDriveline4WD(std::shared_ptr< chrono::vehicle::ChDriveline > in_obj) -> std::shared_ptr< chrono::vehicle::ChShaftsDriveline4WD >"""
    return _vehicle.CastToChShaftsDriveline4WD(in_obj)

def CastToChSimpleDriveline(in_obj):
    r"""CastToChSimpleDriveline(std::shared_ptr< chrono::vehicle::ChDriveline > in_obj) -> std::shared_ptr< chrono::vehicle::ChSimpleDriveline >"""
    return _vehicle.CastToChSimpleDriveline(in_obj)

def CastToChSimpleDrivelineXWD(in_obj):
    r"""CastToChSimpleDrivelineXWD(std::shared_ptr< chrono::vehicle::ChDriveline > in_obj) -> std::shared_ptr< chrono::vehicle::ChSimpleDrivelineXWD >"""
    return _vehicle.CastToChSimpleDrivelineXWD(in_obj)


