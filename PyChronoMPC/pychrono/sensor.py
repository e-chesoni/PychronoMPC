# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _sensor
else:
    import _sensor

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SHARED_PTR_DISOWN = _sensor.SHARED_PTR_DISOWN

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sensor.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _sensor.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _sensor.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _sensor.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _sensor.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _sensor.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _sensor.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _sensor.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _sensor.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _sensor.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _sensor.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _sensor.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _sensor.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _sensor.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _sensor.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _sensor.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _sensor.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _sensor:
_sensor.SwigPyIterator_swigregister(SwigPyIterator)

class int_ptr(object):
    r"""Proxy of C++ int_ptr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(int_ptr self) -> int_ptr"""
        _sensor.int_ptr_swiginit(self, _sensor.new_int_ptr())
    __swig_destroy__ = _sensor.delete_int_ptr

    def assign(self, value):
        r"""assign(int_ptr self, int value)"""
        return _sensor.int_ptr_assign(self, value)

    def value(self):
        r"""value(int_ptr self) -> int"""
        return _sensor.int_ptr_value(self)

    def cast(self):
        r"""cast(int_ptr self) -> int *"""
        return _sensor.int_ptr_cast(self)

    @staticmethod
    def frompointer(t):
        r"""frompointer(int * t) -> int_ptr"""
        return _sensor.int_ptr_frompointer(t)

# Register int_ptr in _sensor:
_sensor.int_ptr_swigregister(int_ptr)

def int_ptr_frompointer(t):
    r"""int_ptr_frompointer(int * t) -> int_ptr"""
    return _sensor.int_ptr_frompointer(t)

class double_ptr(object):
    r"""Proxy of C++ double_ptr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(double_ptr self) -> double_ptr"""
        _sensor.double_ptr_swiginit(self, _sensor.new_double_ptr())
    __swig_destroy__ = _sensor.delete_double_ptr

    def assign(self, value):
        r"""assign(double_ptr self, double value)"""
        return _sensor.double_ptr_assign(self, value)

    def value(self):
        r"""value(double_ptr self) -> double"""
        return _sensor.double_ptr_value(self)

    def cast(self):
        r"""cast(double_ptr self) -> double *"""
        return _sensor.double_ptr_cast(self)

    @staticmethod
    def frompointer(t):
        r"""frompointer(double * t) -> double_ptr"""
        return _sensor.double_ptr_frompointer(t)

# Register double_ptr in _sensor:
_sensor.double_ptr_swigregister(double_ptr)

def double_ptr_frompointer(t):
    r"""double_ptr_frompointer(double * t) -> double_ptr"""
    return _sensor.double_ptr_frompointer(t)

class float_ptr(object):
    r"""Proxy of C++ float_ptr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(float_ptr self) -> float_ptr"""
        _sensor.float_ptr_swiginit(self, _sensor.new_float_ptr())
    __swig_destroy__ = _sensor.delete_float_ptr

    def assign(self, value):
        r"""assign(float_ptr self, float value)"""
        return _sensor.float_ptr_assign(self, value)

    def value(self):
        r"""value(float_ptr self) -> float"""
        return _sensor.float_ptr_value(self)

    def cast(self):
        r"""cast(float_ptr self) -> float *"""
        return _sensor.float_ptr_cast(self)

    @staticmethod
    def frompointer(t):
        r"""frompointer(float * t) -> float_ptr"""
        return _sensor.float_ptr_frompointer(t)

# Register float_ptr in _sensor:
_sensor.float_ptr_swigregister(float_ptr)

def float_ptr_frompointer(t):
    r"""float_ptr_frompointer(float * t) -> float_ptr"""
    return _sensor.float_ptr_frompointer(t)

class char_ptr(object):
    r"""Proxy of C++ char_ptr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(char_ptr self) -> char_ptr"""
        _sensor.char_ptr_swiginit(self, _sensor.new_char_ptr())
    __swig_destroy__ = _sensor.delete_char_ptr

    def assign(self, value):
        r"""assign(char_ptr self, char value)"""
        return _sensor.char_ptr_assign(self, value)

    def value(self):
        r"""value(char_ptr self) -> char"""
        return _sensor.char_ptr_value(self)

    def cast(self):
        r"""cast(char_ptr self) -> char *"""
        return _sensor.char_ptr_cast(self)

    @staticmethod
    def frompointer(t):
        r"""frompointer(char * t) -> char_ptr"""
        return _sensor.char_ptr_frompointer(t)

# Register char_ptr in _sensor:
_sensor.char_ptr_swigregister(char_ptr)

def char_ptr_frompointer(t):
    r"""char_ptr_frompointer(char * t) -> char_ptr"""
    return _sensor.char_ptr_frompointer(t)

import pychrono.core
class vector_ChFrameD(object):
    r"""Proxy of C++ std::vector< chrono::ChFrame< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_ChFrameD self) -> SwigPyIterator"""
        return _sensor.vector_ChFrameD_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_ChFrameD self) -> bool"""
        return _sensor.vector_ChFrameD___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_ChFrameD self) -> bool"""
        return _sensor.vector_ChFrameD___bool__(self)

    def __len__(self):
        r"""__len__(vector_ChFrameD self) -> std::vector< chrono::ChFrame< double > >::size_type"""
        return _sensor.vector_ChFrameD___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vector_ChFrameD self, std::vector< chrono::ChFrame< double > >::difference_type i, std::vector< chrono::ChFrame< double > >::difference_type j) -> vector_ChFrameD"""
        return _sensor.vector_ChFrameD___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_ChFrameD self, std::vector< chrono::ChFrame< double > >::difference_type i, std::vector< chrono::ChFrame< double > >::difference_type j)
        __setslice__(vector_ChFrameD self, std::vector< chrono::ChFrame< double > >::difference_type i, std::vector< chrono::ChFrame< double > >::difference_type j, vector_ChFrameD v)
        """
        return _sensor.vector_ChFrameD___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vector_ChFrameD self, std::vector< chrono::ChFrame< double > >::difference_type i, std::vector< chrono::ChFrame< double > >::difference_type j)"""
        return _sensor.vector_ChFrameD___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_ChFrameD self, std::vector< chrono::ChFrame< double > >::difference_type i)
        __delitem__(vector_ChFrameD self, PySliceObject * slice)
        """
        return _sensor.vector_ChFrameD___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_ChFrameD self, PySliceObject * slice) -> vector_ChFrameD
        __getitem__(vector_ChFrameD self, std::vector< chrono::ChFrame< double > >::difference_type i) -> ChFrameD
        """
        return _sensor.vector_ChFrameD___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_ChFrameD self, PySliceObject * slice, vector_ChFrameD v)
        __setitem__(vector_ChFrameD self, PySliceObject * slice)
        __setitem__(vector_ChFrameD self, std::vector< chrono::ChFrame< double > >::difference_type i, ChFrameD x)
        """
        return _sensor.vector_ChFrameD___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_ChFrameD self) -> ChFrameD"""
        return _sensor.vector_ChFrameD_pop(self)

    def append(self, x):
        r"""append(vector_ChFrameD self, ChFrameD x)"""
        return _sensor.vector_ChFrameD_append(self, x)

    def empty(self):
        r"""empty(vector_ChFrameD self) -> bool"""
        return _sensor.vector_ChFrameD_empty(self)

    def size(self):
        r"""size(vector_ChFrameD self) -> std::vector< chrono::ChFrame< double > >::size_type"""
        return _sensor.vector_ChFrameD_size(self)

    def swap(self, v):
        r"""swap(vector_ChFrameD self, vector_ChFrameD v)"""
        return _sensor.vector_ChFrameD_swap(self, v)

    def begin(self):
        r"""begin(vector_ChFrameD self) -> std::vector< chrono::ChFrame< double > >::iterator"""
        return _sensor.vector_ChFrameD_begin(self)

    def end(self):
        r"""end(vector_ChFrameD self) -> std::vector< chrono::ChFrame< double > >::iterator"""
        return _sensor.vector_ChFrameD_end(self)

    def rbegin(self):
        r"""rbegin(vector_ChFrameD self) -> std::vector< chrono::ChFrame< double > >::reverse_iterator"""
        return _sensor.vector_ChFrameD_rbegin(self)

    def rend(self):
        r"""rend(vector_ChFrameD self) -> std::vector< chrono::ChFrame< double > >::reverse_iterator"""
        return _sensor.vector_ChFrameD_rend(self)

    def clear(self):
        r"""clear(vector_ChFrameD self)"""
        return _sensor.vector_ChFrameD_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_ChFrameD self) -> std::vector< chrono::ChFrame< double > >::allocator_type"""
        return _sensor.vector_ChFrameD_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_ChFrameD self)"""
        return _sensor.vector_ChFrameD_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_ChFrameD self, std::vector< chrono::ChFrame< double > >::iterator pos) -> std::vector< chrono::ChFrame< double > >::iterator
        erase(vector_ChFrameD self, std::vector< chrono::ChFrame< double > >::iterator first, std::vector< chrono::ChFrame< double > >::iterator last) -> std::vector< chrono::ChFrame< double > >::iterator
        """
        return _sensor.vector_ChFrameD_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_ChFrameD self) -> vector_ChFrameD
        __init__(vector_ChFrameD self, vector_ChFrameD other) -> vector_ChFrameD
        __init__(vector_ChFrameD self, std::vector< chrono::ChFrame< double > >::size_type size) -> vector_ChFrameD
        __init__(vector_ChFrameD self, std::vector< chrono::ChFrame< double > >::size_type size, ChFrameD value) -> vector_ChFrameD
        """
        _sensor.vector_ChFrameD_swiginit(self, _sensor.new_vector_ChFrameD(*args))

    def push_back(self, x):
        r"""push_back(vector_ChFrameD self, ChFrameD x)"""
        return _sensor.vector_ChFrameD_push_back(self, x)

    def front(self):
        r"""front(vector_ChFrameD self) -> ChFrameD"""
        return _sensor.vector_ChFrameD_front(self)

    def back(self):
        r"""back(vector_ChFrameD self) -> ChFrameD"""
        return _sensor.vector_ChFrameD_back(self)

    def assign(self, n, x):
        r"""assign(vector_ChFrameD self, std::vector< chrono::ChFrame< double > >::size_type n, ChFrameD x)"""
        return _sensor.vector_ChFrameD_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_ChFrameD self, std::vector< chrono::ChFrame< double > >::size_type new_size)
        resize(vector_ChFrameD self, std::vector< chrono::ChFrame< double > >::size_type new_size, ChFrameD x)
        """
        return _sensor.vector_ChFrameD_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_ChFrameD self, std::vector< chrono::ChFrame< double > >::iterator pos, ChFrameD x) -> std::vector< chrono::ChFrame< double > >::iterator
        insert(vector_ChFrameD self, std::vector< chrono::ChFrame< double > >::iterator pos, std::vector< chrono::ChFrame< double > >::size_type n, ChFrameD x)
        """
        return _sensor.vector_ChFrameD_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vector_ChFrameD self, std::vector< chrono::ChFrame< double > >::size_type n)"""
        return _sensor.vector_ChFrameD_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_ChFrameD self) -> std::vector< chrono::ChFrame< double > >::size_type"""
        return _sensor.vector_ChFrameD_capacity(self)
    __swig_destroy__ = _sensor.delete_vector_ChFrameD

# Register vector_ChFrameD in _sensor:
_sensor.vector_ChFrameD_swigregister(vector_ChFrameD)

class SensorBuffer(object):
    r"""Proxy of C++ chrono::sensor::SensorBuffer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SensorBuffer self) -> SensorBuffer
        __init__(SensorBuffer self, unsigned int w, unsigned int h, float t) -> SensorBuffer
        """
        _sensor.SensorBuffer_swiginit(self, _sensor.new_SensorBuffer(*args))
    __swig_destroy__ = _sensor.delete_SensorBuffer
    TimeStamp = property(_sensor.SensorBuffer_TimeStamp_get, _sensor.SensorBuffer_TimeStamp_set, doc=r"""TimeStamp : float""")
    Width = property(_sensor.SensorBuffer_Width_get, _sensor.SensorBuffer_Width_set, doc=r"""Width : unsigned int""")
    Height = property(_sensor.SensorBuffer_Height_get, _sensor.SensorBuffer_Height_set, doc=r"""Height : unsigned int""")
    LaunchedCount = property(_sensor.SensorBuffer_LaunchedCount_get, _sensor.SensorBuffer_LaunchedCount_set, doc=r"""LaunchedCount : unsigned int""")

# Register SensorBuffer in _sensor:
_sensor.SensorBuffer_swigregister(SensorBuffer)

class PixelFloat4(object):
    r"""Proxy of C++ chrono::sensor::PixelFloat4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    R = property(_sensor.PixelFloat4_R_get, _sensor.PixelFloat4_R_set, doc=r"""R : float""")
    G = property(_sensor.PixelFloat4_G_get, _sensor.PixelFloat4_G_set, doc=r"""G : float""")
    B = property(_sensor.PixelFloat4_B_get, _sensor.PixelFloat4_B_set, doc=r"""B : float""")
    A = property(_sensor.PixelFloat4_A_get, _sensor.PixelFloat4_A_set, doc=r"""A : float""")

    def __init__(self):
        r"""__init__(PixelFloat4 self) -> PixelFloat4"""
        _sensor.PixelFloat4_swiginit(self, _sensor.new_PixelFloat4())
    __swig_destroy__ = _sensor.delete_PixelFloat4

# Register PixelFloat4 in _sensor:
_sensor.PixelFloat4_swigregister(PixelFloat4)

class PixelHalf4(object):
    r"""Proxy of C++ chrono::sensor::PixelHalf4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    R = property(_sensor.PixelHalf4_R_get, _sensor.PixelHalf4_R_set, doc=r"""R : __half""")
    G = property(_sensor.PixelHalf4_G_get, _sensor.PixelHalf4_G_set, doc=r"""G : __half""")
    B = property(_sensor.PixelHalf4_B_get, _sensor.PixelHalf4_B_set, doc=r"""B : __half""")
    A = property(_sensor.PixelHalf4_A_get, _sensor.PixelHalf4_A_set, doc=r"""A : __half""")

    def __init__(self):
        r"""__init__(PixelHalf4 self) -> PixelHalf4"""
        _sensor.PixelHalf4_swiginit(self, _sensor.new_PixelHalf4())
    __swig_destroy__ = _sensor.delete_PixelHalf4

# Register PixelHalf4 in _sensor:
_sensor.PixelHalf4_swigregister(PixelHalf4)

class PixelRGBA8(object):
    r"""Proxy of C++ chrono::sensor::PixelRGBA8 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    R = property(_sensor.PixelRGBA8_R_get, _sensor.PixelRGBA8_R_set, doc=r"""R : uint8_t""")
    G = property(_sensor.PixelRGBA8_G_get, _sensor.PixelRGBA8_G_set, doc=r"""G : uint8_t""")
    B = property(_sensor.PixelRGBA8_B_get, _sensor.PixelRGBA8_B_set, doc=r"""B : uint8_t""")
    A = property(_sensor.PixelRGBA8_A_get, _sensor.PixelRGBA8_A_set, doc=r"""A : uint8_t""")

    def __init__(self):
        r"""__init__(PixelRGBA8 self) -> PixelRGBA8"""
        _sensor.PixelRGBA8_swiginit(self, _sensor.new_PixelRGBA8())
    __swig_destroy__ = _sensor.delete_PixelRGBA8

# Register PixelRGBA8 in _sensor:
_sensor.PixelRGBA8_swigregister(PixelRGBA8)

class PixelSemantic(object):
    r"""Proxy of C++ chrono::sensor::PixelSemantic class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    class_id = property(_sensor.PixelSemantic_class_id_get, _sensor.PixelSemantic_class_id_set, doc=r"""class_id : unsigned short""")
    instance_id = property(_sensor.PixelSemantic_instance_id_get, _sensor.PixelSemantic_instance_id_set, doc=r"""instance_id : unsigned short""")

    def __init__(self):
        r"""__init__(PixelSemantic self) -> PixelSemantic"""
        _sensor.PixelSemantic_swiginit(self, _sensor.new_PixelSemantic())
    __swig_destroy__ = _sensor.delete_PixelSemantic

# Register PixelSemantic in _sensor:
_sensor.PixelSemantic_swigregister(PixelSemantic)

class RadarReturn(object):
    r"""Proxy of C++ chrono::sensor::RadarReturn class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    range = property(_sensor.RadarReturn_range_get, _sensor.RadarReturn_range_set, doc=r"""range : float""")
    azimuth = property(_sensor.RadarReturn_azimuth_get, _sensor.RadarReturn_azimuth_set, doc=r"""azimuth : float""")
    elevation = property(_sensor.RadarReturn_elevation_get, _sensor.RadarReturn_elevation_set, doc=r"""elevation : float""")
    doppler_velocity = property(_sensor.RadarReturn_doppler_velocity_get, _sensor.RadarReturn_doppler_velocity_set, doc=r"""doppler_velocity : a(3).float""")
    amplitude = property(_sensor.RadarReturn_amplitude_get, _sensor.RadarReturn_amplitude_set, doc=r"""amplitude : float""")
    objectId = property(_sensor.RadarReturn_objectId_get, _sensor.RadarReturn_objectId_set, doc=r"""objectId : float""")

    def __init__(self):
        r"""__init__(RadarReturn self) -> RadarReturn"""
        _sensor.RadarReturn_swiginit(self, _sensor.new_RadarReturn())
    __swig_destroy__ = _sensor.delete_RadarReturn

# Register RadarReturn in _sensor:
_sensor.RadarReturn_swigregister(RadarReturn)

class RadarXYZReturn(object):
    r"""Proxy of C++ chrono::sensor::RadarXYZReturn class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_sensor.RadarXYZReturn_x_get, _sensor.RadarXYZReturn_x_set, doc=r"""x : float""")
    y = property(_sensor.RadarXYZReturn_y_get, _sensor.RadarXYZReturn_y_set, doc=r"""y : float""")
    z = property(_sensor.RadarXYZReturn_z_get, _sensor.RadarXYZReturn_z_set, doc=r"""z : float""")
    vel_x = property(_sensor.RadarXYZReturn_vel_x_get, _sensor.RadarXYZReturn_vel_x_set, doc=r"""vel_x : float""")
    vel_y = property(_sensor.RadarXYZReturn_vel_y_get, _sensor.RadarXYZReturn_vel_y_set, doc=r"""vel_y : float""")
    vel_z = property(_sensor.RadarXYZReturn_vel_z_get, _sensor.RadarXYZReturn_vel_z_set, doc=r"""vel_z : float""")
    amplitude = property(_sensor.RadarXYZReturn_amplitude_get, _sensor.RadarXYZReturn_amplitude_set, doc=r"""amplitude : float""")
    objectId = property(_sensor.RadarXYZReturn_objectId_get, _sensor.RadarXYZReturn_objectId_set, doc=r"""objectId : float""")

    def __init__(self):
        r"""__init__(RadarXYZReturn self) -> RadarXYZReturn"""
        _sensor.RadarXYZReturn_swiginit(self, _sensor.new_RadarXYZReturn())
    __swig_destroy__ = _sensor.delete_RadarXYZReturn

# Register RadarXYZReturn in _sensor:
_sensor.RadarXYZReturn_swigregister(RadarXYZReturn)

class PixelDI(object):
    r"""Proxy of C++ chrono::sensor::PixelDI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    range = property(_sensor.PixelDI_range_get, _sensor.PixelDI_range_set, doc=r"""range : float""")
    intensity = property(_sensor.PixelDI_intensity_get, _sensor.PixelDI_intensity_set, doc=r"""intensity : float""")

    def __init__(self):
        r"""__init__(PixelDI self) -> PixelDI"""
        _sensor.PixelDI_swiginit(self, _sensor.new_PixelDI())
    __swig_destroy__ = _sensor.delete_PixelDI

# Register PixelDI in _sensor:
_sensor.PixelDI_swigregister(PixelDI)

class PixelXYZI(object):
    r"""Proxy of C++ chrono::sensor::PixelXYZI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_sensor.PixelXYZI_x_get, _sensor.PixelXYZI_x_set, doc=r"""x : float""")
    y = property(_sensor.PixelXYZI_y_get, _sensor.PixelXYZI_y_set, doc=r"""y : float""")
    z = property(_sensor.PixelXYZI_z_get, _sensor.PixelXYZI_z_set, doc=r"""z : float""")
    intensity = property(_sensor.PixelXYZI_intensity_get, _sensor.PixelXYZI_intensity_set, doc=r"""intensity : float""")

    def __init__(self):
        r"""__init__(PixelXYZI self) -> PixelXYZI"""
        _sensor.PixelXYZI_swiginit(self, _sensor.new_PixelXYZI())
    __swig_destroy__ = _sensor.delete_PixelXYZI

# Register PixelXYZI in _sensor:
_sensor.PixelXYZI_swigregister(PixelXYZI)

class AccelData(object):
    r"""Proxy of C++ chrono::sensor::AccelData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    X = property(_sensor.AccelData_X_get, _sensor.AccelData_X_set, doc=r"""X : double""")
    Y = property(_sensor.AccelData_Y_get, _sensor.AccelData_Y_set, doc=r"""Y : double""")
    Z = property(_sensor.AccelData_Z_get, _sensor.AccelData_Z_set, doc=r"""Z : double""")

    def __init__(self):
        r"""__init__(AccelData self) -> AccelData"""
        _sensor.AccelData_swiginit(self, _sensor.new_AccelData())
    __swig_destroy__ = _sensor.delete_AccelData

# Register AccelData in _sensor:
_sensor.AccelData_swigregister(AccelData)

class GyroData(object):
    r"""Proxy of C++ chrono::sensor::GyroData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Roll = property(_sensor.GyroData_Roll_get, _sensor.GyroData_Roll_set, doc=r"""Roll : double""")
    Pitch = property(_sensor.GyroData_Pitch_get, _sensor.GyroData_Pitch_set, doc=r"""Pitch : double""")
    Yaw = property(_sensor.GyroData_Yaw_get, _sensor.GyroData_Yaw_set, doc=r"""Yaw : double""")

    def __init__(self):
        r"""__init__(GyroData self) -> GyroData"""
        _sensor.GyroData_swiginit(self, _sensor.new_GyroData())
    __swig_destroy__ = _sensor.delete_GyroData

# Register GyroData in _sensor:
_sensor.GyroData_swigregister(GyroData)

class MagnetData(object):
    r"""Proxy of C++ chrono::sensor::MagnetData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    X = property(_sensor.MagnetData_X_get, _sensor.MagnetData_X_set, doc=r"""X : double""")
    Y = property(_sensor.MagnetData_Y_get, _sensor.MagnetData_Y_set, doc=r"""Y : double""")
    Z = property(_sensor.MagnetData_Z_get, _sensor.MagnetData_Z_set, doc=r"""Z : double""")

    def __init__(self):
        r"""__init__(MagnetData self) -> MagnetData"""
        _sensor.MagnetData_swiginit(self, _sensor.new_MagnetData())
    __swig_destroy__ = _sensor.delete_MagnetData

# Register MagnetData in _sensor:
_sensor.MagnetData_swigregister(MagnetData)

class TachometerData(object):
    r"""Proxy of C++ chrono::sensor::TachometerData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rpm = property(_sensor.TachometerData_rpm_get, _sensor.TachometerData_rpm_set, doc=r"""rpm : float""")

    def __init__(self):
        r"""__init__(TachometerData self) -> TachometerData"""
        _sensor.TachometerData_swiginit(self, _sensor.new_TachometerData())
    __swig_destroy__ = _sensor.delete_TachometerData

# Register TachometerData in _sensor:
_sensor.TachometerData_swigregister(TachometerData)

class GPSData(object):
    r"""Proxy of C++ chrono::sensor::GPSData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Latitude = property(_sensor.GPSData_Latitude_get, _sensor.GPSData_Latitude_set, doc=r"""Latitude : double""")
    Longitude = property(_sensor.GPSData_Longitude_get, _sensor.GPSData_Longitude_set, doc=r"""Longitude : double""")
    Altitude = property(_sensor.GPSData_Altitude_get, _sensor.GPSData_Altitude_set, doc=r"""Altitude : double""")
    Time = property(_sensor.GPSData_Time_get, _sensor.GPSData_Time_set, doc=r"""Time : double""")

    def __init__(self):
        r"""__init__(GPSData self) -> GPSData"""
        _sensor.GPSData_swiginit(self, _sensor.new_GPSData())
    __swig_destroy__ = _sensor.delete_GPSData

# Register GPSData in _sensor:
_sensor.GPSData_swigregister(GPSData)

class UserR8Buffer(SensorBuffer):
    r"""Proxy of C++ chrono::sensor::SensorBufferT< std::shared_ptr< char [] > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(UserR8Buffer self) -> UserR8Buffer"""
        _sensor.UserR8Buffer_swiginit(self, _sensor.new_UserR8Buffer())
    Buffer = property(_sensor.UserR8Buffer_Buffer_get, _sensor.UserR8Buffer_Buffer_set, doc=r"""Buffer : std::shared_ptr<(a().char)>""")

    def HasData(self):
        r"""HasData(UserR8Buffer self) -> bool"""
        return _sensor.UserR8Buffer_HasData(self)

    def GetChar8Data(self):
        r"""GetChar8Data(UserR8Buffer self)"""
        return _sensor.UserR8Buffer_GetChar8Data(self)
    __swig_destroy__ = _sensor.delete_UserR8Buffer

# Register UserR8Buffer in _sensor:
_sensor.UserR8Buffer_swigregister(UserR8Buffer)

class UserRGBA8Buffer(SensorBuffer):
    r"""Proxy of C++ chrono::sensor::SensorBufferT< std::shared_ptr< chrono::sensor::PixelRGBA8 [] > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(UserRGBA8Buffer self) -> UserRGBA8Buffer"""
        _sensor.UserRGBA8Buffer_swiginit(self, _sensor.new_UserRGBA8Buffer())
    Buffer = property(_sensor.UserRGBA8Buffer_Buffer_get, _sensor.UserRGBA8Buffer_Buffer_set, doc=r"""Buffer : std::shared_ptr<(a().chrono::sensor::PixelRGBA8)>""")

    def HasData(self):
        r"""HasData(UserRGBA8Buffer self) -> bool"""
        return _sensor.UserRGBA8Buffer_HasData(self)

    def GetRGBA8Data(self):
        r"""GetRGBA8Data(UserRGBA8Buffer self)"""
        return _sensor.UserRGBA8Buffer_GetRGBA8Data(self)
    __swig_destroy__ = _sensor.delete_UserRGBA8Buffer

# Register UserRGBA8Buffer in _sensor:
_sensor.UserRGBA8Buffer_swigregister(UserRGBA8Buffer)

class UserDISensorBuffer(SensorBuffer):
    r"""Proxy of C++ chrono::sensor::SensorBufferT< std::shared_ptr< chrono::sensor::PixelDI [] > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(UserDISensorBuffer self) -> UserDISensorBuffer"""
        _sensor.UserDISensorBuffer_swiginit(self, _sensor.new_UserDISensorBuffer())
    Buffer = property(_sensor.UserDISensorBuffer_Buffer_get, _sensor.UserDISensorBuffer_Buffer_set, doc=r"""Buffer : std::shared_ptr<(a().chrono::sensor::PixelDI)>""")
    __swig_destroy__ = _sensor.delete_UserDISensorBuffer

# Register UserDISensorBuffer in _sensor:
_sensor.UserDISensorBuffer_swigregister(UserDISensorBuffer)

class UserXYZISensorBuffer(SensorBuffer):
    r"""Proxy of C++ chrono::sensor::SensorBufferT< std::shared_ptr< chrono::sensor::PixelXYZI [] > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(UserXYZISensorBuffer self) -> UserXYZISensorBuffer"""
        _sensor.UserXYZISensorBuffer_swiginit(self, _sensor.new_UserXYZISensorBuffer())
    Buffer = property(_sensor.UserXYZISensorBuffer_Buffer_get, _sensor.UserXYZISensorBuffer_Buffer_set, doc=r"""Buffer : std::shared_ptr<(a().chrono::sensor::PixelXYZI)>""")
    __swig_destroy__ = _sensor.delete_UserXYZISensorBuffer

# Register UserXYZISensorBuffer in _sensor:
_sensor.UserXYZISensorBuffer_swigregister(UserXYZISensorBuffer)

class UserDIBuffer(UserDISensorBuffer):
    r"""Proxy of C++ chrono::sensor::LidarBufferT< std::shared_ptr< chrono::sensor::PixelDI [] > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(UserDIBuffer self) -> UserDIBuffer"""
        _sensor.UserDIBuffer_swiginit(self, _sensor.new_UserDIBuffer())
    Beam_return_count = property(_sensor.UserDIBuffer_Beam_return_count_get, _sensor.UserDIBuffer_Beam_return_count_set, doc=r"""Beam_return_count : unsigned int""")
    Dual_return = property(_sensor.UserDIBuffer_Dual_return_get, _sensor.UserDIBuffer_Dual_return_set, doc=r"""Dual_return : bool""")

    def HasData(self):
        r"""HasData(UserDIBuffer self) -> bool"""
        return _sensor.UserDIBuffer_HasData(self)

    def GetDIData(self):
        r"""GetDIData(UserDIBuffer self)"""
        return _sensor.UserDIBuffer_GetDIData(self)
    __swig_destroy__ = _sensor.delete_UserDIBuffer

# Register UserDIBuffer in _sensor:
_sensor.UserDIBuffer_swigregister(UserDIBuffer)

class UserXYZIBuffer(UserXYZISensorBuffer):
    r"""Proxy of C++ chrono::sensor::LidarBufferT< std::shared_ptr< chrono::sensor::PixelXYZI [] > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(UserXYZIBuffer self) -> UserXYZIBuffer"""
        _sensor.UserXYZIBuffer_swiginit(self, _sensor.new_UserXYZIBuffer())
    Beam_return_count = property(_sensor.UserXYZIBuffer_Beam_return_count_get, _sensor.UserXYZIBuffer_Beam_return_count_set, doc=r"""Beam_return_count : unsigned int""")
    Dual_return = property(_sensor.UserXYZIBuffer_Dual_return_get, _sensor.UserXYZIBuffer_Dual_return_set, doc=r"""Dual_return : bool""")

    def HasData(self):
        r"""HasData(UserXYZIBuffer self) -> bool"""
        return _sensor.UserXYZIBuffer_HasData(self)

    def GetXYZIData(self):
        r"""GetXYZIData(UserXYZIBuffer self)"""
        return _sensor.UserXYZIBuffer_GetXYZIData(self)
    __swig_destroy__ = _sensor.delete_UserXYZIBuffer

# Register UserXYZIBuffer in _sensor:
_sensor.UserXYZIBuffer_swigregister(UserXYZIBuffer)

class UserRadarBuffer(object):
    r"""Proxy of C++ chrono::sensor::RadarBufferT< std::shared_ptr< chrono::sensor::RadarReturn [] > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(UserRadarBuffer self) -> UserRadarBuffer"""
        _sensor.UserRadarBuffer_swiginit(self, _sensor.new_UserRadarBuffer())
    Beam_return_count = property(_sensor.UserRadarBuffer_Beam_return_count_get, _sensor.UserRadarBuffer_Beam_return_count_set, doc=r"""Beam_return_count : int""")
    invalid_returns = property(_sensor.UserRadarBuffer_invalid_returns_get, _sensor.UserRadarBuffer_invalid_returns_set, doc=r"""invalid_returns : int""")
    Num_clusters = property(_sensor.UserRadarBuffer_Num_clusters_get, _sensor.UserRadarBuffer_Num_clusters_set, doc=r"""Num_clusters : int""")
    avg_velocity = property(_sensor.UserRadarBuffer_avg_velocity_get, _sensor.UserRadarBuffer_avg_velocity_set, doc=r"""avg_velocity : std::vector<(std::array<(float,3)>,std::allocator<(std::array<(float,3)>)>)>""")
    centroids = property(_sensor.UserRadarBuffer_centroids_get, _sensor.UserRadarBuffer_centroids_set, doc=r"""centroids : std::vector<(std::array<(float,3)>,std::allocator<(std::array<(float,3)>)>)>""")
    amplitudes = property(_sensor.UserRadarBuffer_amplitudes_get, _sensor.UserRadarBuffer_amplitudes_set, doc=r"""amplitudes : std::vector<(float,std::allocator<(float)>)>""")

    def HasData(self):
        r"""HasData(UserRadarBuffer self) -> bool"""
        return _sensor.UserRadarBuffer_HasData(self)

    def GetRadarData(self):
        r"""GetRadarData(UserRadarBuffer self)"""
        return _sensor.UserRadarBuffer_GetRadarData(self)
    __swig_destroy__ = _sensor.delete_UserRadarBuffer

# Register UserRadarBuffer in _sensor:
_sensor.UserRadarBuffer_swigregister(UserRadarBuffer)

class UserRadarXYZBuffer(object):
    r"""Proxy of C++ chrono::sensor::RadarBufferT< std::shared_ptr< chrono::sensor::RadarXYZReturn [] > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(UserRadarXYZBuffer self) -> UserRadarXYZBuffer"""
        _sensor.UserRadarXYZBuffer_swiginit(self, _sensor.new_UserRadarXYZBuffer())
    Beam_return_count = property(_sensor.UserRadarXYZBuffer_Beam_return_count_get, _sensor.UserRadarXYZBuffer_Beam_return_count_set, doc=r"""Beam_return_count : int""")
    invalid_returns = property(_sensor.UserRadarXYZBuffer_invalid_returns_get, _sensor.UserRadarXYZBuffer_invalid_returns_set, doc=r"""invalid_returns : int""")
    Num_clusters = property(_sensor.UserRadarXYZBuffer_Num_clusters_get, _sensor.UserRadarXYZBuffer_Num_clusters_set, doc=r"""Num_clusters : int""")
    avg_velocity = property(_sensor.UserRadarXYZBuffer_avg_velocity_get, _sensor.UserRadarXYZBuffer_avg_velocity_set, doc=r"""avg_velocity : std::vector<(std::array<(float,3)>,std::allocator<(std::array<(float,3)>)>)>""")
    centroids = property(_sensor.UserRadarXYZBuffer_centroids_get, _sensor.UserRadarXYZBuffer_centroids_set, doc=r"""centroids : std::vector<(std::array<(float,3)>,std::allocator<(std::array<(float,3)>)>)>""")
    amplitudes = property(_sensor.UserRadarXYZBuffer_amplitudes_get, _sensor.UserRadarXYZBuffer_amplitudes_set, doc=r"""amplitudes : std::vector<(float,std::allocator<(float)>)>""")

    def HasData(self):
        r"""HasData(UserRadarXYZBuffer self) -> bool"""
        return _sensor.UserRadarXYZBuffer_HasData(self)

    def GetRadarXYZData(self):
        r"""GetRadarXYZData(UserRadarXYZBuffer self)"""
        return _sensor.UserRadarXYZBuffer_GetRadarXYZData(self)
    __swig_destroy__ = _sensor.delete_UserRadarXYZBuffer

# Register UserRadarXYZBuffer in _sensor:
_sensor.UserRadarXYZBuffer_swigregister(UserRadarXYZBuffer)

class UserAccelBuffer(SensorBuffer):
    r"""Proxy of C++ chrono::sensor::SensorBufferT< std::shared_ptr< chrono::sensor::AccelData [] > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(UserAccelBuffer self) -> UserAccelBuffer"""
        _sensor.UserAccelBuffer_swiginit(self, _sensor.new_UserAccelBuffer())
    Buffer = property(_sensor.UserAccelBuffer_Buffer_get, _sensor.UserAccelBuffer_Buffer_set, doc=r"""Buffer : std::shared_ptr<(a().chrono::sensor::AccelData)>""")

    def HasData(self):
        r"""HasData(UserAccelBuffer self) -> bool"""
        return _sensor.UserAccelBuffer_HasData(self)

    def GetAccelData(self):
        r"""GetAccelData(UserAccelBuffer self)"""
        return _sensor.UserAccelBuffer_GetAccelData(self)
    __swig_destroy__ = _sensor.delete_UserAccelBuffer

# Register UserAccelBuffer in _sensor:
_sensor.UserAccelBuffer_swigregister(UserAccelBuffer)

class UserGyroBuffer(SensorBuffer):
    r"""Proxy of C++ chrono::sensor::SensorBufferT< std::shared_ptr< chrono::sensor::GyroData [] > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(UserGyroBuffer self) -> UserGyroBuffer"""
        _sensor.UserGyroBuffer_swiginit(self, _sensor.new_UserGyroBuffer())
    Buffer = property(_sensor.UserGyroBuffer_Buffer_get, _sensor.UserGyroBuffer_Buffer_set, doc=r"""Buffer : std::shared_ptr<(a().chrono::sensor::GyroData)>""")

    def HasData(self):
        r"""HasData(UserGyroBuffer self) -> bool"""
        return _sensor.UserGyroBuffer_HasData(self)

    def GetGyroData(self):
        r"""GetGyroData(UserGyroBuffer self)"""
        return _sensor.UserGyroBuffer_GetGyroData(self)
    __swig_destroy__ = _sensor.delete_UserGyroBuffer

# Register UserGyroBuffer in _sensor:
_sensor.UserGyroBuffer_swigregister(UserGyroBuffer)

class UserMagnetBuffer(SensorBuffer):
    r"""Proxy of C++ chrono::sensor::SensorBufferT< std::shared_ptr< chrono::sensor::MagnetData [] > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(UserMagnetBuffer self) -> UserMagnetBuffer"""
        _sensor.UserMagnetBuffer_swiginit(self, _sensor.new_UserMagnetBuffer())
    Buffer = property(_sensor.UserMagnetBuffer_Buffer_get, _sensor.UserMagnetBuffer_Buffer_set, doc=r"""Buffer : std::shared_ptr<(a().chrono::sensor::MagnetData)>""")

    def HasData(self):
        r"""HasData(UserMagnetBuffer self) -> bool"""
        return _sensor.UserMagnetBuffer_HasData(self)

    def GetMagnetData(self):
        r"""GetMagnetData(UserMagnetBuffer self)"""
        return _sensor.UserMagnetBuffer_GetMagnetData(self)
    __swig_destroy__ = _sensor.delete_UserMagnetBuffer

# Register UserMagnetBuffer in _sensor:
_sensor.UserMagnetBuffer_swigregister(UserMagnetBuffer)

class UserGPSBuffer(SensorBuffer):
    r"""Proxy of C++ chrono::sensor::SensorBufferT< std::shared_ptr< chrono::sensor::GPSData [] > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(UserGPSBuffer self) -> UserGPSBuffer"""
        _sensor.UserGPSBuffer_swiginit(self, _sensor.new_UserGPSBuffer())
    Buffer = property(_sensor.UserGPSBuffer_Buffer_get, _sensor.UserGPSBuffer_Buffer_set, doc=r"""Buffer : std::shared_ptr<(a().chrono::sensor::GPSData)>""")

    def HasData(self):
        r"""HasData(UserGPSBuffer self) -> bool"""
        return _sensor.UserGPSBuffer_HasData(self)

    def GetGPSData(self):
        r"""GetGPSData(UserGPSBuffer self)"""
        return _sensor.UserGPSBuffer_GetGPSData(self)
    __swig_destroy__ = _sensor.delete_UserGPSBuffer

# Register UserGPSBuffer in _sensor:
_sensor.UserGPSBuffer_swigregister(UserGPSBuffer)

class doublevec(object):
    r"""Proxy of C++ std::vector< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(doublevec self) -> SwigPyIterator"""
        return _sensor.doublevec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(doublevec self) -> bool"""
        return _sensor.doublevec___nonzero__(self)

    def __bool__(self):
        r"""__bool__(doublevec self) -> bool"""
        return _sensor.doublevec___bool__(self)

    def __len__(self):
        r"""__len__(doublevec self) -> std::vector< double >::size_type"""
        return _sensor.doublevec___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(doublevec self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> doublevec"""
        return _sensor.doublevec___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(doublevec self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)
        __setslice__(doublevec self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, doublevec v)
        """
        return _sensor.doublevec___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(doublevec self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)"""
        return _sensor.doublevec___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(doublevec self, std::vector< double >::difference_type i)
        __delitem__(doublevec self, PySliceObject * slice)
        """
        return _sensor.doublevec___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(doublevec self, PySliceObject * slice) -> doublevec
        __getitem__(doublevec self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &
        """
        return _sensor.doublevec___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(doublevec self, PySliceObject * slice, doublevec v)
        __setitem__(doublevec self, PySliceObject * slice)
        __setitem__(doublevec self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)
        """
        return _sensor.doublevec___setitem__(self, *args)

    def pop(self):
        r"""pop(doublevec self) -> std::vector< double >::value_type"""
        return _sensor.doublevec_pop(self)

    def append(self, x):
        r"""append(doublevec self, std::vector< double >::value_type const & x)"""
        return _sensor.doublevec_append(self, x)

    def empty(self):
        r"""empty(doublevec self) -> bool"""
        return _sensor.doublevec_empty(self)

    def size(self):
        r"""size(doublevec self) -> std::vector< double >::size_type"""
        return _sensor.doublevec_size(self)

    def swap(self, v):
        r"""swap(doublevec self, doublevec v)"""
        return _sensor.doublevec_swap(self, v)

    def begin(self):
        r"""begin(doublevec self) -> std::vector< double >::iterator"""
        return _sensor.doublevec_begin(self)

    def end(self):
        r"""end(doublevec self) -> std::vector< double >::iterator"""
        return _sensor.doublevec_end(self)

    def rbegin(self):
        r"""rbegin(doublevec self) -> std::vector< double >::reverse_iterator"""
        return _sensor.doublevec_rbegin(self)

    def rend(self):
        r"""rend(doublevec self) -> std::vector< double >::reverse_iterator"""
        return _sensor.doublevec_rend(self)

    def clear(self):
        r"""clear(doublevec self)"""
        return _sensor.doublevec_clear(self)

    def get_allocator(self):
        r"""get_allocator(doublevec self) -> std::vector< double >::allocator_type"""
        return _sensor.doublevec_get_allocator(self)

    def pop_back(self):
        r"""pop_back(doublevec self)"""
        return _sensor.doublevec_pop_back(self)

    def erase(self, *args):
        r"""
        erase(doublevec self, std::vector< double >::iterator pos) -> std::vector< double >::iterator
        erase(doublevec self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator
        """
        return _sensor.doublevec_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(doublevec self) -> doublevec
        __init__(doublevec self, doublevec other) -> doublevec
        __init__(doublevec self, std::vector< double >::size_type size) -> doublevec
        __init__(doublevec self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> doublevec
        """
        _sensor.doublevec_swiginit(self, _sensor.new_doublevec(*args))

    def push_back(self, x):
        r"""push_back(doublevec self, std::vector< double >::value_type const & x)"""
        return _sensor.doublevec_push_back(self, x)

    def front(self):
        r"""front(doublevec self) -> std::vector< double >::value_type const &"""
        return _sensor.doublevec_front(self)

    def back(self):
        r"""back(doublevec self) -> std::vector< double >::value_type const &"""
        return _sensor.doublevec_back(self)

    def assign(self, n, x):
        r"""assign(doublevec self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)"""
        return _sensor.doublevec_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(doublevec self, std::vector< double >::size_type new_size)
        resize(doublevec self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)
        """
        return _sensor.doublevec_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(doublevec self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator
        insert(doublevec self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)
        """
        return _sensor.doublevec_insert(self, *args)

    def reserve(self, n):
        r"""reserve(doublevec self, std::vector< double >::size_type n)"""
        return _sensor.doublevec_reserve(self, n)

    def capacity(self):
        r"""capacity(doublevec self) -> std::vector< double >::size_type"""
        return _sensor.doublevec_capacity(self)
    __swig_destroy__ = _sensor.delete_doublevec

# Register doublevec in _sensor:
_sensor.doublevec_swigregister(doublevec)

class ChFilter(object):
    r"""Proxy of C++ chrono::sensor::ChFilter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sensor.delete_ChFilter

    def Apply(self):
        r"""Apply(ChFilter self)"""
        return _sensor.ChFilter_Apply(self)

    def Initialize(self, pSensor, bufferInOut):
        r"""Initialize(ChFilter self, std::shared_ptr< chrono::sensor::ChSensor > pSensor, std::shared_ptr< chrono::sensor::SensorBuffer > & bufferInOut)"""
        return _sensor.ChFilter_Initialize(self, pSensor, bufferInOut)

    def Name(self):
        r"""Name(ChFilter self) -> std::string &"""
        return _sensor.ChFilter_Name(self)

# Register ChFilter in _sensor:
_sensor.ChFilter_swigregister(ChFilter)

class ChFilterGPSUpdate(ChFilter):
    r"""Proxy of C++ chrono::sensor::ChFilterGPSUpdate class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, gps_reference, noise_model):
        r"""__init__(ChFilterGPSUpdate self, ChVectorD gps_reference, std::shared_ptr< chrono::sensor::ChNoiseModel > noise_model) -> ChFilterGPSUpdate"""
        _sensor.ChFilterGPSUpdate_swiginit(self, _sensor.new_ChFilterGPSUpdate(gps_reference, noise_model))

    def Apply(self):
        r"""Apply(ChFilterGPSUpdate self)"""
        return _sensor.ChFilterGPSUpdate_Apply(self)

    def Initialize(self, pSensor, bufferInOut):
        r"""Initialize(ChFilterGPSUpdate self, std::shared_ptr< chrono::sensor::ChSensor > pSensor, std::shared_ptr< chrono::sensor::SensorBuffer > & bufferInOut)"""
        return _sensor.ChFilterGPSUpdate_Initialize(self, pSensor, bufferInOut)
    __swig_destroy__ = _sensor.delete_ChFilterGPSUpdate

# Register ChFilterGPSUpdate in _sensor:
_sensor.ChFilterGPSUpdate_swigregister(ChFilterGPSUpdate)

class ChFilterGrayscale(ChFilter):
    r"""Proxy of C++ chrono::sensor::ChFilterGrayscale class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ChFilterGrayscale self, std::string name={}) -> ChFilterGrayscale"""
        _sensor.ChFilterGrayscale_swiginit(self, _sensor.new_ChFilterGrayscale(*args))

    def Apply(self):
        r"""Apply(ChFilterGrayscale self)"""
        return _sensor.ChFilterGrayscale_Apply(self)

    def Initialize(self, pSensor, bufferInOut):
        r"""Initialize(ChFilterGrayscale self, std::shared_ptr< chrono::sensor::ChSensor > pSensor, std::shared_ptr< chrono::sensor::SensorBuffer > & bufferInOut)"""
        return _sensor.ChFilterGrayscale_Initialize(self, pSensor, bufferInOut)
    __swig_destroy__ = _sensor.delete_ChFilterGrayscale

# Register ChFilterGrayscale in _sensor:
_sensor.ChFilterGrayscale_swigregister(ChFilterGrayscale)

class ChFilterAccelerometerUpdate(ChFilter):
    r"""Proxy of C++ chrono::sensor::ChFilterAccelerometerUpdate class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, noise_model):
        r"""__init__(ChFilterAccelerometerUpdate self, std::shared_ptr< chrono::sensor::ChNoiseModel > noise_model) -> ChFilterAccelerometerUpdate"""
        _sensor.ChFilterAccelerometerUpdate_swiginit(self, _sensor.new_ChFilterAccelerometerUpdate(noise_model))

    def Apply(self):
        r"""Apply(ChFilterAccelerometerUpdate self)"""
        return _sensor.ChFilterAccelerometerUpdate_Apply(self)

    def Initialize(self, pSensor, bufferInOut):
        r"""Initialize(ChFilterAccelerometerUpdate self, std::shared_ptr< chrono::sensor::ChSensor > pSensor, std::shared_ptr< chrono::sensor::SensorBuffer > & bufferInOut)"""
        return _sensor.ChFilterAccelerometerUpdate_Initialize(self, pSensor, bufferInOut)
    __swig_destroy__ = _sensor.delete_ChFilterAccelerometerUpdate

# Register ChFilterAccelerometerUpdate in _sensor:
_sensor.ChFilterAccelerometerUpdate_swigregister(ChFilterAccelerometerUpdate)

class ChFilterGyroscopeUpdate(ChFilter):
    r"""Proxy of C++ chrono::sensor::ChFilterGyroscopeUpdate class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, noise_model):
        r"""__init__(ChFilterGyroscopeUpdate self, std::shared_ptr< chrono::sensor::ChNoiseModel > noise_model) -> ChFilterGyroscopeUpdate"""
        _sensor.ChFilterGyroscopeUpdate_swiginit(self, _sensor.new_ChFilterGyroscopeUpdate(noise_model))

    def Apply(self):
        r"""Apply(ChFilterGyroscopeUpdate self)"""
        return _sensor.ChFilterGyroscopeUpdate_Apply(self)

    def Initialize(self, pSensor, bufferInOut):
        r"""Initialize(ChFilterGyroscopeUpdate self, std::shared_ptr< chrono::sensor::ChSensor > pSensor, std::shared_ptr< chrono::sensor::SensorBuffer > & bufferInOut)"""
        return _sensor.ChFilterGyroscopeUpdate_Initialize(self, pSensor, bufferInOut)
    __swig_destroy__ = _sensor.delete_ChFilterGyroscopeUpdate

# Register ChFilterGyroscopeUpdate in _sensor:
_sensor.ChFilterGyroscopeUpdate_swigregister(ChFilterGyroscopeUpdate)

class ChFilterMagnetometerUpdate(ChFilter):
    r"""Proxy of C++ chrono::sensor::ChFilterMagnetometerUpdate class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, noise_model, gps_reference):
        r"""__init__(ChFilterMagnetometerUpdate self, std::shared_ptr< chrono::sensor::ChNoiseModel > noise_model, ChVectorD gps_reference) -> ChFilterMagnetometerUpdate"""
        _sensor.ChFilterMagnetometerUpdate_swiginit(self, _sensor.new_ChFilterMagnetometerUpdate(noise_model, gps_reference))

    def Apply(self):
        r"""Apply(ChFilterMagnetometerUpdate self)"""
        return _sensor.ChFilterMagnetometerUpdate_Apply(self)

    def Initialize(self, pSensor, bufferInOut):
        r"""Initialize(ChFilterMagnetometerUpdate self, std::shared_ptr< chrono::sensor::ChSensor > pSensor, std::shared_ptr< chrono::sensor::SensorBuffer > & bufferInOut)"""
        return _sensor.ChFilterMagnetometerUpdate_Initialize(self, pSensor, bufferInOut)
    __swig_destroy__ = _sensor.delete_ChFilterMagnetometerUpdate

# Register ChFilterMagnetometerUpdate in _sensor:
_sensor.ChFilterMagnetometerUpdate_swigregister(ChFilterMagnetometerUpdate)

class ChOptixDenoiser(object):
    r"""Proxy of C++ chrono::sensor::ChOptixDenoiser class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, context):
        r"""__init__(ChOptixDenoiser self, OptixDeviceContext context) -> ChOptixDenoiser"""
        _sensor.ChOptixDenoiser_swiginit(self, _sensor.new_ChOptixDenoiser(context))
    __swig_destroy__ = _sensor.delete_ChOptixDenoiser

    def Initialize(self, w, h, stream, input_buffer, albedo_buffer, normal_buffer, output_buffer):
        r"""Initialize(ChOptixDenoiser self, unsigned int w, unsigned int h, CUstream stream, half4 input_buffer, half4 albedo_buffer, half4 normal_buffer, half4 output_buffer)"""
        return _sensor.ChOptixDenoiser_Initialize(self, w, h, stream, input_buffer, albedo_buffer, normal_buffer, output_buffer)

    def Execute(self):
        r"""Execute(ChOptixDenoiser self)"""
        return _sensor.ChOptixDenoiser_Execute(self)

# Register ChOptixDenoiser in _sensor:
_sensor.ChOptixDenoiser_swigregister(ChOptixDenoiser)

class ChFilterOptixRender(ChFilter):
    r"""Proxy of C++ chrono::sensor::ChFilterOptixRender class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChFilterOptixRender self) -> ChFilterOptixRender"""
        _sensor.ChFilterOptixRender_swiginit(self, _sensor.new_ChFilterOptixRender())
    __swig_destroy__ = _sensor.delete_ChFilterOptixRender

    def Apply(self):
        r"""Apply(ChFilterOptixRender self)"""
        return _sensor.ChFilterOptixRender_Apply(self)

    def Initialize(self, pSensor, bufferInOut):
        r"""Initialize(ChFilterOptixRender self, std::shared_ptr< chrono::sensor::ChSensor > pSensor, std::shared_ptr< chrono::sensor::SensorBuffer > & bufferInOut)"""
        return _sensor.ChFilterOptixRender_Initialize(self, pSensor, bufferInOut)

# Register ChFilterOptixRender in _sensor:
_sensor.ChFilterOptixRender_swigregister(ChFilterOptixRender)

class ChFilterPCfromDepth(ChFilter):
    r"""Proxy of C++ chrono::sensor::ChFilterPCfromDepth class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ChFilterPCfromDepth self, std::string name={}) -> ChFilterPCfromDepth"""
        _sensor.ChFilterPCfromDepth_swiginit(self, _sensor.new_ChFilterPCfromDepth(*args))

    def Apply(self):
        r"""Apply(ChFilterPCfromDepth self)"""
        return _sensor.ChFilterPCfromDepth_Apply(self)

    def Initialize(self, pSensor, bufferInOut):
        r"""Initialize(ChFilterPCfromDepth self, std::shared_ptr< chrono::sensor::ChSensor > pSensor, std::shared_ptr< chrono::sensor::SensorBuffer > & bufferInOut)"""
        return _sensor.ChFilterPCfromDepth_Initialize(self, pSensor, bufferInOut)
    __swig_destroy__ = _sensor.delete_ChFilterPCfromDepth

# Register ChFilterPCfromDepth in _sensor:
_sensor.ChFilterPCfromDepth_swigregister(ChFilterPCfromDepth)

class ChFilterSave(ChFilter):
    r"""Proxy of C++ chrono::sensor::ChFilterSave class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ChFilterSave self, std::string data_path="", std::string name="ChFilterSave") -> ChFilterSave"""
        _sensor.ChFilterSave_swiginit(self, _sensor.new_ChFilterSave(*args))
    __swig_destroy__ = _sensor.delete_ChFilterSave

    def Apply(self):
        r"""Apply(ChFilterSave self)"""
        return _sensor.ChFilterSave_Apply(self)

    def Initialize(self, pSensor, bufferInOut):
        r"""Initialize(ChFilterSave self, std::shared_ptr< chrono::sensor::ChSensor > pSensor, std::shared_ptr< chrono::sensor::SensorBuffer > & bufferInOut)"""
        return _sensor.ChFilterSave_Initialize(self, pSensor, bufferInOut)

# Register ChFilterSave in _sensor:
_sensor.ChFilterSave_swigregister(ChFilterSave)

class ChFilterSavePtCloud(ChFilter):
    r"""Proxy of C++ chrono::sensor::ChFilterSavePtCloud class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ChFilterSavePtCloud self, std::string data_path="", std::string name="ChFilterSavePtCloud") -> ChFilterSavePtCloud"""
        _sensor.ChFilterSavePtCloud_swiginit(self, _sensor.new_ChFilterSavePtCloud(*args))
    __swig_destroy__ = _sensor.delete_ChFilterSavePtCloud

    def Apply(self):
        r"""Apply(ChFilterSavePtCloud self)"""
        return _sensor.ChFilterSavePtCloud_Apply(self)

    def Initialize(self, pSensor, bufferInOut):
        r"""Initialize(ChFilterSavePtCloud self, std::shared_ptr< chrono::sensor::ChSensor > pSensor, std::shared_ptr< chrono::sensor::SensorBuffer > & bufferInOut)"""
        return _sensor.ChFilterSavePtCloud_Initialize(self, pSensor, bufferInOut)

# Register ChFilterSavePtCloud in _sensor:
_sensor.ChFilterSavePtCloud_swigregister(ChFilterSavePtCloud)

class ChFilterVisualize(ChFilter):
    r"""Proxy of C++ chrono::sensor::ChFilterVisualize class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ChFilterVisualize self, int w, int h, std::string name="ChFilterVisualize", bool fullscreen=False) -> ChFilterVisualize"""
        _sensor.ChFilterVisualize_swiginit(self, _sensor.new_ChFilterVisualize(*args))
    __swig_destroy__ = _sensor.delete_ChFilterVisualize

    def Apply(self):
        r"""Apply(ChFilterVisualize self)"""
        return _sensor.ChFilterVisualize_Apply(self)

    def Initialize(self, pSensor, bufferInOut):
        r"""Initialize(ChFilterVisualize self, std::shared_ptr< chrono::sensor::ChSensor > pSensor, std::shared_ptr< chrono::sensor::SensorBuffer > & bufferInOut)"""
        return _sensor.ChFilterVisualize_Initialize(self, pSensor, bufferInOut)

# Register ChFilterVisualize in _sensor:
_sensor.ChFilterVisualize_swigregister(ChFilterVisualize)

class ChFilterVisualizePointCloud(ChFilterVisualize):
    r"""Proxy of C++ chrono::sensor::ChFilterVisualizePointCloud class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ChFilterVisualizePointCloud self, int w, int h, float zoom, std::string name="ChFilterVisualizePointCloud") -> ChFilterVisualizePointCloud"""
        _sensor.ChFilterVisualizePointCloud_swiginit(self, _sensor.new_ChFilterVisualizePointCloud(*args))
    __swig_destroy__ = _sensor.delete_ChFilterVisualizePointCloud

    def Apply(self):
        r"""Apply(ChFilterVisualizePointCloud self)"""
        return _sensor.ChFilterVisualizePointCloud_Apply(self)

    def Initialize(self, pSensor, bufferInOut):
        r"""Initialize(ChFilterVisualizePointCloud self, std::shared_ptr< chrono::sensor::ChSensor > pSensor, std::shared_ptr< chrono::sensor::SensorBuffer > & bufferInOut)"""
        return _sensor.ChFilterVisualizePointCloud_Initialize(self, pSensor, bufferInOut)

# Register ChFilterVisualizePointCloud in _sensor:
_sensor.ChFilterVisualizePointCloud_swigregister(ChFilterVisualizePointCloud)

class ChFilterImageHalf4ToRGBA8(ChFilter):
    r"""Proxy of C++ chrono::sensor::ChFilterImageHalf4ToRGBA8 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ChFilterImageHalf4ToRGBA8 self, std::string name={}) -> ChFilterImageHalf4ToRGBA8"""
        _sensor.ChFilterImageHalf4ToRGBA8_swiginit(self, _sensor.new_ChFilterImageHalf4ToRGBA8(*args))

    def Apply(self):
        r"""Apply(ChFilterImageHalf4ToRGBA8 self)"""
        return _sensor.ChFilterImageHalf4ToRGBA8_Apply(self)

    def Initialize(self, pSensor, bufferInOut):
        r"""Initialize(ChFilterImageHalf4ToRGBA8 self, std::shared_ptr< chrono::sensor::ChSensor > pSensor, std::shared_ptr< chrono::sensor::SensorBuffer > & bufferInOut)"""
        return _sensor.ChFilterImageHalf4ToRGBA8_Initialize(self, pSensor, bufferInOut)
    __swig_destroy__ = _sensor.delete_ChFilterImageHalf4ToRGBA8

# Register ChFilterImageHalf4ToRGBA8 in _sensor:
_sensor.ChFilterImageHalf4ToRGBA8_swigregister(ChFilterImageHalf4ToRGBA8)

class ChFilterImageResize(ChFilter):
    r"""Proxy of C++ chrono::sensor::ChFilterImageResize class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ChFilterImageResize self, int w, int h, std::string name={}) -> ChFilterImageResize"""
        _sensor.ChFilterImageResize_swiginit(self, _sensor.new_ChFilterImageResize(*args))

    def Apply(self):
        r"""Apply(ChFilterImageResize self)"""
        return _sensor.ChFilterImageResize_Apply(self)

    def Initialize(self, pSensor, bufferInOut):
        r"""Initialize(ChFilterImageResize self, std::shared_ptr< chrono::sensor::ChSensor > pSensor, std::shared_ptr< chrono::sensor::SensorBuffer > & bufferInOut)"""
        return _sensor.ChFilterImageResize_Initialize(self, pSensor, bufferInOut)
    __swig_destroy__ = _sensor.delete_ChFilterImageResize

# Register ChFilterImageResize in _sensor:
_sensor.ChFilterImageResize_swigregister(ChFilterImageResize)

class ChFilterImgAlias(ChFilter):
    r"""Proxy of C++ chrono::sensor::ChFilterImgAlias class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ChFilterImgAlias self, int factor, std::string name={}) -> ChFilterImgAlias"""
        _sensor.ChFilterImgAlias_swiginit(self, _sensor.new_ChFilterImgAlias(*args))

    def Apply(self):
        r"""Apply(ChFilterImgAlias self)"""
        return _sensor.ChFilterImgAlias_Apply(self)

    def Initialize(self, pSensor, bufferInOut):
        r"""Initialize(ChFilterImgAlias self, std::shared_ptr< chrono::sensor::ChSensor > pSensor, std::shared_ptr< chrono::sensor::SensorBuffer > & bufferInOut)"""
        return _sensor.ChFilterImgAlias_Initialize(self, pSensor, bufferInOut)
    __swig_destroy__ = _sensor.delete_ChFilterImgAlias

# Register ChFilterImgAlias in _sensor:
_sensor.ChFilterImgAlias_swigregister(ChFilterImgAlias)

PROFILE = _sensor.PROFILE

class ChFilterRadarProcess(ChFilter):
    r"""Proxy of C++ chrono::sensor::ChFilterRadarProcess class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ChFilterRadarProcess self, std::string name="ChFilterRadarProcess") -> ChFilterRadarProcess"""
        _sensor.ChFilterRadarProcess_swiginit(self, _sensor.new_ChFilterRadarProcess(*args))

    def Apply(self):
        r"""Apply(ChFilterRadarProcess self)"""
        return _sensor.ChFilterRadarProcess_Apply(self)

    def Initialize(self, pSensor, bufferInOut):
        r"""Initialize(ChFilterRadarProcess self, std::shared_ptr< chrono::sensor::ChSensor > pSensor, std::shared_ptr< chrono::sensor::SensorBuffer > & bufferInOut)"""
        return _sensor.ChFilterRadarProcess_Initialize(self, pSensor, bufferInOut)
    __swig_destroy__ = _sensor.delete_ChFilterRadarProcess

# Register ChFilterRadarProcess in _sensor:
_sensor.ChFilterRadarProcess_swigregister(ChFilterRadarProcess)

class ChFilterRadarSavePC(ChFilter):
    r"""Proxy of C++ chrono::sensor::ChFilterRadarSavePC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ChFilterRadarSavePC self, std::string data_path="", std::string name="ChFilterRadarSavePC") -> ChFilterRadarSavePC"""
        _sensor.ChFilterRadarSavePC_swiginit(self, _sensor.new_ChFilterRadarSavePC(*args))
    __swig_destroy__ = _sensor.delete_ChFilterRadarSavePC

    def Apply(self):
        r"""Apply(ChFilterRadarSavePC self)"""
        return _sensor.ChFilterRadarSavePC_Apply(self)

    def Initialize(self, pSensor, bufferInOut):
        r"""Initialize(ChFilterRadarSavePC self, std::shared_ptr< chrono::sensor::ChSensor > pSensor, std::shared_ptr< chrono::sensor::SensorBuffer > & bufferInOut)"""
        return _sensor.ChFilterRadarSavePC_Initialize(self, pSensor, bufferInOut)

# Register ChFilterRadarSavePC in _sensor:
_sensor.ChFilterRadarSavePC_swigregister(ChFilterRadarSavePC)

class ChFilterRadarVisualizeCluster(ChFilterVisualize):
    r"""Proxy of C++ chrono::sensor::ChFilterRadarVisualizeCluster class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ChFilterRadarVisualizeCluster self, int w, int h, float zoom, std::string name="ChFilterVisualizeRadarPC") -> ChFilterRadarVisualizeCluster"""
        _sensor.ChFilterRadarVisualizeCluster_swiginit(self, _sensor.new_ChFilterRadarVisualizeCluster(*args))
    __swig_destroy__ = _sensor.delete_ChFilterRadarVisualizeCluster

    def Apply(self):
        r"""Apply(ChFilterRadarVisualizeCluster self)"""
        return _sensor.ChFilterRadarVisualizeCluster_Apply(self)

    def Initialize(self, pSensor, bufferInOut):
        r"""Initialize(ChFilterRadarVisualizeCluster self, std::shared_ptr< chrono::sensor::ChSensor > pSensor, std::shared_ptr< chrono::sensor::SensorBuffer > & bufferInOut)"""
        return _sensor.ChFilterRadarVisualizeCluster_Initialize(self, pSensor, bufferInOut)

# Register ChFilterRadarVisualizeCluster in _sensor:
_sensor.ChFilterRadarVisualizeCluster_swigregister(ChFilterRadarVisualizeCluster)

class ChFilterRadarXYZReturn(ChFilter):
    r"""Proxy of C++ chrono::sensor::ChFilterRadarXYZReturn class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ChFilterRadarXYZReturn self, std::string name="ChFilterRadarXYZReturn") -> ChFilterRadarXYZReturn"""
        _sensor.ChFilterRadarXYZReturn_swiginit(self, _sensor.new_ChFilterRadarXYZReturn(*args))

    def Apply(self):
        r"""Apply(ChFilterRadarXYZReturn self)"""
        return _sensor.ChFilterRadarXYZReturn_Apply(self)

    def Initialize(self, pSensor, bufferInOut):
        r"""Initialize(ChFilterRadarXYZReturn self, std::shared_ptr< chrono::sensor::ChSensor > pSensor, std::shared_ptr< chrono::sensor::SensorBuffer > & bufferInOut)"""
        return _sensor.ChFilterRadarXYZReturn_Initialize(self, pSensor, bufferInOut)
    __swig_destroy__ = _sensor.delete_ChFilterRadarXYZReturn

# Register ChFilterRadarXYZReturn in _sensor:
_sensor.ChFilterRadarXYZReturn_swigregister(ChFilterRadarXYZReturn)

class ChFilterRadarXYZVisualize(ChFilterVisualize):
    r"""Proxy of C++ chrono::sensor::ChFilterRadarXYZVisualize class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ChFilterRadarXYZVisualize self, int w, int h, float zoom, std::string name="ChFilterVisualizeRadarPC") -> ChFilterRadarXYZVisualize"""
        _sensor.ChFilterRadarXYZVisualize_swiginit(self, _sensor.new_ChFilterRadarXYZVisualize(*args))
    __swig_destroy__ = _sensor.delete_ChFilterRadarXYZVisualize

    def Apply(self):
        r"""Apply(ChFilterRadarXYZVisualize self)"""
        return _sensor.ChFilterRadarXYZVisualize_Apply(self)

    def Initialize(self, pSensor, bufferInOut):
        r"""Initialize(ChFilterRadarXYZVisualize self, std::shared_ptr< chrono::sensor::ChSensor > pSensor, std::shared_ptr< chrono::sensor::SensorBuffer > & bufferInOut)"""
        return _sensor.ChFilterRadarXYZVisualize_Initialize(self, pSensor, bufferInOut)

# Register ChFilterRadarXYZVisualize in _sensor:
_sensor.ChFilterRadarXYZVisualize_swigregister(ChFilterRadarXYZVisualize)

class ChFilterCameraNoiseConstNormal(ChFilter):
    r"""Proxy of C++ chrono::sensor::ChFilterCameraNoiseConstNormal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ChFilterCameraNoiseConstNormal self, float mean, float stdev, std::string name="ChFilterCameraNoiseConstNormal") -> ChFilterCameraNoiseConstNormal"""
        _sensor.ChFilterCameraNoiseConstNormal_swiginit(self, _sensor.new_ChFilterCameraNoiseConstNormal(*args))

    def Apply(self):
        r"""Apply(ChFilterCameraNoiseConstNormal self)"""
        return _sensor.ChFilterCameraNoiseConstNormal_Apply(self)

    def Initialize(self, pSensor, bufferInOut):
        r"""Initialize(ChFilterCameraNoiseConstNormal self, std::shared_ptr< chrono::sensor::ChSensor > pSensor, std::shared_ptr< chrono::sensor::SensorBuffer > & bufferInOut)"""
        return _sensor.ChFilterCameraNoiseConstNormal_Initialize(self, pSensor, bufferInOut)
    __swig_destroy__ = _sensor.delete_ChFilterCameraNoiseConstNormal

# Register ChFilterCameraNoiseConstNormal in _sensor:
_sensor.ChFilterCameraNoiseConstNormal_swigregister(ChFilterCameraNoiseConstNormal)

class ChFilterCameraNoisePixDep(ChFilter):
    r"""Proxy of C++ chrono::sensor::ChFilterCameraNoisePixDep class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ChFilterCameraNoisePixDep self, float variance_slope, float variance_intercept, std::string name="ChFilterCameraNoisePixDep") -> ChFilterCameraNoisePixDep"""
        _sensor.ChFilterCameraNoisePixDep_swiginit(self, _sensor.new_ChFilterCameraNoisePixDep(*args))

    def Apply(self):
        r"""Apply(ChFilterCameraNoisePixDep self)"""
        return _sensor.ChFilterCameraNoisePixDep_Apply(self)

    def Initialize(self, pSensor, bufferInOut):
        r"""Initialize(ChFilterCameraNoisePixDep self, std::shared_ptr< chrono::sensor::ChSensor > pSensor, std::shared_ptr< chrono::sensor::SensorBuffer > & bufferInOut)"""
        return _sensor.ChFilterCameraNoisePixDep_Initialize(self, pSensor, bufferInOut)
    __swig_destroy__ = _sensor.delete_ChFilterCameraNoisePixDep

# Register ChFilterCameraNoisePixDep in _sensor:
_sensor.ChFilterCameraNoisePixDep_swigregister(ChFilterCameraNoisePixDep)

class Background(object):
    r"""Proxy of C++ chrono::sensor::Background class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mode = property(_sensor.Background_mode_get, _sensor.Background_mode_set, doc=r"""mode : BackgroundMode""")
    color_zenith = property(_sensor.Background_color_zenith_get, _sensor.Background_color_zenith_set, doc=r"""color_zenith : chrono::ChVector<(float)>""")
    color_horizon = property(_sensor.Background_color_horizon_get, _sensor.Background_color_horizon_set, doc=r"""color_horizon : chrono::ChVector<(float)>""")
    env_tex = property(_sensor.Background_env_tex_get, _sensor.Background_env_tex_set, doc=r"""env_tex : std::string""")

    def __init__(self):
        r"""__init__(Background self) -> Background"""
        _sensor.Background_swiginit(self, _sensor.new_Background())
    __swig_destroy__ = _sensor.delete_Background

# Register Background in _sensor:
_sensor.Background_swigregister(Background)

class ChScene(object):
    r"""Proxy of C++ chrono::sensor::ChScene class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChScene self) -> ChScene"""
        _sensor.ChScene_swiginit(self, _sensor.new_ChScene())
    __swig_destroy__ = _sensor.delete_ChScene

    def AddPointLight(self, *args):
        r"""
        AddPointLight(ChScene self, ChVectorF pos, ChColor color, float max_range) -> unsigned int
        AddPointLight(ChScene self, PointLight p) -> unsigned int
        """
        return _sensor.ChScene_AddPointLight(self, *args)

    def GetPointLights(self):
        r"""GetPointLights(ChScene self) -> std::vector< PointLight,std::allocator< PointLight > >"""
        return _sensor.ChScene_GetPointLights(self)

    def ModifyPointLight(self, id, p):
        r"""ModifyPointLight(ChScene self, unsigned int id, PointLight p)"""
        return _sensor.ChScene_ModifyPointLight(self, id, p)

    def GetBackground(self):
        r"""GetBackground(ChScene self) -> Background"""
        return _sensor.ChScene_GetBackground(self)

    def SetBackground(self, b):
        r"""SetBackground(ChScene self, Background b)"""
        return _sensor.ChScene_SetBackground(self, b)

    def SetAmbientLight(self, color):
        r"""SetAmbientLight(ChScene self, ChVectorF color)"""
        return _sensor.ChScene_SetAmbientLight(self, color)

    def GetAmbientLight(self):
        r"""GetAmbientLight(ChScene self) -> ChVectorF"""
        return _sensor.ChScene_GetAmbientLight(self)

    def ResetLightsChanged(self):
        r"""ResetLightsChanged(ChScene self)"""
        return _sensor.ChScene_ResetLightsChanged(self)

    def GetLightsChanged(self):
        r"""GetLightsChanged(ChScene self) -> bool"""
        return _sensor.ChScene_GetLightsChanged(self)

    def ResetBackgroundChanged(self):
        r"""ResetBackgroundChanged(ChScene self)"""
        return _sensor.ChScene_ResetBackgroundChanged(self)

    def GetBackgroundChanged(self):
        r"""GetBackgroundChanged(ChScene self) -> bool"""
        return _sensor.ChScene_GetBackgroundChanged(self)

    def SetFogColor(self, color):
        r"""SetFogColor(ChScene self, ChVectorF color)"""
        return _sensor.ChScene_SetFogColor(self, color)

    def GetFogColor(self):
        r"""GetFogColor(ChScene self) -> ChVectorF"""
        return _sensor.ChScene_GetFogColor(self)

    def SetFogScattering(self, coefficient):
        r"""SetFogScattering(ChScene self, float coefficient)"""
        return _sensor.ChScene_SetFogScattering(self, coefficient)

    def SetFogScatteringFromDistance(self, distance):
        r"""SetFogScatteringFromDistance(ChScene self, float distance)"""
        return _sensor.ChScene_SetFogScatteringFromDistance(self, distance)

    def GetFogScattering(self):
        r"""GetFogScattering(ChScene self) -> float"""
        return _sensor.ChScene_GetFogScattering(self)

    def SetSceneEpsilon(self, e):
        r"""SetSceneEpsilon(ChScene self, float e)"""
        return _sensor.ChScene_SetSceneEpsilon(self, e)

    def GetSceneEpsilon(self):
        r"""GetSceneEpsilon(ChScene self) -> float"""
        return _sensor.ChScene_GetSceneEpsilon(self)

    def UpdateOriginOffset(self, sensor_pos, force=False):
        r"""UpdateOriginOffset(ChScene self, ChVectorF sensor_pos, bool force=False)"""
        return _sensor.ChScene_UpdateOriginOffset(self, sensor_pos, force)

    def GetOriginChanged(self):
        r"""GetOriginChanged(ChScene self) -> bool"""
        return _sensor.ChScene_GetOriginChanged(self)

    def ResetOriginChanged(self):
        r"""ResetOriginChanged(ChScene self)"""
        return _sensor.ChScene_ResetOriginChanged(self)

    def GetOriginOffset(self):
        r"""GetOriginOffset(ChScene self) -> ChVectorF"""
        return _sensor.ChScene_GetOriginOffset(self)

    def SetOriginOffsetThreshold(self, threshold):
        r"""SetOriginOffsetThreshold(ChScene self, float threshold)"""
        return _sensor.ChScene_SetOriginOffsetThreshold(self, threshold)

    def EnableDynamicOrigin(self, enable):
        r"""EnableDynamicOrigin(ChScene self, bool enable)"""
        return _sensor.ChScene_EnableDynamicOrigin(self, enable)

# Register ChScene in _sensor:
_sensor.ChScene_swigregister(ChScene)

class half4(object):
    r"""Proxy of C++ half4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_sensor.half4_x_get, _sensor.half4_x_set, doc=r"""x : __half""")
    y = property(_sensor.half4_y_get, _sensor.half4_y_set, doc=r"""y : __half""")
    z = property(_sensor.half4_z_get, _sensor.half4_z_set, doc=r"""z : __half""")
    w = property(_sensor.half4_w_get, _sensor.half4_w_set, doc=r"""w : __half""")

    def __init__(self):
        r"""__init__(half4 self) -> half4"""
        _sensor.half4_swiginit(self, _sensor.new_half4())
    __swig_destroy__ = _sensor.delete_half4

# Register half4 in _sensor:
_sensor.half4_swigregister(half4)

CAMERA_RAY_TYPE = _sensor.CAMERA_RAY_TYPE

SHADOW_RAY_TYPE = _sensor.SHADOW_RAY_TYPE

LIDAR_RAY_TYPE = _sensor.LIDAR_RAY_TYPE

RADAR_RAY_TYPE = _sensor.RADAR_RAY_TYPE

SEGMENTATION_RAY_TYPE = _sensor.SEGMENTATION_RAY_TYPE

PINHOLE = _sensor.PINHOLE

FOV_LENS = _sensor.FOV_LENS

RADIAL = _sensor.RADIAL

class PointLight(object):
    r"""Proxy of C++ PointLight class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pos = property(_sensor.PointLight_pos_get, _sensor.PointLight_pos_set, doc=r"""pos : float3""")
    color = property(_sensor.PointLight_color_get, _sensor.PointLight_color_set, doc=r"""color : float3""")
    max_range = property(_sensor.PointLight_max_range_get, _sensor.PointLight_max_range_set, doc=r"""max_range : float""")

    def __init__(self):
        r"""__init__(PointLight self) -> PointLight"""
        _sensor.PointLight_swiginit(self, _sensor.new_PointLight())
    __swig_destroy__ = _sensor.delete_PointLight

# Register PointLight in _sensor:
_sensor.PointLight_swigregister(PointLight)

BackgroundMode_SOLID_COLOR = _sensor.BackgroundMode_SOLID_COLOR

BackgroundMode_GRADIENT = _sensor.BackgroundMode_GRADIENT

BackgroundMode_ENVIRONMENT_MAP = _sensor.BackgroundMode_ENVIRONMENT_MAP

class CameraMissParameters(object):
    r"""Proxy of C++ CameraMissParameters class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mode = property(_sensor.CameraMissParameters_mode_get, _sensor.CameraMissParameters_mode_set, doc=r"""mode : BackgroundMode""")
    color_zenith = property(_sensor.CameraMissParameters_color_zenith_get, _sensor.CameraMissParameters_color_zenith_set, doc=r"""color_zenith : float3""")
    color_horizon = property(_sensor.CameraMissParameters_color_horizon_get, _sensor.CameraMissParameters_color_horizon_set, doc=r"""color_horizon : float3""")
    env_map = property(_sensor.CameraMissParameters_env_map_get, _sensor.CameraMissParameters_env_map_set, doc=r"""env_map : cudaTextureObject_t""")

    def __init__(self):
        r"""__init__(CameraMissParameters self) -> CameraMissParameters"""
        _sensor.CameraMissParameters_swiginit(self, _sensor.new_CameraMissParameters())
    __swig_destroy__ = _sensor.delete_CameraMissParameters

# Register CameraMissParameters in _sensor:
_sensor.CameraMissParameters_swigregister(CameraMissParameters)

class MissParameters(object):
    r"""Proxy of C++ MissParameters class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    camera_miss = property(_sensor.MissParameters_camera_miss_get, _sensor.MissParameters_camera_miss_set, doc=r"""camera_miss : CameraMissParameters""")

    def __init__(self):
        r"""__init__(MissParameters self) -> MissParameters"""
        _sensor.MissParameters_swiginit(self, _sensor.new_MissParameters())
    __swig_destroy__ = _sensor.delete_MissParameters

# Register MissParameters in _sensor:
_sensor.MissParameters_swigregister(MissParameters)

class LensParams(object):
    r"""Proxy of C++ LensParams class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    a0 = property(_sensor.LensParams_a0_get, _sensor.LensParams_a0_set, doc=r"""a0 : float""")
    a1 = property(_sensor.LensParams_a1_get, _sensor.LensParams_a1_set, doc=r"""a1 : float""")
    a2 = property(_sensor.LensParams_a2_get, _sensor.LensParams_a2_set, doc=r"""a2 : float""")
    a3 = property(_sensor.LensParams_a3_get, _sensor.LensParams_a3_set, doc=r"""a3 : float""")
    a4 = property(_sensor.LensParams_a4_get, _sensor.LensParams_a4_set, doc=r"""a4 : float""")
    a5 = property(_sensor.LensParams_a5_get, _sensor.LensParams_a5_set, doc=r"""a5 : float""")
    a6 = property(_sensor.LensParams_a6_get, _sensor.LensParams_a6_set, doc=r"""a6 : float""")
    a7 = property(_sensor.LensParams_a7_get, _sensor.LensParams_a7_set, doc=r"""a7 : float""")
    a8 = property(_sensor.LensParams_a8_get, _sensor.LensParams_a8_set, doc=r"""a8 : float""")

    def __init__(self):
        r"""__init__(LensParams self) -> LensParams"""
        _sensor.LensParams_swiginit(self, _sensor.new_LensParams())
    __swig_destroy__ = _sensor.delete_LensParams

# Register LensParams in _sensor:
_sensor.LensParams_swigregister(LensParams)

class CameraParameters(object):
    r"""Proxy of C++ CameraParameters class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    hFOV = property(_sensor.CameraParameters_hFOV_get, _sensor.CameraParameters_hFOV_set, doc=r"""hFOV : float""")
    lens_model = property(_sensor.CameraParameters_lens_model_get, _sensor.CameraParameters_lens_model_set, doc=r"""lens_model : CameraLensModelType""")
    lens_parameters = property(_sensor.CameraParameters_lens_parameters_get, _sensor.CameraParameters_lens_parameters_set, doc=r"""lens_parameters : LensParams""")
    super_sample_factor = property(_sensor.CameraParameters_super_sample_factor_get, _sensor.CameraParameters_super_sample_factor_set, doc=r"""super_sample_factor : unsigned int""")
    gamma = property(_sensor.CameraParameters_gamma_get, _sensor.CameraParameters_gamma_set, doc=r"""gamma : float""")
    use_gi = property(_sensor.CameraParameters_use_gi_get, _sensor.CameraParameters_use_gi_set, doc=r"""use_gi : bool""")
    use_fog = property(_sensor.CameraParameters_use_fog_get, _sensor.CameraParameters_use_fog_set, doc=r"""use_fog : bool""")
    frame_buffer = property(_sensor.CameraParameters_frame_buffer_get, _sensor.CameraParameters_frame_buffer_set, doc=r"""frame_buffer : p.half4""")
    albedo_buffer = property(_sensor.CameraParameters_albedo_buffer_get, _sensor.CameraParameters_albedo_buffer_set, doc=r"""albedo_buffer : p.half4""")
    normal_buffer = property(_sensor.CameraParameters_normal_buffer_get, _sensor.CameraParameters_normal_buffer_set, doc=r"""normal_buffer : p.half4""")
    rng_buffer = property(_sensor.CameraParameters_rng_buffer_get, _sensor.CameraParameters_rng_buffer_set, doc=r"""rng_buffer : p.curandState_t""")

    def __init__(self):
        r"""__init__(CameraParameters self) -> CameraParameters"""
        _sensor.CameraParameters_swiginit(self, _sensor.new_CameraParameters())
    __swig_destroy__ = _sensor.delete_CameraParameters

# Register CameraParameters in _sensor:
_sensor.CameraParameters_swigregister(CameraParameters)

class SemanticCameraParameters(object):
    r"""Proxy of C++ SemanticCameraParameters class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    hFOV = property(_sensor.SemanticCameraParameters_hFOV_get, _sensor.SemanticCameraParameters_hFOV_set, doc=r"""hFOV : float""")
    lens_model = property(_sensor.SemanticCameraParameters_lens_model_get, _sensor.SemanticCameraParameters_lens_model_set, doc=r"""lens_model : CameraLensModelType""")
    lens_parameters = property(_sensor.SemanticCameraParameters_lens_parameters_get, _sensor.SemanticCameraParameters_lens_parameters_set, doc=r"""lens_parameters : LensParams""")
    frame_buffer = property(_sensor.SemanticCameraParameters_frame_buffer_get, _sensor.SemanticCameraParameters_frame_buffer_set, doc=r"""frame_buffer : p.ushort2""")
    rng_buffer = property(_sensor.SemanticCameraParameters_rng_buffer_get, _sensor.SemanticCameraParameters_rng_buffer_set, doc=r"""rng_buffer : p.curandState_t""")

    def __init__(self):
        r"""__init__(SemanticCameraParameters self) -> SemanticCameraParameters"""
        _sensor.SemanticCameraParameters_swiginit(self, _sensor.new_SemanticCameraParameters())
    __swig_destroy__ = _sensor.delete_SemanticCameraParameters

# Register SemanticCameraParameters in _sensor:
_sensor.SemanticCameraParameters_swigregister(SemanticCameraParameters)

LidarBeamShape_RECTANGULAR = _sensor.LidarBeamShape_RECTANGULAR

LidarBeamShape_ELLIPTICAL = _sensor.LidarBeamShape_ELLIPTICAL

class LidarParameters(object):
    r"""Proxy of C++ LidarParameters class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max_vert_angle = property(_sensor.LidarParameters_max_vert_angle_get, _sensor.LidarParameters_max_vert_angle_set, doc=r"""max_vert_angle : float""")
    min_vert_angle = property(_sensor.LidarParameters_min_vert_angle_get, _sensor.LidarParameters_min_vert_angle_set, doc=r"""min_vert_angle : float""")
    hFOV = property(_sensor.LidarParameters_hFOV_get, _sensor.LidarParameters_hFOV_set, doc=r"""hFOV : float""")
    max_distance = property(_sensor.LidarParameters_max_distance_get, _sensor.LidarParameters_max_distance_set, doc=r"""max_distance : float""")
    clip_near = property(_sensor.LidarParameters_clip_near_get, _sensor.LidarParameters_clip_near_set, doc=r"""clip_near : float""")
    sample_radius = property(_sensor.LidarParameters_sample_radius_get, _sensor.LidarParameters_sample_radius_set, doc=r"""sample_radius : unsigned short""")
    beam_shape = property(_sensor.LidarParameters_beam_shape_get, _sensor.LidarParameters_beam_shape_set, doc=r"""beam_shape : LidarBeamShape""")
    horiz_div_angle = property(_sensor.LidarParameters_horiz_div_angle_get, _sensor.LidarParameters_horiz_div_angle_set, doc=r"""horiz_div_angle : float""")
    vert_div_angle = property(_sensor.LidarParameters_vert_div_angle_get, _sensor.LidarParameters_vert_div_angle_set, doc=r"""vert_div_angle : float""")
    frame_buffer = property(_sensor.LidarParameters_frame_buffer_get, _sensor.LidarParameters_frame_buffer_set, doc=r"""frame_buffer : p.float2""")

    def __init__(self):
        r"""__init__(LidarParameters self) -> LidarParameters"""
        _sensor.LidarParameters_swiginit(self, _sensor.new_LidarParameters())
    __swig_destroy__ = _sensor.delete_LidarParameters

# Register LidarParameters in _sensor:
_sensor.LidarParameters_swigregister(LidarParameters)

RadarReturnMode_RETURN = _sensor.RadarReturnMode_RETURN

RadarReturnMode_TRACK = _sensor.RadarReturnMode_TRACK

class RadarParameters(object):
    r"""Proxy of C++ RadarParameters class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    vFOV = property(_sensor.RadarParameters_vFOV_get, _sensor.RadarParameters_vFOV_set, doc=r"""vFOV : float""")
    hFOV = property(_sensor.RadarParameters_hFOV_get, _sensor.RadarParameters_hFOV_set, doc=r"""hFOV : float""")
    max_distance = property(_sensor.RadarParameters_max_distance_get, _sensor.RadarParameters_max_distance_set, doc=r"""max_distance : float""")
    clip_near = property(_sensor.RadarParameters_clip_near_get, _sensor.RadarParameters_clip_near_set, doc=r"""clip_near : float""")
    horiz_div_angle = property(_sensor.RadarParameters_horiz_div_angle_get, _sensor.RadarParameters_horiz_div_angle_set, doc=r"""horiz_div_angle : float""")
    vert_div_angle = property(_sensor.RadarParameters_vert_div_angle_get, _sensor.RadarParameters_vert_div_angle_set, doc=r"""vert_div_angle : float""")
    velocity = property(_sensor.RadarParameters_velocity_get, _sensor.RadarParameters_velocity_set, doc=r"""velocity : float3""")
    frame_buffer = property(_sensor.RadarParameters_frame_buffer_get, _sensor.RadarParameters_frame_buffer_set, doc=r"""frame_buffer : p.float""")

    def __init__(self):
        r"""__init__(RadarParameters self) -> RadarParameters"""
        _sensor.RadarParameters_swiginit(self, _sensor.new_RadarParameters())
    __swig_destroy__ = _sensor.delete_RadarParameters

# Register RadarParameters in _sensor:
_sensor.RadarParameters_swigregister(RadarParameters)

class RaygenParameters(object):
    r"""Proxy of C++ RaygenParameters class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    t0 = property(_sensor.RaygenParameters_t0_get, _sensor.RaygenParameters_t0_set, doc=r"""t0 : float""")
    t1 = property(_sensor.RaygenParameters_t1_get, _sensor.RaygenParameters_t1_set, doc=r"""t1 : float""")
    pos0 = property(_sensor.RaygenParameters_pos0_get, _sensor.RaygenParameters_pos0_set, doc=r"""pos0 : float3""")
    rot0 = property(_sensor.RaygenParameters_rot0_get, _sensor.RaygenParameters_rot0_set, doc=r"""rot0 : float4""")
    pos1 = property(_sensor.RaygenParameters_pos1_get, _sensor.RaygenParameters_pos1_set, doc=r"""pos1 : float3""")
    rot1 = property(_sensor.RaygenParameters_rot1_get, _sensor.RaygenParameters_rot1_set, doc=r"""rot1 : float4""")

    def __init__(self):
        r"""__init__(RaygenParameters self) -> RaygenParameters"""
        _sensor.RaygenParameters_swiginit(self, _sensor.new_RaygenParameters())
    __swig_destroy__ = _sensor.delete_RaygenParameters

# Register RaygenParameters in _sensor:
_sensor.RaygenParameters_swigregister(RaygenParameters)

class MeshParameters(object):
    r"""Proxy of C++ MeshParameters class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    vertex_buffer = property(_sensor.MeshParameters_vertex_buffer_get, _sensor.MeshParameters_vertex_buffer_set, doc=r"""vertex_buffer : p.float4""")
    normal_buffer = property(_sensor.MeshParameters_normal_buffer_get, _sensor.MeshParameters_normal_buffer_set, doc=r"""normal_buffer : p.float4""")
    uv_buffer = property(_sensor.MeshParameters_uv_buffer_get, _sensor.MeshParameters_uv_buffer_set, doc=r"""uv_buffer : p.float2""")
    vertex_index_buffer = property(_sensor.MeshParameters_vertex_index_buffer_get, _sensor.MeshParameters_vertex_index_buffer_set, doc=r"""vertex_index_buffer : p.uint4""")
    normal_index_buffer = property(_sensor.MeshParameters_normal_index_buffer_get, _sensor.MeshParameters_normal_index_buffer_set, doc=r"""normal_index_buffer : p.uint4""")
    uv_index_buffer = property(_sensor.MeshParameters_uv_index_buffer_get, _sensor.MeshParameters_uv_index_buffer_set, doc=r"""uv_index_buffer : p.uint4""")
    mat_index_buffer = property(_sensor.MeshParameters_mat_index_buffer_get, _sensor.MeshParameters_mat_index_buffer_set, doc=r"""mat_index_buffer : p.unsigned int""")
    pad = property(_sensor.MeshParameters_pad_get, _sensor.MeshParameters_pad_set, doc=r"""pad : double""")

    def __init__(self):
        r"""__init__(MeshParameters self) -> MeshParameters"""
        _sensor.MeshParameters_swiginit(self, _sensor.new_MeshParameters())
    __swig_destroy__ = _sensor.delete_MeshParameters

# Register MeshParameters in _sensor:
_sensor.MeshParameters_swigregister(MeshParameters)

class MaterialParameters(object):
    r"""Proxy of C++ MaterialParameters class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Kd = property(_sensor.MaterialParameters_Kd_get, _sensor.MaterialParameters_Kd_set, doc=r"""Kd : float3""")
    Ks = property(_sensor.MaterialParameters_Ks_get, _sensor.MaterialParameters_Ks_set, doc=r"""Ks : float3""")
    fresnel_exp = property(_sensor.MaterialParameters_fresnel_exp_get, _sensor.MaterialParameters_fresnel_exp_set, doc=r"""fresnel_exp : float""")
    fresnel_min = property(_sensor.MaterialParameters_fresnel_min_get, _sensor.MaterialParameters_fresnel_min_set, doc=r"""fresnel_min : float""")
    fresnel_max = property(_sensor.MaterialParameters_fresnel_max_get, _sensor.MaterialParameters_fresnel_max_set, doc=r"""fresnel_max : float""")
    transparency = property(_sensor.MaterialParameters_transparency_get, _sensor.MaterialParameters_transparency_set, doc=r"""transparency : float""")
    roughness = property(_sensor.MaterialParameters_roughness_get, _sensor.MaterialParameters_roughness_set, doc=r"""roughness : float""")
    metallic = property(_sensor.MaterialParameters_metallic_get, _sensor.MaterialParameters_metallic_set, doc=r"""metallic : float""")
    lidar_intensity = property(_sensor.MaterialParameters_lidar_intensity_get, _sensor.MaterialParameters_lidar_intensity_set, doc=r"""lidar_intensity : float""")
    radar_backscatter = property(_sensor.MaterialParameters_radar_backscatter_get, _sensor.MaterialParameters_radar_backscatter_set, doc=r"""radar_backscatter : float""")
    use_specular_workflow = property(_sensor.MaterialParameters_use_specular_workflow_get, _sensor.MaterialParameters_use_specular_workflow_set, doc=r"""use_specular_workflow : int""")
    kd_tex = property(_sensor.MaterialParameters_kd_tex_get, _sensor.MaterialParameters_kd_tex_set, doc=r"""kd_tex : cudaTextureObject_t""")
    kn_tex = property(_sensor.MaterialParameters_kn_tex_get, _sensor.MaterialParameters_kn_tex_set, doc=r"""kn_tex : cudaTextureObject_t""")
    ks_tex = property(_sensor.MaterialParameters_ks_tex_get, _sensor.MaterialParameters_ks_tex_set, doc=r"""ks_tex : cudaTextureObject_t""")
    metallic_tex = property(_sensor.MaterialParameters_metallic_tex_get, _sensor.MaterialParameters_metallic_tex_set, doc=r"""metallic_tex : cudaTextureObject_t""")
    roughness_tex = property(_sensor.MaterialParameters_roughness_tex_get, _sensor.MaterialParameters_roughness_tex_set, doc=r"""roughness_tex : cudaTextureObject_t""")
    opacity_tex = property(_sensor.MaterialParameters_opacity_tex_get, _sensor.MaterialParameters_opacity_tex_set, doc=r"""opacity_tex : cudaTextureObject_t""")
    weight_tex = property(_sensor.MaterialParameters_weight_tex_get, _sensor.MaterialParameters_weight_tex_set, doc=r"""weight_tex : cudaTextureObject_t""")
    tex_scale = property(_sensor.MaterialParameters_tex_scale_get, _sensor.MaterialParameters_tex_scale_set, doc=r"""tex_scale : float2""")
    class_id = property(_sensor.MaterialParameters_class_id_get, _sensor.MaterialParameters_class_id_set, doc=r"""class_id : unsigned short""")
    instance_id = property(_sensor.MaterialParameters_instance_id_get, _sensor.MaterialParameters_instance_id_set, doc=r"""instance_id : unsigned short""")

    def __init__(self):
        r"""__init__(MaterialParameters self) -> MaterialParameters"""
        _sensor.MaterialParameters_swiginit(self, _sensor.new_MaterialParameters())
    __swig_destroy__ = _sensor.delete_MaterialParameters

# Register MaterialParameters in _sensor:
_sensor.MaterialParameters_swigregister(MaterialParameters)

class ContextParameters(object):
    r"""Proxy of C++ ContextParameters class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    lights = property(_sensor.ContextParameters_lights_get, _sensor.ContextParameters_lights_set, doc=r"""lights : p.PointLight""")
    num_lights = property(_sensor.ContextParameters_num_lights_get, _sensor.ContextParameters_num_lights_set, doc=r"""num_lights : int""")
    ambient_light_color = property(_sensor.ContextParameters_ambient_light_color_get, _sensor.ContextParameters_ambient_light_color_set, doc=r"""ambient_light_color : float3""")
    fog_color = property(_sensor.ContextParameters_fog_color_get, _sensor.ContextParameters_fog_color_set, doc=r"""fog_color : float3""")
    fog_scattering = property(_sensor.ContextParameters_fog_scattering_get, _sensor.ContextParameters_fog_scattering_set, doc=r"""fog_scattering : float""")
    max_depth = property(_sensor.ContextParameters_max_depth_get, _sensor.ContextParameters_max_depth_set, doc=r"""max_depth : int""")
    scene_epsilon = property(_sensor.ContextParameters_scene_epsilon_get, _sensor.ContextParameters_scene_epsilon_set, doc=r"""scene_epsilon : float""")
    importance_cutoff = property(_sensor.ContextParameters_importance_cutoff_get, _sensor.ContextParameters_importance_cutoff_set, doc=r"""importance_cutoff : float""")
    root = property(_sensor.ContextParameters_root_get, _sensor.ContextParameters_root_set, doc=r"""root : OptixTraversableHandle""")
    material_pool = property(_sensor.ContextParameters_material_pool_get, _sensor.ContextParameters_material_pool_set, doc=r"""material_pool : p.MaterialParameters""")
    mesh_pool = property(_sensor.ContextParameters_mesh_pool_get, _sensor.ContextParameters_mesh_pool_set, doc=r"""mesh_pool : p.MeshParameters""")

    def __init__(self):
        r"""__init__(ContextParameters self) -> ContextParameters"""
        _sensor.ContextParameters_swiginit(self, _sensor.new_ContextParameters())
    __swig_destroy__ = _sensor.delete_ContextParameters

# Register ContextParameters in _sensor:
_sensor.ContextParameters_swigregister(ContextParameters)

class MaterialRecordParameters(object):
    r"""Proxy of C++ MaterialRecordParameters class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    material_pool_id = property(_sensor.MaterialRecordParameters_material_pool_id_get, _sensor.MaterialRecordParameters_material_pool_id_set, doc=r"""material_pool_id : unsigned int""")
    num_blended_materials = property(_sensor.MaterialRecordParameters_num_blended_materials_get, _sensor.MaterialRecordParameters_num_blended_materials_set, doc=r"""num_blended_materials : unsigned int""")
    mesh_pool_id = property(_sensor.MaterialRecordParameters_mesh_pool_id_get, _sensor.MaterialRecordParameters_mesh_pool_id_set, doc=r"""mesh_pool_id : unsigned int""")
    translational_velocity = property(_sensor.MaterialRecordParameters_translational_velocity_get, _sensor.MaterialRecordParameters_translational_velocity_set, doc=r"""translational_velocity : float3""")
    angular_velocity = property(_sensor.MaterialRecordParameters_angular_velocity_get, _sensor.MaterialRecordParameters_angular_velocity_set, doc=r"""angular_velocity : float3""")
    objectId = property(_sensor.MaterialRecordParameters_objectId_get, _sensor.MaterialRecordParameters_objectId_set, doc=r"""objectId : float""")

    def __init__(self):
        r"""__init__(MaterialRecordParameters self) -> MaterialRecordParameters"""
        _sensor.MaterialRecordParameters_swiginit(self, _sensor.new_MaterialRecordParameters())
    __swig_destroy__ = _sensor.delete_MaterialRecordParameters

# Register MaterialRecordParameters in _sensor:
_sensor.MaterialRecordParameters_swigregister(MaterialRecordParameters)

class PerRayData_camera(object):
    r"""Proxy of C++ PerRayData_camera class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    color = property(_sensor.PerRayData_camera_color_get, _sensor.PerRayData_camera_color_set, doc=r"""color : float3""")
    contrib_to_pixel = property(_sensor.PerRayData_camera_contrib_to_pixel_get, _sensor.PerRayData_camera_contrib_to_pixel_set, doc=r"""contrib_to_pixel : float3""")
    rng = property(_sensor.PerRayData_camera_rng_get, _sensor.PerRayData_camera_rng_set, doc=r"""rng : curandState_t""")
    depth = property(_sensor.PerRayData_camera_depth_get, _sensor.PerRayData_camera_depth_set, doc=r"""depth : int""")
    use_gi = property(_sensor.PerRayData_camera_use_gi_get, _sensor.PerRayData_camera_use_gi_set, doc=r"""use_gi : bool""")
    albedo = property(_sensor.PerRayData_camera_albedo_get, _sensor.PerRayData_camera_albedo_set, doc=r"""albedo : float3""")
    normal = property(_sensor.PerRayData_camera_normal_get, _sensor.PerRayData_camera_normal_set, doc=r"""normal : float3""")
    use_fog = property(_sensor.PerRayData_camera_use_fog_get, _sensor.PerRayData_camera_use_fog_set, doc=r"""use_fog : bool""")

    def __init__(self):
        r"""__init__(PerRayData_camera self) -> PerRayData_camera"""
        _sensor.PerRayData_camera_swiginit(self, _sensor.new_PerRayData_camera())
    __swig_destroy__ = _sensor.delete_PerRayData_camera

# Register PerRayData_camera in _sensor:
_sensor.PerRayData_camera_swigregister(PerRayData_camera)

class PerRayData_semantic(object):
    r"""Proxy of C++ PerRayData_semantic class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    class_id = property(_sensor.PerRayData_semantic_class_id_get, _sensor.PerRayData_semantic_class_id_set, doc=r"""class_id : unsigned short""")
    instance_id = property(_sensor.PerRayData_semantic_instance_id_get, _sensor.PerRayData_semantic_instance_id_set, doc=r"""instance_id : unsigned short""")

    def __init__(self):
        r"""__init__(PerRayData_semantic self) -> PerRayData_semantic"""
        _sensor.PerRayData_semantic_swiginit(self, _sensor.new_PerRayData_semantic())
    __swig_destroy__ = _sensor.delete_PerRayData_semantic

# Register PerRayData_semantic in _sensor:
_sensor.PerRayData_semantic_swigregister(PerRayData_semantic)

class PerRayData_shadow(object):
    r"""Proxy of C++ PerRayData_shadow class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    attenuation = property(_sensor.PerRayData_shadow_attenuation_get, _sensor.PerRayData_shadow_attenuation_set, doc=r"""attenuation : float3""")
    depth = property(_sensor.PerRayData_shadow_depth_get, _sensor.PerRayData_shadow_depth_set, doc=r"""depth : int""")
    ramaining_dist = property(_sensor.PerRayData_shadow_ramaining_dist_get, _sensor.PerRayData_shadow_ramaining_dist_set, doc=r"""ramaining_dist : float""")

    def __init__(self):
        r"""__init__(PerRayData_shadow self) -> PerRayData_shadow"""
        _sensor.PerRayData_shadow_swiginit(self, _sensor.new_PerRayData_shadow())
    __swig_destroy__ = _sensor.delete_PerRayData_shadow

# Register PerRayData_shadow in _sensor:
_sensor.PerRayData_shadow_swigregister(PerRayData_shadow)

class PerRayData_lidar(object):
    r"""Proxy of C++ PerRayData_lidar class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    range = property(_sensor.PerRayData_lidar_range_get, _sensor.PerRayData_lidar_range_set, doc=r"""range : float""")
    intensity = property(_sensor.PerRayData_lidar_intensity_get, _sensor.PerRayData_lidar_intensity_set, doc=r"""intensity : float""")

    def __init__(self):
        r"""__init__(PerRayData_lidar self) -> PerRayData_lidar"""
        _sensor.PerRayData_lidar_swiginit(self, _sensor.new_PerRayData_lidar())
    __swig_destroy__ = _sensor.delete_PerRayData_lidar

# Register PerRayData_lidar in _sensor:
_sensor.PerRayData_lidar_swigregister(PerRayData_lidar)

class PerRayData_radar(object):
    r"""Proxy of C++ PerRayData_radar class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    range = property(_sensor.PerRayData_radar_range_get, _sensor.PerRayData_radar_range_set, doc=r"""range : float""")
    rcs = property(_sensor.PerRayData_radar_rcs_get, _sensor.PerRayData_radar_rcs_set, doc=r"""rcs : float""")
    velocity = property(_sensor.PerRayData_radar_velocity_get, _sensor.PerRayData_radar_velocity_set, doc=r"""velocity : float3""")
    objectId = property(_sensor.PerRayData_radar_objectId_get, _sensor.PerRayData_radar_objectId_set, doc=r"""objectId : float""")

    def __init__(self):
        r"""__init__(PerRayData_radar self) -> PerRayData_radar"""
        _sensor.PerRayData_radar_swiginit(self, _sensor.new_PerRayData_radar())
    __swig_destroy__ = _sensor.delete_PerRayData_radar

# Register PerRayData_radar in _sensor:
_sensor.PerRayData_radar_swigregister(PerRayData_radar)

class ProgramString(object):
    r"""Proxy of C++ chrono::sensor::ProgramString class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    file_name = property(_sensor.ProgramString_file_name_get, _sensor.ProgramString_file_name_set, doc=r"""file_name : std::string""")
    program_name = property(_sensor.ProgramString_program_name_get, _sensor.ProgramString_program_name_set, doc=r"""program_name : std::string""")

    def __init__(self):
        r"""__init__(ProgramString self) -> ProgramString"""
        _sensor.ProgramString_swiginit(self, _sensor.new_ProgramString())
    __swig_destroy__ = _sensor.delete_ProgramString

# Register ProgramString in _sensor:
_sensor.ProgramString_swigregister(ProgramString)

class ByteImageData(object):
    r"""Proxy of C++ chrono::sensor::ByteImageData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    w = property(_sensor.ByteImageData_w_get, _sensor.ByteImageData_w_set, doc=r"""w : int""")
    h = property(_sensor.ByteImageData_h_get, _sensor.ByteImageData_h_set, doc=r"""h : int""")
    c = property(_sensor.ByteImageData_c_get, _sensor.ByteImageData_c_set, doc=r"""c : int""")
    data = property(_sensor.ByteImageData_data_get, _sensor.ByteImageData_data_set, doc=r"""data : std::vector<(unsigned char,std::allocator<(unsigned char)>)>""")

    def __init__(self):
        r"""__init__(ByteImageData self) -> ByteImageData"""
        _sensor.ByteImageData_swiginit(self, _sensor.new_ByteImageData())
    __swig_destroy__ = _sensor.delete_ByteImageData

# Register ByteImageData in _sensor:
_sensor.ByteImageData_swigregister(ByteImageData)


def GetShaderFromFile(context, module, file_name, module_compile_options, pipeline_compile_options):
    r"""GetShaderFromFile(OptixDeviceContext context, OptixModule & module, std::string const & file_name, OptixModuleCompileOptions & module_compile_options, OptixPipelineCompileOptions & pipeline_compile_options)"""
    return _sensor.GetShaderFromFile(context, module, file_name, module_compile_options, pipeline_compile_options)

def optix_log_callback(level, tag, message, arg4):
    r"""optix_log_callback(unsigned int level, char const * tag, char const * message, void * arg4)"""
    return _sensor.optix_log_callback(level, tag, message, arg4)

def LoadByteImage(filename):
    r"""LoadByteImage(std::string const & filename) -> ByteImageData"""
    return _sensor.LoadByteImage(filename)

def SetSensorShaderDir(path):
    r"""SetSensorShaderDir(std::string const & path)"""
    return _sensor.SetSensorShaderDir(path)
EARTH_RADIUS = _sensor.EARTH_RADIUS


def Cartesian2GPS(coords, ref):
    r"""Cartesian2GPS(ChVectorD coords, ChVectorD ref)"""
    return _sensor.Cartesian2GPS(coords, ref)

def GPS2Cartesian(coords, ref):
    r"""GPS2Cartesian(ChVectorD coords, ChVectorD ref)"""
    return _sensor.GPS2Cartesian(coords, ref)
class ChSensor(object):
    r"""Proxy of C++ chrono::sensor::ChSensor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, parent, updateRate, offsetPose):
        r"""__init__(ChSensor self, std::shared_ptr< chrono::ChBody > parent, float updateRate, ChFrameD offsetPose) -> ChSensor"""
        _sensor.ChSensor_swiginit(self, _sensor.new_ChSensor(parent, updateRate, offsetPose))
    __swig_destroy__ = _sensor.delete_ChSensor

    def SetOffsetPose(self, pose):
        r"""SetOffsetPose(ChSensor self, ChFrameD pose)"""
        return _sensor.ChSensor_SetOffsetPose(self, pose)

    def GetOffsetPose(self):
        r"""GetOffsetPose(ChSensor self) -> ChFrameD"""
        return _sensor.ChSensor_GetOffsetPose(self)

    def GetParent(self):
        r"""GetParent(ChSensor self) -> std::shared_ptr< chrono::ChBody >"""
        return _sensor.ChSensor_GetParent(self)

    def SetName(self, name):
        r"""SetName(ChSensor self, std::string name)"""
        return _sensor.ChSensor_SetName(self, name)

    def GetName(self):
        r"""GetName(ChSensor self) -> std::string"""
        return _sensor.ChSensor_GetName(self)

    def GetUpdateRate(self):
        r"""GetUpdateRate(ChSensor self) -> float"""
        return _sensor.ChSensor_GetUpdateRate(self)

    def SetLag(self, t):
        r"""SetLag(ChSensor self, float t)"""
        return _sensor.ChSensor_SetLag(self, t)

    def GetLag(self):
        r"""GetLag(ChSensor self) -> float"""
        return _sensor.ChSensor_GetLag(self)

    def SetCollectionWindow(self, t):
        r"""SetCollectionWindow(ChSensor self, float t)"""
        return _sensor.ChSensor_SetCollectionWindow(self, t)

    def GetCollectionWindow(self):
        r"""GetCollectionWindow(ChSensor self) -> float"""
        return _sensor.ChSensor_GetCollectionWindow(self)

    def SetUpdateRate(self, updateRate):
        r"""SetUpdateRate(ChSensor self, float updateRate)"""
        return _sensor.ChSensor_SetUpdateRate(self, updateRate)

    def GetNumLaunches(self):
        r"""GetNumLaunches(ChSensor self) -> unsigned int"""
        return _sensor.ChSensor_GetNumLaunches(self)

    def IncrementNumLaunches(self):
        r"""IncrementNumLaunches(ChSensor self)"""
        return _sensor.ChSensor_IncrementNumLaunches(self)

    def GetFilterList(self):
        r"""GetFilterList(ChSensor self) -> std::list< std::shared_ptr< chrono::sensor::ChFilter >,std::allocator< std::shared_ptr< chrono::sensor::ChFilter > > >"""
        return _sensor.ChSensor_GetFilterList(self)

    def PushFilter(self, filter):
        r"""PushFilter(ChSensor self, std::shared_ptr< chrono::sensor::ChFilter > filter)"""
        return _sensor.ChSensor_PushFilter(self, filter)

    def PushFilterFront(self, filter):
        r"""PushFilterFront(ChSensor self, std::shared_ptr< chrono::sensor::ChFilter > filter)"""
        return _sensor.ChSensor_PushFilterFront(self, filter)

    def LockFilterList(self):
        r"""LockFilterList(ChSensor self)"""
        return _sensor.ChSensor_LockFilterList(self)

    def GetMostRecentRGBA8Buffer(self):
        r"""GetMostRecentRGBA8Buffer(ChSensor self) -> std::shared_ptr< chrono::sensor::SensorBufferT< std::shared_ptr< chrono::sensor::PixelRGBA8 [] > > >"""
        return _sensor.ChSensor_GetMostRecentRGBA8Buffer(self)

    def GetMostRecentR8Buffer(self):
        r"""GetMostRecentR8Buffer(ChSensor self) -> std::shared_ptr< chrono::sensor::SensorBufferT< std::shared_ptr< char [] > > >"""
        return _sensor.ChSensor_GetMostRecentR8Buffer(self)

    def GetMostRecentDIBuffer(self):
        r"""GetMostRecentDIBuffer(ChSensor self) -> std::shared_ptr< chrono::sensor::LidarBufferT< std::shared_ptr< chrono::sensor::PixelDI [] > > >"""
        return _sensor.ChSensor_GetMostRecentDIBuffer(self)

    def GetMostRecentXYZIBuffer(self):
        r"""GetMostRecentXYZIBuffer(ChSensor self) -> std::shared_ptr< chrono::sensor::LidarBufferT< std::shared_ptr< chrono::sensor::PixelXYZI [] > > >"""
        return _sensor.ChSensor_GetMostRecentXYZIBuffer(self)

    def GetMostRecentRadarBuffer(self):
        r"""GetMostRecentRadarBuffer(ChSensor self) -> std::shared_ptr< chrono::sensor::RadarBufferT< std::shared_ptr< chrono::sensor::RadarReturn [] > > >"""
        return _sensor.ChSensor_GetMostRecentRadarBuffer(self)

    def GetMostRecentRadarXYZBuffer(self):
        r"""GetMostRecentRadarXYZBuffer(ChSensor self) -> std::shared_ptr< chrono::sensor::RadarBufferT< std::shared_ptr< chrono::sensor::RadarXYZReturn [] > > >"""
        return _sensor.ChSensor_GetMostRecentRadarXYZBuffer(self)

    def GetMostRecentAccelBuffer(self):
        r"""GetMostRecentAccelBuffer(ChSensor self) -> std::shared_ptr< chrono::sensor::SensorBufferT< std::shared_ptr< chrono::sensor::AccelData [] > > >"""
        return _sensor.ChSensor_GetMostRecentAccelBuffer(self)

    def GetMostRecentGyroBuffer(self):
        r"""GetMostRecentGyroBuffer(ChSensor self) -> std::shared_ptr< chrono::sensor::SensorBufferT< std::shared_ptr< chrono::sensor::GyroData [] > > >"""
        return _sensor.ChSensor_GetMostRecentGyroBuffer(self)

    def GetMostRecentMagnetBuffer(self):
        r"""GetMostRecentMagnetBuffer(ChSensor self) -> std::shared_ptr< chrono::sensor::SensorBufferT< std::shared_ptr< chrono::sensor::MagnetData [] > > >"""
        return _sensor.ChSensor_GetMostRecentMagnetBuffer(self)

    def GetMostRecentGPSBuffer(self):
        r"""GetMostRecentGPSBuffer(ChSensor self) -> std::shared_ptr< chrono::sensor::SensorBufferT< std::shared_ptr< chrono::sensor::GPSData [] > > >"""
        return _sensor.ChSensor_GetMostRecentGPSBuffer(self)

# Register ChSensor in _sensor:
_sensor.ChSensor_swigregister(ChSensor)
cvar = _sensor.cvar
ChFilterR8AccessName = cvar.ChFilterR8AccessName
ChFilterRGBA8AccessName = cvar.ChFilterRGBA8AccessName
ChFilterDIAccessName = cvar.ChFilterDIAccessName
ChFilterXYZIAccessName = cvar.ChFilterXYZIAccessName
ChFilterAccelAccessName = cvar.ChFilterAccelAccessName
ChFilterGyroAccessName = cvar.ChFilterGyroAccessName
ChFilterMagnetAccessName = cvar.ChFilterMagnetAccessName
ChFilterGPSAccessName = cvar.ChFilterGPSAccessName
ChFilterRadarAccessName = cvar.ChFilterRadarAccessName
ChFilterRadarXYZAccessName = cvar.ChFilterRadarXYZAccessName
ChFilterTachometerAccessName = cvar.ChFilterTachometerAccessName

class ChDynamicSensor(ChSensor):
    r"""Proxy of C++ chrono::sensor::ChDynamicSensor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sensor.delete_ChDynamicSensor

    def PushKeyFrame(self):
        r"""PushKeyFrame(ChDynamicSensor self)"""
        return _sensor.ChDynamicSensor_PushKeyFrame(self)

    def ClearKeyFrames(self):
        r"""ClearKeyFrames(ChDynamicSensor self)"""
        return _sensor.ChDynamicSensor_ClearKeyFrames(self)

# Register ChDynamicSensor in _sensor:
_sensor.ChDynamicSensor_swigregister(ChDynamicSensor)

class Sensor(object):
    r"""Proxy of C++ chrono::sensor::Sensor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def CreateFromJSON(filename, parent, offsetPose):
        r"""CreateFromJSON(std::string const & filename, std::shared_ptr< chrono::ChBody > parent, ChFrameD offsetPose) -> std::shared_ptr< chrono::sensor::ChSensor >"""
        return _sensor.Sensor_CreateFromJSON(filename, parent, offsetPose)
    __swig_destroy__ = _sensor.delete_Sensor

# Register Sensor in _sensor:
_sensor.Sensor_swigregister(Sensor)

def Sensor_CreateFromJSON(filename, parent, offsetPose):
    r"""Sensor_CreateFromJSON(std::string const & filename, std::shared_ptr< chrono::ChBody > parent, ChFrameD offsetPose) -> std::shared_ptr< chrono::sensor::ChSensor >"""
    return _sensor.Sensor_CreateFromJSON(filename, parent, offsetPose)

class ChOptixSensor(ChSensor):
    r"""Proxy of C++ chrono::sensor::ChOptixSensor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, parent, updateRate, offsetPose, w, h):
        r"""__init__(ChOptixSensor self, std::shared_ptr< chrono::ChBody > parent, float updateRate, ChFrameD offsetPose, unsigned int w, unsigned int h) -> ChOptixSensor"""
        _sensor.ChOptixSensor_swiginit(self, _sensor.new_ChOptixSensor(parent, updateRate, offsetPose, w, h))
    __swig_destroy__ = _sensor.delete_ChOptixSensor

    def GetPipelineType(self):
        r"""GetPipelineType(ChOptixSensor self) -> PipelineType"""
        return _sensor.ChOptixSensor_GetPipelineType(self)

    def GetWidth(self):
        r"""GetWidth(ChOptixSensor self) -> unsigned int"""
        return _sensor.ChOptixSensor_GetWidth(self)

    def GetHeight(self):
        r"""GetHeight(ChOptixSensor self) -> unsigned int"""
        return _sensor.ChOptixSensor_GetHeight(self)

    def GetCudaStream(self):
        r"""GetCudaStream(ChOptixSensor self) -> CUstream"""
        return _sensor.ChOptixSensor_GetCudaStream(self)

# Register ChOptixSensor in _sensor:
_sensor.ChOptixSensor_swigregister(ChOptixSensor)

class ChCameraSensor(ChOptixSensor):
    r"""Proxy of C++ chrono::sensor::ChCameraSensor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ChCameraSensor self, std::shared_ptr< chrono::ChBody > parent, float updateRate, ChFrameD offsetPose, unsigned int w, unsigned int h, float hFOV, unsigned int supersample_factor=1, CameraLensModelType lens_model=CameraLensModelType::PINHOLE, bool use_gi=False, float gamma=2.2, bool use_fog=True) -> ChCameraSensor"""
        _sensor.ChCameraSensor_swiginit(self, _sensor.new_ChCameraSensor(*args))
    __swig_destroy__ = _sensor.delete_ChCameraSensor

    def GetHFOV(self):
        r"""GetHFOV(ChCameraSensor self) -> float"""
        return _sensor.ChCameraSensor_GetHFOV(self)

    def GetLensModelType(self):
        r"""GetLensModelType(ChCameraSensor self) -> CameraLensModelType"""
        return _sensor.ChCameraSensor_GetLensModelType(self)

    def GetLensParameters(self):
        r"""GetLensParameters(ChCameraSensor self) -> LensParams"""
        return _sensor.ChCameraSensor_GetLensParameters(self)

    def SetRadialLensParameters(self, params):
        r"""SetRadialLensParameters(ChCameraSensor self, ChVectorF params)"""
        return _sensor.ChCameraSensor_SetRadialLensParameters(self, params)

    def GetUseGI(self):
        r"""GetUseGI(ChCameraSensor self) -> bool"""
        return _sensor.ChCameraSensor_GetUseGI(self)

    def GetGamma(self):
        r"""GetGamma(ChCameraSensor self) -> float"""
        return _sensor.ChCameraSensor_GetGamma(self)

    def GetSampleFactor(self):
        r"""GetSampleFactor(ChCameraSensor self) -> unsigned int"""
        return _sensor.ChCameraSensor_GetSampleFactor(self)

    def GetUseFog(self):
        r"""GetUseFog(ChCameraSensor self) -> bool"""
        return _sensor.ChCameraSensor_GetUseFog(self)

    @staticmethod
    def CalcInvRadialModel(params):
        r"""CalcInvRadialModel(ChVectorF params) -> LensParams"""
        return _sensor.ChCameraSensor_CalcInvRadialModel(params)

# Register ChCameraSensor in _sensor:
_sensor.ChCameraSensor_swigregister(ChCameraSensor)

def ChCameraSensor_CalcInvRadialModel(params):
    r"""ChCameraSensor_CalcInvRadialModel(ChVectorF params) -> LensParams"""
    return _sensor.ChCameraSensor_CalcInvRadialModel(params)

class ChSegmentationCamera(ChOptixSensor):
    r"""Proxy of C++ chrono::sensor::ChSegmentationCamera class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ChSegmentationCamera self, std::shared_ptr< chrono::ChBody > parent, float updateRate, ChFrameD offsetPose, unsigned int w, unsigned int h, float hFOV, CameraLensModelType lens_model=CameraLensModelType::PINHOLE) -> ChSegmentationCamera"""
        _sensor.ChSegmentationCamera_swiginit(self, _sensor.new_ChSegmentationCamera(*args))
    __swig_destroy__ = _sensor.delete_ChSegmentationCamera

    def GetHFOV(self):
        r"""GetHFOV(ChSegmentationCamera self) -> float"""
        return _sensor.ChSegmentationCamera_GetHFOV(self)

    def GetLensModelType(self):
        r"""GetLensModelType(ChSegmentationCamera self) -> CameraLensModelType"""
        return _sensor.ChSegmentationCamera_GetLensModelType(self)

    def GetLensParameters(self):
        r"""GetLensParameters(ChSegmentationCamera self) -> LensParams"""
        return _sensor.ChSegmentationCamera_GetLensParameters(self)

    def SetRadialLensParameters(self, params):
        r"""SetRadialLensParameters(ChSegmentationCamera self, ChVectorF params)"""
        return _sensor.ChSegmentationCamera_SetRadialLensParameters(self, params)

# Register ChSegmentationCamera in _sensor:
_sensor.ChSegmentationCamera_swigregister(ChSegmentationCamera)

class ChGPSSensor(ChDynamicSensor):
    r"""Proxy of C++ chrono::sensor::ChGPSSensor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, parent, updateRate, offsetPose, gps_reference, noise_model):
        r"""__init__(ChGPSSensor self, std::shared_ptr< chrono::ChBody > parent, float updateRate, ChFrameD offsetPose, ChVectorD gps_reference, std::shared_ptr< chrono::sensor::ChNoiseModel > noise_model) -> ChGPSSensor"""
        _sensor.ChGPSSensor_swiginit(self, _sensor.new_ChGPSSensor(parent, updateRate, offsetPose, gps_reference, noise_model))
    __swig_destroy__ = _sensor.delete_ChGPSSensor

    def PushKeyFrame(self):
        r"""PushKeyFrame(ChGPSSensor self)"""
        return _sensor.ChGPSSensor_PushKeyFrame(self)

    def ClearKeyFrames(self):
        r"""ClearKeyFrames(ChGPSSensor self)"""
        return _sensor.ChGPSSensor_ClearKeyFrames(self)

# Register ChGPSSensor in _sensor:
_sensor.ChGPSSensor_swigregister(ChGPSSensor)

class ChAccelerometerSensor(ChDynamicSensor):
    r"""Proxy of C++ chrono::sensor::ChAccelerometerSensor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, parent, updateRate, offsetPose, noise_model):
        r"""__init__(ChAccelerometerSensor self, std::shared_ptr< chrono::ChBody > parent, float updateRate, ChFrameD offsetPose, std::shared_ptr< chrono::sensor::ChNoiseModel > noise_model) -> ChAccelerometerSensor"""
        _sensor.ChAccelerometerSensor_swiginit(self, _sensor.new_ChAccelerometerSensor(parent, updateRate, offsetPose, noise_model))
    __swig_destroy__ = _sensor.delete_ChAccelerometerSensor

    def PushKeyFrame(self):
        r"""PushKeyFrame(ChAccelerometerSensor self)"""
        return _sensor.ChAccelerometerSensor_PushKeyFrame(self)

    def ClearKeyFrames(self):
        r"""ClearKeyFrames(ChAccelerometerSensor self)"""
        return _sensor.ChAccelerometerSensor_ClearKeyFrames(self)

# Register ChAccelerometerSensor in _sensor:
_sensor.ChAccelerometerSensor_swigregister(ChAccelerometerSensor)

class ChGyroscopeSensor(ChDynamicSensor):
    r"""Proxy of C++ chrono::sensor::ChGyroscopeSensor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, parent, updateRate, offsetPose, noise_model):
        r"""__init__(ChGyroscopeSensor self, std::shared_ptr< chrono::ChBody > parent, float updateRate, ChFrameD offsetPose, std::shared_ptr< chrono::sensor::ChNoiseModel > noise_model) -> ChGyroscopeSensor"""
        _sensor.ChGyroscopeSensor_swiginit(self, _sensor.new_ChGyroscopeSensor(parent, updateRate, offsetPose, noise_model))
    __swig_destroy__ = _sensor.delete_ChGyroscopeSensor

    def PushKeyFrame(self):
        r"""PushKeyFrame(ChGyroscopeSensor self)"""
        return _sensor.ChGyroscopeSensor_PushKeyFrame(self)

    def ClearKeyFrames(self):
        r"""ClearKeyFrames(ChGyroscopeSensor self)"""
        return _sensor.ChGyroscopeSensor_ClearKeyFrames(self)

# Register ChGyroscopeSensor in _sensor:
_sensor.ChGyroscopeSensor_swigregister(ChGyroscopeSensor)

class ChMagnetometerSensor(ChDynamicSensor):
    r"""Proxy of C++ chrono::sensor::ChMagnetometerSensor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, parent, updateRate, offsetPose, noise_model, gps_reference):
        r"""__init__(ChMagnetometerSensor self, std::shared_ptr< chrono::ChBody > parent, float updateRate, ChFrameD offsetPose, std::shared_ptr< chrono::sensor::ChNoiseModel > noise_model, ChVectorD gps_reference) -> ChMagnetometerSensor"""
        _sensor.ChMagnetometerSensor_swiginit(self, _sensor.new_ChMagnetometerSensor(parent, updateRate, offsetPose, noise_model, gps_reference))
    __swig_destroy__ = _sensor.delete_ChMagnetometerSensor

    def PushKeyFrame(self):
        r"""PushKeyFrame(ChMagnetometerSensor self)"""
        return _sensor.ChMagnetometerSensor_PushKeyFrame(self)

    def ClearKeyFrames(self):
        r"""ClearKeyFrames(ChMagnetometerSensor self)"""
        return _sensor.ChMagnetometerSensor_ClearKeyFrames(self)

# Register ChMagnetometerSensor in _sensor:
_sensor.ChMagnetometerSensor_swigregister(ChMagnetometerSensor)

LidarReturnMode_STRONGEST_RETURN = _sensor.LidarReturnMode_STRONGEST_RETURN

LidarReturnMode_MEAN_RETURN = _sensor.LidarReturnMode_MEAN_RETURN

LidarReturnMode_FIRST_RETURN = _sensor.LidarReturnMode_FIRST_RETURN

LidarReturnMode_LAST_RETURN = _sensor.LidarReturnMode_LAST_RETURN

LidarReturnMode_DUAL_RETURN = _sensor.LidarReturnMode_DUAL_RETURN

class ChLidarSensor(ChOptixSensor):
    r"""Proxy of C++ chrono::sensor::ChLidarSensor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ChLidarSensor self, std::shared_ptr< chrono::ChBody > parent, float updateRate, ChFrameD offsetPose, unsigned int w, unsigned int h, float hfov, float max_vertical_angle, float min_vertical_angle, float max_distance, LidarBeamShape beam_shape=RECTANGULAR, unsigned int sample_radius=1, float vert_divergence_angle=.003, float hori_divergence_angle=.003, chrono::sensor::LidarReturnMode return_mode=MEAN_RETURN, float clip_near=1e-3) -> ChLidarSensor"""
        _sensor.ChLidarSensor_swiginit(self, _sensor.new_ChLidarSensor(*args))
    __swig_destroy__ = _sensor.delete_ChLidarSensor

    def GetHFOV(self):
        r"""GetHFOV(ChLidarSensor self) -> float"""
        return _sensor.ChLidarSensor_GetHFOV(self)

    def GetMaxVertAngle(self):
        r"""GetMaxVertAngle(ChLidarSensor self) -> float"""
        return _sensor.ChLidarSensor_GetMaxVertAngle(self)

    def GetMinVertAngle(self):
        r"""GetMinVertAngle(ChLidarSensor self) -> float"""
        return _sensor.ChLidarSensor_GetMinVertAngle(self)

    def GetMaxDistance(self):
        r"""GetMaxDistance(ChLidarSensor self) -> float"""
        return _sensor.ChLidarSensor_GetMaxDistance(self)

    def GetClipNear(self):
        r"""GetClipNear(ChLidarSensor self) -> float"""
        return _sensor.ChLidarSensor_GetClipNear(self)

    def GetBeamShape(self):
        r"""GetBeamShape(ChLidarSensor self) -> LidarBeamShape"""
        return _sensor.ChLidarSensor_GetBeamShape(self)

    def GetSampleRadius(self):
        r"""GetSampleRadius(ChLidarSensor self) -> unsigned int"""
        return _sensor.ChLidarSensor_GetSampleRadius(self)

    def GetHorizDivAngle(self):
        r"""GetHorizDivAngle(ChLidarSensor self) -> float"""
        return _sensor.ChLidarSensor_GetHorizDivAngle(self)

    def GetVertDivAngle(self):
        r"""GetVertDivAngle(ChLidarSensor self) -> float"""
        return _sensor.ChLidarSensor_GetVertDivAngle(self)

    def DualReturnFlag(self):
        r"""DualReturnFlag(ChLidarSensor self) -> bool"""
        return _sensor.ChLidarSensor_DualReturnFlag(self)

# Register ChLidarSensor in _sensor:
_sensor.ChLidarSensor_swigregister(ChLidarSensor)

class ChRadarSensor(ChOptixSensor):
    r"""Proxy of C++ chrono::sensor::ChRadarSensor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, parent, updateRate, offsetPose, w, h, hfov, vfov, max_distance, clip_near=1e-3):
        r"""__init__(ChRadarSensor self, std::shared_ptr< chrono::ChBody > parent, float const updateRate, ChFrameD offsetPose, unsigned int const w, unsigned int const h, float const hfov, float const vfov, float const max_distance, float const clip_near=1e-3) -> ChRadarSensor"""
        _sensor.ChRadarSensor_swiginit(self, _sensor.new_ChRadarSensor(parent, updateRate, offsetPose, w, h, hfov, vfov, max_distance, clip_near))
    __swig_destroy__ = _sensor.delete_ChRadarSensor

    def GetHFOV(self):
        r"""GetHFOV(ChRadarSensor self) -> float"""
        return _sensor.ChRadarSensor_GetHFOV(self)

    def GetVFOV(self):
        r"""GetVFOV(ChRadarSensor self) -> float"""
        return _sensor.ChRadarSensor_GetVFOV(self)

    def GetMaxDistance(self):
        r"""GetMaxDistance(ChRadarSensor self) -> float"""
        return _sensor.ChRadarSensor_GetMaxDistance(self)

    def GetClipNear(self):
        r"""GetClipNear(ChRadarSensor self) -> float"""
        return _sensor.ChRadarSensor_GetClipNear(self)

    def GetTranslationalVelocity(self):
        r"""GetTranslationalVelocity(ChRadarSensor self) -> ChVectorD"""
        return _sensor.ChRadarSensor_GetTranslationalVelocity(self)

    def GetAngularVelocity(self):
        r"""GetAngularVelocity(ChRadarSensor self) -> ChVectorD"""
        return _sensor.ChRadarSensor_GetAngularVelocity(self)

# Register ChRadarSensor in _sensor:
_sensor.ChRadarSensor_swigregister(ChRadarSensor)

class ChSensorManager(object):
    r"""Proxy of C++ chrono::sensor::ChSensorManager class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, chrono_system):
        r"""__init__(ChSensorManager self, ChSystem chrono_system) -> ChSensorManager"""
        _sensor.ChSensorManager_swiginit(self, _sensor.new_ChSensorManager(chrono_system))
    __swig_destroy__ = _sensor.delete_ChSensorManager

    def Update(self):
        r"""Update(ChSensorManager self)"""
        return _sensor.ChSensorManager_Update(self)

    def AddSensor(self, sensor):
        r"""AddSensor(ChSensorManager self, std::shared_ptr< chrono::sensor::ChSensor > sensor)"""
        return _sensor.ChSensorManager_AddSensor(self, sensor)

    def GetSensorList(self):
        r"""GetSensorList(ChSensorManager self) -> std::vector< std::shared_ptr< chrono::sensor::ChSensor >,std::allocator< std::shared_ptr< chrono::sensor::ChSensor > > >"""
        return _sensor.ChSensorManager_GetSensorList(self)

    def SetDeviceList(self, device_ids):
        r"""SetDeviceList(ChSensorManager self, std::vector< unsigned int,std::allocator< unsigned int > > device_ids)"""
        return _sensor.ChSensorManager_SetDeviceList(self, device_ids)

    def GetDeviceList(self):
        r"""GetDeviceList(ChSensorManager self) -> std::vector< unsigned int,std::allocator< unsigned int > >"""
        return _sensor.ChSensorManager_GetDeviceList(self)

    def GetNumEngines(self):
        r"""GetNumEngines(ChSensorManager self) -> int"""
        return _sensor.ChSensorManager_GetNumEngines(self)

    def GetEngine(self, context_id):
        r"""GetEngine(ChSensorManager self, int context_id) -> std::shared_ptr< ChOptixEngine >"""
        return _sensor.ChSensorManager_GetEngine(self, context_id)

    def ReconstructScenes(self):
        r"""ReconstructScenes(ChSensorManager self)"""
        return _sensor.ChSensorManager_ReconstructScenes(self)

    def GetMaxEngines(self):
        r"""GetMaxEngines(ChSensorManager self) -> int"""
        return _sensor.ChSensorManager_GetMaxEngines(self)

    def SetMaxEngines(self, num_groups):
        r"""SetMaxEngines(ChSensorManager self, int num_groups)"""
        return _sensor.ChSensorManager_SetMaxEngines(self, num_groups)

    def SetRayRecursions(self, rec):
        r"""SetRayRecursions(ChSensorManager self, int rec)"""
        return _sensor.ChSensorManager_SetRayRecursions(self, rec)

    def GetRayRecursions(self):
        r"""GetRayRecursions(ChSensorManager self) -> int"""
        return _sensor.ChSensorManager_GetRayRecursions(self)

    def SetVerbose(self, verbose):
        r"""SetVerbose(ChSensorManager self, bool verbose)"""
        return _sensor.ChSensorManager_SetVerbose(self, verbose)

    def GetVerbose(self):
        r"""GetVerbose(ChSensorManager self) -> bool"""
        return _sensor.ChSensorManager_GetVerbose(self)
    scene = property(_sensor.ChSensorManager_scene_get, _sensor.ChSensorManager_scene_set, doc=r"""scene : std::shared_ptr<(chrono::sensor::ChScene)>""")

# Register ChSensorManager in _sensor:
_sensor.ChSensorManager_swigregister(ChSensorManager)

class ChNoiseModel(object):
    r"""Proxy of C++ chrono::sensor::ChNoiseModel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sensor.delete_ChNoiseModel

    def AddNoise(self, data):
        r"""AddNoise(ChNoiseModel self, ChVectorD data)"""
        return _sensor.ChNoiseModel_AddNoise(self, data)

# Register ChNoiseModel in _sensor:
_sensor.ChNoiseModel_swigregister(ChNoiseModel)

class ChNoiseNone(ChNoiseModel):
    r"""Proxy of C++ chrono::sensor::ChNoiseNone class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChNoiseNone self) -> ChNoiseNone"""
        _sensor.ChNoiseNone_swiginit(self, _sensor.new_ChNoiseNone())
    __swig_destroy__ = _sensor.delete_ChNoiseNone

    def AddNoise(self, data):
        r"""AddNoise(ChNoiseNone self, ChVectorD data)"""
        return _sensor.ChNoiseNone_AddNoise(self, data)

# Register ChNoiseNone in _sensor:
_sensor.ChNoiseNone_swigregister(ChNoiseNone)

class ChNoiseNormal(ChNoiseModel):
    r"""Proxy of C++ chrono::sensor::ChNoiseNormal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mean, stdev):
        r"""__init__(ChNoiseNormal self, ChVectorD mean, ChVectorD stdev) -> ChNoiseNormal"""
        _sensor.ChNoiseNormal_swiginit(self, _sensor.new_ChNoiseNormal(mean, stdev))
    __swig_destroy__ = _sensor.delete_ChNoiseNormal

    def AddNoise(self, data):
        r"""AddNoise(ChNoiseNormal self, ChVectorD data)"""
        return _sensor.ChNoiseNormal_AddNoise(self, data)

# Register ChNoiseNormal in _sensor:
_sensor.ChNoiseNormal_swigregister(ChNoiseNormal)

class ChNoiseNormalDrift(ChNoiseModel):
    r"""Proxy of C++ chrono::sensor::ChNoiseNormalDrift class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, updateRate, mean, stdev, drift_bias, tau_drift):
        r"""__init__(ChNoiseNormalDrift self, double updateRate, ChVectorD mean, ChVectorD stdev, double drift_bias, double tau_drift) -> ChNoiseNormalDrift"""
        _sensor.ChNoiseNormalDrift_swiginit(self, _sensor.new_ChNoiseNormalDrift(updateRate, mean, stdev, drift_bias, tau_drift))
    __swig_destroy__ = _sensor.delete_ChNoiseNormalDrift

    def AddNoise(self, data):
        r"""AddNoise(ChNoiseNormalDrift self, ChVectorD data)"""
        return _sensor.ChNoiseNormalDrift_AddNoise(self, data)

# Register ChNoiseNormalDrift in _sensor:
_sensor.ChNoiseNormalDrift_swigregister(ChNoiseNormalDrift)

class ChFilterRGBA8Access(ChFilter):
    r"""Proxy of C++ chrono::sensor::ChFilterAccess< chrono::sensor::SensorBufferT< std::shared_ptr< chrono::sensor::PixelRGBA8 [] > >,std::shared_ptr< chrono::sensor::SensorBufferT< std::shared_ptr< chrono::sensor::PixelRGBA8 [] > > > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ChFilterRGBA8Access self, std::string name={}) -> ChFilterRGBA8Access"""
        _sensor.ChFilterRGBA8Access_swiginit(self, _sensor.new_ChFilterRGBA8Access(*args))
    __swig_destroy__ = _sensor.delete_ChFilterRGBA8Access

    def Apply(self):
        r"""Apply(ChFilterRGBA8Access self)"""
        return _sensor.ChFilterRGBA8Access_Apply(self)

    def Initialize(self, pSensor, bufferInOut):
        r"""Initialize(ChFilterRGBA8Access self, std::shared_ptr< chrono::sensor::ChSensor > pSensor, std::shared_ptr< chrono::sensor::SensorBuffer > & bufferInOut)"""
        return _sensor.ChFilterRGBA8Access_Initialize(self, pSensor, bufferInOut)

    def GetBuffer(self):
        r"""GetBuffer(ChFilterRGBA8Access self) -> std::shared_ptr< chrono::sensor::SensorBufferT< std::shared_ptr< chrono::sensor::PixelRGBA8 [] > > >"""
        return _sensor.ChFilterRGBA8Access_GetBuffer(self)

# Register ChFilterRGBA8Access in _sensor:
_sensor.ChFilterRGBA8Access_swigregister(ChFilterRGBA8Access)

class ChFilterR8Access(ChFilter):
    r"""Proxy of C++ chrono::sensor::ChFilterAccess< chrono::sensor::SensorBufferT< std::shared_ptr< char [] > >,std::shared_ptr< chrono::sensor::SensorBufferT< std::shared_ptr< char [] > > > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ChFilterR8Access self, std::string name={}) -> ChFilterR8Access"""
        _sensor.ChFilterR8Access_swiginit(self, _sensor.new_ChFilterR8Access(*args))
    __swig_destroy__ = _sensor.delete_ChFilterR8Access

    def Apply(self):
        r"""Apply(ChFilterR8Access self)"""
        return _sensor.ChFilterR8Access_Apply(self)

    def Initialize(self, pSensor, bufferInOut):
        r"""Initialize(ChFilterR8Access self, std::shared_ptr< chrono::sensor::ChSensor > pSensor, std::shared_ptr< chrono::sensor::SensorBuffer > & bufferInOut)"""
        return _sensor.ChFilterR8Access_Initialize(self, pSensor, bufferInOut)

    def GetBuffer(self):
        r"""GetBuffer(ChFilterR8Access self) -> std::shared_ptr< chrono::sensor::SensorBufferT< std::shared_ptr< char [] > > >"""
        return _sensor.ChFilterR8Access_GetBuffer(self)

# Register ChFilterR8Access in _sensor:
_sensor.ChFilterR8Access_swigregister(ChFilterR8Access)

class ChFilterDIAccess(ChFilter):
    r"""Proxy of C++ chrono::sensor::ChFilterAccess< chrono::sensor::LidarBufferT< std::shared_ptr< chrono::sensor::PixelDI [] > >,std::shared_ptr< chrono::sensor::LidarBufferT< std::shared_ptr< chrono::sensor::PixelDI [] > > > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ChFilterDIAccess self, std::string name={}) -> ChFilterDIAccess"""
        _sensor.ChFilterDIAccess_swiginit(self, _sensor.new_ChFilterDIAccess(*args))
    __swig_destroy__ = _sensor.delete_ChFilterDIAccess

    def Apply(self):
        r"""Apply(ChFilterDIAccess self)"""
        return _sensor.ChFilterDIAccess_Apply(self)

    def Initialize(self, pSensor, bufferInOut):
        r"""Initialize(ChFilterDIAccess self, std::shared_ptr< chrono::sensor::ChSensor > pSensor, std::shared_ptr< chrono::sensor::SensorBuffer > & bufferInOut)"""
        return _sensor.ChFilterDIAccess_Initialize(self, pSensor, bufferInOut)

    def GetBuffer(self):
        r"""GetBuffer(ChFilterDIAccess self) -> std::shared_ptr< chrono::sensor::LidarBufferT< std::shared_ptr< chrono::sensor::PixelDI [] > > >"""
        return _sensor.ChFilterDIAccess_GetBuffer(self)

# Register ChFilterDIAccess in _sensor:
_sensor.ChFilterDIAccess_swigregister(ChFilterDIAccess)

class ChFilterXYZIAccess(ChFilter):
    r"""Proxy of C++ chrono::sensor::ChFilterAccess< chrono::sensor::LidarBufferT< std::shared_ptr< chrono::sensor::PixelXYZI [] > >,std::shared_ptr< chrono::sensor::LidarBufferT< std::shared_ptr< chrono::sensor::PixelXYZI [] > > > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ChFilterXYZIAccess self, std::string name={}) -> ChFilterXYZIAccess"""
        _sensor.ChFilterXYZIAccess_swiginit(self, _sensor.new_ChFilterXYZIAccess(*args))
    __swig_destroy__ = _sensor.delete_ChFilterXYZIAccess

    def Apply(self):
        r"""Apply(ChFilterXYZIAccess self)"""
        return _sensor.ChFilterXYZIAccess_Apply(self)

    def Initialize(self, pSensor, bufferInOut):
        r"""Initialize(ChFilterXYZIAccess self, std::shared_ptr< chrono::sensor::ChSensor > pSensor, std::shared_ptr< chrono::sensor::SensorBuffer > & bufferInOut)"""
        return _sensor.ChFilterXYZIAccess_Initialize(self, pSensor, bufferInOut)

    def GetBuffer(self):
        r"""GetBuffer(ChFilterXYZIAccess self) -> std::shared_ptr< chrono::sensor::LidarBufferT< std::shared_ptr< chrono::sensor::PixelXYZI [] > > >"""
        return _sensor.ChFilterXYZIAccess_GetBuffer(self)

# Register ChFilterXYZIAccess in _sensor:
_sensor.ChFilterXYZIAccess_swigregister(ChFilterXYZIAccess)

class ChFilterRadarAccess(ChFilter):
    r"""Proxy of C++ chrono::sensor::ChFilterAccess< chrono::sensor::RadarBufferT< std::shared_ptr< chrono::sensor::RadarReturn [] > >,std::shared_ptr< chrono::sensor::RadarBufferT< std::shared_ptr< chrono::sensor::RadarReturn [] > > > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ChFilterRadarAccess self, std::string name={}) -> ChFilterRadarAccess"""
        _sensor.ChFilterRadarAccess_swiginit(self, _sensor.new_ChFilterRadarAccess(*args))
    __swig_destroy__ = _sensor.delete_ChFilterRadarAccess

    def Apply(self):
        r"""Apply(ChFilterRadarAccess self)"""
        return _sensor.ChFilterRadarAccess_Apply(self)

    def Initialize(self, pSensor, bufferInOut):
        r"""Initialize(ChFilterRadarAccess self, std::shared_ptr< chrono::sensor::ChSensor > pSensor, std::shared_ptr< chrono::sensor::SensorBuffer > & bufferInOut)"""
        return _sensor.ChFilterRadarAccess_Initialize(self, pSensor, bufferInOut)

    def GetBuffer(self):
        r"""GetBuffer(ChFilterRadarAccess self) -> std::shared_ptr< chrono::sensor::RadarBufferT< std::shared_ptr< chrono::sensor::RadarReturn [] > > >"""
        return _sensor.ChFilterRadarAccess_GetBuffer(self)

# Register ChFilterRadarAccess in _sensor:
_sensor.ChFilterRadarAccess_swigregister(ChFilterRadarAccess)

class ChFilterRadarXYZAccess(ChFilter):
    r"""Proxy of C++ chrono::sensor::ChFilterAccess< chrono::sensor::RadarBufferT< std::shared_ptr< chrono::sensor::RadarXYZReturn [] > >,std::shared_ptr< chrono::sensor::RadarBufferT< std::shared_ptr< chrono::sensor::RadarXYZReturn [] > > > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ChFilterRadarXYZAccess self, std::string name={}) -> ChFilterRadarXYZAccess"""
        _sensor.ChFilterRadarXYZAccess_swiginit(self, _sensor.new_ChFilterRadarXYZAccess(*args))
    __swig_destroy__ = _sensor.delete_ChFilterRadarXYZAccess

    def Apply(self):
        r"""Apply(ChFilterRadarXYZAccess self)"""
        return _sensor.ChFilterRadarXYZAccess_Apply(self)

    def Initialize(self, pSensor, bufferInOut):
        r"""Initialize(ChFilterRadarXYZAccess self, std::shared_ptr< chrono::sensor::ChSensor > pSensor, std::shared_ptr< chrono::sensor::SensorBuffer > & bufferInOut)"""
        return _sensor.ChFilterRadarXYZAccess_Initialize(self, pSensor, bufferInOut)

    def GetBuffer(self):
        r"""GetBuffer(ChFilterRadarXYZAccess self) -> std::shared_ptr< chrono::sensor::RadarBufferT< std::shared_ptr< chrono::sensor::RadarXYZReturn [] > > >"""
        return _sensor.ChFilterRadarXYZAccess_GetBuffer(self)

# Register ChFilterRadarXYZAccess in _sensor:
_sensor.ChFilterRadarXYZAccess_swigregister(ChFilterRadarXYZAccess)

class ChFilterAccelAccess(ChFilter):
    r"""Proxy of C++ chrono::sensor::ChFilterAccess< chrono::sensor::SensorBufferT< std::shared_ptr< chrono::sensor::AccelData [] > >,std::shared_ptr< chrono::sensor::SensorBufferT< std::shared_ptr< chrono::sensor::AccelData [] > > > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ChFilterAccelAccess self, std::string name={}) -> ChFilterAccelAccess"""
        _sensor.ChFilterAccelAccess_swiginit(self, _sensor.new_ChFilterAccelAccess(*args))
    __swig_destroy__ = _sensor.delete_ChFilterAccelAccess

    def Apply(self):
        r"""Apply(ChFilterAccelAccess self)"""
        return _sensor.ChFilterAccelAccess_Apply(self)

    def Initialize(self, pSensor, bufferInOut):
        r"""Initialize(ChFilterAccelAccess self, std::shared_ptr< chrono::sensor::ChSensor > pSensor, std::shared_ptr< chrono::sensor::SensorBuffer > & bufferInOut)"""
        return _sensor.ChFilterAccelAccess_Initialize(self, pSensor, bufferInOut)

    def GetBuffer(self):
        r"""GetBuffer(ChFilterAccelAccess self) -> std::shared_ptr< chrono::sensor::SensorBufferT< std::shared_ptr< chrono::sensor::AccelData [] > > >"""
        return _sensor.ChFilterAccelAccess_GetBuffer(self)

# Register ChFilterAccelAccess in _sensor:
_sensor.ChFilterAccelAccess_swigregister(ChFilterAccelAccess)

class ChFilterGyroAccess(ChFilter):
    r"""Proxy of C++ chrono::sensor::ChFilterAccess< chrono::sensor::SensorBufferT< std::shared_ptr< chrono::sensor::GyroData [] > >,std::shared_ptr< chrono::sensor::SensorBufferT< std::shared_ptr< chrono::sensor::GyroData [] > > > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ChFilterGyroAccess self, std::string name={}) -> ChFilterGyroAccess"""
        _sensor.ChFilterGyroAccess_swiginit(self, _sensor.new_ChFilterGyroAccess(*args))
    __swig_destroy__ = _sensor.delete_ChFilterGyroAccess

    def Apply(self):
        r"""Apply(ChFilterGyroAccess self)"""
        return _sensor.ChFilterGyroAccess_Apply(self)

    def Initialize(self, pSensor, bufferInOut):
        r"""Initialize(ChFilterGyroAccess self, std::shared_ptr< chrono::sensor::ChSensor > pSensor, std::shared_ptr< chrono::sensor::SensorBuffer > & bufferInOut)"""
        return _sensor.ChFilterGyroAccess_Initialize(self, pSensor, bufferInOut)

    def GetBuffer(self):
        r"""GetBuffer(ChFilterGyroAccess self) -> std::shared_ptr< chrono::sensor::SensorBufferT< std::shared_ptr< chrono::sensor::GyroData [] > > >"""
        return _sensor.ChFilterGyroAccess_GetBuffer(self)

# Register ChFilterGyroAccess in _sensor:
_sensor.ChFilterGyroAccess_swigregister(ChFilterGyroAccess)

class ChFilterMagnetAccess(ChFilter):
    r"""Proxy of C++ chrono::sensor::ChFilterAccess< chrono::sensor::SensorBufferT< std::shared_ptr< chrono::sensor::MagnetData [] > >,std::shared_ptr< chrono::sensor::SensorBufferT< std::shared_ptr< chrono::sensor::MagnetData [] > > > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ChFilterMagnetAccess self, std::string name={}) -> ChFilterMagnetAccess"""
        _sensor.ChFilterMagnetAccess_swiginit(self, _sensor.new_ChFilterMagnetAccess(*args))
    __swig_destroy__ = _sensor.delete_ChFilterMagnetAccess

    def Apply(self):
        r"""Apply(ChFilterMagnetAccess self)"""
        return _sensor.ChFilterMagnetAccess_Apply(self)

    def Initialize(self, pSensor, bufferInOut):
        r"""Initialize(ChFilterMagnetAccess self, std::shared_ptr< chrono::sensor::ChSensor > pSensor, std::shared_ptr< chrono::sensor::SensorBuffer > & bufferInOut)"""
        return _sensor.ChFilterMagnetAccess_Initialize(self, pSensor, bufferInOut)

    def GetBuffer(self):
        r"""GetBuffer(ChFilterMagnetAccess self) -> std::shared_ptr< chrono::sensor::SensorBufferT< std::shared_ptr< chrono::sensor::MagnetData [] > > >"""
        return _sensor.ChFilterMagnetAccess_GetBuffer(self)

# Register ChFilterMagnetAccess in _sensor:
_sensor.ChFilterMagnetAccess_swigregister(ChFilterMagnetAccess)

class ChFilterGPSAccess(ChFilter):
    r"""Proxy of C++ chrono::sensor::ChFilterAccess< chrono::sensor::SensorBufferT< std::shared_ptr< chrono::sensor::GPSData [] > >,std::shared_ptr< chrono::sensor::SensorBufferT< std::shared_ptr< chrono::sensor::GPSData [] > > > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ChFilterGPSAccess self, std::string name={}) -> ChFilterGPSAccess"""
        _sensor.ChFilterGPSAccess_swiginit(self, _sensor.new_ChFilterGPSAccess(*args))
    __swig_destroy__ = _sensor.delete_ChFilterGPSAccess

    def Apply(self):
        r"""Apply(ChFilterGPSAccess self)"""
        return _sensor.ChFilterGPSAccess_Apply(self)

    def Initialize(self, pSensor, bufferInOut):
        r"""Initialize(ChFilterGPSAccess self, std::shared_ptr< chrono::sensor::ChSensor > pSensor, std::shared_ptr< chrono::sensor::SensorBuffer > & bufferInOut)"""
        return _sensor.ChFilterGPSAccess_Initialize(self, pSensor, bufferInOut)

    def GetBuffer(self):
        r"""GetBuffer(ChFilterGPSAccess self) -> std::shared_ptr< chrono::sensor::SensorBufferT< std::shared_ptr< chrono::sensor::GPSData [] > > >"""
        return _sensor.ChFilterGPSAccess_GetBuffer(self)

# Register ChFilterGPSAccess in _sensor:
_sensor.ChFilterGPSAccess_swigregister(ChFilterGPSAccess)



