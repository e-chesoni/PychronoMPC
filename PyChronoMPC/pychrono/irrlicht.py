# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _irrlicht
else:
    import _irrlicht

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SHARED_PTR_DISOWN = _irrlicht.SHARED_PTR_DISOWN

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _irrlicht.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _irrlicht.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _irrlicht.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _irrlicht.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _irrlicht.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _irrlicht.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _irrlicht.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _irrlicht.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _irrlicht.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _irrlicht.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _irrlicht.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _irrlicht.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _irrlicht.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _irrlicht.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _irrlicht.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _irrlicht.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _irrlicht.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _irrlicht:
_irrlicht.SwigPyIterator_swigregister(SwigPyIterator)

class int_ptr(object):
    r"""Proxy of C++ int_ptr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(int_ptr self) -> int_ptr"""
        _irrlicht.int_ptr_swiginit(self, _irrlicht.new_int_ptr())
    __swig_destroy__ = _irrlicht.delete_int_ptr

    def assign(self, value):
        r"""assign(int_ptr self, int value)"""
        return _irrlicht.int_ptr_assign(self, value)

    def value(self):
        r"""value(int_ptr self) -> int"""
        return _irrlicht.int_ptr_value(self)

    def cast(self):
        r"""cast(int_ptr self) -> int *"""
        return _irrlicht.int_ptr_cast(self)

    @staticmethod
    def frompointer(t):
        r"""frompointer(int * t) -> int_ptr"""
        return _irrlicht.int_ptr_frompointer(t)

# Register int_ptr in _irrlicht:
_irrlicht.int_ptr_swigregister(int_ptr)

def int_ptr_frompointer(t):
    r"""int_ptr_frompointer(int * t) -> int_ptr"""
    return _irrlicht.int_ptr_frompointer(t)

class double_ptr(object):
    r"""Proxy of C++ double_ptr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(double_ptr self) -> double_ptr"""
        _irrlicht.double_ptr_swiginit(self, _irrlicht.new_double_ptr())
    __swig_destroy__ = _irrlicht.delete_double_ptr

    def assign(self, value):
        r"""assign(double_ptr self, double value)"""
        return _irrlicht.double_ptr_assign(self, value)

    def value(self):
        r"""value(double_ptr self) -> double"""
        return _irrlicht.double_ptr_value(self)

    def cast(self):
        r"""cast(double_ptr self) -> double *"""
        return _irrlicht.double_ptr_cast(self)

    @staticmethod
    def frompointer(t):
        r"""frompointer(double * t) -> double_ptr"""
        return _irrlicht.double_ptr_frompointer(t)

# Register double_ptr in _irrlicht:
_irrlicht.double_ptr_swigregister(double_ptr)

def double_ptr_frompointer(t):
    r"""double_ptr_frompointer(double * t) -> double_ptr"""
    return _irrlicht.double_ptr_frompointer(t)

class float_ptr(object):
    r"""Proxy of C++ float_ptr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(float_ptr self) -> float_ptr"""
        _irrlicht.float_ptr_swiginit(self, _irrlicht.new_float_ptr())
    __swig_destroy__ = _irrlicht.delete_float_ptr

    def assign(self, value):
        r"""assign(float_ptr self, float value)"""
        return _irrlicht.float_ptr_assign(self, value)

    def value(self):
        r"""value(float_ptr self) -> float"""
        return _irrlicht.float_ptr_value(self)

    def cast(self):
        r"""cast(float_ptr self) -> float *"""
        return _irrlicht.float_ptr_cast(self)

    @staticmethod
    def frompointer(t):
        r"""frompointer(float * t) -> float_ptr"""
        return _irrlicht.float_ptr_frompointer(t)

# Register float_ptr in _irrlicht:
_irrlicht.float_ptr_swigregister(float_ptr)

def float_ptr_frompointer(t):
    r"""float_ptr_frompointer(float * t) -> float_ptr"""
    return _irrlicht.float_ptr_frompointer(t)

class char_ptr(object):
    r"""Proxy of C++ char_ptr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(char_ptr self) -> char_ptr"""
        _irrlicht.char_ptr_swiginit(self, _irrlicht.new_char_ptr())
    __swig_destroy__ = _irrlicht.delete_char_ptr

    def assign(self, value):
        r"""assign(char_ptr self, char value)"""
        return _irrlicht.char_ptr_assign(self, value)

    def value(self):
        r"""value(char_ptr self) -> char"""
        return _irrlicht.char_ptr_value(self)

    def cast(self):
        r"""cast(char_ptr self) -> char *"""
        return _irrlicht.char_ptr_cast(self)

    @staticmethod
    def frompointer(t):
        r"""frompointer(char * t) -> char_ptr"""
        return _irrlicht.char_ptr_frompointer(t)

# Register char_ptr in _irrlicht:
_irrlicht.char_ptr_swigregister(char_ptr)

def char_ptr_frompointer(t):
    r"""char_ptr_frompointer(char * t) -> char_ptr"""
    return _irrlicht.char_ptr_frompointer(t)

import pychrono.core
class IReferenceCounted(object):
    r"""Proxy of C++ irr::IReferenceCounted class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(IReferenceCounted self) -> IReferenceCounted"""
        _irrlicht.IReferenceCounted_swiginit(self, _irrlicht.new_IReferenceCounted())
    __swig_destroy__ = _irrlicht.delete_IReferenceCounted

    def grab(self):
        r"""grab(IReferenceCounted self)"""
        return _irrlicht.IReferenceCounted_grab(self)

    def drop(self):
        r"""drop(IReferenceCounted self) -> bool"""
        return _irrlicht.IReferenceCounted_drop(self)

    def getReferenceCount(self):
        r"""getReferenceCount(IReferenceCounted self) -> s32"""
        return _irrlicht.IReferenceCounted_getReferenceCount(self)

    def getDebugName(self):
        r"""getDebugName(IReferenceCounted self) -> c8 const *"""
        return _irrlicht.IReferenceCounted_getDebugName(self)

# Register IReferenceCounted in _irrlicht:
_irrlicht.IReferenceCounted_swigregister(IReferenceCounted)

class IImage(IReferenceCounted):
    r"""Proxy of C++ irr::video::IImage class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def lock(self):
        r"""lock(IImage self) -> void *"""
        return _irrlicht.IImage_lock(self)

    def unlock(self):
        r"""unlock(IImage self)"""
        return _irrlicht.IImage_unlock(self)

    def getDimension(self):
        r"""getDimension(IImage self) -> core::dimension2d< irr::u32 > const &"""
        return _irrlicht.IImage_getDimension(self)

    def getBitsPerPixel(self):
        r"""getBitsPerPixel(IImage self) -> u32"""
        return _irrlicht.IImage_getBitsPerPixel(self)

    def getBytesPerPixel(self):
        r"""getBytesPerPixel(IImage self) -> u32"""
        return _irrlicht.IImage_getBytesPerPixel(self)

    def getImageDataSizeInBytes(self):
        r"""getImageDataSizeInBytes(IImage self) -> u32"""
        return _irrlicht.IImage_getImageDataSizeInBytes(self)

    def getImageDataSizeInPixels(self):
        r"""getImageDataSizeInPixels(IImage self) -> u32"""
        return _irrlicht.IImage_getImageDataSizeInPixels(self)

    def getPixel(self, x, y):
        r"""getPixel(IImage self, u32 x, u32 y) -> SColor"""
        return _irrlicht.IImage_getPixel(self, x, y)

    def setPixel(self, x, y, color, blend=False):
        r"""setPixel(IImage self, u32 x, u32 y, SColor const & color, bool blend=False)"""
        return _irrlicht.IImage_setPixel(self, x, y, color, blend)

    def getColorFormat(self):
        r"""getColorFormat(IImage self) -> ECOLOR_FORMAT"""
        return _irrlicht.IImage_getColorFormat(self)

    def getRedMask(self):
        r"""getRedMask(IImage self) -> u32"""
        return _irrlicht.IImage_getRedMask(self)

    def getGreenMask(self):
        r"""getGreenMask(IImage self) -> u32"""
        return _irrlicht.IImage_getGreenMask(self)

    def getBlueMask(self):
        r"""getBlueMask(IImage self) -> u32"""
        return _irrlicht.IImage_getBlueMask(self)

    def getAlphaMask(self):
        r"""getAlphaMask(IImage self) -> u32"""
        return _irrlicht.IImage_getAlphaMask(self)

    def getPitch(self):
        r"""getPitch(IImage self) -> u32"""
        return _irrlicht.IImage_getPitch(self)

    def copyToScaling(self, *args):
        r"""
        copyToScaling(IImage self, void * target, u32 width, u32 height, ECOLOR_FORMAT format=ECF_A8R8G8B8, u32 pitch=0)
        copyToScaling(IImage self, IImage target)
        """
        return _irrlicht.IImage_copyToScaling(self, *args)

    def copyTo(self, *args):
        r"""
        copyTo(IImage self, IImage target, core::position2d< s32 > const & pos=core::position2d< s32 >(0,0))
        copyTo(IImage self, IImage target, core::position2d< s32 > const & pos, core::rect< irr::s32 > const & sourceRect, core::rect< irr::s32 > const * clipRect=None)
        """
        return _irrlicht.IImage_copyTo(self, *args)

    def copyToWithAlpha(self, target, pos, sourceRect, color, clipRect=None):
        r"""copyToWithAlpha(IImage self, IImage target, core::position2d< s32 > const & pos, core::rect< irr::s32 > const & sourceRect, SColor const & color, core::rect< irr::s32 > const * clipRect=None)"""
        return _irrlicht.IImage_copyToWithAlpha(self, target, pos, sourceRect, color, clipRect)

    def copyToScalingBoxFilter(self, target, bias=0, blend=False):
        r"""copyToScalingBoxFilter(IImage self, IImage target, s32 bias=0, bool blend=False)"""
        return _irrlicht.IImage_copyToScalingBoxFilter(self, target, bias, blend)

    def fill(self, color):
        r"""fill(IImage self, SColor const & color)"""
        return _irrlicht.IImage_fill(self, color)

    @staticmethod
    def getBitsPerPixelFromFormat(format):
        r"""getBitsPerPixelFromFormat(ECOLOR_FORMAT const format) -> u32"""
        return _irrlicht.IImage_getBitsPerPixelFromFormat(format)

    @staticmethod
    def isRenderTargetOnlyFormat(format):
        r"""isRenderTargetOnlyFormat(ECOLOR_FORMAT const format) -> bool"""
        return _irrlicht.IImage_isRenderTargetOnlyFormat(format)

    def get_img_bytes(self):
        r"""get_img_bytes(IImage self)"""
        return _irrlicht.IImage_get_img_bytes(self)
    __swig_destroy__ = _irrlicht.delete_IImage

# Register IImage in _irrlicht:
_irrlicht.IImage_swigregister(IImage)

def IImage_getBitsPerPixelFromFormat(format):
    r"""IImage_getBitsPerPixelFromFormat(ECOLOR_FORMAT const format) -> u32"""
    return _irrlicht.IImage_getBitsPerPixelFromFormat(format)

def IImage_isRenderTargetOnlyFormat(format):
    r"""IImage_isRenderTargetOnlyFormat(ECOLOR_FORMAT const format) -> bool"""
    return _irrlicht.IImage_isRenderTargetOnlyFormat(format)

class IImageWriter(IReferenceCounted):
    r"""Proxy of C++ irr::video::IImageWriter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def isAWriteableFileExtension(self, filename):
        r"""isAWriteableFileExtension(IImageWriter self, irr::io::path const & filename) -> bool"""
        return _irrlicht.IImageWriter_isAWriteableFileExtension(self, filename)

    def writeImage(self, file, image, param=0):
        r"""writeImage(IImageWriter self, IWriteFile file, IImage image, u32 param=0) -> bool"""
        return _irrlicht.IImageWriter_writeImage(self, file, image, param)
    __swig_destroy__ = _irrlicht.delete_IImageWriter

# Register IImageWriter in _irrlicht:
_irrlicht.IImageWriter_swigregister(IImageWriter)

class IWriteFile(IReferenceCounted):
    r"""Proxy of C++ irr::io::IWriteFile class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def write(self, buffer, sizeToWrite):
        r"""write(IWriteFile self, void const * buffer, u32 sizeToWrite) -> s32"""
        return _irrlicht.IWriteFile_write(self, buffer, sizeToWrite)

    def seek(self, finalPos, relativeMovement=False):
        r"""seek(IWriteFile self, long finalPos, bool relativeMovement=False) -> bool"""
        return _irrlicht.IWriteFile_seek(self, finalPos, relativeMovement)

    def getPos(self):
        r"""getPos(IWriteFile self) -> long"""
        return _irrlicht.IWriteFile_getPos(self)

    def getFileName(self):
        r"""getFileName(IWriteFile self) -> path const &"""
        return _irrlicht.IWriteFile_getFileName(self)
    __swig_destroy__ = _irrlicht.delete_IWriteFile

# Register IWriteFile in _irrlicht:
_irrlicht.IWriteFile_swigregister(IWriteFile)

class vector2df(object):
    r"""Proxy of C++ irr::core::vector2d< irr::f32 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(vector2df self) -> vector2df
        __init__(vector2df self, float nx, float ny) -> vector2df
        __init__(vector2df self, float n) -> vector2df
        __init__(vector2df self, vector2df other) -> vector2df
        __init__(vector2df self, dimension2d< float > const & other) -> vector2df
        """
        _irrlicht.vector2df_swiginit(self, _irrlicht.new_vector2df(*args))

    def __neg__(self):
        r"""__neg__(vector2df self) -> vector2df"""
        return _irrlicht.vector2df___neg__(self)

    def __add__(self, *args):
        r"""
        __add__(vector2df self, vector2df other) -> vector2df
        __add__(vector2df self, dimension2d< float > const & other) -> vector2df
        __add__(vector2df self, float const v) -> vector2df
        """
        return _irrlicht.vector2df___add__(self, *args)

    def __iadd__(self, *args):
        r"""
        __iadd__(vector2df self, vector2df other) -> vector2df
        __iadd__(vector2df self, float const v) -> vector2df
        __iadd__(vector2df self, dimension2d< float > const & other) -> vector2df
        """
        return _irrlicht.vector2df___iadd__(self, *args)

    def __sub__(self, *args):
        r"""
        __sub__(vector2df self, vector2df other) -> vector2df
        __sub__(vector2df self, dimension2d< float > const & other) -> vector2df
        __sub__(vector2df self, float const v) -> vector2df
        """
        return _irrlicht.vector2df___sub__(self, *args)

    def __isub__(self, *args):
        r"""
        __isub__(vector2df self, vector2df other) -> vector2df
        __isub__(vector2df self, float const v) -> vector2df
        __isub__(vector2df self, dimension2d< float > const & other) -> vector2df
        """
        return _irrlicht.vector2df___isub__(self, *args)

    def __mul__(self, *args):
        r"""
        __mul__(vector2df self, vector2df other) -> vector2df
        __mul__(vector2df self, float const v) -> vector2df
        """
        return _irrlicht.vector2df___mul__(self, *args)

    def __imul__(self, *args):
        r"""
        __imul__(vector2df self, vector2df other) -> vector2df
        __imul__(vector2df self, float const v) -> vector2df
        """
        return _irrlicht.vector2df___imul__(self, *args)

    def __truediv__(self, *args):
        return _irrlicht.vector2df___truediv__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _irrlicht.vector2df___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __le__(self, other):
        r"""__le__(vector2df self, vector2df other) -> bool"""
        return _irrlicht.vector2df___le__(self, other)

    def __ge__(self, other):
        r"""__ge__(vector2df self, vector2df other) -> bool"""
        return _irrlicht.vector2df___ge__(self, other)

    def __lt__(self, other):
        r"""__lt__(vector2df self, vector2df other) -> bool"""
        return _irrlicht.vector2df___lt__(self, other)

    def __gt__(self, other):
        r"""__gt__(vector2df self, vector2df other) -> bool"""
        return _irrlicht.vector2df___gt__(self, other)

    def __eq__(self, other):
        r"""__eq__(vector2df self, vector2df other) -> bool"""
        return _irrlicht.vector2df___eq__(self, other)

    def __ne__(self, other):
        r"""__ne__(vector2df self, vector2df other) -> bool"""
        return _irrlicht.vector2df___ne__(self, other)

    def equals(self, other):
        r"""equals(vector2df self, vector2df other) -> bool"""
        return _irrlicht.vector2df_equals(self, other)

    def set(self, *args):
        r"""
        set(vector2df self, float nx, float ny) -> vector2df
        set(vector2df self, vector2df p) -> vector2df
        """
        return _irrlicht.vector2df_set(self, *args)

    def getLength(self):
        r"""getLength(vector2df self) -> float"""
        return _irrlicht.vector2df_getLength(self)

    def getLengthSQ(self):
        r"""getLengthSQ(vector2df self) -> float"""
        return _irrlicht.vector2df_getLengthSQ(self)

    def dotProduct(self, other):
        r"""dotProduct(vector2df self, vector2df other) -> float"""
        return _irrlicht.vector2df_dotProduct(self, other)

    def getDistanceFrom(self, other):
        r"""getDistanceFrom(vector2df self, vector2df other) -> float"""
        return _irrlicht.vector2df_getDistanceFrom(self, other)

    def getDistanceFromSQ(self, other):
        r"""getDistanceFromSQ(vector2df self, vector2df other) -> float"""
        return _irrlicht.vector2df_getDistanceFromSQ(self, other)

    def rotateBy(self, *args):
        r"""rotateBy(vector2df self, irr::f64 degrees, vector2df center=vector2d< float >()) -> vector2df"""
        return _irrlicht.vector2df_rotateBy(self, *args)

    def normalize(self):
        r"""normalize(vector2df self) -> vector2df"""
        return _irrlicht.vector2df_normalize(self)

    def getAngleTrig(self):
        r"""getAngleTrig(vector2df self) -> irr::f64"""
        return _irrlicht.vector2df_getAngleTrig(self)

    def getAngle(self):
        r"""getAngle(vector2df self) -> irr::f64"""
        return _irrlicht.vector2df_getAngle(self)

    def getAngleWith(self, b):
        r"""getAngleWith(vector2df self, vector2df b) -> irr::f64"""
        return _irrlicht.vector2df_getAngleWith(self, b)

    def isBetweenPoints(self, begin, end):
        r"""isBetweenPoints(vector2df self, vector2df begin, vector2df end) -> bool"""
        return _irrlicht.vector2df_isBetweenPoints(self, begin, end)

    def getInterpolated(self, other, d):
        r"""getInterpolated(vector2df self, vector2df other, irr::f64 d) -> vector2df"""
        return _irrlicht.vector2df_getInterpolated(self, other, d)

    def getInterpolated_quadratic(self, v2, v3, d):
        r"""getInterpolated_quadratic(vector2df self, vector2df v2, vector2df v3, irr::f64 d) -> vector2df"""
        return _irrlicht.vector2df_getInterpolated_quadratic(self, v2, v3, d)

    def interpolate(self, a, b, d):
        r"""interpolate(vector2df self, vector2df a, vector2df b, irr::f64 d) -> vector2df"""
        return _irrlicht.vector2df_interpolate(self, a, b, d)
    X = property(_irrlicht.vector2df_X_get, _irrlicht.vector2df_X_set, doc=r"""X : float""")
    Y = property(_irrlicht.vector2df_Y_get, _irrlicht.vector2df_Y_set, doc=r"""Y : float""")
    __swig_destroy__ = _irrlicht.delete_vector2df

# Register vector2df in _irrlicht:
_irrlicht.vector2df_swigregister(vector2df)

class vector2di(object):
    r"""Proxy of C++ irr::core::vector2d< irr::s32 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(vector2di self) -> vector2di
        __init__(vector2di self, int nx, int ny) -> vector2di
        __init__(vector2di self, int n) -> vector2di
        __init__(vector2di self, vector2di other) -> vector2di
        __init__(vector2di self, dimension2d< int > const & other) -> vector2di
        """
        _irrlicht.vector2di_swiginit(self, _irrlicht.new_vector2di(*args))

    def __neg__(self):
        r"""__neg__(vector2di self) -> vector2di"""
        return _irrlicht.vector2di___neg__(self)

    def __add__(self, *args):
        r"""
        __add__(vector2di self, vector2di other) -> vector2di
        __add__(vector2di self, dimension2d< int > const & other) -> vector2di
        __add__(vector2di self, int const v) -> vector2di
        """
        return _irrlicht.vector2di___add__(self, *args)

    def __iadd__(self, *args):
        r"""
        __iadd__(vector2di self, vector2di other) -> vector2di
        __iadd__(vector2di self, int const v) -> vector2di
        __iadd__(vector2di self, dimension2d< int > const & other) -> vector2di
        """
        return _irrlicht.vector2di___iadd__(self, *args)

    def __sub__(self, *args):
        r"""
        __sub__(vector2di self, vector2di other) -> vector2di
        __sub__(vector2di self, dimension2d< int > const & other) -> vector2di
        __sub__(vector2di self, int const v) -> vector2di
        """
        return _irrlicht.vector2di___sub__(self, *args)

    def __isub__(self, *args):
        r"""
        __isub__(vector2di self, vector2di other) -> vector2di
        __isub__(vector2di self, int const v) -> vector2di
        __isub__(vector2di self, dimension2d< int > const & other) -> vector2di
        """
        return _irrlicht.vector2di___isub__(self, *args)

    def __mul__(self, *args):
        r"""
        __mul__(vector2di self, vector2di other) -> vector2di
        __mul__(vector2di self, int const v) -> vector2di
        """
        return _irrlicht.vector2di___mul__(self, *args)

    def __imul__(self, *args):
        r"""
        __imul__(vector2di self, vector2di other) -> vector2di
        __imul__(vector2di self, int const v) -> vector2di
        """
        return _irrlicht.vector2di___imul__(self, *args)

    def __truediv__(self, *args):
        return _irrlicht.vector2di___truediv__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _irrlicht.vector2di___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __le__(self, other):
        r"""__le__(vector2di self, vector2di other) -> bool"""
        return _irrlicht.vector2di___le__(self, other)

    def __ge__(self, other):
        r"""__ge__(vector2di self, vector2di other) -> bool"""
        return _irrlicht.vector2di___ge__(self, other)

    def __lt__(self, other):
        r"""__lt__(vector2di self, vector2di other) -> bool"""
        return _irrlicht.vector2di___lt__(self, other)

    def __gt__(self, other):
        r"""__gt__(vector2di self, vector2di other) -> bool"""
        return _irrlicht.vector2di___gt__(self, other)

    def __eq__(self, other):
        r"""__eq__(vector2di self, vector2di other) -> bool"""
        return _irrlicht.vector2di___eq__(self, other)

    def __ne__(self, other):
        r"""__ne__(vector2di self, vector2di other) -> bool"""
        return _irrlicht.vector2di___ne__(self, other)

    def equals(self, other):
        r"""equals(vector2di self, vector2di other) -> bool"""
        return _irrlicht.vector2di_equals(self, other)

    def set(self, *args):
        r"""
        set(vector2di self, int nx, int ny) -> vector2di
        set(vector2di self, vector2di p) -> vector2di
        """
        return _irrlicht.vector2di_set(self, *args)

    def getLength(self):
        r"""getLength(vector2di self) -> int"""
        return _irrlicht.vector2di_getLength(self)

    def getLengthSQ(self):
        r"""getLengthSQ(vector2di self) -> int"""
        return _irrlicht.vector2di_getLengthSQ(self)

    def dotProduct(self, other):
        r"""dotProduct(vector2di self, vector2di other) -> int"""
        return _irrlicht.vector2di_dotProduct(self, other)

    def getDistanceFrom(self, other):
        r"""getDistanceFrom(vector2di self, vector2di other) -> int"""
        return _irrlicht.vector2di_getDistanceFrom(self, other)

    def getDistanceFromSQ(self, other):
        r"""getDistanceFromSQ(vector2di self, vector2di other) -> int"""
        return _irrlicht.vector2di_getDistanceFromSQ(self, other)

    def rotateBy(self, *args):
        r"""rotateBy(vector2di self, irr::f64 degrees, vector2di center=vector2d< int >()) -> vector2di"""
        return _irrlicht.vector2di_rotateBy(self, *args)

    def normalize(self):
        r"""normalize(vector2di self) -> vector2di"""
        return _irrlicht.vector2di_normalize(self)

    def getAngleTrig(self):
        r"""getAngleTrig(vector2di self) -> irr::f64"""
        return _irrlicht.vector2di_getAngleTrig(self)

    def getAngle(self):
        r"""getAngle(vector2di self) -> irr::f64"""
        return _irrlicht.vector2di_getAngle(self)

    def getAngleWith(self, b):
        r"""getAngleWith(vector2di self, vector2di b) -> irr::f64"""
        return _irrlicht.vector2di_getAngleWith(self, b)

    def isBetweenPoints(self, begin, end):
        r"""isBetweenPoints(vector2di self, vector2di begin, vector2di end) -> bool"""
        return _irrlicht.vector2di_isBetweenPoints(self, begin, end)

    def getInterpolated(self, other, d):
        r"""getInterpolated(vector2di self, vector2di other, irr::f64 d) -> vector2di"""
        return _irrlicht.vector2di_getInterpolated(self, other, d)

    def getInterpolated_quadratic(self, v2, v3, d):
        r"""getInterpolated_quadratic(vector2di self, vector2di v2, vector2di v3, irr::f64 d) -> vector2di"""
        return _irrlicht.vector2di_getInterpolated_quadratic(self, v2, v3, d)

    def interpolate(self, a, b, d):
        r"""interpolate(vector2di self, vector2di a, vector2di b, irr::f64 d) -> vector2di"""
        return _irrlicht.vector2di_interpolate(self, a, b, d)
    X = property(_irrlicht.vector2di_X_get, _irrlicht.vector2di_X_set, doc=r"""X : int""")
    Y = property(_irrlicht.vector2di_Y_get, _irrlicht.vector2di_Y_set, doc=r"""Y : int""")
    __swig_destroy__ = _irrlicht.delete_vector2di

# Register vector2di in _irrlicht:
_irrlicht.vector2di_swigregister(vector2di)

class vector3df(object):
    r"""Proxy of C++ irr::core::vector3d< irr::f32 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(vector3df self) -> vector3df
        __init__(vector3df self, float nx, float ny, float nz) -> vector3df
        __init__(vector3df self, float n) -> vector3df
        __init__(vector3df self, vector3df other) -> vector3df
        """
        _irrlicht.vector3df_swiginit(self, _irrlicht.new_vector3df(*args))

    def __neg__(self):
        r"""__neg__(vector3df self) -> vector3df"""
        return _irrlicht.vector3df___neg__(self)

    def __add__(self, *args):
        r"""
        __add__(vector3df self, vector3df other) -> vector3df
        __add__(vector3df self, float const val) -> vector3df
        """
        return _irrlicht.vector3df___add__(self, *args)

    def __iadd__(self, *args):
        r"""
        __iadd__(vector3df self, vector3df other) -> vector3df
        __iadd__(vector3df self, float const val) -> vector3df
        """
        return _irrlicht.vector3df___iadd__(self, *args)

    def __sub__(self, *args):
        r"""
        __sub__(vector3df self, vector3df other) -> vector3df
        __sub__(vector3df self, float const val) -> vector3df
        """
        return _irrlicht.vector3df___sub__(self, *args)

    def __isub__(self, *args):
        r"""
        __isub__(vector3df self, vector3df other) -> vector3df
        __isub__(vector3df self, float const val) -> vector3df
        """
        return _irrlicht.vector3df___isub__(self, *args)

    def __mul__(self, *args):
        r"""
        __mul__(vector3df self, vector3df other) -> vector3df
        __mul__(vector3df self, float const v) -> vector3df
        """
        return _irrlicht.vector3df___mul__(self, *args)

    def __imul__(self, *args):
        r"""
        __imul__(vector3df self, vector3df other) -> vector3df
        __imul__(vector3df self, float const v) -> vector3df
        """
        return _irrlicht.vector3df___imul__(self, *args)

    def __truediv__(self, *args):
        return _irrlicht.vector3df___truediv__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _irrlicht.vector3df___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __le__(self, other):
        r"""__le__(vector3df self, vector3df other) -> bool"""
        return _irrlicht.vector3df___le__(self, other)

    def __ge__(self, other):
        r"""__ge__(vector3df self, vector3df other) -> bool"""
        return _irrlicht.vector3df___ge__(self, other)

    def __lt__(self, other):
        r"""__lt__(vector3df self, vector3df other) -> bool"""
        return _irrlicht.vector3df___lt__(self, other)

    def __gt__(self, other):
        r"""__gt__(vector3df self, vector3df other) -> bool"""
        return _irrlicht.vector3df___gt__(self, other)

    def __eq__(self, other):
        r"""__eq__(vector3df self, vector3df other) -> bool"""
        return _irrlicht.vector3df___eq__(self, other)

    def __ne__(self, other):
        r"""__ne__(vector3df self, vector3df other) -> bool"""
        return _irrlicht.vector3df___ne__(self, other)

    def equals(self, *args):
        r"""equals(vector3df self, vector3df other, float const tolerance=(float) ROUNDING_ERROR_f32) -> bool"""
        return _irrlicht.vector3df_equals(self, *args)

    def set(self, *args):
        r"""
        set(vector3df self, float const nx, float const ny, float const nz) -> vector3df
        set(vector3df self, vector3df p) -> vector3df
        """
        return _irrlicht.vector3df_set(self, *args)

    def getLength(self):
        r"""getLength(vector3df self) -> float"""
        return _irrlicht.vector3df_getLength(self)

    def getLengthSQ(self):
        r"""getLengthSQ(vector3df self) -> float"""
        return _irrlicht.vector3df_getLengthSQ(self)

    def dotProduct(self, other):
        r"""dotProduct(vector3df self, vector3df other) -> float"""
        return _irrlicht.vector3df_dotProduct(self, other)

    def getDistanceFrom(self, other):
        r"""getDistanceFrom(vector3df self, vector3df other) -> float"""
        return _irrlicht.vector3df_getDistanceFrom(self, other)

    def getDistanceFromSQ(self, other):
        r"""getDistanceFromSQ(vector3df self, vector3df other) -> float"""
        return _irrlicht.vector3df_getDistanceFromSQ(self, other)

    def crossProduct(self, p):
        r"""crossProduct(vector3df self, vector3df p) -> vector3df"""
        return _irrlicht.vector3df_crossProduct(self, p)

    def isBetweenPoints(self, begin, end):
        r"""isBetweenPoints(vector3df self, vector3df begin, vector3df end) -> bool"""
        return _irrlicht.vector3df_isBetweenPoints(self, begin, end)

    def normalize(self):
        r"""normalize(vector3df self) -> vector3df"""
        return _irrlicht.vector3df_normalize(self)

    def setLength(self, newlength):
        r"""setLength(vector3df self, float newlength) -> vector3df"""
        return _irrlicht.vector3df_setLength(self, newlength)

    def invert(self):
        r"""invert(vector3df self) -> vector3df"""
        return _irrlicht.vector3df_invert(self)

    def rotateXZBy(self, *args):
        r"""rotateXZBy(vector3df self, irr::f64 degrees, vector3df center=vector3d< float >())"""
        return _irrlicht.vector3df_rotateXZBy(self, *args)

    def rotateXYBy(self, *args):
        r"""rotateXYBy(vector3df self, irr::f64 degrees, vector3df center=vector3d< float >())"""
        return _irrlicht.vector3df_rotateXYBy(self, *args)

    def rotateYZBy(self, *args):
        r"""rotateYZBy(vector3df self, irr::f64 degrees, vector3df center=vector3d< float >())"""
        return _irrlicht.vector3df_rotateYZBy(self, *args)

    def getInterpolated(self, other, d):
        r"""getInterpolated(vector3df self, vector3df other, irr::f64 d) -> vector3df"""
        return _irrlicht.vector3df_getInterpolated(self, other, d)

    def getInterpolated_quadratic(self, v2, v3, d):
        r"""getInterpolated_quadratic(vector3df self, vector3df v2, vector3df v3, irr::f64 d) -> vector3df"""
        return _irrlicht.vector3df_getInterpolated_quadratic(self, v2, v3, d)

    def interpolate(self, a, b, d):
        r"""interpolate(vector3df self, vector3df a, vector3df b, irr::f64 d) -> vector3df"""
        return _irrlicht.vector3df_interpolate(self, a, b, d)

    def getHorizontalAngle(self):
        r"""getHorizontalAngle(vector3df self) -> vector3df"""
        return _irrlicht.vector3df_getHorizontalAngle(self)

    def getSphericalCoordinateAngles(self):
        r"""getSphericalCoordinateAngles(vector3df self) -> vector3df"""
        return _irrlicht.vector3df_getSphericalCoordinateAngles(self)

    def rotationToDirection(self, *args):
        r"""rotationToDirection(vector3df self, vector3df forwards=vector3d< float >(0, 0, 1)) -> vector3df"""
        return _irrlicht.vector3df_rotationToDirection(self, *args)

    def getAs4Values(self, array):
        r"""getAs4Values(vector3df self, float * array)"""
        return _irrlicht.vector3df_getAs4Values(self, array)

    def getAs3Values(self, array):
        r"""getAs3Values(vector3df self, float * array)"""
        return _irrlicht.vector3df_getAs3Values(self, array)
    X = property(_irrlicht.vector3df_X_get, _irrlicht.vector3df_X_set, doc=r"""X : float""")
    Y = property(_irrlicht.vector3df_Y_get, _irrlicht.vector3df_Y_set, doc=r"""Y : float""")
    Z = property(_irrlicht.vector3df_Z_get, _irrlicht.vector3df_Z_set, doc=r"""Z : float""")
    __swig_destroy__ = _irrlicht.delete_vector3df

# Register vector3df in _irrlicht:
_irrlicht.vector3df_swigregister(vector3df)

class vector3di(object):
    r"""Proxy of C++ irr::core::vector3d< irr::s32 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(vector3di self) -> vector3di
        __init__(vector3di self, int nx, int ny, int nz) -> vector3di
        __init__(vector3di self, int n) -> vector3di
        __init__(vector3di self, vector3di other) -> vector3di
        """
        _irrlicht.vector3di_swiginit(self, _irrlicht.new_vector3di(*args))

    def __neg__(self):
        r"""__neg__(vector3di self) -> vector3di"""
        return _irrlicht.vector3di___neg__(self)

    def __add__(self, *args):
        r"""
        __add__(vector3di self, vector3di other) -> vector3di
        __add__(vector3di self, int const val) -> vector3di
        """
        return _irrlicht.vector3di___add__(self, *args)

    def __iadd__(self, *args):
        r"""
        __iadd__(vector3di self, vector3di other) -> vector3di
        __iadd__(vector3di self, int const val) -> vector3di
        """
        return _irrlicht.vector3di___iadd__(self, *args)

    def __sub__(self, *args):
        r"""
        __sub__(vector3di self, vector3di other) -> vector3di
        __sub__(vector3di self, int const val) -> vector3di
        """
        return _irrlicht.vector3di___sub__(self, *args)

    def __isub__(self, *args):
        r"""
        __isub__(vector3di self, vector3di other) -> vector3di
        __isub__(vector3di self, int const val) -> vector3di
        """
        return _irrlicht.vector3di___isub__(self, *args)

    def __mul__(self, *args):
        r"""
        __mul__(vector3di self, vector3di other) -> vector3di
        __mul__(vector3di self, int const v) -> vector3di
        """
        return _irrlicht.vector3di___mul__(self, *args)

    def __imul__(self, *args):
        r"""
        __imul__(vector3di self, vector3di other) -> vector3di
        __imul__(vector3di self, int const v) -> vector3di
        """
        return _irrlicht.vector3di___imul__(self, *args)

    def __truediv__(self, *args):
        return _irrlicht.vector3di___truediv__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _irrlicht.vector3di___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __le__(self, other):
        r"""__le__(vector3di self, vector3di other) -> bool"""
        return _irrlicht.vector3di___le__(self, other)

    def __ge__(self, other):
        r"""__ge__(vector3di self, vector3di other) -> bool"""
        return _irrlicht.vector3di___ge__(self, other)

    def __lt__(self, other):
        r"""__lt__(vector3di self, vector3di other) -> bool"""
        return _irrlicht.vector3di___lt__(self, other)

    def __gt__(self, other):
        r"""__gt__(vector3di self, vector3di other) -> bool"""
        return _irrlicht.vector3di___gt__(self, other)

    def __eq__(self, other):
        r"""__eq__(vector3di self, vector3di other) -> bool"""
        return _irrlicht.vector3di___eq__(self, other)

    def __ne__(self, other):
        r"""__ne__(vector3di self, vector3di other) -> bool"""
        return _irrlicht.vector3di___ne__(self, other)

    def equals(self, *args):
        r"""equals(vector3di self, vector3di other, int const tolerance=(int) ROUNDING_ERROR_f32) -> bool"""
        return _irrlicht.vector3di_equals(self, *args)

    def set(self, *args):
        r"""
        set(vector3di self, int const nx, int const ny, int const nz) -> vector3di
        set(vector3di self, vector3di p) -> vector3di
        """
        return _irrlicht.vector3di_set(self, *args)

    def getLength(self):
        r"""getLength(vector3di self) -> int"""
        return _irrlicht.vector3di_getLength(self)

    def getLengthSQ(self):
        r"""getLengthSQ(vector3di self) -> int"""
        return _irrlicht.vector3di_getLengthSQ(self)

    def dotProduct(self, other):
        r"""dotProduct(vector3di self, vector3di other) -> int"""
        return _irrlicht.vector3di_dotProduct(self, other)

    def getDistanceFrom(self, other):
        r"""getDistanceFrom(vector3di self, vector3di other) -> int"""
        return _irrlicht.vector3di_getDistanceFrom(self, other)

    def getDistanceFromSQ(self, other):
        r"""getDistanceFromSQ(vector3di self, vector3di other) -> int"""
        return _irrlicht.vector3di_getDistanceFromSQ(self, other)

    def crossProduct(self, p):
        r"""crossProduct(vector3di self, vector3di p) -> vector3di"""
        return _irrlicht.vector3di_crossProduct(self, p)

    def isBetweenPoints(self, begin, end):
        r"""isBetweenPoints(vector3di self, vector3di begin, vector3di end) -> bool"""
        return _irrlicht.vector3di_isBetweenPoints(self, begin, end)

    def normalize(self):
        r"""normalize(vector3di self) -> vector3di"""
        return _irrlicht.vector3di_normalize(self)

    def setLength(self, newlength):
        r"""setLength(vector3di self, int newlength) -> vector3di"""
        return _irrlicht.vector3di_setLength(self, newlength)

    def invert(self):
        r"""invert(vector3di self) -> vector3di"""
        return _irrlicht.vector3di_invert(self)

    def rotateXZBy(self, *args):
        r"""rotateXZBy(vector3di self, irr::f64 degrees, vector3di center=vector3d< int >())"""
        return _irrlicht.vector3di_rotateXZBy(self, *args)

    def rotateXYBy(self, *args):
        r"""rotateXYBy(vector3di self, irr::f64 degrees, vector3di center=vector3d< int >())"""
        return _irrlicht.vector3di_rotateXYBy(self, *args)

    def rotateYZBy(self, *args):
        r"""rotateYZBy(vector3di self, irr::f64 degrees, vector3di center=vector3d< int >())"""
        return _irrlicht.vector3di_rotateYZBy(self, *args)

    def getInterpolated(self, other, d):
        r"""getInterpolated(vector3di self, vector3di other, irr::f64 d) -> vector3di"""
        return _irrlicht.vector3di_getInterpolated(self, other, d)

    def getInterpolated_quadratic(self, v2, v3, d):
        r"""getInterpolated_quadratic(vector3di self, vector3di v2, vector3di v3, irr::f64 d) -> vector3di"""
        return _irrlicht.vector3di_getInterpolated_quadratic(self, v2, v3, d)

    def interpolate(self, a, b, d):
        r"""interpolate(vector3di self, vector3di a, vector3di b, irr::f64 d) -> vector3di"""
        return _irrlicht.vector3di_interpolate(self, a, b, d)

    def getHorizontalAngle(self):
        r"""getHorizontalAngle(vector3di self) -> vector3di"""
        return _irrlicht.vector3di_getHorizontalAngle(self)

    def getSphericalCoordinateAngles(self):
        r"""getSphericalCoordinateAngles(vector3di self) -> vector3di"""
        return _irrlicht.vector3di_getSphericalCoordinateAngles(self)

    def rotationToDirection(self, *args):
        r"""rotationToDirection(vector3di self, vector3di forwards=vector3d< int >(0, 0, 1)) -> vector3di"""
        return _irrlicht.vector3di_rotationToDirection(self, *args)

    def getAs4Values(self, array):
        r"""getAs4Values(vector3di self, int * array)"""
        return _irrlicht.vector3di_getAs4Values(self, array)

    def getAs3Values(self, array):
        r"""getAs3Values(vector3di self, int * array)"""
        return _irrlicht.vector3di_getAs3Values(self, array)
    X = property(_irrlicht.vector3di_X_get, _irrlicht.vector3di_X_set, doc=r"""X : int""")
    Y = property(_irrlicht.vector3di_Y_get, _irrlicht.vector3di_Y_set, doc=r"""Y : int""")
    Z = property(_irrlicht.vector3di_Z_get, _irrlicht.vector3di_Z_set, doc=r"""Z : int""")
    __swig_destroy__ = _irrlicht.delete_vector3di

# Register vector3di in _irrlicht:
_irrlicht.vector3di_swigregister(vector3di)

class rectf(object):
    r"""Proxy of C++ irr::core::rect< irr::f32 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(rectf self) -> rectf
        __init__(rectf self, float x, float y, float x2, float y2) -> rectf
        __init__(rectf self, position2d< float > const & upperLeft, position2d< float > const & lowerRight) -> rectf
        """
        _irrlicht.rectf_swiginit(self, _irrlicht.new_rectf(*args))

    def __add__(self, pos):
        r"""__add__(rectf self, position2d< float > const & pos) -> rectf"""
        return _irrlicht.rectf___add__(self, pos)

    def __iadd__(self, pos):
        r"""__iadd__(rectf self, position2d< float > const & pos) -> rectf"""
        return _irrlicht.rectf___iadd__(self, pos)

    def __sub__(self, pos):
        r"""__sub__(rectf self, position2d< float > const & pos) -> rectf"""
        return _irrlicht.rectf___sub__(self, pos)

    def __isub__(self, pos):
        r"""__isub__(rectf self, position2d< float > const & pos) -> rectf"""
        return _irrlicht.rectf___isub__(self, pos)

    def __eq__(self, other):
        r"""__eq__(rectf self, rectf other) -> bool"""
        return _irrlicht.rectf___eq__(self, other)

    def __ne__(self, other):
        r"""__ne__(rectf self, rectf other) -> bool"""
        return _irrlicht.rectf___ne__(self, other)

    def __lt__(self, other):
        r"""__lt__(rectf self, rectf other) -> bool"""
        return _irrlicht.rectf___lt__(self, other)

    def getArea(self):
        r"""getArea(rectf self) -> float"""
        return _irrlicht.rectf_getArea(self)

    def isPointInside(self, pos):
        r"""isPointInside(rectf self, position2d< float > const & pos) -> bool"""
        return _irrlicht.rectf_isPointInside(self, pos)

    def isRectCollided(self, other):
        r"""isRectCollided(rectf self, rectf other) -> bool"""
        return _irrlicht.rectf_isRectCollided(self, other)

    def clipAgainst(self, other):
        r"""clipAgainst(rectf self, rectf other)"""
        return _irrlicht.rectf_clipAgainst(self, other)

    def constrainTo(self, other):
        r"""constrainTo(rectf self, rectf other) -> bool"""
        return _irrlicht.rectf_constrainTo(self, other)

    def getWidth(self):
        r"""getWidth(rectf self) -> float"""
        return _irrlicht.rectf_getWidth(self)

    def getHeight(self):
        r"""getHeight(rectf self) -> float"""
        return _irrlicht.rectf_getHeight(self)

    def repair(self):
        r"""repair(rectf self)"""
        return _irrlicht.rectf_repair(self)

    def isValid(self):
        r"""isValid(rectf self) -> bool"""
        return _irrlicht.rectf_isValid(self)

    def getCenter(self):
        r"""getCenter(rectf self) -> position2d< float >"""
        return _irrlicht.rectf_getCenter(self)

    def getSize(self):
        r"""getSize(rectf self) -> dimension2d< float >"""
        return _irrlicht.rectf_getSize(self)

    def addInternalPoint(self, *args):
        r"""
        addInternalPoint(rectf self, position2d< float > const & p)
        addInternalPoint(rectf self, float x, float y)
        """
        return _irrlicht.rectf_addInternalPoint(self, *args)
    UpperLeftCorner = property(_irrlicht.rectf_UpperLeftCorner_get, _irrlicht.rectf_UpperLeftCorner_set, doc=r"""UpperLeftCorner : position2d<(float)>""")
    LowerRightCorner = property(_irrlicht.rectf_LowerRightCorner_get, _irrlicht.rectf_LowerRightCorner_set, doc=r"""LowerRightCorner : position2d<(float)>""")
    __swig_destroy__ = _irrlicht.delete_rectf

# Register rectf in _irrlicht:
_irrlicht.rectf_swigregister(rectf)

class recti(object):
    r"""Proxy of C++ irr::core::rect< irr::s32 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(recti self) -> recti
        __init__(recti self, int x, int y, int x2, int y2) -> recti
        __init__(recti self, position2d< int > const & upperLeft, position2d< int > const & lowerRight) -> recti
        """
        _irrlicht.recti_swiginit(self, _irrlicht.new_recti(*args))

    def __add__(self, pos):
        r"""__add__(recti self, position2d< int > const & pos) -> recti"""
        return _irrlicht.recti___add__(self, pos)

    def __iadd__(self, pos):
        r"""__iadd__(recti self, position2d< int > const & pos) -> recti"""
        return _irrlicht.recti___iadd__(self, pos)

    def __sub__(self, pos):
        r"""__sub__(recti self, position2d< int > const & pos) -> recti"""
        return _irrlicht.recti___sub__(self, pos)

    def __isub__(self, pos):
        r"""__isub__(recti self, position2d< int > const & pos) -> recti"""
        return _irrlicht.recti___isub__(self, pos)

    def __eq__(self, other):
        r"""__eq__(recti self, recti other) -> bool"""
        return _irrlicht.recti___eq__(self, other)

    def __ne__(self, other):
        r"""__ne__(recti self, recti other) -> bool"""
        return _irrlicht.recti___ne__(self, other)

    def __lt__(self, other):
        r"""__lt__(recti self, recti other) -> bool"""
        return _irrlicht.recti___lt__(self, other)

    def getArea(self):
        r"""getArea(recti self) -> int"""
        return _irrlicht.recti_getArea(self)

    def isPointInside(self, pos):
        r"""isPointInside(recti self, position2d< int > const & pos) -> bool"""
        return _irrlicht.recti_isPointInside(self, pos)

    def isRectCollided(self, other):
        r"""isRectCollided(recti self, recti other) -> bool"""
        return _irrlicht.recti_isRectCollided(self, other)

    def clipAgainst(self, other):
        r"""clipAgainst(recti self, recti other)"""
        return _irrlicht.recti_clipAgainst(self, other)

    def constrainTo(self, other):
        r"""constrainTo(recti self, recti other) -> bool"""
        return _irrlicht.recti_constrainTo(self, other)

    def getWidth(self):
        r"""getWidth(recti self) -> int"""
        return _irrlicht.recti_getWidth(self)

    def getHeight(self):
        r"""getHeight(recti self) -> int"""
        return _irrlicht.recti_getHeight(self)

    def repair(self):
        r"""repair(recti self)"""
        return _irrlicht.recti_repair(self)

    def isValid(self):
        r"""isValid(recti self) -> bool"""
        return _irrlicht.recti_isValid(self)

    def getCenter(self):
        r"""getCenter(recti self) -> position2d< int >"""
        return _irrlicht.recti_getCenter(self)

    def getSize(self):
        r"""getSize(recti self) -> dimension2d< int >"""
        return _irrlicht.recti_getSize(self)

    def addInternalPoint(self, *args):
        r"""
        addInternalPoint(recti self, position2d< int > const & p)
        addInternalPoint(recti self, int x, int y)
        """
        return _irrlicht.recti_addInternalPoint(self, *args)
    UpperLeftCorner = property(_irrlicht.recti_UpperLeftCorner_get, _irrlicht.recti_UpperLeftCorner_set, doc=r"""UpperLeftCorner : position2d<(int)>""")
    LowerRightCorner = property(_irrlicht.recti_LowerRightCorner_get, _irrlicht.recti_LowerRightCorner_set, doc=r"""LowerRightCorner : position2d<(int)>""")
    __swig_destroy__ = _irrlicht.delete_recti

# Register recti in _irrlicht:
_irrlicht.recti_swigregister(recti)

ECF_A1R5G5B5 = _irrlicht.ECF_A1R5G5B5

ECF_R5G6B5 = _irrlicht.ECF_R5G6B5

ECF_R8G8B8 = _irrlicht.ECF_R8G8B8

ECF_A8R8G8B8 = _irrlicht.ECF_A8R8G8B8

ECF_R16F = _irrlicht.ECF_R16F

ECF_G16R16F = _irrlicht.ECF_G16R16F

ECF_A16B16G16R16F = _irrlicht.ECF_A16B16G16R16F

ECF_R32F = _irrlicht.ECF_R32F

ECF_G32R32F = _irrlicht.ECF_G32R32F

ECF_A32B32G32R32F = _irrlicht.ECF_A32B32G32R32F

ECF_UNKNOWN = _irrlicht.ECF_UNKNOWN


def RGBA16(r, g, b, a=0xFF):
    r"""RGBA16(irr::u32 r, irr::u32 g, irr::u32 b, irr::u32 a=0xFF) -> irr::u16"""
    return _irrlicht.RGBA16(r, g, b, a)

def RGB16(r, g, b):
    r"""RGB16(irr::u32 r, irr::u32 g, irr::u32 b) -> irr::u16"""
    return _irrlicht.RGB16(r, g, b)

def RGB16from16(r, g, b):
    r"""RGB16from16(irr::u16 r, irr::u16 g, irr::u16 b) -> irr::u16"""
    return _irrlicht.RGB16from16(r, g, b)

def X8R8G8B8toA1R5G5B5(color):
    r"""X8R8G8B8toA1R5G5B5(irr::u32 color) -> irr::u16"""
    return _irrlicht.X8R8G8B8toA1R5G5B5(color)

def A8R8G8B8toA1R5G5B5(color):
    r"""A8R8G8B8toA1R5G5B5(irr::u32 color) -> irr::u16"""
    return _irrlicht.A8R8G8B8toA1R5G5B5(color)

def A8R8G8B8toR5G6B5(color):
    r"""A8R8G8B8toR5G6B5(irr::u32 color) -> irr::u16"""
    return _irrlicht.A8R8G8B8toR5G6B5(color)

def A1R5G5B5toA8R8G8B8(color):
    r"""A1R5G5B5toA8R8G8B8(irr::u16 color) -> irr::u32"""
    return _irrlicht.A1R5G5B5toA8R8G8B8(color)

def R5G6B5toA8R8G8B8(color):
    r"""R5G6B5toA8R8G8B8(irr::u16 color) -> irr::u32"""
    return _irrlicht.R5G6B5toA8R8G8B8(color)

def R5G6B5toA1R5G5B5(color):
    r"""R5G6B5toA1R5G5B5(irr::u16 color) -> irr::u16"""
    return _irrlicht.R5G6B5toA1R5G5B5(color)

def A1R5G5B5toR5G6B5(color):
    r"""A1R5G5B5toR5G6B5(irr::u16 color) -> irr::u16"""
    return _irrlicht.A1R5G5B5toR5G6B5(color)

def getAlpha(color):
    r"""getAlpha(irr::u16 color) -> irr::u32"""
    return _irrlicht.getAlpha(color)

def getRed(color):
    r"""getRed(irr::u16 color) -> irr::u32"""
    return _irrlicht.getRed(color)

def getGreen(color):
    r"""getGreen(irr::u16 color) -> irr::u32"""
    return _irrlicht.getGreen(color)

def getBlue(color):
    r"""getBlue(irr::u16 color) -> irr::u32"""
    return _irrlicht.getBlue(color)

def getAverage(color):
    r"""getAverage(irr::s16 color) -> irr::s32"""
    return _irrlicht.getAverage(color)
class SColor(object):
    r"""Proxy of C++ irr::video::SColor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SColor self) -> SColor
        __init__(SColor self, irr::u32 a, irr::u32 r, irr::u32 g, irr::u32 b) -> SColor
        __init__(SColor self, irr::u32 clr) -> SColor
        """
        _irrlicht.SColor_swiginit(self, _irrlicht.new_SColor(*args))

    def getAlpha(self):
        r"""getAlpha(SColor self) -> irr::u32"""
        return _irrlicht.SColor_getAlpha(self)

    def getRed(self):
        r"""getRed(SColor self) -> irr::u32"""
        return _irrlicht.SColor_getRed(self)

    def getGreen(self):
        r"""getGreen(SColor self) -> irr::u32"""
        return _irrlicht.SColor_getGreen(self)

    def getBlue(self):
        r"""getBlue(SColor self) -> irr::u32"""
        return _irrlicht.SColor_getBlue(self)

    def getLightness(self):
        r"""getLightness(SColor self) -> irr::f32"""
        return _irrlicht.SColor_getLightness(self)

    def getLuminance(self):
        r"""getLuminance(SColor self) -> irr::f32"""
        return _irrlicht.SColor_getLuminance(self)

    def getAverage(self):
        r"""getAverage(SColor self) -> irr::u32"""
        return _irrlicht.SColor_getAverage(self)

    def setAlpha(self, a):
        r"""setAlpha(SColor self, irr::u32 a)"""
        return _irrlicht.SColor_setAlpha(self, a)

    def setRed(self, r):
        r"""setRed(SColor self, irr::u32 r)"""
        return _irrlicht.SColor_setRed(self, r)

    def setGreen(self, g):
        r"""setGreen(SColor self, irr::u32 g)"""
        return _irrlicht.SColor_setGreen(self, g)

    def setBlue(self, b):
        r"""setBlue(SColor self, irr::u32 b)"""
        return _irrlicht.SColor_setBlue(self, b)

    def toA1R5G5B5(self):
        r"""toA1R5G5B5(SColor self) -> irr::u16"""
        return _irrlicht.SColor_toA1R5G5B5(self)

    def toOpenGLColor(self, dest):
        r"""toOpenGLColor(SColor self, irr::u8 * dest)"""
        return _irrlicht.SColor_toOpenGLColor(self, dest)

    def set(self, *args):
        r"""
        set(SColor self, irr::u32 a, irr::u32 r, irr::u32 g, irr::u32 b)
        set(SColor self, irr::u32 col)
        """
        return _irrlicht.SColor_set(self, *args)

    def __eq__(self, other):
        r"""__eq__(SColor self, SColor other) -> bool"""
        return _irrlicht.SColor___eq__(self, other)

    def __ne__(self, other):
        r"""__ne__(SColor self, SColor other) -> bool"""
        return _irrlicht.SColor___ne__(self, other)

    def __lt__(self, other):
        r"""__lt__(SColor self, SColor other) -> bool"""
        return _irrlicht.SColor___lt__(self, other)

    def __add__(self, other):
        r"""__add__(SColor self, SColor other) -> SColor"""
        return _irrlicht.SColor___add__(self, other)

    def getInterpolated(self, other, d):
        r"""getInterpolated(SColor self, SColor other, irr::f32 d) -> SColor"""
        return _irrlicht.SColor_getInterpolated(self, other, d)

    def getInterpolated_quadratic(self, c1, c2, d):
        r"""getInterpolated_quadratic(SColor self, SColor c1, SColor c2, irr::f32 d) -> SColor"""
        return _irrlicht.SColor_getInterpolated_quadratic(self, c1, c2, d)

    def setData(self, data, format):
        r"""setData(SColor self, void const * data, irr::video::ECOLOR_FORMAT format)"""
        return _irrlicht.SColor_setData(self, data, format)

    def getData(self, data, format):
        r"""getData(SColor self, void * data, irr::video::ECOLOR_FORMAT format)"""
        return _irrlicht.SColor_getData(self, data, format)
    color = property(_irrlicht.SColor_color_get, _irrlicht.SColor_color_set, doc=r"""color : irr::u32""")
    __swig_destroy__ = _irrlicht.delete_SColor

# Register SColor in _irrlicht:
_irrlicht.SColor_swigregister(SColor)

class SColorf(object):
    r"""Proxy of C++ irr::video::SColorf class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SColorf self) -> SColorf
        __init__(SColorf self, irr::f32 r, irr::f32 g, irr::f32 b, irr::f32 a=1.0) -> SColorf
        __init__(SColorf self, SColor c) -> SColorf
        """
        _irrlicht.SColorf_swiginit(self, _irrlicht.new_SColorf(*args))

    def toSColor(self):
        r"""toSColor(SColorf self) -> SColor"""
        return _irrlicht.SColorf_toSColor(self)

    def set(self, *args):
        r"""
        set(SColorf self, irr::f32 rr, irr::f32 gg, irr::f32 bb)
        set(SColorf self, irr::f32 aa, irr::f32 rr, irr::f32 gg, irr::f32 bb)
        """
        return _irrlicht.SColorf_set(self, *args)

    def getInterpolated(self, other, d):
        r"""getInterpolated(SColorf self, SColorf other, irr::f32 d) -> SColorf"""
        return _irrlicht.SColorf_getInterpolated(self, other, d)

    def getInterpolated_quadratic(self, c1, c2, d):
        r"""getInterpolated_quadratic(SColorf self, SColorf c1, SColorf c2, irr::f32 d) -> SColorf"""
        return _irrlicht.SColorf_getInterpolated_quadratic(self, c1, c2, d)

    def setColorComponentValue(self, index, value):
        r"""setColorComponentValue(SColorf self, irr::s32 index, irr::f32 value)"""
        return _irrlicht.SColorf_setColorComponentValue(self, index, value)

    def getAlpha(self):
        r"""getAlpha(SColorf self) -> irr::f32"""
        return _irrlicht.SColorf_getAlpha(self)

    def getRed(self):
        r"""getRed(SColorf self) -> irr::f32"""
        return _irrlicht.SColorf_getRed(self)

    def getGreen(self):
        r"""getGreen(SColorf self) -> irr::f32"""
        return _irrlicht.SColorf_getGreen(self)

    def getBlue(self):
        r"""getBlue(SColorf self) -> irr::f32"""
        return _irrlicht.SColorf_getBlue(self)
    r = property(_irrlicht.SColorf_r_get, _irrlicht.SColorf_r_set, doc=r"""r : irr::f32""")
    g = property(_irrlicht.SColorf_g_get, _irrlicht.SColorf_g_set, doc=r"""g : irr::f32""")
    b = property(_irrlicht.SColorf_b_get, _irrlicht.SColorf_b_set, doc=r"""b : irr::f32""")
    a = property(_irrlicht.SColorf_a_get, _irrlicht.SColorf_a_set, doc=r"""a : irr::f32""")
    __swig_destroy__ = _irrlicht.delete_SColorf

# Register SColorf in _irrlicht:
_irrlicht.SColorf_swigregister(SColorf)

class SColorHSL(object):
    r"""Proxy of C++ irr::video::SColorHSL class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, h=0., s=0., l=0.):
        r"""__init__(SColorHSL self, irr::f32 h=0., irr::f32 s=0., irr::f32 l=0.) -> SColorHSL"""
        _irrlicht.SColorHSL_swiginit(self, _irrlicht.new_SColorHSL(h, s, l))

    def fromRGB(self, color):
        r"""fromRGB(SColorHSL self, SColorf color)"""
        return _irrlicht.SColorHSL_fromRGB(self, color)

    def toRGB(self, color):
        r"""toRGB(SColorHSL self, SColorf color)"""
        return _irrlicht.SColorHSL_toRGB(self, color)
    Hue = property(_irrlicht.SColorHSL_Hue_get, _irrlicht.SColorHSL_Hue_set, doc=r"""Hue : irr::f32""")
    Saturation = property(_irrlicht.SColorHSL_Saturation_get, _irrlicht.SColorHSL_Saturation_set, doc=r"""Saturation : irr::f32""")
    Luminance = property(_irrlicht.SColorHSL_Luminance_get, _irrlicht.SColorHSL_Luminance_set, doc=r"""Luminance : irr::f32""")
    __swig_destroy__ = _irrlicht.delete_SColorHSL

# Register SColorHSL in _irrlicht:
_irrlicht.SColorHSL_swigregister(SColorHSL)

EBF_ZERO = _irrlicht.EBF_ZERO

EBF_ONE = _irrlicht.EBF_ONE

EBF_DST_COLOR = _irrlicht.EBF_DST_COLOR

EBF_ONE_MINUS_DST_COLOR = _irrlicht.EBF_ONE_MINUS_DST_COLOR

EBF_SRC_COLOR = _irrlicht.EBF_SRC_COLOR

EBF_ONE_MINUS_SRC_COLOR = _irrlicht.EBF_ONE_MINUS_SRC_COLOR

EBF_SRC_ALPHA = _irrlicht.EBF_SRC_ALPHA

EBF_ONE_MINUS_SRC_ALPHA = _irrlicht.EBF_ONE_MINUS_SRC_ALPHA

EBF_DST_ALPHA = _irrlicht.EBF_DST_ALPHA

EBF_ONE_MINUS_DST_ALPHA = _irrlicht.EBF_ONE_MINUS_DST_ALPHA

EBF_SRC_ALPHA_SATURATE = _irrlicht.EBF_SRC_ALPHA_SATURATE

EBO_NONE = _irrlicht.EBO_NONE

EBO_ADD = _irrlicht.EBO_ADD

EBO_SUBTRACT = _irrlicht.EBO_SUBTRACT

EBO_REVSUBTRACT = _irrlicht.EBO_REVSUBTRACT

EBO_MIN = _irrlicht.EBO_MIN

EBO_MAX = _irrlicht.EBO_MAX

EBO_MIN_FACTOR = _irrlicht.EBO_MIN_FACTOR

EBO_MAX_FACTOR = _irrlicht.EBO_MAX_FACTOR

EBO_MIN_ALPHA = _irrlicht.EBO_MIN_ALPHA

EBO_MAX_ALPHA = _irrlicht.EBO_MAX_ALPHA

EMFN_MODULATE_1X = _irrlicht.EMFN_MODULATE_1X

EMFN_MODULATE_2X = _irrlicht.EMFN_MODULATE_2X

EMFN_MODULATE_4X = _irrlicht.EMFN_MODULATE_4X

ECFN_NEVER = _irrlicht.ECFN_NEVER

ECFN_LESSEQUAL = _irrlicht.ECFN_LESSEQUAL

ECFN_EQUAL = _irrlicht.ECFN_EQUAL

ECFN_LESS = _irrlicht.ECFN_LESS

ECFN_NOTEQUAL = _irrlicht.ECFN_NOTEQUAL

ECFN_GREATEREQUAL = _irrlicht.ECFN_GREATEREQUAL

ECFN_GREATER = _irrlicht.ECFN_GREATER

ECFN_ALWAYS = _irrlicht.ECFN_ALWAYS

ECP_NONE = _irrlicht.ECP_NONE

ECP_ALPHA = _irrlicht.ECP_ALPHA

ECP_RED = _irrlicht.ECP_RED

ECP_GREEN = _irrlicht.ECP_GREEN

ECP_BLUE = _irrlicht.ECP_BLUE

ECP_RGB = _irrlicht.ECP_RGB

ECP_ALL = _irrlicht.ECP_ALL

EAS_NONE = _irrlicht.EAS_NONE

EAS_VERTEX_COLOR = _irrlicht.EAS_VERTEX_COLOR

EAS_TEXTURE = _irrlicht.EAS_TEXTURE


def pack_textureBlendFunc(*args):
    r"""pack_textureBlendFunc(irr::video::E_BLEND_FACTOR const srcFact, irr::video::E_BLEND_FACTOR const dstFact, irr::video::E_MODULATE_FUNC const modulate=EMFN_MODULATE_1X, irr::u32 const alphaSource=EAS_TEXTURE) -> irr::f32"""
    return _irrlicht.pack_textureBlendFunc(*args)

def unpack_textureBlendFunc(srcFact, dstFact, modulo, alphaSource, param):
    r"""unpack_textureBlendFunc(irr::video::E_BLEND_FACTOR & srcFact, irr::video::E_BLEND_FACTOR & dstFact, irr::video::E_MODULATE_FUNC & modulo, irr::u32 & alphaSource, irr::f32 const param)"""
    return _irrlicht.unpack_textureBlendFunc(srcFact, dstFact, modulo, alphaSource, param)

def textureBlendFunc_hasAlpha(factor):
    r"""textureBlendFunc_hasAlpha(irr::video::E_BLEND_FACTOR const factor) -> bool"""
    return _irrlicht.textureBlendFunc_hasAlpha(factor)
EAAM_OFF = _irrlicht.EAAM_OFF

EAAM_SIMPLE = _irrlicht.EAAM_SIMPLE

EAAM_QUALITY = _irrlicht.EAAM_QUALITY

EAAM_LINE_SMOOTH = _irrlicht.EAAM_LINE_SMOOTH

EAAM_POINT_SMOOTH = _irrlicht.EAAM_POINT_SMOOTH

EAAM_FULL_BASIC = _irrlicht.EAAM_FULL_BASIC

EAAM_ALPHA_TO_COVERAGE = _irrlicht.EAAM_ALPHA_TO_COVERAGE

ECM_NONE = _irrlicht.ECM_NONE

ECM_DIFFUSE = _irrlicht.ECM_DIFFUSE

ECM_AMBIENT = _irrlicht.ECM_AMBIENT

ECM_EMISSIVE = _irrlicht.ECM_EMISSIVE

ECM_SPECULAR = _irrlicht.ECM_SPECULAR

ECM_DIFFUSE_AND_AMBIENT = _irrlicht.ECM_DIFFUSE_AND_AMBIENT

EPO_BACK = _irrlicht.EPO_BACK

EPO_FRONT = _irrlicht.EPO_FRONT

class SMaterial(object):
    r"""Proxy of C++ irr::video::SMaterial class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SMaterial self) -> SMaterial
        __init__(SMaterial self, SMaterial other) -> SMaterial
        """
        _irrlicht.SMaterial_swiginit(self, _irrlicht.new_SMaterial(*args))
    TextureLayer = property(_irrlicht.SMaterial_TextureLayer_get, _irrlicht.SMaterial_TextureLayer_set, doc=r"""TextureLayer : a(irr::video::MATERIAL_MAX_TEXTURES).SMaterialLayer""")
    MaterialType = property(_irrlicht.SMaterial_MaterialType_get, _irrlicht.SMaterial_MaterialType_set, doc=r"""MaterialType : E_MATERIAL_TYPE""")
    AmbientColor = property(_irrlicht.SMaterial_AmbientColor_get, _irrlicht.SMaterial_AmbientColor_set, doc=r"""AmbientColor : irr::video::SColor""")
    DiffuseColor = property(_irrlicht.SMaterial_DiffuseColor_get, _irrlicht.SMaterial_DiffuseColor_set, doc=r"""DiffuseColor : irr::video::SColor""")
    EmissiveColor = property(_irrlicht.SMaterial_EmissiveColor_get, _irrlicht.SMaterial_EmissiveColor_set, doc=r"""EmissiveColor : irr::video::SColor""")
    SpecularColor = property(_irrlicht.SMaterial_SpecularColor_get, _irrlicht.SMaterial_SpecularColor_set, doc=r"""SpecularColor : irr::video::SColor""")
    Shininess = property(_irrlicht.SMaterial_Shininess_get, _irrlicht.SMaterial_Shininess_set, doc=r"""Shininess : irr::f32""")
    MaterialTypeParam = property(_irrlicht.SMaterial_MaterialTypeParam_get, _irrlicht.SMaterial_MaterialTypeParam_set, doc=r"""MaterialTypeParam : irr::f32""")
    MaterialTypeParam2 = property(_irrlicht.SMaterial_MaterialTypeParam2_get, _irrlicht.SMaterial_MaterialTypeParam2_set, doc=r"""MaterialTypeParam2 : irr::f32""")
    Thickness = property(_irrlicht.SMaterial_Thickness_get, _irrlicht.SMaterial_Thickness_set, doc=r"""Thickness : irr::f32""")
    ZBuffer = property(_irrlicht.SMaterial_ZBuffer_get, _irrlicht.SMaterial_ZBuffer_set, doc=r"""ZBuffer : irr::u8""")
    AntiAliasing = property(_irrlicht.SMaterial_AntiAliasing_get, _irrlicht.SMaterial_AntiAliasing_set, doc=r"""AntiAliasing : irr::u8""")
    ColorMask = property(_irrlicht.SMaterial_ColorMask_get, _irrlicht.SMaterial_ColorMask_set, doc=r"""ColorMask : irr::u8""")
    ColorMaterial = property(_irrlicht.SMaterial_ColorMaterial_get, _irrlicht.SMaterial_ColorMaterial_set, doc=r"""ColorMaterial : irr::u8""")
    BlendOperation = property(_irrlicht.SMaterial_BlendOperation_get, _irrlicht.SMaterial_BlendOperation_set, doc=r"""BlendOperation : irr::video::E_BLEND_OPERATION""")
    PolygonOffsetFactor = property(_irrlicht.SMaterial_PolygonOffsetFactor_get, _irrlicht.SMaterial_PolygonOffsetFactor_set, doc=r"""PolygonOffsetFactor : irr::u8""")
    PolygonOffsetDirection = property(_irrlicht.SMaterial_PolygonOffsetDirection_get, _irrlicht.SMaterial_PolygonOffsetDirection_set, doc=r"""PolygonOffsetDirection : irr::video::E_POLYGON_OFFSET""")
    Wireframe = property(_irrlicht.SMaterial_Wireframe_get, _irrlicht.SMaterial_Wireframe_set, doc=r"""Wireframe : bool""")
    PointCloud = property(_irrlicht.SMaterial_PointCloud_get, _irrlicht.SMaterial_PointCloud_set, doc=r"""PointCloud : bool""")
    GouraudShading = property(_irrlicht.SMaterial_GouraudShading_get, _irrlicht.SMaterial_GouraudShading_set, doc=r"""GouraudShading : bool""")
    Lighting = property(_irrlicht.SMaterial_Lighting_get, _irrlicht.SMaterial_Lighting_set, doc=r"""Lighting : bool""")
    ZWriteEnable = property(_irrlicht.SMaterial_ZWriteEnable_get, _irrlicht.SMaterial_ZWriteEnable_set, doc=r"""ZWriteEnable : bool""")
    BackfaceCulling = property(_irrlicht.SMaterial_BackfaceCulling_get, _irrlicht.SMaterial_BackfaceCulling_set, doc=r"""BackfaceCulling : bool""")
    FrontfaceCulling = property(_irrlicht.SMaterial_FrontfaceCulling_get, _irrlicht.SMaterial_FrontfaceCulling_set, doc=r"""FrontfaceCulling : bool""")
    FogEnable = property(_irrlicht.SMaterial_FogEnable_get, _irrlicht.SMaterial_FogEnable_set, doc=r"""FogEnable : bool""")
    NormalizeNormals = property(_irrlicht.SMaterial_NormalizeNormals_get, _irrlicht.SMaterial_NormalizeNormals_set, doc=r"""NormalizeNormals : bool""")
    UseMipMaps = property(_irrlicht.SMaterial_UseMipMaps_get, _irrlicht.SMaterial_UseMipMaps_set, doc=r"""UseMipMaps : bool""")

    def getTextureMatrix(self, *args):
        r"""
        getTextureMatrix(SMaterial self, irr::u32 i) -> irr::core::matrix4
        getTextureMatrix(SMaterial self, irr::u32 i) -> irr::core::matrix4 const &
        """
        return _irrlicht.SMaterial_getTextureMatrix(self, *args)

    def setTextureMatrix(self, i, mat):
        r"""setTextureMatrix(SMaterial self, irr::u32 i, irr::core::matrix4 const & mat)"""
        return _irrlicht.SMaterial_setTextureMatrix(self, i, mat)

    def getTexture(self, i):
        r"""getTexture(SMaterial self, irr::u32 i) -> irr::video::ITexture *"""
        return _irrlicht.SMaterial_getTexture(self, i)

    def setTexture(self, i, tex):
        r"""setTexture(SMaterial self, irr::u32 i, irr::video::ITexture * tex)"""
        return _irrlicht.SMaterial_setTexture(self, i, tex)

    def setFlag(self, flag, value):
        r"""setFlag(SMaterial self, E_MATERIAL_FLAG flag, bool value)"""
        return _irrlicht.SMaterial_setFlag(self, flag, value)

    def getFlag(self, flag):
        r"""getFlag(SMaterial self, E_MATERIAL_FLAG flag) -> bool"""
        return _irrlicht.SMaterial_getFlag(self, flag)

    def __ne__(self, b):
        r"""__ne__(SMaterial self, SMaterial b) -> bool"""
        return _irrlicht.SMaterial___ne__(self, b)

    def __eq__(self, b):
        r"""__eq__(SMaterial self, SMaterial b) -> bool"""
        return _irrlicht.SMaterial___eq__(self, b)

    def isTransparent(self):
        r"""isTransparent(SMaterial self) -> bool"""
        return _irrlicht.SMaterial_isTransparent(self)
    __swig_destroy__ = _irrlicht.delete_SMaterial

# Register SMaterial in _irrlicht:
_irrlicht.SMaterial_swigregister(SMaterial)
cvar = _irrlicht.cvar
PolygonOffsetDirectionNames = cvar.PolygonOffsetDirectionNames
MATERIAL_MAX_TEXTURES = cvar.MATERIAL_MAX_TEXTURES

ETC_REPEAT = _irrlicht.ETC_REPEAT

ETC_CLAMP = _irrlicht.ETC_CLAMP

ETC_CLAMP_TO_EDGE = _irrlicht.ETC_CLAMP_TO_EDGE

ETC_CLAMP_TO_BORDER = _irrlicht.ETC_CLAMP_TO_BORDER

ETC_MIRROR = _irrlicht.ETC_MIRROR

ETC_MIRROR_CLAMP = _irrlicht.ETC_MIRROR_CLAMP

ETC_MIRROR_CLAMP_TO_EDGE = _irrlicht.ETC_MIRROR_CLAMP_TO_EDGE

ETC_MIRROR_CLAMP_TO_BORDER = _irrlicht.ETC_MIRROR_CLAMP_TO_BORDER

class SMaterialLayer(object):
    r"""Proxy of C++ irr::video::SMaterialLayer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SMaterialLayer self) -> SMaterialLayer
        __init__(SMaterialLayer self, SMaterialLayer other) -> SMaterialLayer
        """
        _irrlicht.SMaterialLayer_swiginit(self, _irrlicht.new_SMaterialLayer(*args))
    __swig_destroy__ = _irrlicht.delete_SMaterialLayer

    def getTextureMatrix(self, *args):
        r"""
        getTextureMatrix(SMaterialLayer self) -> irr::core::matrix4
        getTextureMatrix(SMaterialLayer self) -> irr::core::matrix4 const &
        """
        return _irrlicht.SMaterialLayer_getTextureMatrix(self, *args)

    def setTextureMatrix(self, mat):
        r"""setTextureMatrix(SMaterialLayer self, irr::core::matrix4 const & mat)"""
        return _irrlicht.SMaterialLayer_setTextureMatrix(self, mat)

    def __ne__(self, b):
        r"""__ne__(SMaterialLayer self, SMaterialLayer b) -> bool"""
        return _irrlicht.SMaterialLayer___ne__(self, b)

    def __eq__(self, b):
        r"""__eq__(SMaterialLayer self, SMaterialLayer b) -> bool"""
        return _irrlicht.SMaterialLayer___eq__(self, b)
    Texture = property(_irrlicht.SMaterialLayer_Texture_get, _irrlicht.SMaterialLayer_Texture_set, doc=r"""Texture : p.irr::video::ITexture""")
    TextureWrapU = property(_irrlicht.SMaterialLayer_TextureWrapU_get, _irrlicht.SMaterialLayer_TextureWrapU_set, doc=r"""TextureWrapU : irr::u8""")
    TextureWrapV = property(_irrlicht.SMaterialLayer_TextureWrapV_get, _irrlicht.SMaterialLayer_TextureWrapV_set, doc=r"""TextureWrapV : irr::u8""")
    BilinearFilter = property(_irrlicht.SMaterialLayer_BilinearFilter_get, _irrlicht.SMaterialLayer_BilinearFilter_set, doc=r"""BilinearFilter : bool""")
    TrilinearFilter = property(_irrlicht.SMaterialLayer_TrilinearFilter_get, _irrlicht.SMaterialLayer_TrilinearFilter_set, doc=r"""TrilinearFilter : bool""")
    AnisotropicFilter = property(_irrlicht.SMaterialLayer_AnisotropicFilter_get, _irrlicht.SMaterialLayer_AnisotropicFilter_set, doc=r"""AnisotropicFilter : irr::u8""")
    LODBias = property(_irrlicht.SMaterialLayer_LODBias_get, _irrlicht.SMaterialLayer_LODBias_set, doc=r"""LODBias : irr::s8""")

# Register SMaterialLayer in _irrlicht:
_irrlicht.SMaterialLayer_swigregister(SMaterialLayer)
aTextureClampNames = cvar.aTextureClampNames

ETS_VIEW = _irrlicht.ETS_VIEW

ETS_WORLD = _irrlicht.ETS_WORLD

ETS_PROJECTION = _irrlicht.ETS_PROJECTION

ETS_TEXTURE_0 = _irrlicht.ETS_TEXTURE_0

ETS_TEXTURE_1 = _irrlicht.ETS_TEXTURE_1

ETS_TEXTURE_2 = _irrlicht.ETS_TEXTURE_2

ETS_TEXTURE_3 = _irrlicht.ETS_TEXTURE_3

ETS_COUNT = _irrlicht.ETS_COUNT

ELR_DEVICE = _irrlicht.ELR_DEVICE

ELR_TEXTURES = _irrlicht.ELR_TEXTURES

ELR_RTTS = _irrlicht.ELR_RTTS

ELR_HW_BUFFERS = _irrlicht.ELR_HW_BUFFERS

ERT_FRAME_BUFFER = _irrlicht.ERT_FRAME_BUFFER

ERT_RENDER_TEXTURE = _irrlicht.ERT_RENDER_TEXTURE

ERT_MULTI_RENDER_TEXTURES = _irrlicht.ERT_MULTI_RENDER_TEXTURES

ERT_STEREO_LEFT_BUFFER = _irrlicht.ERT_STEREO_LEFT_BUFFER

ERT_STEREO_RIGHT_BUFFER = _irrlicht.ERT_STEREO_RIGHT_BUFFER

ERT_STEREO_BOTH_BUFFERS = _irrlicht.ERT_STEREO_BOTH_BUFFERS

ERT_AUX_BUFFER0 = _irrlicht.ERT_AUX_BUFFER0

ERT_AUX_BUFFER1 = _irrlicht.ERT_AUX_BUFFER1

ERT_AUX_BUFFER2 = _irrlicht.ERT_AUX_BUFFER2

ERT_AUX_BUFFER3 = _irrlicht.ERT_AUX_BUFFER3

ERT_AUX_BUFFER4 = _irrlicht.ERT_AUX_BUFFER4

EFT_FOG_EXP = _irrlicht.EFT_FOG_EXP

EFT_FOG_LINEAR = _irrlicht.EFT_FOG_LINEAR

EFT_FOG_EXP2 = _irrlicht.EFT_FOG_EXP2

class SOverrideMaterial(object):
    r"""Proxy of C++ irr::video::SOverrideMaterial class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Material = property(_irrlicht.SOverrideMaterial_Material_get, _irrlicht.SOverrideMaterial_Material_set, doc=r"""Material : irr::video::SMaterial""")
    EnableFlags = property(_irrlicht.SOverrideMaterial_EnableFlags_get, _irrlicht.SOverrideMaterial_EnableFlags_set, doc=r"""EnableFlags : irr::u32""")
    EnablePasses = property(_irrlicht.SOverrideMaterial_EnablePasses_get, _irrlicht.SOverrideMaterial_EnablePasses_set, doc=r"""EnablePasses : irr::u16""")
    Enabled = property(_irrlicht.SOverrideMaterial_Enabled_get, _irrlicht.SOverrideMaterial_Enabled_set, doc=r"""Enabled : bool""")

    def __init__(self):
        r"""__init__(SOverrideMaterial self) -> SOverrideMaterial"""
        _irrlicht.SOverrideMaterial_swiginit(self, _irrlicht.new_SOverrideMaterial())

    def apply(self, material):
        r"""apply(SOverrideMaterial self, SMaterial material)"""
        return _irrlicht.SOverrideMaterial_apply(self, material)
    __swig_destroy__ = _irrlicht.delete_SOverrideMaterial

# Register SOverrideMaterial in _irrlicht:
_irrlicht.SOverrideMaterial_swigregister(SOverrideMaterial)
FogTypeNames = cvar.FogTypeNames

class IRenderTarget(object):
    r"""Proxy of C++ irr::video::IRenderTarget class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(IRenderTarget self, irr::video::ITexture * texture, irr::video::E_COLOR_PLANE colorMask=ECP_ALL, irr::video::E_BLEND_FACTOR blendFuncSrc=EBF_ONE, irr::video::E_BLEND_FACTOR blendFuncDst=EBF_ONE_MINUS_SRC_ALPHA, irr::video::E_BLEND_OPERATION blendOp=EBO_NONE) -> IRenderTarget
        __init__(IRenderTarget self, irr::video::E_RENDER_TARGET target, irr::video::E_COLOR_PLANE colorMask=ECP_ALL, irr::video::E_BLEND_FACTOR blendFuncSrc=EBF_ONE, irr::video::E_BLEND_FACTOR blendFuncDst=EBF_ONE_MINUS_SRC_ALPHA, irr::video::E_BLEND_OPERATION blendOp=EBO_NONE) -> IRenderTarget
        """
        _irrlicht.IRenderTarget_swiginit(self, _irrlicht.new_IRenderTarget(*args))

    def __ne__(self, other):
        r"""__ne__(IRenderTarget self, IRenderTarget other) -> bool"""
        return _irrlicht.IRenderTarget___ne__(self, other)
    RenderTexture = property(_irrlicht.IRenderTarget_RenderTexture_get, _irrlicht.IRenderTarget_RenderTexture_set, doc=r"""RenderTexture : p.irr::video::ITexture""")
    TargetType = property(_irrlicht.IRenderTarget_TargetType_get, _irrlicht.IRenderTarget_TargetType_set, doc=r"""TargetType : irr::video::E_RENDER_TARGET""")
    ColorMask = property(_irrlicht.IRenderTarget_ColorMask_get, _irrlicht.IRenderTarget_ColorMask_set, doc=r"""ColorMask : irr::video::E_COLOR_PLANE""")
    BlendFuncSrc = property(_irrlicht.IRenderTarget_BlendFuncSrc_get, _irrlicht.IRenderTarget_BlendFuncSrc_set, doc=r"""BlendFuncSrc : irr::video::E_BLEND_FACTOR""")
    BlendFuncDst = property(_irrlicht.IRenderTarget_BlendFuncDst_get, _irrlicht.IRenderTarget_BlendFuncDst_set, doc=r"""BlendFuncDst : irr::video::E_BLEND_FACTOR""")
    BlendOp = property(_irrlicht.IRenderTarget_BlendOp_get, _irrlicht.IRenderTarget_BlendOp_set, doc=r"""BlendOp : irr::video::E_BLEND_OPERATION""")
    __swig_destroy__ = _irrlicht.delete_IRenderTarget

# Register IRenderTarget in _irrlicht:
_irrlicht.IRenderTarget_swigregister(IRenderTarget)

class IVideoDriver(IReferenceCounted):
    r"""Proxy of C++ irr::video::IVideoDriver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def beginScene(self, *args):
        r"""beginScene(IVideoDriver self, bool backBuffer=True, bool zBuffer=True, SColor color=irr::video::SColor(255,0,0,0), SExposedVideoData const & videoData=SExposedVideoData(), recti sourceRect=None) -> bool"""
        return _irrlicht.IVideoDriver_beginScene(self, *args)

    def endScene(self):
        r"""endScene(IVideoDriver self) -> bool"""
        return _irrlicht.IVideoDriver_endScene(self)

    def queryFeature(self, feature):
        r"""queryFeature(IVideoDriver self, E_VIDEO_DRIVER_FEATURE feature) -> bool"""
        return _irrlicht.IVideoDriver_queryFeature(self, feature)

    def disableFeature(self, feature, flag=True):
        r"""disableFeature(IVideoDriver self, E_VIDEO_DRIVER_FEATURE feature, bool flag=True)"""
        return _irrlicht.IVideoDriver_disableFeature(self, feature, flag)

    def getDriverAttributes(self):
        r"""getDriverAttributes(IVideoDriver self) -> irr::io::IAttributes const &"""
        return _irrlicht.IVideoDriver_getDriverAttributes(self)

    def checkDriverReset(self):
        r"""checkDriverReset(IVideoDriver self) -> bool"""
        return _irrlicht.IVideoDriver_checkDriverReset(self)

    def setTransform(self, state, mat):
        r"""setTransform(IVideoDriver self, irr::video::E_TRANSFORMATION_STATE state, irr::core::matrix4 const & mat)"""
        return _irrlicht.IVideoDriver_setTransform(self, state, mat)

    def getTransform(self, state):
        r"""getTransform(IVideoDriver self, irr::video::E_TRANSFORMATION_STATE state) -> irr::core::matrix4 const &"""
        return _irrlicht.IVideoDriver_getTransform(self, state)

    def getImageLoaderCount(self):
        r"""getImageLoaderCount(IVideoDriver self) -> irr::u32"""
        return _irrlicht.IVideoDriver_getImageLoaderCount(self)

    def getImageLoader(self, n):
        r"""getImageLoader(IVideoDriver self, irr::u32 n) -> irr::video::IImageLoader *"""
        return _irrlicht.IVideoDriver_getImageLoader(self, n)

    def getImageWriterCount(self):
        r"""getImageWriterCount(IVideoDriver self) -> irr::u32"""
        return _irrlicht.IVideoDriver_getImageWriterCount(self)

    def getImageWriter(self, n):
        r"""getImageWriter(IVideoDriver self, irr::u32 n) -> IImageWriter"""
        return _irrlicht.IVideoDriver_getImageWriter(self, n)

    def setMaterial(self, material):
        r"""setMaterial(IVideoDriver self, SMaterial material)"""
        return _irrlicht.IVideoDriver_setMaterial(self, material)

    def getTexture(self, *args):
        r"""
        getTexture(IVideoDriver self, irr::io::path const & filename) -> irr::video::ITexture
        getTexture(IVideoDriver self, irr::io::IReadFile * file) -> irr::video::ITexture *
        """
        return _irrlicht.IVideoDriver_getTexture(self, *args)

    def getTextureByIndex(self, index):
        r"""getTextureByIndex(IVideoDriver self, irr::u32 index) -> irr::video::ITexture *"""
        return _irrlicht.IVideoDriver_getTextureByIndex(self, index)

    def getTextureCount(self):
        r"""getTextureCount(IVideoDriver self) -> irr::u32"""
        return _irrlicht.IVideoDriver_getTextureCount(self)

    def renameTexture(self, texture, newName):
        r"""renameTexture(IVideoDriver self, irr::video::ITexture * texture, irr::io::path const & newName)"""
        return _irrlicht.IVideoDriver_renameTexture(self, texture, newName)

    def addTexture(self, *args):
        r"""
        addTexture(IVideoDriver self, dimension2du size, irr::io::path const & name, irr::video::ECOLOR_FORMAT format=ECF_A8R8G8B8) -> irr::video::ITexture
        addTexture(IVideoDriver self, irr::io::path const & name, IImage image, void * mipmapData=None) -> irr::video::ITexture
        """
        return _irrlicht.IVideoDriver_addTexture(self, *args)

    def addRenderTargetTexture(self, *args):
        r"""addRenderTargetTexture(IVideoDriver self, dimension2du size, irr::io::path const & name="rt", irr::video::ECOLOR_FORMAT const format=ECF_UNKNOWN) -> irr::video::ITexture"""
        return _irrlicht.IVideoDriver_addRenderTargetTexture(self, *args)

    def removeTexture(self, texture):
        r"""removeTexture(IVideoDriver self, irr::video::ITexture * texture)"""
        return _irrlicht.IVideoDriver_removeTexture(self, texture)

    def removeAllTextures(self):
        r"""removeAllTextures(IVideoDriver self)"""
        return _irrlicht.IVideoDriver_removeAllTextures(self)

    def removeHardwareBuffer(self, mb):
        r"""removeHardwareBuffer(IVideoDriver self, irr::scene::IMeshBuffer const * mb)"""
        return _irrlicht.IVideoDriver_removeHardwareBuffer(self, mb)

    def removeAllHardwareBuffers(self):
        r"""removeAllHardwareBuffers(IVideoDriver self)"""
        return _irrlicht.IVideoDriver_removeAllHardwareBuffers(self)

    def addOcclusionQuery(self, node, mesh=None):
        r"""addOcclusionQuery(IVideoDriver self, ISceneNode node, irr::scene::IMesh const * mesh=None)"""
        return _irrlicht.IVideoDriver_addOcclusionQuery(self, node, mesh)

    def removeOcclusionQuery(self, node):
        r"""removeOcclusionQuery(IVideoDriver self, ISceneNode node)"""
        return _irrlicht.IVideoDriver_removeOcclusionQuery(self, node)

    def removeAllOcclusionQueries(self):
        r"""removeAllOcclusionQueries(IVideoDriver self)"""
        return _irrlicht.IVideoDriver_removeAllOcclusionQueries(self)

    def runOcclusionQuery(self, node, visible=False):
        r"""runOcclusionQuery(IVideoDriver self, ISceneNode node, bool visible=False)"""
        return _irrlicht.IVideoDriver_runOcclusionQuery(self, node, visible)

    def runAllOcclusionQueries(self, visible=False):
        r"""runAllOcclusionQueries(IVideoDriver self, bool visible=False)"""
        return _irrlicht.IVideoDriver_runAllOcclusionQueries(self, visible)

    def updateOcclusionQuery(self, node, block=True):
        r"""updateOcclusionQuery(IVideoDriver self, ISceneNode node, bool block=True)"""
        return _irrlicht.IVideoDriver_updateOcclusionQuery(self, node, block)

    def updateAllOcclusionQueries(self, block=True):
        r"""updateAllOcclusionQueries(IVideoDriver self, bool block=True)"""
        return _irrlicht.IVideoDriver_updateAllOcclusionQueries(self, block)

    def getOcclusionQueryResult(self, node):
        r"""getOcclusionQueryResult(IVideoDriver self, ISceneNode node) -> irr::u32"""
        return _irrlicht.IVideoDriver_getOcclusionQueryResult(self, node)

    def makeColorKeyTexture(self, *args):
        r"""
        makeColorKeyTexture(IVideoDriver self, irr::video::ITexture * texture, SColor color, bool zeroTexels=False)
        makeColorKeyTexture(IVideoDriver self, irr::video::ITexture * texture, irr::core::position2d< irr::s32 > colorKeyPixelPos, bool zeroTexels=False)
        """
        return _irrlicht.IVideoDriver_makeColorKeyTexture(self, *args)

    def makeNormalMapTexture(self, texture, amplitude=1.0):
        r"""makeNormalMapTexture(IVideoDriver self, irr::video::ITexture * texture, irr::f32 amplitude=1.0)"""
        return _irrlicht.IVideoDriver_makeNormalMapTexture(self, texture, amplitude)

    def setRenderTarget(self, *args):
        r"""
        setRenderTarget(IVideoDriver self, irr::video::ITexture * texture, bool clearBackBuffer=True, bool clearZBuffer=True, SColor color=irr::video::SColor(0,0,0,0)) -> bool
        setRenderTarget(IVideoDriver self, irr::video::E_RENDER_TARGET target, bool clearTarget=True, bool clearZBuffer=True, SColor color=irr::video::SColor(0,0,0,0)) -> bool
        setRenderTarget(IVideoDriver self, irr::core::array< irr::video::IRenderTarget > const & texture, bool clearBackBuffer=True, bool clearZBuffer=True, SColor color=irr::video::SColor(0,0,0,0)) -> bool
        """
        return _irrlicht.IVideoDriver_setRenderTarget(self, *args)

    def setViewPort(self, area):
        r"""setViewPort(IVideoDriver self, recti area)"""
        return _irrlicht.IVideoDriver_setViewPort(self, area)

    def getViewPort(self):
        r"""getViewPort(IVideoDriver self) -> recti"""
        return _irrlicht.IVideoDriver_getViewPort(self)

    def drawVertexPrimitiveList(self, *args):
        r"""drawVertexPrimitiveList(IVideoDriver self, void const * vertices, irr::u32 vertexCount, void const * indexList, irr::u32 primCount, E_VERTEX_TYPE vType=EVT_STANDARD, irr::scene::E_PRIMITIVE_TYPE pType=scene::EPT_TRIANGLES, E_INDEX_TYPE iType=EIT_16BIT)"""
        return _irrlicht.IVideoDriver_drawVertexPrimitiveList(self, *args)

    def draw2DVertexPrimitiveList(self, *args):
        r"""draw2DVertexPrimitiveList(IVideoDriver self, void const * vertices, irr::u32 vertexCount, void const * indexList, irr::u32 primCount, E_VERTEX_TYPE vType=EVT_STANDARD, irr::scene::E_PRIMITIVE_TYPE pType=scene::EPT_TRIANGLES, E_INDEX_TYPE iType=EIT_16BIT)"""
        return _irrlicht.IVideoDriver_draw2DVertexPrimitiveList(self, *args)

    def drawIndexedTriangleList(self, *args):
        r"""
        drawIndexedTriangleList(IVideoDriver self, irr::video::S3DVertex const * vertices, irr::u32 vertexCount, irr::u16 const * indexList, irr::u32 triangleCount)
        drawIndexedTriangleList(IVideoDriver self, irr::video::S3DVertex2TCoords const * vertices, irr::u32 vertexCount, irr::u16 const * indexList, irr::u32 triangleCount)
        drawIndexedTriangleList(IVideoDriver self, irr::video::S3DVertexTangents const * vertices, irr::u32 vertexCount, irr::u16 const * indexList, irr::u32 triangleCount)
        """
        return _irrlicht.IVideoDriver_drawIndexedTriangleList(self, *args)

    def drawIndexedTriangleFan(self, *args):
        r"""
        drawIndexedTriangleFan(IVideoDriver self, irr::video::S3DVertex const * vertices, irr::u32 vertexCount, irr::u16 const * indexList, irr::u32 triangleCount)
        drawIndexedTriangleFan(IVideoDriver self, irr::video::S3DVertex2TCoords const * vertices, irr::u32 vertexCount, irr::u16 const * indexList, irr::u32 triangleCount)
        drawIndexedTriangleFan(IVideoDriver self, irr::video::S3DVertexTangents const * vertices, irr::u32 vertexCount, irr::u16 const * indexList, irr::u32 triangleCount)
        """
        return _irrlicht.IVideoDriver_drawIndexedTriangleFan(self, *args)

    def draw3DLine(self, *args):
        r"""draw3DLine(IVideoDriver self, vector3df start, vector3df end, SColor color=irr::video::SColor(255,255,255,255))"""
        return _irrlicht.IVideoDriver_draw3DLine(self, *args)

    def draw3DTriangle(self, *args):
        r"""draw3DTriangle(IVideoDriver self, irr::core::triangle3df const & triangle, SColor color=irr::video::SColor(255,255,255,255))"""
        return _irrlicht.IVideoDriver_draw3DTriangle(self, *args)

    def draw3DBox(self, *args):
        r"""draw3DBox(IVideoDriver self, irr::core::aabbox3d< irr::f32 > const & box, SColor color=irr::video::SColor(255,255,255,255))"""
        return _irrlicht.IVideoDriver_draw3DBox(self, *args)

    def draw2DImageBatch(self, *args):
        r"""
        draw2DImageBatch(IVideoDriver self, irr::video::ITexture const * texture, irr::core::position2d< irr::s32 > const & pos, irr::core::array< irr::core::rect< irr::s32 > > const & sourceRects, irr::core::array< irr::s32 > const & indices, irr::s32 kerningWidth=0, recti clipRect=None, SColor color=irr::video::SColor(255,255,255,255), bool useAlphaChannelOfTexture=False)
        draw2DImageBatch(IVideoDriver self, irr::video::ITexture const * texture, irr::core::array< irr::core::position2d< irr::s32 > > const & positions, irr::core::array< irr::core::rect< irr::s32 > > const & sourceRects, recti clipRect=None, SColor color=irr::video::SColor(255,255,255,255), bool useAlphaChannelOfTexture=False)
        """
        return _irrlicht.IVideoDriver_draw2DImageBatch(self, *args)

    def draw2DImage(self, *args):
        r"""
        draw2DImage(IVideoDriver self, irr::video::ITexture const * texture, irr::core::position2d< irr::s32 > const & destPos)
        draw2DImage(IVideoDriver self, irr::video::ITexture const * texture, irr::core::position2d< irr::s32 > const & destPos, recti sourceRect, recti clipRect=None, SColor color=irr::video::SColor(255,255,255,255), bool useAlphaChannelOfTexture=False)
        draw2DImage(IVideoDriver self, irr::video::ITexture const * texture, recti destRect, recti sourceRect, recti clipRect=None, SColor colors=None, bool useAlphaChannelOfTexture=False)
        """
        return _irrlicht.IVideoDriver_draw2DImage(self, *args)

    def draw2DRectangle(self, *args):
        r"""
        draw2DRectangle(IVideoDriver self, SColor color, recti pos, recti clip=None)
        draw2DRectangle(IVideoDriver self, recti pos, SColor colorLeftUp, SColor colorRightUp, SColor colorLeftDown, SColor colorRightDown, recti clip=None)
        """
        return _irrlicht.IVideoDriver_draw2DRectangle(self, *args)

    def draw2DRectangleOutline(self, *args):
        r"""draw2DRectangleOutline(IVideoDriver self, recti pos, SColor color=irr::video::SColor(255,255,255,255))"""
        return _irrlicht.IVideoDriver_draw2DRectangleOutline(self, *args)

    def draw2DLine(self, *args):
        r"""draw2DLine(IVideoDriver self, irr::core::position2d< irr::s32 > const & start, irr::core::position2d< irr::s32 > const & end, SColor color=irr::video::SColor(255,255,255,255))"""
        return _irrlicht.IVideoDriver_draw2DLine(self, *args)

    def drawPixel(self, x, y, color):
        r"""drawPixel(IVideoDriver self, irr::u32 x, irr::u32 y, SColor color)"""
        return _irrlicht.IVideoDriver_drawPixel(self, x, y, color)

    def draw2DPolygon(self, *args):
        r"""draw2DPolygon(IVideoDriver self, irr::core::position2d< irr::s32 > center, irr::f32 radius, SColor color=irr::video::SColor(100,255,255,255), irr::s32 vertexCount=10)"""
        return _irrlicht.IVideoDriver_draw2DPolygon(self, *args)

    def drawStencilShadowVolume(self, triangles, zfail=True, debugDataVisible=0):
        r"""drawStencilShadowVolume(IVideoDriver self, irr::core::array< irr::core::vector3df > const & triangles, bool zfail=True, irr::u32 debugDataVisible=0)"""
        return _irrlicht.IVideoDriver_drawStencilShadowVolume(self, triangles, zfail, debugDataVisible)

    def drawStencilShadow(self, *args):
        r"""drawStencilShadow(IVideoDriver self, bool clearStencilBuffer=False, SColor leftUpEdge=irr::video::SColor(255,0,0,0), SColor rightUpEdge=irr::video::SColor(255,0,0,0), SColor leftDownEdge=irr::video::SColor(255,0,0,0), SColor rightDownEdge=irr::video::SColor(255,0,0,0))"""
        return _irrlicht.IVideoDriver_drawStencilShadow(self, *args)

    def drawMeshBuffer(self, mb):
        r"""drawMeshBuffer(IVideoDriver self, irr::scene::IMeshBuffer const * mb)"""
        return _irrlicht.IVideoDriver_drawMeshBuffer(self, mb)

    def drawMeshBufferNormals(self, *args):
        r"""drawMeshBufferNormals(IVideoDriver self, irr::scene::IMeshBuffer const * mb, irr::f32 length=10., SColor color=0xffffffff)"""
        return _irrlicht.IVideoDriver_drawMeshBufferNormals(self, *args)

    def setFog(self, *args):
        r"""setFog(IVideoDriver self, SColor color=irr::video::SColor(0,255,255,255), irr::video::E_FOG_TYPE fogType=EFT_FOG_LINEAR, irr::f32 start=50.0, irr::f32 end=100.0, irr::f32 density=0.01, bool pixelFog=False, bool rangeFog=False)"""
        return _irrlicht.IVideoDriver_setFog(self, *args)

    def getFog(self, color, fogType, start, end, density, pixelFog, rangeFog):
        r"""getFog(IVideoDriver self, SColor color, irr::video::E_FOG_TYPE & fogType, irr::f32 & start, irr::f32 & end, irr::f32 & density, bool & pixelFog, bool & rangeFog)"""
        return _irrlicht.IVideoDriver_getFog(self, color, fogType, start, end, density, pixelFog, rangeFog)

    def getColorFormat(self):
        r"""getColorFormat(IVideoDriver self) -> irr::video::ECOLOR_FORMAT"""
        return _irrlicht.IVideoDriver_getColorFormat(self)

    def getScreenSize(self):
        r"""getScreenSize(IVideoDriver self) -> dimension2du"""
        return _irrlicht.IVideoDriver_getScreenSize(self)

    def getCurrentRenderTargetSize(self):
        r"""getCurrentRenderTargetSize(IVideoDriver self) -> dimension2du"""
        return _irrlicht.IVideoDriver_getCurrentRenderTargetSize(self)

    def getFPS(self):
        r"""getFPS(IVideoDriver self) -> irr::s32"""
        return _irrlicht.IVideoDriver_getFPS(self)

    def getPrimitiveCountDrawn(self, mode=0):
        r"""getPrimitiveCountDrawn(IVideoDriver self, irr::u32 mode=0) -> irr::u32"""
        return _irrlicht.IVideoDriver_getPrimitiveCountDrawn(self, mode)

    def deleteAllDynamicLights(self):
        r"""deleteAllDynamicLights(IVideoDriver self)"""
        return _irrlicht.IVideoDriver_deleteAllDynamicLights(self)

    def addDynamicLight(self, light):
        r"""addDynamicLight(IVideoDriver self, irr::video::SLight const & light) -> irr::s32"""
        return _irrlicht.IVideoDriver_addDynamicLight(self, light)

    def getMaximalDynamicLightAmount(self):
        r"""getMaximalDynamicLightAmount(IVideoDriver self) -> irr::u32"""
        return _irrlicht.IVideoDriver_getMaximalDynamicLightAmount(self)

    def getDynamicLightCount(self):
        r"""getDynamicLightCount(IVideoDriver self) -> irr::u32"""
        return _irrlicht.IVideoDriver_getDynamicLightCount(self)

    def getDynamicLight(self, idx):
        r"""getDynamicLight(IVideoDriver self, irr::u32 idx) -> irr::video::SLight const &"""
        return _irrlicht.IVideoDriver_getDynamicLight(self, idx)

    def turnLightOn(self, lightIndex, turnOn):
        r"""turnLightOn(IVideoDriver self, irr::s32 lightIndex, bool turnOn)"""
        return _irrlicht.IVideoDriver_turnLightOn(self, lightIndex, turnOn)

    def getName(self):
        r"""getName(IVideoDriver self) -> wchar_t const *"""
        return _irrlicht.IVideoDriver_getName(self)

    def addExternalImageLoader(self, loader):
        r"""addExternalImageLoader(IVideoDriver self, irr::video::IImageLoader * loader)"""
        return _irrlicht.IVideoDriver_addExternalImageLoader(self, loader)

    def addExternalImageWriter(self, writer):
        r"""addExternalImageWriter(IVideoDriver self, IImageWriter writer)"""
        return _irrlicht.IVideoDriver_addExternalImageWriter(self, writer)

    def getMaximalPrimitiveCount(self):
        r"""getMaximalPrimitiveCount(IVideoDriver self) -> irr::u32"""
        return _irrlicht.IVideoDriver_getMaximalPrimitiveCount(self)

    def setTextureCreationFlag(self, flag, enabled=True):
        r"""setTextureCreationFlag(IVideoDriver self, E_TEXTURE_CREATION_FLAG flag, bool enabled=True)"""
        return _irrlicht.IVideoDriver_setTextureCreationFlag(self, flag, enabled)

    def getTextureCreationFlag(self, flag):
        r"""getTextureCreationFlag(IVideoDriver self, E_TEXTURE_CREATION_FLAG flag) -> bool"""
        return _irrlicht.IVideoDriver_getTextureCreationFlag(self, flag)

    def createImageFromFile(self, *args):
        r"""
        createImageFromFile(IVideoDriver self, irr::io::path const & filename) -> IImage
        createImageFromFile(IVideoDriver self, irr::io::IReadFile * file) -> IImage
        """
        return _irrlicht.IVideoDriver_createImageFromFile(self, *args)

    def writeImageToFile(self, *args):
        r"""
        writeImageToFile(IVideoDriver self, IImage image, irr::io::path const & filename, irr::u32 param=0) -> bool
        writeImageToFile(IVideoDriver self, IImage image, IWriteFile file, irr::u32 param=0) -> bool
        """
        return _irrlicht.IVideoDriver_writeImageToFile(self, *args)

    def createImageFromData(self, format, size, data, ownForeignMemory=False, deleteMemory=True):
        r"""createImageFromData(IVideoDriver self, irr::video::ECOLOR_FORMAT format, dimension2du size, void * data, bool ownForeignMemory=False, bool deleteMemory=True) -> IImage"""
        return _irrlicht.IVideoDriver_createImageFromData(self, format, size, data, ownForeignMemory, deleteMemory)

    def createImage(self, *args):
        r"""
        createImage(IVideoDriver self, irr::video::ECOLOR_FORMAT format, dimension2du size) -> IImage
        createImage(IVideoDriver self, irr::video::ECOLOR_FORMAT format, IImage imageToCopy) -> IImage
        createImage(IVideoDriver self, IImage imageToCopy, irr::core::position2d< irr::s32 > const & pos, dimension2du size) -> IImage
        createImage(IVideoDriver self, irr::video::ITexture * texture, irr::core::position2d< irr::s32 > const & pos, dimension2du size) -> IImage
        """
        return _irrlicht.IVideoDriver_createImage(self, *args)

    def OnResize(self, size):
        r"""OnResize(IVideoDriver self, dimension2du size)"""
        return _irrlicht.IVideoDriver_OnResize(self, size)

    def addMaterialRenderer(self, renderer, name=None):
        r"""addMaterialRenderer(IVideoDriver self, irr::video::IMaterialRenderer * renderer, irr::c8 const * name=None) -> irr::s32"""
        return _irrlicht.IVideoDriver_addMaterialRenderer(self, renderer, name)

    def getMaterialRenderer(self, idx):
        r"""getMaterialRenderer(IVideoDriver self, irr::u32 idx) -> irr::video::IMaterialRenderer *"""
        return _irrlicht.IVideoDriver_getMaterialRenderer(self, idx)

    def getMaterialRendererCount(self):
        r"""getMaterialRendererCount(IVideoDriver self) -> irr::u32"""
        return _irrlicht.IVideoDriver_getMaterialRendererCount(self)

    def getMaterialRendererName(self, idx):
        r"""getMaterialRendererName(IVideoDriver self, irr::u32 idx) -> irr::c8 const *"""
        return _irrlicht.IVideoDriver_getMaterialRendererName(self, idx)

    def setMaterialRendererName(self, idx, name):
        r"""setMaterialRendererName(IVideoDriver self, irr::s32 idx, irr::c8 const * name)"""
        return _irrlicht.IVideoDriver_setMaterialRendererName(self, idx, name)

    def createAttributesFromMaterial(self, material, options=None):
        r"""createAttributesFromMaterial(IVideoDriver self, SMaterial material, irr::io::SAttributeReadWriteOptions * options=None) -> irr::io::IAttributes"""
        return _irrlicht.IVideoDriver_createAttributesFromMaterial(self, material, options)

    def fillMaterialStructureFromAttributes(self, outMaterial, attributes):
        r"""fillMaterialStructureFromAttributes(IVideoDriver self, SMaterial outMaterial, irr::io::IAttributes * attributes)"""
        return _irrlicht.IVideoDriver_fillMaterialStructureFromAttributes(self, outMaterial, attributes)

    def getExposedVideoData(self):
        r"""getExposedVideoData(IVideoDriver self) -> SExposedVideoData const &"""
        return _irrlicht.IVideoDriver_getExposedVideoData(self)

    def getDriverType(self):
        r"""getDriverType(IVideoDriver self) -> E_DRIVER_TYPE"""
        return _irrlicht.IVideoDriver_getDriverType(self)

    def getGPUProgrammingServices(self):
        r"""getGPUProgrammingServices(IVideoDriver self) -> irr::video::IGPUProgrammingServices *"""
        return _irrlicht.IVideoDriver_getGPUProgrammingServices(self)

    def getMeshManipulator(self):
        r"""getMeshManipulator(IVideoDriver self) -> irr::scene::IMeshManipulator *"""
        return _irrlicht.IVideoDriver_getMeshManipulator(self)

    def clearZBuffer(self):
        r"""clearZBuffer(IVideoDriver self)"""
        return _irrlicht.IVideoDriver_clearZBuffer(self)

    def createScreenShot(self, *args):
        r"""createScreenShot(IVideoDriver self, irr::video::ECOLOR_FORMAT format=ECF_UNKNOWN, irr::video::E_RENDER_TARGET target=ERT_FRAME_BUFFER) -> IImage"""
        return _irrlicht.IVideoDriver_createScreenShot(self, *args)

    def findTexture(self, filename):
        r"""findTexture(IVideoDriver self, irr::io::path const & filename) -> irr::video::ITexture *"""
        return _irrlicht.IVideoDriver_findTexture(self, filename)

    def setClipPlane(self, index, plane, enable=False):
        r"""setClipPlane(IVideoDriver self, irr::u32 index, irr::core::plane3df const & plane, bool enable=False) -> bool"""
        return _irrlicht.IVideoDriver_setClipPlane(self, index, plane, enable)

    def enableClipPlane(self, index, enable):
        r"""enableClipPlane(IVideoDriver self, irr::u32 index, bool enable)"""
        return _irrlicht.IVideoDriver_enableClipPlane(self, index, enable)

    def setMinHardwareBufferVertexCount(self, count):
        r"""setMinHardwareBufferVertexCount(IVideoDriver self, irr::u32 count)"""
        return _irrlicht.IVideoDriver_setMinHardwareBufferVertexCount(self, count)

    def getOverrideMaterial(self):
        r"""getOverrideMaterial(IVideoDriver self) -> SOverrideMaterial"""
        return _irrlicht.IVideoDriver_getOverrideMaterial(self)

    def getMaterial2D(self):
        r"""getMaterial2D(IVideoDriver self) -> SMaterial"""
        return _irrlicht.IVideoDriver_getMaterial2D(self)

    def enableMaterial2D(self, enable=True):
        r"""enableMaterial2D(IVideoDriver self, bool enable=True)"""
        return _irrlicht.IVideoDriver_enableMaterial2D(self, enable)

    def getVendorInfo(self):
        r"""getVendorInfo(IVideoDriver self) -> irr::core::stringc"""
        return _irrlicht.IVideoDriver_getVendorInfo(self)

    def setAmbientLight(self, color):
        r"""setAmbientLight(IVideoDriver self, SColorf color)"""
        return _irrlicht.IVideoDriver_setAmbientLight(self, color)

    def setAllowZWriteOnTransparent(self, flag):
        r"""setAllowZWriteOnTransparent(IVideoDriver self, bool flag)"""
        return _irrlicht.IVideoDriver_setAllowZWriteOnTransparent(self, flag)

    def getMaxTextureSize(self):
        r"""getMaxTextureSize(IVideoDriver self) -> dimension2du"""
        return _irrlicht.IVideoDriver_getMaxTextureSize(self)

    def convertColor(self, sP, sF, sN, dP, dF):
        r"""convertColor(IVideoDriver self, void const * sP, irr::video::ECOLOR_FORMAT sF, irr::s32 sN, void * dP, irr::video::ECOLOR_FORMAT dF)"""
        return _irrlicht.IVideoDriver_convertColor(self, sP, sF, sN, dP, dF)
    __swig_destroy__ = _irrlicht.delete_IVideoDriver

# Register IVideoDriver in _irrlicht:
_irrlicht.IVideoDriver_swigregister(IVideoDriver)

class ISceneNode(object):
    r"""Proxy of C++ irr::scene::ISceneNode class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _irrlicht.delete_ISceneNode

    def OnRegisterSceneNode(self):
        r"""OnRegisterSceneNode(ISceneNode self)"""
        return _irrlicht.ISceneNode_OnRegisterSceneNode(self)

    def OnAnimate(self, timeMs):
        r"""OnAnimate(ISceneNode self, irr::u32 timeMs)"""
        return _irrlicht.ISceneNode_OnAnimate(self, timeMs)

    def render(self):
        r"""render(ISceneNode self)"""
        return _irrlicht.ISceneNode_render(self)

    def getName(self):
        r"""getName(ISceneNode self) -> irr::c8 const *"""
        return _irrlicht.ISceneNode_getName(self)

    def setName(self, *args):
        r"""
        setName(ISceneNode self, irr::c8 const * name)
        setName(ISceneNode self, irr::core::stringc const & name)
        """
        return _irrlicht.ISceneNode_setName(self, *args)

    def getBoundingBox(self):
        r"""getBoundingBox(ISceneNode self) -> irr::core::aabbox3d< irr::f32 > const &"""
        return _irrlicht.ISceneNode_getBoundingBox(self)

    def getTransformedBoundingBox(self):
        r"""getTransformedBoundingBox(ISceneNode self) -> irr::core::aabbox3d< irr::f32 > const"""
        return _irrlicht.ISceneNode_getTransformedBoundingBox(self)

    def getAbsoluteTransformation(self):
        r"""getAbsoluteTransformation(ISceneNode self) -> irr::core::matrix4 const &"""
        return _irrlicht.ISceneNode_getAbsoluteTransformation(self)

    def getRelativeTransformation(self):
        r"""getRelativeTransformation(ISceneNode self) -> irr::core::matrix4"""
        return _irrlicht.ISceneNode_getRelativeTransformation(self)

    def isVisible(self):
        r"""isVisible(ISceneNode self) -> bool"""
        return _irrlicht.ISceneNode_isVisible(self)

    def isTrulyVisible(self):
        r"""isTrulyVisible(ISceneNode self) -> bool"""
        return _irrlicht.ISceneNode_isTrulyVisible(self)

    def setVisible(self, isVisible):
        r"""setVisible(ISceneNode self, bool isVisible)"""
        return _irrlicht.ISceneNode_setVisible(self, isVisible)

    def getID(self):
        r"""getID(ISceneNode self) -> irr::s32"""
        return _irrlicht.ISceneNode_getID(self)

    def setID(self, id):
        r"""setID(ISceneNode self, irr::s32 id)"""
        return _irrlicht.ISceneNode_setID(self, id)

    def addChild(self, child):
        r"""addChild(ISceneNode self, ISceneNode child)"""
        return _irrlicht.ISceneNode_addChild(self, child)

    def removeChild(self, child):
        r"""removeChild(ISceneNode self, ISceneNode child) -> bool"""
        return _irrlicht.ISceneNode_removeChild(self, child)

    def removeAll(self):
        r"""removeAll(ISceneNode self)"""
        return _irrlicht.ISceneNode_removeAll(self)

    def remove(self):
        r"""remove(ISceneNode self)"""
        return _irrlicht.ISceneNode_remove(self)

    def addAnimator(self, animator):
        r"""addAnimator(ISceneNode self, ISceneNodeAnimator * animator)"""
        return _irrlicht.ISceneNode_addAnimator(self, animator)

    def getAnimators(self):
        r"""getAnimators(ISceneNode self) -> irr::core::list< ISceneNodeAnimator * > const &"""
        return _irrlicht.ISceneNode_getAnimators(self)

    def removeAnimator(self, animator):
        r"""removeAnimator(ISceneNode self, ISceneNodeAnimator * animator)"""
        return _irrlicht.ISceneNode_removeAnimator(self, animator)

    def removeAnimators(self):
        r"""removeAnimators(ISceneNode self)"""
        return _irrlicht.ISceneNode_removeAnimators(self)

    def getMaterial(self, num):
        r"""getMaterial(ISceneNode self, irr::u32 num) -> SMaterial"""
        return _irrlicht.ISceneNode_getMaterial(self, num)

    def getMaterialCount(self):
        r"""getMaterialCount(ISceneNode self) -> irr::u32"""
        return _irrlicht.ISceneNode_getMaterialCount(self)

    def setMaterialFlag(self, flag, newvalue):
        r"""setMaterialFlag(ISceneNode self, irr::video::E_MATERIAL_FLAG flag, bool newvalue)"""
        return _irrlicht.ISceneNode_setMaterialFlag(self, flag, newvalue)

    def setMaterialTexture(self, textureLayer, texture):
        r"""setMaterialTexture(ISceneNode self, irr::u32 textureLayer, irr::video::ITexture * texture)"""
        return _irrlicht.ISceneNode_setMaterialTexture(self, textureLayer, texture)

    def setMaterialType(self, newType):
        r"""setMaterialType(ISceneNode self, irr::video::E_MATERIAL_TYPE newType)"""
        return _irrlicht.ISceneNode_setMaterialType(self, newType)

    def getScale(self):
        r"""getScale(ISceneNode self) -> vector3df"""
        return _irrlicht.ISceneNode_getScale(self)

    def setScale(self, scale):
        r"""setScale(ISceneNode self, vector3df scale)"""
        return _irrlicht.ISceneNode_setScale(self, scale)

    def getRotation(self):
        r"""getRotation(ISceneNode self) -> vector3df"""
        return _irrlicht.ISceneNode_getRotation(self)

    def setRotation(self, rotation):
        r"""setRotation(ISceneNode self, vector3df rotation)"""
        return _irrlicht.ISceneNode_setRotation(self, rotation)

    def getPosition(self):
        r"""getPosition(ISceneNode self) -> vector3df"""
        return _irrlicht.ISceneNode_getPosition(self)

    def setPosition(self, newpos):
        r"""setPosition(ISceneNode self, vector3df newpos)"""
        return _irrlicht.ISceneNode_setPosition(self, newpos)

    def getAbsolutePosition(self):
        r"""getAbsolutePosition(ISceneNode self) -> vector3df"""
        return _irrlicht.ISceneNode_getAbsolutePosition(self)

    def setAutomaticCulling(self, state):
        r"""setAutomaticCulling(ISceneNode self, irr::u32 state)"""
        return _irrlicht.ISceneNode_setAutomaticCulling(self, state)

    def getAutomaticCulling(self):
        r"""getAutomaticCulling(ISceneNode self) -> irr::u32"""
        return _irrlicht.ISceneNode_getAutomaticCulling(self)

    def setDebugDataVisible(self, state):
        r"""setDebugDataVisible(ISceneNode self, irr::u32 state)"""
        return _irrlicht.ISceneNode_setDebugDataVisible(self, state)

    def isDebugDataVisible(self):
        r"""isDebugDataVisible(ISceneNode self) -> irr::u32"""
        return _irrlicht.ISceneNode_isDebugDataVisible(self)

    def setIsDebugObject(self, debugObject):
        r"""setIsDebugObject(ISceneNode self, bool debugObject)"""
        return _irrlicht.ISceneNode_setIsDebugObject(self, debugObject)

    def isDebugObject(self):
        r"""isDebugObject(ISceneNode self) -> bool"""
        return _irrlicht.ISceneNode_isDebugObject(self)

    def getChildren(self):
        r"""getChildren(ISceneNode self) -> irr::core::list< irr::scene::ISceneNode * > const &"""
        return _irrlicht.ISceneNode_getChildren(self)

    def setParent(self, newParent):
        r"""setParent(ISceneNode self, ISceneNode newParent)"""
        return _irrlicht.ISceneNode_setParent(self, newParent)

    def getTriangleSelector(self):
        r"""getTriangleSelector(ISceneNode self) -> ITriangleSelector *"""
        return _irrlicht.ISceneNode_getTriangleSelector(self)

    def setTriangleSelector(self, selector):
        r"""setTriangleSelector(ISceneNode self, ITriangleSelector * selector)"""
        return _irrlicht.ISceneNode_setTriangleSelector(self, selector)

    def updateAbsolutePosition(self):
        r"""updateAbsolutePosition(ISceneNode self)"""
        return _irrlicht.ISceneNode_updateAbsolutePosition(self)

    def getParent(self):
        r"""getParent(ISceneNode self) -> ISceneNode"""
        return _irrlicht.ISceneNode_getParent(self)

    def getType(self):
        r"""getType(ISceneNode self) -> ESCENE_NODE_TYPE"""
        return _irrlicht.ISceneNode_getType(self)

    def serializeAttributes(self, out, options=None):
        r"""serializeAttributes(ISceneNode self, irr::io::IAttributes * out, irr::io::SAttributeReadWriteOptions * options=None)"""
        return _irrlicht.ISceneNode_serializeAttributes(self, out, options)

    def deserializeAttributes(self, _in, options=None):
        r"""deserializeAttributes(ISceneNode self, irr::io::IAttributes * _in, irr::io::SAttributeReadWriteOptions * options=None)"""
        return _irrlicht.ISceneNode_deserializeAttributes(self, _in, options)

    def clone(self, newParent=None, newManager=None):
        r"""clone(ISceneNode self, ISceneNode newParent=None, ISceneManager newManager=None) -> ISceneNode"""
        return _irrlicht.ISceneNode_clone(self, newParent, newManager)

    def getSceneManager(self):
        r"""getSceneManager(ISceneNode self) -> ISceneManager"""
        return _irrlicht.ISceneNode_getSceneManager(self)

# Register ISceneNode in _irrlicht:
_irrlicht.ISceneNode_swigregister(ISceneNode)

class ICameraSceneNode(ISceneNode):
    r"""Proxy of C++ irr::scene::ICameraSceneNode class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def setProjectionMatrix(self, projection, isOrthogonal=False):
        r"""setProjectionMatrix(ICameraSceneNode self, irr::core::matrix4 const & projection, bool isOrthogonal=False)"""
        return _irrlicht.ICameraSceneNode_setProjectionMatrix(self, projection, isOrthogonal)

    def getProjectionMatrix(self):
        r"""getProjectionMatrix(ICameraSceneNode self) -> irr::core::matrix4 const &"""
        return _irrlicht.ICameraSceneNode_getProjectionMatrix(self)

    def getViewMatrix(self):
        r"""getViewMatrix(ICameraSceneNode self) -> irr::core::matrix4 const &"""
        return _irrlicht.ICameraSceneNode_getViewMatrix(self)

    def setViewMatrixAffector(self, affector):
        r"""setViewMatrixAffector(ICameraSceneNode self, irr::core::matrix4 const & affector)"""
        return _irrlicht.ICameraSceneNode_setViewMatrixAffector(self, affector)

    def getViewMatrixAffector(self):
        r"""getViewMatrixAffector(ICameraSceneNode self) -> irr::core::matrix4 const &"""
        return _irrlicht.ICameraSceneNode_getViewMatrixAffector(self)

    def OnEvent(self, event):
        r"""OnEvent(ICameraSceneNode self, SEvent const & event) -> bool"""
        return _irrlicht.ICameraSceneNode_OnEvent(self, event)

    def setTarget(self, pos):
        r"""setTarget(ICameraSceneNode self, vector3df pos)"""
        return _irrlicht.ICameraSceneNode_setTarget(self, pos)

    def setRotation(self, rotation):
        r"""setRotation(ICameraSceneNode self, vector3df rotation)"""
        return _irrlicht.ICameraSceneNode_setRotation(self, rotation)

    def getTarget(self):
        r"""getTarget(ICameraSceneNode self) -> vector3df"""
        return _irrlicht.ICameraSceneNode_getTarget(self)

    def setUpVector(self, pos):
        r"""setUpVector(ICameraSceneNode self, vector3df pos)"""
        return _irrlicht.ICameraSceneNode_setUpVector(self, pos)

    def getUpVector(self):
        r"""getUpVector(ICameraSceneNode self) -> vector3df"""
        return _irrlicht.ICameraSceneNode_getUpVector(self)

    def getNearValue(self):
        r"""getNearValue(ICameraSceneNode self) -> irr::f32"""
        return _irrlicht.ICameraSceneNode_getNearValue(self)

    def getFarValue(self):
        r"""getFarValue(ICameraSceneNode self) -> irr::f32"""
        return _irrlicht.ICameraSceneNode_getFarValue(self)

    def getAspectRatio(self):
        r"""getAspectRatio(ICameraSceneNode self) -> irr::f32"""
        return _irrlicht.ICameraSceneNode_getAspectRatio(self)

    def getFOV(self):
        r"""getFOV(ICameraSceneNode self) -> irr::f32"""
        return _irrlicht.ICameraSceneNode_getFOV(self)

    def setNearValue(self, zn):
        r"""setNearValue(ICameraSceneNode self, irr::f32 zn)"""
        return _irrlicht.ICameraSceneNode_setNearValue(self, zn)

    def setFarValue(self, zf):
        r"""setFarValue(ICameraSceneNode self, irr::f32 zf)"""
        return _irrlicht.ICameraSceneNode_setFarValue(self, zf)

    def setAspectRatio(self, aspect):
        r"""setAspectRatio(ICameraSceneNode self, irr::f32 aspect)"""
        return _irrlicht.ICameraSceneNode_setAspectRatio(self, aspect)

    def setFOV(self, fovy):
        r"""setFOV(ICameraSceneNode self, irr::f32 fovy)"""
        return _irrlicht.ICameraSceneNode_setFOV(self, fovy)

    def getViewFrustum(self):
        r"""getViewFrustum(ICameraSceneNode self) -> irr::scene::SViewFrustum const *"""
        return _irrlicht.ICameraSceneNode_getViewFrustum(self)

    def setInputReceiverEnabled(self, enabled):
        r"""setInputReceiverEnabled(ICameraSceneNode self, bool enabled)"""
        return _irrlicht.ICameraSceneNode_setInputReceiverEnabled(self, enabled)

    def isInputReceiverEnabled(self):
        r"""isInputReceiverEnabled(ICameraSceneNode self) -> bool"""
        return _irrlicht.ICameraSceneNode_isInputReceiverEnabled(self)

    def isOrthogonal(self):
        r"""isOrthogonal(ICameraSceneNode self) -> bool"""
        return _irrlicht.ICameraSceneNode_isOrthogonal(self)

    def bindTargetAndRotation(self, bound):
        r"""bindTargetAndRotation(ICameraSceneNode self, bool bound)"""
        return _irrlicht.ICameraSceneNode_bindTargetAndRotation(self, bound)

    def getTargetAndRotationBinding(self):
        r"""getTargetAndRotationBinding(ICameraSceneNode self) -> bool"""
        return _irrlicht.ICameraSceneNode_getTargetAndRotationBinding(self)

    def serializeAttributes(self, out, options=None):
        r"""serializeAttributes(ICameraSceneNode self, irr::io::IAttributes * out, irr::io::SAttributeReadWriteOptions * options=None)"""
        return _irrlicht.ICameraSceneNode_serializeAttributes(self, out, options)

    def deserializeAttributes(self, _in, options=None):
        r"""deserializeAttributes(ICameraSceneNode self, irr::io::IAttributes * _in, irr::io::SAttributeReadWriteOptions * options=None)"""
        return _irrlicht.ICameraSceneNode_deserializeAttributes(self, _in, options)
    __swig_destroy__ = _irrlicht.delete_ICameraSceneNode

# Register ICameraSceneNode in _irrlicht:
_irrlicht.ICameraSceneNode_swigregister(ICameraSceneNode)

class IrrlichtDevice(IReferenceCounted):
    r"""Proxy of C++ irr::IrrlichtDevice class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def run(self):
        r"""run(IrrlichtDevice self) -> bool"""
        return _irrlicht.IrrlichtDevice_run(self)

    def _yield(self):
        r"""_yield(IrrlichtDevice self)"""
        return _irrlicht.IrrlichtDevice__yield(self)

    def sleep(self, timeMs, pauseTimer=False):
        r"""sleep(IrrlichtDevice self, irr::u32 timeMs, bool pauseTimer=False)"""
        return _irrlicht.IrrlichtDevice_sleep(self, timeMs, pauseTimer)

    def getVideoDriver(self):
        r"""getVideoDriver(IrrlichtDevice self) -> IVideoDriver"""
        return _irrlicht.IrrlichtDevice_getVideoDriver(self)

    def getFileSystem(self):
        r"""getFileSystem(IrrlichtDevice self) -> irr::io::IFileSystem *"""
        return _irrlicht.IrrlichtDevice_getFileSystem(self)

    def getGUIEnvironment(self):
        r"""getGUIEnvironment(IrrlichtDevice self) -> IGUIEnvironment"""
        return _irrlicht.IrrlichtDevice_getGUIEnvironment(self)

    def getSceneManager(self):
        r"""getSceneManager(IrrlichtDevice self) -> ISceneManager"""
        return _irrlicht.IrrlichtDevice_getSceneManager(self)

    def getCursorControl(self):
        r"""getCursorControl(IrrlichtDevice self) -> irr::gui::ICursorControl *"""
        return _irrlicht.IrrlichtDevice_getCursorControl(self)

    def getLogger(self):
        r"""getLogger(IrrlichtDevice self) -> irr::ILogger *"""
        return _irrlicht.IrrlichtDevice_getLogger(self)

    def getVideoModeList(self):
        r"""getVideoModeList(IrrlichtDevice self) -> irr::video::IVideoModeList *"""
        return _irrlicht.IrrlichtDevice_getVideoModeList(self)

    def getOSOperator(self):
        r"""getOSOperator(IrrlichtDevice self) -> IOSOperator *"""
        return _irrlicht.IrrlichtDevice_getOSOperator(self)

    def getTimer(self):
        r"""getTimer(IrrlichtDevice self) -> ITimer *"""
        return _irrlicht.IrrlichtDevice_getTimer(self)

    def getRandomizer(self):
        r"""getRandomizer(IrrlichtDevice self) -> irr::IRandomizer *"""
        return _irrlicht.IrrlichtDevice_getRandomizer(self)

    def setRandomizer(self, r):
        r"""setRandomizer(IrrlichtDevice self, irr::IRandomizer * r)"""
        return _irrlicht.IrrlichtDevice_setRandomizer(self, r)

    def createDefaultRandomizer(self):
        r"""createDefaultRandomizer(IrrlichtDevice self) -> irr::IRandomizer *"""
        return _irrlicht.IrrlichtDevice_createDefaultRandomizer(self)

    def setWindowCaption(self, text):
        r"""setWindowCaption(IrrlichtDevice self, wchar_t const * text)"""
        return _irrlicht.IrrlichtDevice_setWindowCaption(self, text)

    def isWindowActive(self):
        r"""isWindowActive(IrrlichtDevice self) -> bool"""
        return _irrlicht.IrrlichtDevice_isWindowActive(self)

    def isWindowFocused(self):
        r"""isWindowFocused(IrrlichtDevice self) -> bool"""
        return _irrlicht.IrrlichtDevice_isWindowFocused(self)

    def isWindowMinimized(self):
        r"""isWindowMinimized(IrrlichtDevice self) -> bool"""
        return _irrlicht.IrrlichtDevice_isWindowMinimized(self)

    def isFullscreen(self):
        r"""isFullscreen(IrrlichtDevice self) -> bool"""
        return _irrlicht.IrrlichtDevice_isFullscreen(self)

    def getColorFormat(self):
        r"""getColorFormat(IrrlichtDevice self) -> irr::video::ECOLOR_FORMAT"""
        return _irrlicht.IrrlichtDevice_getColorFormat(self)

    def closeDevice(self):
        r"""closeDevice(IrrlichtDevice self)"""
        return _irrlicht.IrrlichtDevice_closeDevice(self)

    def getVersion(self):
        r"""getVersion(IrrlichtDevice self) -> irr::c8 const *"""
        return _irrlicht.IrrlichtDevice_getVersion(self)

    def setEventReceiver(self, receiver):
        r"""setEventReceiver(IrrlichtDevice self, irr::IEventReceiver * receiver)"""
        return _irrlicht.IrrlichtDevice_setEventReceiver(self, receiver)

    def getEventReceiver(self):
        r"""getEventReceiver(IrrlichtDevice self) -> irr::IEventReceiver *"""
        return _irrlicht.IrrlichtDevice_getEventReceiver(self)

    def postEventFromUser(self, event):
        r"""postEventFromUser(IrrlichtDevice self, SEvent const & event) -> bool"""
        return _irrlicht.IrrlichtDevice_postEventFromUser(self, event)

    def setInputReceivingSceneManager(self, sceneManager):
        r"""setInputReceivingSceneManager(IrrlichtDevice self, ISceneManager sceneManager)"""
        return _irrlicht.IrrlichtDevice_setInputReceivingSceneManager(self, sceneManager)

    def setResizable(self, resize=False):
        r"""setResizable(IrrlichtDevice self, bool resize=False)"""
        return _irrlicht.IrrlichtDevice_setResizable(self, resize)

    def minimizeWindow(self):
        r"""minimizeWindow(IrrlichtDevice self)"""
        return _irrlicht.IrrlichtDevice_minimizeWindow(self)

    def maximizeWindow(self):
        r"""maximizeWindow(IrrlichtDevice self)"""
        return _irrlicht.IrrlichtDevice_maximizeWindow(self)

    def restoreWindow(self):
        r"""restoreWindow(IrrlichtDevice self)"""
        return _irrlicht.IrrlichtDevice_restoreWindow(self)

    def activateJoysticks(self, joystickInfo):
        r"""activateJoysticks(IrrlichtDevice self, irr::core::array< SJoystickInfo > & joystickInfo) -> bool"""
        return _irrlicht.IrrlichtDevice_activateJoysticks(self, joystickInfo)

    def setGammaRamp(self, red, green, blue, relativebrightness, relativecontrast):
        r"""setGammaRamp(IrrlichtDevice self, irr::f32 red, irr::f32 green, irr::f32 blue, irr::f32 relativebrightness, irr::f32 relativecontrast) -> bool"""
        return _irrlicht.IrrlichtDevice_setGammaRamp(self, red, green, blue, relativebrightness, relativecontrast)

    def getGammaRamp(self, red, green, blue, brightness, contrast):
        r"""getGammaRamp(IrrlichtDevice self, irr::f32 & red, irr::f32 & green, irr::f32 & blue, irr::f32 & brightness, irr::f32 & contrast) -> bool"""
        return _irrlicht.IrrlichtDevice_getGammaRamp(self, red, green, blue, brightness, contrast)

    def clearSystemMessages(self):
        r"""clearSystemMessages(IrrlichtDevice self)"""
        return _irrlicht.IrrlichtDevice_clearSystemMessages(self)

    def getType(self):
        r"""getType(IrrlichtDevice self) -> E_DEVICE_TYPE"""
        return _irrlicht.IrrlichtDevice_getType(self)

    @staticmethod
    def isDriverSupported(driver):
        r"""isDriverSupported(irr::video::E_DRIVER_TYPE driver) -> bool"""
        return _irrlicht.IrrlichtDevice_isDriverSupported(driver)
    __swig_destroy__ = _irrlicht.delete_IrrlichtDevice

# Register IrrlichtDevice in _irrlicht:
_irrlicht.IrrlichtDevice_swigregister(IrrlichtDevice)

def IrrlichtDevice_isDriverSupported(driver):
    r"""IrrlichtDevice_isDriverSupported(irr::video::E_DRIVER_TYPE driver) -> bool"""
    return _irrlicht.IrrlichtDevice_isDriverSupported(driver)

class IMeshSceneNode(ISceneNode):
    r"""Proxy of C++ irr::scene::IMeshSceneNode class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def setMesh(self, mesh):
        r"""setMesh(IMeshSceneNode self, irr::scene::IMesh * mesh)"""
        return _irrlicht.IMeshSceneNode_setMesh(self, mesh)

    def getMesh(self):
        r"""getMesh(IMeshSceneNode self) -> irr::scene::IMesh *"""
        return _irrlicht.IMeshSceneNode_getMesh(self)

    def addShadowVolumeSceneNode(self, shadowMesh=None, id=-1, zfailmethod=True, infinity=1000.0):
        r"""addShadowVolumeSceneNode(IMeshSceneNode self, irr::scene::IMesh const * shadowMesh=None, irr::s32 id=-1, bool zfailmethod=True, irr::f32 infinity=1000.0) -> irr::scene::IShadowVolumeSceneNode"""
        return _irrlicht.IMeshSceneNode_addShadowVolumeSceneNode(self, shadowMesh, id, zfailmethod, infinity)

    def setReadOnlyMaterials(self, readonly):
        r"""setReadOnlyMaterials(IMeshSceneNode self, bool readonly)"""
        return _irrlicht.IMeshSceneNode_setReadOnlyMaterials(self, readonly)

    def isReadOnlyMaterials(self):
        r"""isReadOnlyMaterials(IMeshSceneNode self) -> bool"""
        return _irrlicht.IMeshSceneNode_isReadOnlyMaterials(self)
    __swig_destroy__ = _irrlicht.delete_IMeshSceneNode

# Register IMeshSceneNode in _irrlicht:
_irrlicht.IMeshSceneNode_swigregister(IMeshSceneNode)

ESNRP_NONE = _irrlicht.ESNRP_NONE

ESNRP_CAMERA = _irrlicht.ESNRP_CAMERA

ESNRP_LIGHT = _irrlicht.ESNRP_LIGHT

ESNRP_SKY_BOX = _irrlicht.ESNRP_SKY_BOX

ESNRP_AUTOMATIC = _irrlicht.ESNRP_AUTOMATIC

ESNRP_SOLID = _irrlicht.ESNRP_SOLID

ESNRP_TRANSPARENT = _irrlicht.ESNRP_TRANSPARENT

ESNRP_TRANSPARENT_EFFECT = _irrlicht.ESNRP_TRANSPARENT_EFFECT

ESNRP_SHADOW = _irrlicht.ESNRP_SHADOW

class ISceneManager(IReferenceCounted):
    r"""Proxy of C++ irr::scene::ISceneManager class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getMesh(self, *args):
        r"""
        getMesh(ISceneManager self, irr::io::path const & filename) -> irr::scene::IAnimatedMesh
        getMesh(ISceneManager self, irr::io::IReadFile * file) -> irr::scene::IAnimatedMesh *
        """
        return _irrlicht.ISceneManager_getMesh(self, *args)

    def getMeshCache(self):
        r"""getMeshCache(ISceneManager self) -> irr::scene::IMeshCache *"""
        return _irrlicht.ISceneManager_getMeshCache(self)

    def getVideoDriver(self):
        r"""getVideoDriver(ISceneManager self) -> IVideoDriver"""
        return _irrlicht.ISceneManager_getVideoDriver(self)

    def getGUIEnvironment(self):
        r"""getGUIEnvironment(ISceneManager self) -> IGUIEnvironment"""
        return _irrlicht.ISceneManager_getGUIEnvironment(self)

    def getFileSystem(self):
        r"""getFileSystem(ISceneManager self) -> irr::io::IFileSystem *"""
        return _irrlicht.ISceneManager_getFileSystem(self)

    def addVolumeLightSceneNode(self, *args):
        r"""addVolumeLightSceneNode(ISceneManager self, ISceneNode parent=None, irr::s32 id=-1, irr::u32 const subdivU=32, irr::u32 const subdivV=32, SColor foot=irr::video::SColor(51, 0, 230, 180), SColor tail=irr::video::SColor(0, 0, 0, 0), vector3df position=irr::core::vector3df(0,0,0), vector3df rotation=irr::core::vector3df(0,0,0), vector3df scale=irr::core::vector3df(1.0f, 1.0f, 1.0f)) -> irr::scene::IVolumeLightSceneNode"""
        return _irrlicht.ISceneManager_addVolumeLightSceneNode(self, *args)

    def addCubeSceneNode(self, *args):
        r"""addCubeSceneNode(ISceneManager self, irr::f32 size=10.0, ISceneNode parent=None, irr::s32 id=-1, vector3df position=irr::core::vector3df(0,0,0), vector3df rotation=irr::core::vector3df(0,0,0), vector3df scale=irr::core::vector3df(1.0f, 1.0f, 1.0f)) -> IMeshSceneNode"""
        return _irrlicht.ISceneManager_addCubeSceneNode(self, *args)

    def addSphereSceneNode(self, *args):
        r"""addSphereSceneNode(ISceneManager self, irr::f32 radius=5.0, irr::s32 polyCount=16, ISceneNode parent=None, irr::s32 id=-1, vector3df position=irr::core::vector3df(0,0,0), vector3df rotation=irr::core::vector3df(0,0,0), vector3df scale=irr::core::vector3df(1.0f, 1.0f, 1.0f)) -> IMeshSceneNode"""
        return _irrlicht.ISceneManager_addSphereSceneNode(self, *args)

    def addAnimatedMeshSceneNode(self, *args):
        r"""addAnimatedMeshSceneNode(ISceneManager self, irr::scene::IAnimatedMesh * mesh, ISceneNode parent=None, irr::s32 id=-1, vector3df position=irr::core::vector3df(0,0,0), vector3df rotation=irr::core::vector3df(0,0,0), vector3df scale=irr::core::vector3df(1.0f, 1.0f, 1.0f), bool alsoAddIfMeshPointerZero=False) -> irr::scene::IAnimatedMeshSceneNode"""
        return _irrlicht.ISceneManager_addAnimatedMeshSceneNode(self, *args)

    def addMeshSceneNode(self, *args):
        r"""addMeshSceneNode(ISceneManager self, irr::scene::IMesh * mesh, ISceneNode parent=None, irr::s32 id=-1, vector3df position=irr::core::vector3df(0,0,0), vector3df rotation=irr::core::vector3df(0,0,0), vector3df scale=irr::core::vector3df(1.0f, 1.0f, 1.0f), bool alsoAddIfMeshPointerZero=False) -> IMeshSceneNode"""
        return _irrlicht.ISceneManager_addMeshSceneNode(self, *args)

    def addWaterSurfaceSceneNode(self, *args):
        r"""addWaterSurfaceSceneNode(ISceneManager self, irr::scene::IMesh * mesh, irr::f32 waveHeight=2.0, irr::f32 waveSpeed=300.0, irr::f32 waveLength=10.0, ISceneNode parent=None, irr::s32 id=-1, vector3df position=irr::core::vector3df(0,0,0), vector3df rotation=irr::core::vector3df(0,0,0), vector3df scale=irr::core::vector3df(1.0f, 1.0f, 1.0f)) -> ISceneNode"""
        return _irrlicht.ISceneManager_addWaterSurfaceSceneNode(self, *args)

    def addOctreeSceneNode(self, *args):
        r"""
        addOctreeSceneNode(ISceneManager self, irr::scene::IAnimatedMesh * mesh, ISceneNode parent=None, irr::s32 id=-1, irr::s32 minimalPolysPerNode=512, bool alsoAddIfMeshPointerZero=False) -> IMeshSceneNode
        addOctreeSceneNode(ISceneManager self, irr::scene::IMesh * mesh, ISceneNode parent=None, irr::s32 id=-1, irr::s32 minimalPolysPerNode=256, bool alsoAddIfMeshPointerZero=False) -> IMeshSceneNode
        """
        return _irrlicht.ISceneManager_addOctreeSceneNode(self, *args)

    def addOctTreeSceneNode(self, *args):
        r"""
        addOctTreeSceneNode(ISceneManager self, irr::scene::IAnimatedMesh * mesh, ISceneNode parent=None, irr::s32 id=-1, irr::s32 minimalPolysPerNode=512, bool alsoAddIfMeshPointerZero=False) -> IMeshSceneNode
        addOctTreeSceneNode(ISceneManager self, irr::scene::IMesh * mesh, ISceneNode parent=None, irr::s32 id=-1, irr::s32 minimalPolysPerNode=256, bool alsoAddIfMeshPointerZero=False) -> IMeshSceneNode
        """
        return _irrlicht.ISceneManager_addOctTreeSceneNode(self, *args)

    def addCameraSceneNode(self, *args):
        r"""addCameraSceneNode(ISceneManager self, ISceneNode parent=None, vector3df position=irr::core::vector3df(0,0,0), vector3df lookat=irr::core::vector3df(0,0,100), irr::s32 id=-1, bool makeActive=True) -> ICameraSceneNode"""
        return _irrlicht.ISceneManager_addCameraSceneNode(self, *args)

    def addCameraSceneNodeMaya(self, parent=None, rotateSpeed=-1500., zoomSpeed=200., translationSpeed=1500., id=-1, distance=70., makeActive=True):
        r"""addCameraSceneNodeMaya(ISceneManager self, ISceneNode parent=None, irr::f32 rotateSpeed=-1500., irr::f32 zoomSpeed=200., irr::f32 translationSpeed=1500., irr::s32 id=-1, irr::f32 distance=70., bool makeActive=True) -> ICameraSceneNode"""
        return _irrlicht.ISceneManager_addCameraSceneNodeMaya(self, parent, rotateSpeed, zoomSpeed, translationSpeed, id, distance, makeActive)

    def addCameraSceneNodeFPS(self, parent=None, rotateSpeed=100.0, moveSpeed=0.5, id=-1, keyMapArray=None, keyMapSize=0, noVerticalMovement=False, jumpSpeed=0., invertMouse=False, makeActive=True):
        r"""addCameraSceneNodeFPS(ISceneManager self, ISceneNode parent=None, irr::f32 rotateSpeed=100.0, irr::f32 moveSpeed=0.5, irr::s32 id=-1, irr::SKeyMap * keyMapArray=None, irr::s32 keyMapSize=0, bool noVerticalMovement=False, irr::f32 jumpSpeed=0., bool invertMouse=False, bool makeActive=True) -> ICameraSceneNode"""
        return _irrlicht.ISceneManager_addCameraSceneNodeFPS(self, parent, rotateSpeed, moveSpeed, id, keyMapArray, keyMapSize, noVerticalMovement, jumpSpeed, invertMouse, makeActive)

    def addLightSceneNode(self, *args):
        r"""addLightSceneNode(ISceneManager self, ISceneNode parent=None, vector3df position=irr::core::vector3df(0,0,0), SColorf color=irr::video::SColorf(1.0f, 1.0f, 1.0f), irr::f32 radius=100.0, irr::s32 id=-1) -> irr::scene::ILightSceneNode"""
        return _irrlicht.ISceneManager_addLightSceneNode(self, *args)

    def addBillboardSceneNode(self, *args):
        r"""addBillboardSceneNode(ISceneManager self, ISceneNode parent=None, irr::core::dimension2d< irr::f32 > const & size=core::dimension2d< irr::f32 >(10.0f, 10.0f), vector3df position=irr::core::vector3df(0,0,0), irr::s32 id=-1, SColor colorTop=0xFFFFFFFF, SColor colorBottom=0xFFFFFFFF) -> irr::scene::IBillboardSceneNode"""
        return _irrlicht.ISceneManager_addBillboardSceneNode(self, *args)

    def addSkyBoxSceneNode(self, top, bottom, left, right, front, back, parent=None, id=-1):
        r"""addSkyBoxSceneNode(ISceneManager self, irr::video::ITexture * top, irr::video::ITexture * bottom, irr::video::ITexture * left, irr::video::ITexture * right, irr::video::ITexture * front, irr::video::ITexture * back, ISceneNode parent=None, irr::s32 id=-1) -> ISceneNode"""
        return _irrlicht.ISceneManager_addSkyBoxSceneNode(self, top, bottom, left, right, front, back, parent, id)

    def addSkyDomeSceneNode(self, texture, horiRes=16, vertRes=8, texturePercentage=0.9, spherePercentage=2.0, radius=1000., parent=None, id=-1):
        r"""addSkyDomeSceneNode(ISceneManager self, irr::video::ITexture * texture, irr::u32 horiRes=16, irr::u32 vertRes=8, irr::f32 texturePercentage=0.9, irr::f32 spherePercentage=2.0, irr::f32 radius=1000., ISceneNode parent=None, irr::s32 id=-1) -> ISceneNode"""
        return _irrlicht.ISceneManager_addSkyDomeSceneNode(self, texture, horiRes, vertRes, texturePercentage, spherePercentage, radius, parent, id)

    def addParticleSystemSceneNode(self, *args):
        r"""addParticleSystemSceneNode(ISceneManager self, bool withDefaultEmitter=True, ISceneNode parent=None, irr::s32 id=-1, vector3df position=irr::core::vector3df(0,0,0), vector3df rotation=irr::core::vector3df(0,0,0), vector3df scale=irr::core::vector3df(1.0f, 1.0f, 1.0f)) -> irr::scene::IParticleSystemSceneNode"""
        return _irrlicht.ISceneManager_addParticleSystemSceneNode(self, *args)

    def addTerrainSceneNode(self, *args):
        r"""
        addTerrainSceneNode(ISceneManager self, irr::io::path const & heightMapFileName, ISceneNode parent=None, irr::s32 id=-1, vector3df position=irr::core::vector3df(0.0f,0.0f,0.0f), vector3df rotation=irr::core::vector3df(0.0f,0.0f,0.0f), vector3df scale=irr::core::vector3df(1.0f,1.0f,1.0f), SColor vertexColor=irr::video::SColor(255,255,255,255), irr::s32 maxLOD=5, E_TERRAIN_PATCH_SIZE patchSize=ETPS_17, irr::s32 smoothFactor=0, bool addAlsoIfHeightmapEmpty=False) -> irr::scene::ITerrainSceneNode
        addTerrainSceneNode(ISceneManager self, irr::io::IReadFile * heightMapFile, ISceneNode parent=None, irr::s32 id=-1, vector3df position=irr::core::vector3df(0.0f,0.0f,0.0f), vector3df rotation=irr::core::vector3df(0.0f,0.0f,0.0f), vector3df scale=irr::core::vector3df(1.0f,1.0f,1.0f), SColor vertexColor=irr::video::SColor(255,255,255,255), irr::s32 maxLOD=5, E_TERRAIN_PATCH_SIZE patchSize=ETPS_17, irr::s32 smoothFactor=0, bool addAlsoIfHeightmapEmpty=False) -> irr::scene::ITerrainSceneNode
        """
        return _irrlicht.ISceneManager_addTerrainSceneNode(self, *args)

    def addQuake3SceneNode(self, meshBuffer, shader, parent=None, id=-1):
        r"""addQuake3SceneNode(ISceneManager self, irr::scene::IMeshBuffer const * meshBuffer, irr::scene::quake3::IShader const * shader, ISceneNode parent=None, irr::s32 id=-1) -> IMeshSceneNode"""
        return _irrlicht.ISceneManager_addQuake3SceneNode(self, meshBuffer, shader, parent, id)

    def addEmptySceneNode(self, parent=None, id=-1):
        r"""addEmptySceneNode(ISceneManager self, ISceneNode parent=None, irr::s32 id=-1) -> ISceneNode"""
        return _irrlicht.ISceneManager_addEmptySceneNode(self, parent, id)

    def addDummyTransformationSceneNode(self, parent=None, id=-1):
        r"""addDummyTransformationSceneNode(ISceneManager self, ISceneNode parent=None, irr::s32 id=-1) -> irr::scene::IDummyTransformationSceneNode"""
        return _irrlicht.ISceneManager_addDummyTransformationSceneNode(self, parent, id)

    def addTextSceneNode(self, *args):
        r"""addTextSceneNode(ISceneManager self, irr::gui::IGUIFont * font, wchar_t const * text, SColor color=irr::video::SColor(100,255,255,255), ISceneNode parent=None, vector3df position=irr::core::vector3df(0,0,0), irr::s32 id=-1) -> irr::scene::ITextSceneNode"""
        return _irrlicht.ISceneManager_addTextSceneNode(self, *args)

    def addBillboardTextSceneNode(self, *args):
        r"""addBillboardTextSceneNode(ISceneManager self, irr::gui::IGUIFont * font, wchar_t const * text, ISceneNode parent=None, irr::core::dimension2d< irr::f32 > const & size=core::dimension2d< irr::f32 >(10.0f, 10.0f), vector3df position=irr::core::vector3df(0,0,0), irr::s32 id=-1, SColor colorTop=0xFFFFFFFF, SColor colorBottom=0xFFFFFFFF) -> irr::scene::IBillboardTextSceneNode"""
        return _irrlicht.ISceneManager_addBillboardTextSceneNode(self, *args)

    def addHillPlaneMesh(self, *args):
        r"""addHillPlaneMesh(ISceneManager self, irr::io::path const & name, irr::core::dimension2d< irr::f32 > const & tileSize, dimension2du tileCount, SMaterial material=None, irr::f32 hillHeight=0.0, irr::core::dimension2d< irr::f32 > const & countHills=core::dimension2d< irr::f32 >(0.0f, 0.0f), irr::core::dimension2d< irr::f32 > const & textureRepeatCount=core::dimension2d< irr::f32 >(1.0f, 1.0f)) -> irr::scene::IAnimatedMesh"""
        return _irrlicht.ISceneManager_addHillPlaneMesh(self, *args)

    def addTerrainMesh(self, *args):
        r"""addTerrainMesh(ISceneManager self, irr::io::path const & meshname, IImage texture, IImage heightmap, irr::core::dimension2d< irr::f32 > const & stretchSize=core::dimension2d< irr::f32 >(10.0f,10.0f), irr::f32 maxHeight=200.0, dimension2du defaultVertexBlockSize=core::dimension2d< irr::u32 >(64,64)) -> irr::scene::IAnimatedMesh"""
        return _irrlicht.ISceneManager_addTerrainMesh(self, *args)

    def addArrowMesh(self, *args):
        r"""addArrowMesh(ISceneManager self, irr::io::path const & name, SColor vtxColorCylinder=0xFFFFFFFF, SColor vtxColorCone=0xFFFFFFFF, irr::u32 tesselationCylinder=4, irr::u32 tesselationCone=8, irr::f32 height=1., irr::f32 cylinderHeight=0.6, irr::f32 widthCylinder=0.05, irr::f32 widthCone=0.3) -> irr::scene::IAnimatedMesh"""
        return _irrlicht.ISceneManager_addArrowMesh(self, *args)

    def addSphereMesh(self, name, radius=5., polyCountX=16, polyCountY=16):
        r"""addSphereMesh(ISceneManager self, irr::io::path const & name, irr::f32 radius=5., irr::u32 polyCountX=16, irr::u32 polyCountY=16) -> irr::scene::IAnimatedMesh"""
        return _irrlicht.ISceneManager_addSphereMesh(self, name, radius, polyCountX, polyCountY)

    def addVolumeLightMesh(self, *args):
        r"""addVolumeLightMesh(ISceneManager self, irr::io::path const & name, irr::u32 const SubdivideU=32, irr::u32 const SubdivideV=32, SColor FootColor=irr::video::SColor(51, 0, 230, 180), SColor TailColor=irr::video::SColor(0, 0, 0, 0)) -> irr::scene::IAnimatedMesh"""
        return _irrlicht.ISceneManager_addVolumeLightMesh(self, *args)

    def getRootSceneNode(self):
        r"""getRootSceneNode(ISceneManager self) -> ISceneNode"""
        return _irrlicht.ISceneManager_getRootSceneNode(self)

    def getSceneNodeFromId(self, id, start=None):
        r"""getSceneNodeFromId(ISceneManager self, irr::s32 id, ISceneNode start=None) -> ISceneNode"""
        return _irrlicht.ISceneManager_getSceneNodeFromId(self, id, start)

    def getSceneNodeFromName(self, name, start=None):
        r"""getSceneNodeFromName(ISceneManager self, irr::c8 const * name, ISceneNode start=None) -> ISceneNode"""
        return _irrlicht.ISceneManager_getSceneNodeFromName(self, name, start)

    def getSceneNodeFromType(self, type, start=None):
        r"""getSceneNodeFromType(ISceneManager self, irr::scene::ESCENE_NODE_TYPE type, ISceneNode start=None) -> ISceneNode"""
        return _irrlicht.ISceneManager_getSceneNodeFromType(self, type, start)

    def getSceneNodesFromType(self, type, outNodes, start=None):
        r"""getSceneNodesFromType(ISceneManager self, ESCENE_NODE_TYPE type, irr::core::array< irr::scene::ISceneNode * > & outNodes, ISceneNode start=None)"""
        return _irrlicht.ISceneManager_getSceneNodesFromType(self, type, outNodes, start)

    def getActiveCamera(self):
        r"""getActiveCamera(ISceneManager self) -> ICameraSceneNode"""
        return _irrlicht.ISceneManager_getActiveCamera(self)

    def setActiveCamera(self, camera):
        r"""setActiveCamera(ISceneManager self, ICameraSceneNode camera)"""
        return _irrlicht.ISceneManager_setActiveCamera(self, camera)

    def setShadowColor(self, *args):
        r"""setShadowColor(ISceneManager self, SColor color=irr::video::SColor(150,0,0,0))"""
        return _irrlicht.ISceneManager_setShadowColor(self, *args)

    def getShadowColor(self):
        r"""getShadowColor(ISceneManager self) -> SColor"""
        return _irrlicht.ISceneManager_getShadowColor(self)

    def registerNodeForRendering(self, *args):
        r"""registerNodeForRendering(ISceneManager self, ISceneNode node, irr::scene::E_SCENE_NODE_RENDER_PASS _pass=ESNRP_AUTOMATIC) -> irr::u32"""
        return _irrlicht.ISceneManager_registerNodeForRendering(self, *args)

    def drawAll(self):
        r"""drawAll(ISceneManager self)"""
        return _irrlicht.ISceneManager_drawAll(self)

    def createRotationAnimator(self, rotationSpeed):
        r"""createRotationAnimator(ISceneManager self, vector3df rotationSpeed) -> irr::scene::ISceneNodeAnimator *"""
        return _irrlicht.ISceneManager_createRotationAnimator(self, rotationSpeed)

    def createFlyCircleAnimator(self, *args):
        r"""createFlyCircleAnimator(ISceneManager self, vector3df center=irr::core::vector3df(0.f,0.f,0.f), irr::f32 radius=100., irr::f32 speed=0.001, vector3df direction=irr::core::vector3df(0.f, 1.f, 0.f), irr::f32 startPosition=0., irr::f32 radiusEllipsoid=0.) -> irr::scene::ISceneNodeAnimator"""
        return _irrlicht.ISceneManager_createFlyCircleAnimator(self, *args)

    def createFlyStraightAnimator(self, startPoint, endPoint, timeForWay, loop=False, pingpong=False):
        r"""createFlyStraightAnimator(ISceneManager self, vector3df startPoint, vector3df endPoint, irr::u32 timeForWay, bool loop=False, bool pingpong=False) -> irr::scene::ISceneNodeAnimator"""
        return _irrlicht.ISceneManager_createFlyStraightAnimator(self, startPoint, endPoint, timeForWay, loop, pingpong)

    def createTextureAnimator(self, textures, timePerFrame, loop=True):
        r"""createTextureAnimator(ISceneManager self, irr::core::array< irr::video::ITexture * > const & textures, irr::s32 timePerFrame, bool loop=True) -> irr::scene::ISceneNodeAnimator"""
        return _irrlicht.ISceneManager_createTextureAnimator(self, textures, timePerFrame, loop)

    def createDeleteAnimator(self, timeMs):
        r"""createDeleteAnimator(ISceneManager self, irr::u32 timeMs) -> irr::scene::ISceneNodeAnimator *"""
        return _irrlicht.ISceneManager_createDeleteAnimator(self, timeMs)

    def createCollisionResponseAnimator(self, *args):
        r"""createCollisionResponseAnimator(ISceneManager self, irr::scene::ITriangleSelector * world, ISceneNode sceneNode, vector3df ellipsoidRadius=irr::core::vector3df(30,60,30), vector3df gravityPerSecond=irr::core::vector3df(0,-10.0f,0), vector3df ellipsoidTranslation=irr::core::vector3df(0,0,0), irr::f32 slidingValue=0.0005) -> irr::scene::ISceneNodeAnimatorCollisionResponse"""
        return _irrlicht.ISceneManager_createCollisionResponseAnimator(self, *args)

    def createFollowSplineAnimator(self, startTime, points, speed=1.0, tightness=0.5, loop=True, pingpong=False):
        r"""createFollowSplineAnimator(ISceneManager self, irr::s32 startTime, irr::core::array< irr::core::vector3df > const & points, irr::f32 speed=1.0, irr::f32 tightness=0.5, bool loop=True, bool pingpong=False) -> irr::scene::ISceneNodeAnimator"""
        return _irrlicht.ISceneManager_createFollowSplineAnimator(self, startTime, points, speed, tightness, loop, pingpong)

    def createTriangleSelector(self, *args):
        r"""
        createTriangleSelector(ISceneManager self, irr::scene::IMesh * mesh, ISceneNode node) -> irr::scene::ITriangleSelector
        createTriangleSelector(ISceneManager self, irr::scene::IAnimatedMeshSceneNode * node) -> irr::scene::ITriangleSelector *
        """
        return _irrlicht.ISceneManager_createTriangleSelector(self, *args)

    def createTriangleSelectorFromBoundingBox(self, node):
        r"""createTriangleSelectorFromBoundingBox(ISceneManager self, ISceneNode node) -> irr::scene::ITriangleSelector *"""
        return _irrlicht.ISceneManager_createTriangleSelectorFromBoundingBox(self, node)

    def createOctreeTriangleSelector(self, mesh, node, minimalPolysPerNode=32):
        r"""createOctreeTriangleSelector(ISceneManager self, irr::scene::IMesh * mesh, ISceneNode node, irr::s32 minimalPolysPerNode=32) -> irr::scene::ITriangleSelector"""
        return _irrlicht.ISceneManager_createOctreeTriangleSelector(self, mesh, node, minimalPolysPerNode)

    def createOctTreeTriangleSelector(self, mesh, node, minimalPolysPerNode=32):
        r"""createOctTreeTriangleSelector(ISceneManager self, irr::scene::IMesh * mesh, ISceneNode node, irr::s32 minimalPolysPerNode=32) -> irr::scene::ITriangleSelector"""
        return _irrlicht.ISceneManager_createOctTreeTriangleSelector(self, mesh, node, minimalPolysPerNode)

    def createMetaTriangleSelector(self):
        r"""createMetaTriangleSelector(ISceneManager self) -> irr::scene::IMetaTriangleSelector *"""
        return _irrlicht.ISceneManager_createMetaTriangleSelector(self)

    def createTerrainTriangleSelector(self, node, LOD=0):
        r"""createTerrainTriangleSelector(ISceneManager self, irr::scene::ITerrainSceneNode * node, irr::s32 LOD=0) -> irr::scene::ITriangleSelector"""
        return _irrlicht.ISceneManager_createTerrainTriangleSelector(self, node, LOD)

    def addExternalMeshLoader(self, externalLoader):
        r"""addExternalMeshLoader(ISceneManager self, irr::scene::IMeshLoader * externalLoader)"""
        return _irrlicht.ISceneManager_addExternalMeshLoader(self, externalLoader)

    def getMeshLoaderCount(self):
        r"""getMeshLoaderCount(ISceneManager self) -> irr::u32"""
        return _irrlicht.ISceneManager_getMeshLoaderCount(self)

    def getMeshLoader(self, index):
        r"""getMeshLoader(ISceneManager self, irr::u32 index) -> irr::scene::IMeshLoader *"""
        return _irrlicht.ISceneManager_getMeshLoader(self, index)

    def addExternalSceneLoader(self, externalLoader):
        r"""addExternalSceneLoader(ISceneManager self, irr::scene::ISceneLoader * externalLoader)"""
        return _irrlicht.ISceneManager_addExternalSceneLoader(self, externalLoader)

    def getSceneLoaderCount(self):
        r"""getSceneLoaderCount(ISceneManager self) -> irr::u32"""
        return _irrlicht.ISceneManager_getSceneLoaderCount(self)

    def getSceneLoader(self, index):
        r"""getSceneLoader(ISceneManager self, irr::u32 index) -> irr::scene::ISceneLoader *"""
        return _irrlicht.ISceneManager_getSceneLoader(self, index)

    def getSceneCollisionManager(self):
        r"""getSceneCollisionManager(ISceneManager self) -> irr::scene::ISceneCollisionManager *"""
        return _irrlicht.ISceneManager_getSceneCollisionManager(self)

    def getMeshManipulator(self):
        r"""getMeshManipulator(ISceneManager self) -> irr::scene::IMeshManipulator *"""
        return _irrlicht.ISceneManager_getMeshManipulator(self)

    def addToDeletionQueue(self, node):
        r"""addToDeletionQueue(ISceneManager self, ISceneNode node)"""
        return _irrlicht.ISceneManager_addToDeletionQueue(self, node)

    def postEventFromUser(self, event):
        r"""postEventFromUser(ISceneManager self, irr::SEvent const & event) -> bool"""
        return _irrlicht.ISceneManager_postEventFromUser(self, event)

    def clear(self):
        r"""clear(ISceneManager self)"""
        return _irrlicht.ISceneManager_clear(self)

    def getParameters(self):
        r"""getParameters(ISceneManager self) -> irr::io::IAttributes *"""
        return _irrlicht.ISceneManager_getParameters(self)

    def getSceneNodeRenderPass(self):
        r"""getSceneNodeRenderPass(ISceneManager self) -> irr::scene::E_SCENE_NODE_RENDER_PASS"""
        return _irrlicht.ISceneManager_getSceneNodeRenderPass(self)

    def getDefaultSceneNodeFactory(self):
        r"""getDefaultSceneNodeFactory(ISceneManager self) -> irr::scene::ISceneNodeFactory *"""
        return _irrlicht.ISceneManager_getDefaultSceneNodeFactory(self)

    def registerSceneNodeFactory(self, factoryToAdd):
        r"""registerSceneNodeFactory(ISceneManager self, irr::scene::ISceneNodeFactory * factoryToAdd)"""
        return _irrlicht.ISceneManager_registerSceneNodeFactory(self, factoryToAdd)

    def getRegisteredSceneNodeFactoryCount(self):
        r"""getRegisteredSceneNodeFactoryCount(ISceneManager self) -> irr::u32"""
        return _irrlicht.ISceneManager_getRegisteredSceneNodeFactoryCount(self)

    def getSceneNodeFactory(self, index):
        r"""getSceneNodeFactory(ISceneManager self, irr::u32 index) -> irr::scene::ISceneNodeFactory *"""
        return _irrlicht.ISceneManager_getSceneNodeFactory(self, index)

    def getDefaultSceneNodeAnimatorFactory(self):
        r"""getDefaultSceneNodeAnimatorFactory(ISceneManager self) -> irr::scene::ISceneNodeAnimatorFactory *"""
        return _irrlicht.ISceneManager_getDefaultSceneNodeAnimatorFactory(self)

    def registerSceneNodeAnimatorFactory(self, factoryToAdd):
        r"""registerSceneNodeAnimatorFactory(ISceneManager self, irr::scene::ISceneNodeAnimatorFactory * factoryToAdd)"""
        return _irrlicht.ISceneManager_registerSceneNodeAnimatorFactory(self, factoryToAdd)

    def getRegisteredSceneNodeAnimatorFactoryCount(self):
        r"""getRegisteredSceneNodeAnimatorFactoryCount(ISceneManager self) -> irr::u32"""
        return _irrlicht.ISceneManager_getRegisteredSceneNodeAnimatorFactoryCount(self)

    def getSceneNodeAnimatorFactory(self, index):
        r"""getSceneNodeAnimatorFactory(ISceneManager self, irr::u32 index) -> irr::scene::ISceneNodeAnimatorFactory *"""
        return _irrlicht.ISceneManager_getSceneNodeAnimatorFactory(self, index)

    def getSceneNodeTypeName(self, type):
        r"""getSceneNodeTypeName(ISceneManager self, ESCENE_NODE_TYPE type) -> irr::c8 const *"""
        return _irrlicht.ISceneManager_getSceneNodeTypeName(self, type)

    def getAnimatorTypeName(self, type):
        r"""getAnimatorTypeName(ISceneManager self, ESCENE_NODE_ANIMATOR_TYPE type) -> irr::c8 const *"""
        return _irrlicht.ISceneManager_getAnimatorTypeName(self, type)

    def addSceneNode(self, sceneNodeTypeName, parent=None):
        r"""addSceneNode(ISceneManager self, char const * sceneNodeTypeName, ISceneNode parent=None) -> ISceneNode"""
        return _irrlicht.ISceneManager_addSceneNode(self, sceneNodeTypeName, parent)

    def createSceneNodeAnimator(self, typeName, target=None):
        r"""createSceneNodeAnimator(ISceneManager self, char const * typeName, ISceneNode target=None) -> irr::scene::ISceneNodeAnimator"""
        return _irrlicht.ISceneManager_createSceneNodeAnimator(self, typeName, target)

    def createNewSceneManager(self, cloneContent=False):
        r"""createNewSceneManager(ISceneManager self, bool cloneContent=False) -> ISceneManager"""
        return _irrlicht.ISceneManager_createNewSceneManager(self, cloneContent)

    def saveScene(self, *args):
        r"""
        saveScene(ISceneManager self, irr::io::path const & filename, irr::scene::ISceneUserDataSerializer * userDataSerializer=None, ISceneNode node=None) -> bool
        saveScene(ISceneManager self, IWriteFile file, irr::scene::ISceneUserDataSerializer * userDataSerializer=None, ISceneNode node=None) -> bool
        saveScene(ISceneManager self, irr::io::IXMLWriter * writer, irr::io::path const & currentPath, irr::scene::ISceneUserDataSerializer * userDataSerializer=None, ISceneNode node=None) -> bool
        """
        return _irrlicht.ISceneManager_saveScene(self, *args)

    def loadScene(self, *args):
        r"""
        loadScene(ISceneManager self, irr::io::path const & filename, irr::scene::ISceneUserDataSerializer * userDataSerializer=None, ISceneNode rootNode=None) -> bool
        loadScene(ISceneManager self, irr::io::IReadFile * file, irr::scene::ISceneUserDataSerializer * userDataSerializer=None, ISceneNode rootNode=None) -> bool
        """
        return _irrlicht.ISceneManager_loadScene(self, *args)

    def createMeshWriter(self, type):
        r"""createMeshWriter(ISceneManager self, EMESH_WRITER_TYPE type) -> irr::scene::IMeshWriter *"""
        return _irrlicht.ISceneManager_createMeshWriter(self, type)

    def createSkinnedMesh(self):
        r"""createSkinnedMesh(ISceneManager self) -> ISkinnedMesh *"""
        return _irrlicht.ISceneManager_createSkinnedMesh(self)

    def setAmbientLight(self, ambientColor):
        r"""setAmbientLight(ISceneManager self, SColorf ambientColor)"""
        return _irrlicht.ISceneManager_setAmbientLight(self, ambientColor)

    def getAmbientLight(self):
        r"""getAmbientLight(ISceneManager self) -> SColorf"""
        return _irrlicht.ISceneManager_getAmbientLight(self)

    def setLightManager(self, lightManager):
        r"""setLightManager(ISceneManager self, irr::scene::ILightManager * lightManager)"""
        return _irrlicht.ISceneManager_setLightManager(self, lightManager)

    def getGeometryCreator(self):
        r"""getGeometryCreator(ISceneManager self) -> IGeometryCreator const *"""
        return _irrlicht.ISceneManager_getGeometryCreator(self)

    def isCulled(self, node):
        r"""isCulled(ISceneManager self, ISceneNode node) -> bool"""
        return _irrlicht.ISceneManager_isCulled(self, node)
    __swig_destroy__ = _irrlicht.delete_ISceneManager

# Register ISceneManager in _irrlicht:
_irrlicht.ISceneManager_swigregister(ISceneManager)

class IGUIEnvironment(IReferenceCounted):
    r"""Proxy of C++ irr::gui::IGUIEnvironment class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def drawAll(self):
        r"""drawAll(IGUIEnvironment self)"""
        return _irrlicht.IGUIEnvironment_drawAll(self)

    def setFocus(self, element):
        r"""setFocus(IGUIEnvironment self, irr::gui::IGUIElement * element) -> bool"""
        return _irrlicht.IGUIEnvironment_setFocus(self, element)

    def getFocus(self):
        r"""getFocus(IGUIEnvironment self) -> irr::gui::IGUIElement *"""
        return _irrlicht.IGUIEnvironment_getFocus(self)

    def getHovered(self):
        r"""getHovered(IGUIEnvironment self) -> irr::gui::IGUIElement *"""
        return _irrlicht.IGUIEnvironment_getHovered(self)

    def removeFocus(self, element):
        r"""removeFocus(IGUIEnvironment self, irr::gui::IGUIElement * element) -> bool"""
        return _irrlicht.IGUIEnvironment_removeFocus(self, element)

    def hasFocus(self, element):
        r"""hasFocus(IGUIEnvironment self, irr::gui::IGUIElement * element) -> bool"""
        return _irrlicht.IGUIEnvironment_hasFocus(self, element)

    def getVideoDriver(self):
        r"""getVideoDriver(IGUIEnvironment self) -> IVideoDriver"""
        return _irrlicht.IGUIEnvironment_getVideoDriver(self)

    def getFileSystem(self):
        r"""getFileSystem(IGUIEnvironment self) -> irr::io::IFileSystem *"""
        return _irrlicht.IGUIEnvironment_getFileSystem(self)

    def getOSOperator(self):
        r"""getOSOperator(IGUIEnvironment self) -> irr::IOSOperator *"""
        return _irrlicht.IGUIEnvironment_getOSOperator(self)

    def clear(self):
        r"""clear(IGUIEnvironment self)"""
        return _irrlicht.IGUIEnvironment_clear(self)

    def postEventFromUser(self, event):
        r"""postEventFromUser(IGUIEnvironment self, irr::SEvent const & event) -> bool"""
        return _irrlicht.IGUIEnvironment_postEventFromUser(self, event)

    def setUserEventReceiver(self, evr):
        r"""setUserEventReceiver(IGUIEnvironment self, irr::IEventReceiver * evr)"""
        return _irrlicht.IGUIEnvironment_setUserEventReceiver(self, evr)

    def getSkin(self):
        r"""getSkin(IGUIEnvironment self) -> IGUISkin *"""
        return _irrlicht.IGUIEnvironment_getSkin(self)

    def setSkin(self, skin):
        r"""setSkin(IGUIEnvironment self, IGUISkin * skin)"""
        return _irrlicht.IGUIEnvironment_setSkin(self, skin)

    def createSkin(self, type):
        r"""createSkin(IGUIEnvironment self, EGUI_SKIN_TYPE type) -> IGUISkin *"""
        return _irrlicht.IGUIEnvironment_createSkin(self, type)

    def createImageList(self, texture, imageSize, useAlphaChannel):
        r"""createImageList(IGUIEnvironment self, irr::video::ITexture * texture, irr::core::dimension2d< irr::s32 > imageSize, bool useAlphaChannel) -> irr::gui::IGUIImageList *"""
        return _irrlicht.IGUIEnvironment_createImageList(self, texture, imageSize, useAlphaChannel)

    def getFont(self, filename):
        r"""getFont(IGUIEnvironment self, irr::io::path const & filename) -> irr::gui::IGUIFont *"""
        return _irrlicht.IGUIEnvironment_getFont(self, filename)

    def addFont(self, name, font):
        r"""addFont(IGUIEnvironment self, irr::io::path const & name, irr::gui::IGUIFont * font) -> irr::gui::IGUIFont *"""
        return _irrlicht.IGUIEnvironment_addFont(self, name, font)

    def removeFont(self, font):
        r"""removeFont(IGUIEnvironment self, irr::gui::IGUIFont * font)"""
        return _irrlicht.IGUIEnvironment_removeFont(self, font)

    def getBuiltInFont(self):
        r"""getBuiltInFont(IGUIEnvironment self) -> irr::gui::IGUIFont *"""
        return _irrlicht.IGUIEnvironment_getBuiltInFont(self)

    def getSpriteBank(self, filename):
        r"""getSpriteBank(IGUIEnvironment self, irr::io::path const & filename) -> irr::gui::IGUISpriteBank *"""
        return _irrlicht.IGUIEnvironment_getSpriteBank(self, filename)

    def addEmptySpriteBank(self, name):
        r"""addEmptySpriteBank(IGUIEnvironment self, irr::io::path const & name) -> irr::gui::IGUISpriteBank *"""
        return _irrlicht.IGUIEnvironment_addEmptySpriteBank(self, name)

    def getRootGUIElement(self):
        r"""getRootGUIElement(IGUIEnvironment self) -> irr::gui::IGUIElement *"""
        return _irrlicht.IGUIEnvironment_getRootGUIElement(self)

    def addButton(self, rectangle, parent=None, id=-1, text=None, tooltiptext=None):
        r"""addButton(IGUIEnvironment self, recti rectangle, irr::gui::IGUIElement * parent=None, irr::s32 id=-1, wchar_t const * text=None, wchar_t const * tooltiptext=None) -> irr::gui::IGUIButton"""
        return _irrlicht.IGUIEnvironment_addButton(self, rectangle, parent, id, text, tooltiptext)

    def addWindow(self, rectangle, modal=False, text=None, parent=None, id=-1):
        r"""addWindow(IGUIEnvironment self, recti rectangle, bool modal=False, wchar_t const * text=None, irr::gui::IGUIElement * parent=None, irr::s32 id=-1) -> irr::gui::IGUIWindow"""
        return _irrlicht.IGUIEnvironment_addWindow(self, rectangle, modal, text, parent, id)

    def addModalScreen(self, parent):
        r"""addModalScreen(IGUIEnvironment self, irr::gui::IGUIElement * parent) -> irr::gui::IGUIElement *"""
        return _irrlicht.IGUIEnvironment_addModalScreen(self, parent)

    def addMessageBox(self, *args):
        r"""addMessageBox(IGUIEnvironment self, wchar_t const * caption, wchar_t const * text=None, bool modal=True, irr::s32 flags=EMBF_OK, irr::gui::IGUIElement * parent=None, irr::s32 id=-1, irr::video::ITexture * image=None) -> irr::gui::IGUIWindow"""
        return _irrlicht.IGUIEnvironment_addMessageBox(self, *args)

    def addScrollBar(self, horizontal, rectangle, parent=None, id=-1):
        r"""addScrollBar(IGUIEnvironment self, bool horizontal, recti rectangle, irr::gui::IGUIElement * parent=None, irr::s32 id=-1) -> irr::gui::IGUIScrollBar"""
        return _irrlicht.IGUIEnvironment_addScrollBar(self, horizontal, rectangle, parent, id)

    def addImage(self, *args):
        r"""
        addImage(IGUIEnvironment self, irr::video::ITexture * image, irr::core::position2d< irr::s32 > pos, bool useAlphaChannel=True, irr::gui::IGUIElement * parent=None, irr::s32 id=-1, wchar_t const * text=None) -> irr::gui::IGUIImage
        addImage(IGUIEnvironment self, recti rectangle, irr::gui::IGUIElement * parent=None, irr::s32 id=-1, wchar_t const * text=None, bool useAlphaChannel=True) -> irr::gui::IGUIImage
        """
        return _irrlicht.IGUIEnvironment_addImage(self, *args)

    def addCheckBox(self, checked, rectangle, parent=None, id=-1, text=None):
        r"""addCheckBox(IGUIEnvironment self, bool checked, recti rectangle, irr::gui::IGUIElement * parent=None, irr::s32 id=-1, wchar_t const * text=None) -> irr::gui::IGUICheckBox"""
        return _irrlicht.IGUIEnvironment_addCheckBox(self, checked, rectangle, parent, id, text)

    def addListBox(self, rectangle, parent=None, id=-1, drawBackground=False):
        r"""addListBox(IGUIEnvironment self, recti rectangle, irr::gui::IGUIElement * parent=None, irr::s32 id=-1, bool drawBackground=False) -> irr::gui::IGUIListBox"""
        return _irrlicht.IGUIEnvironment_addListBox(self, rectangle, parent, id, drawBackground)

    def addTreeView(self, rectangle, parent=None, id=-1, drawBackground=False, scrollBarVertical=True, scrollBarHorizontal=False):
        r"""addTreeView(IGUIEnvironment self, recti rectangle, irr::gui::IGUIElement * parent=None, irr::s32 id=-1, bool drawBackground=False, bool scrollBarVertical=True, bool scrollBarHorizontal=False) -> irr::gui::IGUITreeView"""
        return _irrlicht.IGUIEnvironment_addTreeView(self, rectangle, parent, id, drawBackground, scrollBarVertical, scrollBarHorizontal)

    def addMeshViewer(self, rectangle, parent=None, id=-1, text=None):
        r"""addMeshViewer(IGUIEnvironment self, recti rectangle, irr::gui::IGUIElement * parent=None, irr::s32 id=-1, wchar_t const * text=None) -> irr::gui::IGUIMeshViewer"""
        return _irrlicht.IGUIEnvironment_addMeshViewer(self, rectangle, parent, id, text)

    def addFileOpenDialog(self, title=None, modal=True, parent=None, id=-1, restoreCWD=False, startDir=None):
        r"""addFileOpenDialog(IGUIEnvironment self, wchar_t const * title=None, bool modal=True, irr::gui::IGUIElement * parent=None, irr::s32 id=-1, bool restoreCWD=False, irr::io::path::char_type * startDir=None) -> irr::gui::IGUIFileOpenDialog"""
        return _irrlicht.IGUIEnvironment_addFileOpenDialog(self, title, modal, parent, id, restoreCWD, startDir)

    def addColorSelectDialog(self, title=None, modal=True, parent=None, id=-1):
        r"""addColorSelectDialog(IGUIEnvironment self, wchar_t const * title=None, bool modal=True, irr::gui::IGUIElement * parent=None, irr::s32 id=-1) -> irr::gui::IGUIColorSelectDialog"""
        return _irrlicht.IGUIEnvironment_addColorSelectDialog(self, title, modal, parent, id)

    def addStaticText(self, text, rectangle, border=False, wordWrap=True, parent=None, id=-1, fillBackground=False):
        r"""addStaticText(IGUIEnvironment self, wchar_t const * text, recti rectangle, bool border=False, bool wordWrap=True, irr::gui::IGUIElement * parent=None, irr::s32 id=-1, bool fillBackground=False) -> irr::gui::IGUIStaticText"""
        return _irrlicht.IGUIEnvironment_addStaticText(self, text, rectangle, border, wordWrap, parent, id, fillBackground)

    def addEditBox(self, text, rectangle, border=True, parent=None, id=-1):
        r"""addEditBox(IGUIEnvironment self, wchar_t const * text, recti rectangle, bool border=True, irr::gui::IGUIElement * parent=None, irr::s32 id=-1) -> irr::gui::IGUIEditBox"""
        return _irrlicht.IGUIEnvironment_addEditBox(self, text, rectangle, border, parent, id)

    def addSpinBox(self, text, rectangle, border=True, parent=None, id=-1):
        r"""addSpinBox(IGUIEnvironment self, wchar_t const * text, recti rectangle, bool border=True, irr::gui::IGUIElement * parent=None, irr::s32 id=-1) -> irr::gui::IGUISpinBox"""
        return _irrlicht.IGUIEnvironment_addSpinBox(self, text, rectangle, border, parent, id)

    def addInOutFader(self, rectangle=None, parent=None, id=-1):
        r"""addInOutFader(IGUIEnvironment self, recti rectangle=None, irr::gui::IGUIElement * parent=None, irr::s32 id=-1) -> irr::gui::IGUIInOutFader"""
        return _irrlicht.IGUIEnvironment_addInOutFader(self, rectangle, parent, id)

    def addTabControl(self, rectangle, parent=None, fillbackground=False, border=True, id=-1):
        r"""addTabControl(IGUIEnvironment self, recti rectangle, irr::gui::IGUIElement * parent=None, bool fillbackground=False, bool border=True, irr::s32 id=-1) -> irr::gui::IGUITabControl"""
        return _irrlicht.IGUIEnvironment_addTabControl(self, rectangle, parent, fillbackground, border, id)

    def addTab(self, rectangle, parent=None, id=-1):
        r"""addTab(IGUIEnvironment self, recti rectangle, irr::gui::IGUIElement * parent=None, irr::s32 id=-1) -> irr::gui::IGUITab"""
        return _irrlicht.IGUIEnvironment_addTab(self, rectangle, parent, id)

    def addContextMenu(self, rectangle, parent=None, id=-1):
        r"""addContextMenu(IGUIEnvironment self, recti rectangle, irr::gui::IGUIElement * parent=None, irr::s32 id=-1) -> irr::gui::IGUIContextMenu"""
        return _irrlicht.IGUIEnvironment_addContextMenu(self, rectangle, parent, id)

    def addMenu(self, parent=None, id=-1):
        r"""addMenu(IGUIEnvironment self, irr::gui::IGUIElement * parent=None, irr::s32 id=-1) -> irr::gui::IGUIContextMenu"""
        return _irrlicht.IGUIEnvironment_addMenu(self, parent, id)

    def addToolBar(self, parent=None, id=-1):
        r"""addToolBar(IGUIEnvironment self, irr::gui::IGUIElement * parent=None, irr::s32 id=-1) -> irr::gui::IGUIToolBar"""
        return _irrlicht.IGUIEnvironment_addToolBar(self, parent, id)

    def addComboBox(self, rectangle, parent=None, id=-1):
        r"""addComboBox(IGUIEnvironment self, recti rectangle, irr::gui::IGUIElement * parent=None, irr::s32 id=-1) -> irr::gui::IGUIComboBox"""
        return _irrlicht.IGUIEnvironment_addComboBox(self, rectangle, parent, id)

    def addTable(self, rectangle, parent=None, id=-1, drawBackground=False):
        r"""addTable(IGUIEnvironment self, recti rectangle, irr::gui::IGUIElement * parent=None, irr::s32 id=-1, bool drawBackground=False) -> irr::gui::IGUITable"""
        return _irrlicht.IGUIEnvironment_addTable(self, rectangle, parent, id, drawBackground)

    def getDefaultGUIElementFactory(self):
        r"""getDefaultGUIElementFactory(IGUIEnvironment self) -> irr::gui::IGUIElementFactory *"""
        return _irrlicht.IGUIEnvironment_getDefaultGUIElementFactory(self)

    def registerGUIElementFactory(self, factoryToAdd):
        r"""registerGUIElementFactory(IGUIEnvironment self, irr::gui::IGUIElementFactory * factoryToAdd)"""
        return _irrlicht.IGUIEnvironment_registerGUIElementFactory(self, factoryToAdd)

    def getRegisteredGUIElementFactoryCount(self):
        r"""getRegisteredGUIElementFactoryCount(IGUIEnvironment self) -> irr::u32"""
        return _irrlicht.IGUIEnvironment_getRegisteredGUIElementFactoryCount(self)

    def getGUIElementFactory(self, index):
        r"""getGUIElementFactory(IGUIEnvironment self, irr::u32 index) -> irr::gui::IGUIElementFactory *"""
        return _irrlicht.IGUIEnvironment_getGUIElementFactory(self, index)

    def addGUIElement(self, elementName, parent=None):
        r"""addGUIElement(IGUIEnvironment self, irr::c8 const * elementName, irr::gui::IGUIElement * parent=None) -> irr::gui::IGUIElement"""
        return _irrlicht.IGUIEnvironment_addGUIElement(self, elementName, parent)

    def saveGUI(self, *args):
        r"""
        saveGUI(IGUIEnvironment self, irr::io::path const & filename, irr::gui::IGUIElement * start=None) -> bool
        saveGUI(IGUIEnvironment self, IWriteFile file, irr::gui::IGUIElement * start=None) -> bool
        """
        return _irrlicht.IGUIEnvironment_saveGUI(self, *args)

    def loadGUI(self, *args):
        r"""
        loadGUI(IGUIEnvironment self, irr::io::path const & filename, irr::gui::IGUIElement * parent=None) -> bool
        loadGUI(IGUIEnvironment self, irr::io::IReadFile * file, irr::gui::IGUIElement * parent=None) -> bool
        """
        return _irrlicht.IGUIEnvironment_loadGUI(self, *args)

    def serializeAttributes(self, out, options=None):
        r"""serializeAttributes(IGUIEnvironment self, irr::io::IAttributes * out, irr::io::SAttributeReadWriteOptions * options=None)"""
        return _irrlicht.IGUIEnvironment_serializeAttributes(self, out, options)

    def deserializeAttributes(self, _in, options=None):
        r"""deserializeAttributes(IGUIEnvironment self, irr::io::IAttributes * _in, irr::io::SAttributeReadWriteOptions * options=None)"""
        return _irrlicht.IGUIEnvironment_deserializeAttributes(self, _in, options)

    def writeGUIElement(self, writer, node):
        r"""writeGUIElement(IGUIEnvironment self, irr::io::IXMLWriter * writer, irr::gui::IGUIElement * node)"""
        return _irrlicht.IGUIEnvironment_writeGUIElement(self, writer, node)

    def readGUIElement(self, reader, node):
        r"""readGUIElement(IGUIEnvironment self, irr::io::IXMLReader * reader, irr::gui::IGUIElement * node)"""
        return _irrlicht.IGUIEnvironment_readGUIElement(self, reader, node)
    __swig_destroy__ = _irrlicht.delete_IGUIEnvironment

# Register IGUIEnvironment in _irrlicht:
_irrlicht.IGUIEnvironment_swigregister(IGUIEnvironment)

class dimension2du(object):
    r"""Proxy of C++ irr::core::dimension2d< irr::u32 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(dimension2du self) -> dimension2du
        __init__(dimension2du self, unsigned int const & width, unsigned int const & height) -> dimension2du
        __init__(dimension2du self, irr::core::vector2d< unsigned int > const & other) -> dimension2du
        """
        _irrlicht.dimension2du_swiginit(self, _irrlicht.new_dimension2du(*args))

    def __eq__(self, *args):
        r"""
        __eq__(dimension2du self, dimension2du other) -> bool
        __eq__(dimension2du self, irr::core::vector2d< unsigned int > const & other) -> bool
        """
        return _irrlicht.dimension2du___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(dimension2du self, dimension2du other) -> bool
        __ne__(dimension2du self, irr::core::vector2d< unsigned int > const & other) -> bool
        """
        return _irrlicht.dimension2du___ne__(self, *args)

    def set(self, width, height):
        r"""set(dimension2du self, unsigned int const & width, unsigned int const & height) -> dimension2du"""
        return _irrlicht.dimension2du_set(self, width, height)

    def __itruediv__(self, *args):
        return _irrlicht.dimension2du___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _irrlicht.dimension2du___truediv__(self, *args)
    __div__ = __truediv__



    def __imul__(self, scale):
        r"""__imul__(dimension2du self, unsigned int const & scale) -> dimension2du"""
        return _irrlicht.dimension2du___imul__(self, scale)

    def __mul__(self, scale):
        r"""__mul__(dimension2du self, unsigned int const & scale) -> dimension2du"""
        return _irrlicht.dimension2du___mul__(self, scale)

    def __iadd__(self, other):
        r"""__iadd__(dimension2du self, dimension2du other) -> dimension2du"""
        return _irrlicht.dimension2du___iadd__(self, other)

    def __add__(self, other):
        r"""__add__(dimension2du self, dimension2du other) -> dimension2du"""
        return _irrlicht.dimension2du___add__(self, other)

    def __isub__(self, other):
        r"""__isub__(dimension2du self, dimension2du other) -> dimension2du"""
        return _irrlicht.dimension2du___isub__(self, other)

    def __sub__(self, other):
        r"""__sub__(dimension2du self, dimension2du other) -> dimension2du"""
        return _irrlicht.dimension2du___sub__(self, other)

    def getArea(self):
        r"""getArea(dimension2du self) -> unsigned int"""
        return _irrlicht.dimension2du_getArea(self)

    def getOptimalSize(self, requirePowerOfTwo=True, requireSquare=False, larger=True, maxValue=0):
        r"""getOptimalSize(dimension2du self, bool requirePowerOfTwo=True, bool requireSquare=False, bool larger=True, irr::u32 maxValue=0) -> dimension2du"""
        return _irrlicht.dimension2du_getOptimalSize(self, requirePowerOfTwo, requireSquare, larger, maxValue)

    def getInterpolated(self, other, d):
        r"""getInterpolated(dimension2du self, dimension2du other, irr::f32 d) -> dimension2du"""
        return _irrlicht.dimension2du_getInterpolated(self, other, d)
    Width = property(_irrlicht.dimension2du_Width_get, _irrlicht.dimension2du_Width_set, doc=r"""Width : unsigned int""")
    Height = property(_irrlicht.dimension2du_Height_get, _irrlicht.dimension2du_Height_set, doc=r"""Height : unsigned int""")
    __swig_destroy__ = _irrlicht.delete_dimension2du

# Register dimension2du in _irrlicht:
_irrlicht.dimension2du_swigregister(dimension2du)

class CShaderPreprocessor(object):
    r"""Proxy of C++ chrono::irrlicht::CShaderPreprocessor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, driverIn):
        r"""__init__(CShaderPreprocessor self, IVideoDriver driverIn) -> CShaderPreprocessor"""
        _irrlicht.CShaderPreprocessor_swiginit(self, _irrlicht.new_CShaderPreprocessor(driverIn))

    def ppShader(self, shaderProgram):
        r"""ppShader(CShaderPreprocessor self, irr::core::stringc shaderProgram) -> irr::core::stringc"""
        return _irrlicht.CShaderPreprocessor_ppShader(self, shaderProgram)

    def ppShaderFF(self, shaderProgram):
        r"""ppShaderFF(CShaderPreprocessor self, irr::core::stringc shaderProgram) -> irr::core::stringc"""
        return _irrlicht.CShaderPreprocessor_ppShaderFF(self, shaderProgram)

    def addShaderDefine(self, *args):
        r"""addShaderDefine(CShaderPreprocessor self, irr::core::stringc const name, irr::core::stringc const value="")"""
        return _irrlicht.CShaderPreprocessor_addShaderDefine(self, *args)

    def removeShaderDefine(self, name):
        r"""removeShaderDefine(CShaderPreprocessor self, irr::core::stringc const name)"""
        return _irrlicht.CShaderPreprocessor_removeShaderDefine(self, name)
    __swig_destroy__ = _irrlicht.delete_CShaderPreprocessor

# Register CShaderPreprocessor in _irrlicht:
_irrlicht.CShaderPreprocessor_swigregister(CShaderPreprocessor)

class DepthShaderCB(object):
    r"""Proxy of C++ chrono::irrlicht::DepthShaderCB class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, effectIn):
        r"""__init__(DepthShaderCB self, EffectHandler effectIn) -> DepthShaderCB"""
        _irrlicht.DepthShaderCB_swiginit(self, _irrlicht.new_DepthShaderCB(effectIn))

    def OnSetConstants(self, services, userData):
        r"""OnSetConstants(DepthShaderCB self, irr::video::IMaterialRendererServices * services, irr::s32 userData)"""
        return _irrlicht.DepthShaderCB_OnSetConstants(self, services, userData)
    effect = property(_irrlicht.DepthShaderCB_effect_get, _irrlicht.DepthShaderCB_effect_set, doc=r"""effect : p.chrono::irrlicht::EffectHandler""")
    FarLink = property(_irrlicht.DepthShaderCB_FarLink_get, _irrlicht.DepthShaderCB_FarLink_set, doc=r"""FarLink : irr::f32""")
    worldViewProj = property(_irrlicht.DepthShaderCB_worldViewProj_get, _irrlicht.DepthShaderCB_worldViewProj_set, doc=r"""worldViewProj : irr::core::matrix4""")
    __swig_destroy__ = _irrlicht.delete_DepthShaderCB

# Register DepthShaderCB in _irrlicht:
_irrlicht.DepthShaderCB_swigregister(DepthShaderCB)

class ShadowShaderCB(object):
    r"""Proxy of C++ chrono::irrlicht::ShadowShaderCB class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, effectIn):
        r"""__init__(ShadowShaderCB self, EffectHandler effectIn) -> ShadowShaderCB"""
        _irrlicht.ShadowShaderCB_swiginit(self, _irrlicht.new_ShadowShaderCB(effectIn))

    def OnSetMaterial(self, material):
        r"""OnSetMaterial(ShadowShaderCB self, SMaterial material)"""
        return _irrlicht.ShadowShaderCB_OnSetMaterial(self, material)

    def OnSetConstants(self, services, userData):
        r"""OnSetConstants(ShadowShaderCB self, irr::video::IMaterialRendererServices * services, irr::s32 userData)"""
        return _irrlicht.ShadowShaderCB_OnSetConstants(self, services, userData)
    effect = property(_irrlicht.ShadowShaderCB_effect_get, _irrlicht.ShadowShaderCB_effect_set, doc=r"""effect : p.chrono::irrlicht::EffectHandler""")
    invWorld = property(_irrlicht.ShadowShaderCB_invWorld_get, _irrlicht.ShadowShaderCB_invWorld_set, doc=r"""invWorld : irr::core::matrix4""")
    LightColour = property(_irrlicht.ShadowShaderCB_LightColour_get, _irrlicht.ShadowShaderCB_LightColour_set, doc=r"""LightColour : irr::video::SColorf""")
    ProjLink = property(_irrlicht.ShadowShaderCB_ProjLink_get, _irrlicht.ShadowShaderCB_ProjLink_set, doc=r"""ProjLink : irr::core::matrix4""")
    ViewLink = property(_irrlicht.ShadowShaderCB_ViewLink_get, _irrlicht.ShadowShaderCB_ViewLink_set, doc=r"""ViewLink : irr::core::matrix4""")
    LightLink = property(_irrlicht.ShadowShaderCB_LightLink_get, _irrlicht.ShadowShaderCB_LightLink_set, doc=r"""LightLink : irr::core::vector3df""")
    FarLink = property(_irrlicht.ShadowShaderCB_FarLink_get, _irrlicht.ShadowShaderCB_FarLink_set, doc=r"""FarLink : irr::f32""")
    MapRes = property(_irrlicht.ShadowShaderCB_MapRes_get, _irrlicht.ShadowShaderCB_MapRes_set, doc=r"""MapRes : irr::f32""")
    clipborder = property(_irrlicht.ShadowShaderCB_clipborder_get, _irrlicht.ShadowShaderCB_clipborder_set, doc=r"""clipborder : bool""")
    __swig_destroy__ = _irrlicht.delete_ShadowShaderCB

# Register ShadowShaderCB in _irrlicht:
_irrlicht.ShadowShaderCB_swigregister(ShadowShaderCB)

class SUniformDescriptor(object):
    r"""Proxy of C++ chrono::irrlicht::ScreenQuadCB::SUniformDescriptor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SUniformDescriptor self) -> SUniformDescriptor
        __init__(SUniformDescriptor self, irr::f32 const * fPointerIn, irr::u32 paramCountIn) -> SUniformDescriptor
        """
        _irrlicht.SUniformDescriptor_swiginit(self, _irrlicht.new_SUniformDescriptor(*args))
    fPointer = property(_irrlicht.SUniformDescriptor_fPointer_get, _irrlicht.SUniformDescriptor_fPointer_set, doc=r"""fPointer : p.q(const).irr::f32""")
    paramCount = property(_irrlicht.SUniformDescriptor_paramCount_get, _irrlicht.SUniformDescriptor_paramCount_set, doc=r"""paramCount : irr::u32""")
    __swig_destroy__ = _irrlicht.delete_SUniformDescriptor

# Register SUniformDescriptor in _irrlicht:
_irrlicht.SUniformDescriptor_swigregister(SUniformDescriptor)

class SDefineExp(object):
    r"""Proxy of C++ chrono::irrlicht::SDefineExp class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(SDefineExp self) -> SDefineExp"""
        _irrlicht.SDefineExp_swiginit(self, _irrlicht.new_SDefineExp())
    IfPos = property(_irrlicht.SDefineExp_IfPos_get, _irrlicht.SDefineExp_IfPos_set, doc=r"""IfPos : irr::s32""")
    ElsePos = property(_irrlicht.SDefineExp_ElsePos_get, _irrlicht.SDefineExp_ElsePos_set, doc=r"""ElsePos : irr::s32""")
    EndPos = property(_irrlicht.SDefineExp_EndPos_get, _irrlicht.SDefineExp_EndPos_set, doc=r"""EndPos : irr::s32""")
    IfExp = property(_irrlicht.SDefineExp_IfExp_get, _irrlicht.SDefineExp_IfExp_set, doc=r"""IfExp : irr::core::stringc""")
    Inverse = property(_irrlicht.SDefineExp_Inverse_get, _irrlicht.SDefineExp_Inverse_set, doc=r"""Inverse : bool""")
    __swig_destroy__ = _irrlicht.delete_SDefineExp

# Register SDefineExp in _irrlicht:
_irrlicht.SDefineExp_swigregister(SDefineExp)


def grabDefineExpressions(shaderProgram):
    r"""grabDefineExpressions(irr::core::stringc & shaderProgram) -> irr::core::array< chrono::irrlicht::SDefineExp >"""
    return _irrlicht.grabDefineExpressions(shaderProgram)

def getFileContent(pFile):
    r"""getFileContent(std::string const pFile) -> std::string"""
    return _irrlicht.getFileContent(pFile)
class CScreenQuad(object):
    r"""Proxy of C++ chrono::irrlicht::CScreenQuad class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CScreenQuad self) -> CScreenQuad"""
        _irrlicht.CScreenQuad_swiginit(self, _irrlicht.new_CScreenQuad())
    __swig_destroy__ = _irrlicht.delete_CScreenQuad

    def render(self, driver):
        r"""render(CScreenQuad self, IVideoDriver driver)"""
        return _irrlicht.CScreenQuad_render(self, driver)

    def getMaterial(self):
        r"""getMaterial(CScreenQuad self) -> SMaterial"""
        return _irrlicht.CScreenQuad_getMaterial(self)
    rt = property(_irrlicht.CScreenQuad_rt_get, _irrlicht.CScreenQuad_rt_set, doc=r"""rt : a(2).p.irr::video::ITexture""")

# Register CScreenQuad in _irrlicht:
_irrlicht.CScreenQuad_swigregister(CScreenQuad)

ESE_GLSL = _irrlicht.ESE_GLSL

ESE_HLSL = _irrlicht.ESE_HLSL

ESE_COUNT = _irrlicht.ESE_COUNT

ESM_RECEIVE = _irrlicht.ESM_RECEIVE

ESM_CAST = _irrlicht.ESM_CAST

ESM_BOTH = _irrlicht.ESM_BOTH

ESM_EXCLUDE = _irrlicht.ESM_EXCLUDE

ESM_COUNT = _irrlicht.ESM_COUNT

EFT_NONE = _irrlicht.EFT_NONE

EFT_4PCF = _irrlicht.EFT_4PCF

EFT_8PCF = _irrlicht.EFT_8PCF

EFT_12PCF = _irrlicht.EFT_12PCF

EFT_16PCF = _irrlicht.EFT_16PCF

EFT_COUNT = _irrlicht.EFT_COUNT

class SShadowLight(object):
    r"""Proxy of C++ chrono::irrlicht::SShadowLight class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(SShadowLight self, irr::u32 const shadowMapResolution, vector3df position, vector3df target, SColorf lightColour=irr::video::SColor(0xffffffff), irr::f32 nearValue=10.0, irr::f32 farValue=100.0, irr::f32 fov=90.0*irr::core::DEGTORAD64, bool directional=False) -> SShadowLight"""
        _irrlicht.SShadowLight_swiginit(self, _irrlicht.new_SShadowLight(*args))

    def setPosition(self, position):
        r"""setPosition(SShadowLight self, vector3df position)"""
        return _irrlicht.SShadowLight_setPosition(self, position)

    def setTarget(self, target):
        r"""setTarget(SShadowLight self, vector3df target)"""
        return _irrlicht.SShadowLight_setTarget(self, target)

    def getPosition(self):
        r"""getPosition(SShadowLight self) -> vector3df"""
        return _irrlicht.SShadowLight_getPosition(self)

    def getTarget(self):
        r"""getTarget(SShadowLight self) -> vector3df"""
        return _irrlicht.SShadowLight_getTarget(self)

    def setViewMatrix(self, matrix):
        r"""setViewMatrix(SShadowLight self, irr::core::matrix4 const & matrix)"""
        return _irrlicht.SShadowLight_setViewMatrix(self, matrix)

    def setProjectionMatrix(self, matrix):
        r"""setProjectionMatrix(SShadowLight self, irr::core::matrix4 const & matrix)"""
        return _irrlicht.SShadowLight_setProjectionMatrix(self, matrix)

    def getViewMatrix(self):
        r"""getViewMatrix(SShadowLight self) -> irr::core::matrix4 &"""
        return _irrlicht.SShadowLight_getViewMatrix(self)

    def getProjectionMatrix(self):
        r"""getProjectionMatrix(SShadowLight self) -> irr::core::matrix4 &"""
        return _irrlicht.SShadowLight_getProjectionMatrix(self)

    def getFarValue(self):
        r"""getFarValue(SShadowLight self) -> irr::f32"""
        return _irrlicht.SShadowLight_getFarValue(self)

    def getLightColor(self):
        r"""getLightColor(SShadowLight self) -> SColorf"""
        return _irrlicht.SShadowLight_getLightColor(self)

    def setLightColor(self, lightColour):
        r"""setLightColor(SShadowLight self, SColorf lightColour)"""
        return _irrlicht.SShadowLight_setLightColor(self, lightColour)

    def setShadowMapResolution(self, shadowMapResolution):
        r"""setShadowMapResolution(SShadowLight self, irr::u32 const shadowMapResolution)"""
        return _irrlicht.SShadowLight_setShadowMapResolution(self, shadowMapResolution)

    def getShadowMapResolution(self):
        r"""getShadowMapResolution(SShadowLight self) -> irr::u32"""
        return _irrlicht.SShadowLight_getShadowMapResolution(self)

    def setClipBorder(self, mb):
        r"""setClipBorder(SShadowLight self, bool mb)"""
        return _irrlicht.SShadowLight_setClipBorder(self, mb)

    def getClipBorder(self):
        r"""getClipBorder(SShadowLight self) -> bool"""
        return _irrlicht.SShadowLight_getClipBorder(self)
    __swig_destroy__ = _irrlicht.delete_SShadowLight

# Register SShadowLight in _irrlicht:
_irrlicht.SShadowLight_swigregister(SShadowLight)
LIGHT_MODULATE_P = cvar.LIGHT_MODULATE_P
SHADOW_PASS_1P = cvar.SHADOW_PASS_1P
SHADOW_PASS_1PT = cvar.SHADOW_PASS_1PT
SHADOW_PASS_1V = cvar.SHADOW_PASS_1V
SHADOW_PASS_2P = cvar.SHADOW_PASS_2P
SHADOW_PASS_2V = cvar.SHADOW_PASS_2V
SIMPLE_P = cvar.SIMPLE_P
WHITE_WASH_P = cvar.WHITE_WASH_P
WHITE_WASH_P_ADD = cvar.WHITE_WASH_P_ADD
SCREEN_QUAD_V = cvar.SCREEN_QUAD_V
VSM_BLUR_P = cvar.VSM_BLUR_P

class IPostProcessingRenderCallback(object):
    r"""Proxy of C++ chrono::irrlicht::IPostProcessingRenderCallback class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def OnPreRender(self, effect):
        r"""OnPreRender(IPostProcessingRenderCallback self, EffectHandler effect)"""
        return _irrlicht.IPostProcessingRenderCallback_OnPreRender(self, effect)

    def OnPostRender(self, effect):
        r"""OnPostRender(IPostProcessingRenderCallback self, EffectHandler effect)"""
        return _irrlicht.IPostProcessingRenderCallback_OnPostRender(self, effect)
    __swig_destroy__ = _irrlicht.delete_IPostProcessingRenderCallback

# Register IPostProcessingRenderCallback in _irrlicht:
_irrlicht.IPostProcessingRenderCallback_swigregister(IPostProcessingRenderCallback)

class EffectHandler(object):
    r"""Proxy of C++ chrono::irrlicht::EffectHandler class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(EffectHandler self, IrrlichtDevice irrlichtDevice, dimension2du screenRTTSize=irr::core::dimension2du(0, 0), bool const useVSMShadows=False, bool const useRoundSpotLights=False, bool const use32BitDepthBuffers=False) -> EffectHandler"""
        _irrlicht.EffectHandler_swiginit(self, _irrlicht.new_EffectHandler(*args))
    __swig_destroy__ = _irrlicht.delete_EffectHandler

    def addShadowLight(self, shadowLight):
        r"""addShadowLight(EffectHandler self, SShadowLight shadowLight)"""
        return _irrlicht.EffectHandler_addShadowLight(self, shadowLight)

    def getShadowLight(self, index):
        r"""getShadowLight(EffectHandler self, irr::u32 index) -> SShadowLight"""
        return _irrlicht.EffectHandler_getShadowLight(self, index)

    def getShadowLightCount(self):
        r"""getShadowLightCount(EffectHandler self) -> irr::u32"""
        return _irrlicht.EffectHandler_getShadowLightCount(self)

    def getShadowMapTexture(self, resolution, secondary=False):
        r"""getShadowMapTexture(EffectHandler self, irr::u32 const resolution, bool const secondary=False) -> irr::video::ITexture"""
        return _irrlicht.EffectHandler_getShadowMapTexture(self, resolution, secondary)

    def getDepthMapTexture(self):
        r"""getDepthMapTexture(EffectHandler self) -> irr::video::ITexture *"""
        return _irrlicht.EffectHandler_getDepthMapTexture(self)

    def addNodeToDepthPass(self, node):
        r"""addNodeToDepthPass(EffectHandler self, ISceneNode node)"""
        return _irrlicht.EffectHandler_addNodeToDepthPass(self, node)

    def removeNodeFromDepthPass(self, node):
        r"""removeNodeFromDepthPass(EffectHandler self, ISceneNode node)"""
        return _irrlicht.EffectHandler_removeNodeFromDepthPass(self, node)

    def enableDepthPass(self, enableDepthPass):
        r"""enableDepthPass(EffectHandler self, bool enableDepthPass)"""
        return _irrlicht.EffectHandler_enableDepthPass(self, enableDepthPass)

    def removeShadowFromNode(self, node):
        r"""removeShadowFromNode(EffectHandler self, ISceneNode node)"""
        return _irrlicht.EffectHandler_removeShadowFromNode(self, node)

    def excludeNodeFromLightingCalculations(self, node):
        r"""excludeNodeFromLightingCalculations(EffectHandler self, ISceneNode node)"""
        return _irrlicht.EffectHandler_excludeNodeFromLightingCalculations(self, node)

    def update(self, outputTarget=None):
        r"""update(EffectHandler self, irr::video::ITexture * outputTarget=None)"""
        return _irrlicht.EffectHandler_update(self, outputTarget)

    def addShadowToNode(self, *args):
        r"""addShadowToNode(EffectHandler self, ISceneNode node, chrono::irrlicht::E_FILTER_TYPE filterType=EFT_NONE, chrono::irrlicht::E_SHADOW_MODE shadowMode=ESM_BOTH)"""
        return _irrlicht.EffectHandler_addShadowToNode(self, *args)

    def getTime(self):
        r"""getTime(EffectHandler self) -> irr::f32"""
        return _irrlicht.EffectHandler_getTime(self)

    def setClearColour(self, ClearCol):
        r"""setClearColour(EffectHandler self, SColor ClearCol)"""
        return _irrlicht.EffectHandler_setClearColour(self, ClearCol)

    def addPostProcessingEffect(self, MaterialType, callback=None):
        r"""addPostProcessingEffect(EffectHandler self, irr::s32 MaterialType, IPostProcessingRenderCallback callback=None)"""
        return _irrlicht.EffectHandler_addPostProcessingEffect(self, MaterialType, callback)

    def setPostProcessingRenderCallback(self, MaterialType, callback=None):
        r"""setPostProcessingRenderCallback(EffectHandler self, irr::s32 MaterialType, IPostProcessingRenderCallback callback=None)"""
        return _irrlicht.EffectHandler_setPostProcessingRenderCallback(self, MaterialType, callback)

    def removePostProcessingEffect(self, MaterialType):
        r"""removePostProcessingEffect(EffectHandler self, irr::s32 MaterialType)"""
        return _irrlicht.EffectHandler_removePostProcessingEffect(self, MaterialType)

    def addPostProcessingEffectFromFile(self, filename, callback=None):
        r"""addPostProcessingEffectFromFile(EffectHandler self, irr::core::stringc const & filename, IPostProcessingRenderCallback callback=None) -> irr::s32"""
        return _irrlicht.EffectHandler_addPostProcessingEffectFromFile(self, filename, callback)

    def setPostProcessingEffectConstant(self, materialType, name, data, count):
        r"""setPostProcessingEffectConstant(EffectHandler self, irr::s32 const materialType, irr::core::stringc const & name, irr::f32 const * data, irr::u32 const count)"""
        return _irrlicht.EffectHandler_setPostProcessingEffectConstant(self, materialType, name, data, count)

    def getScreenQuad(self):
        r"""getScreenQuad(EffectHandler self) -> CScreenQuad"""
        return _irrlicht.EffectHandler_getScreenQuad(self)

    def setActiveSceneManager(self, smgrIn):
        r"""setActiveSceneManager(EffectHandler self, ISceneManager smgrIn)"""
        return _irrlicht.EffectHandler_setActiveSceneManager(self, smgrIn)

    def getActiveSceneManager(self):
        r"""getActiveSceneManager(EffectHandler self) -> ISceneManager"""
        return _irrlicht.EffectHandler_getActiveSceneManager(self)

    def setPostProcessingUserTexture(self, userTexture):
        r"""setPostProcessingUserTexture(EffectHandler self, irr::video::ITexture * userTexture)"""
        return _irrlicht.EffectHandler_setPostProcessingUserTexture(self, userTexture)

    def setAmbientColor(self, ambientColour):
        r"""setAmbientColor(EffectHandler self, SColor ambientColour)"""
        return _irrlicht.EffectHandler_setAmbientColor(self, ambientColour)

    def getAmbientColor(self):
        r"""getAmbientColor(EffectHandler self) -> SColor"""
        return _irrlicht.EffectHandler_getAmbientColor(self)

    def generateRandomVectorTexture(self, *args):
        r"""generateRandomVectorTexture(EffectHandler self, dimension2du dimensions, irr::core::stringc const & name="randVec") -> irr::video::ITexture"""
        return _irrlicht.EffectHandler_generateRandomVectorTexture(self, *args)

    def setScreenRenderTargetResolution(self, resolution):
        r"""setScreenRenderTargetResolution(EffectHandler self, dimension2du resolution)"""
        return _irrlicht.EffectHandler_setScreenRenderTargetResolution(self, resolution)

    def getIrrlichtDevice(self):
        r"""getIrrlichtDevice(EffectHandler self) -> IrrlichtDevice"""
        return _irrlicht.EffectHandler_getIrrlichtDevice(self)

# Register EffectHandler in _irrlicht:
_irrlicht.EffectHandler_swigregister(EffectHandler)

class vector3dfCH(vector3df):
    r"""Proxy of C++ irr::core::vector3dfCH class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mch):
        r"""__init__(vector3dfCH self, ChVectorD mch) -> vector3dfCH"""
        _irrlicht.vector3dfCH_swiginit(self, _irrlicht.new_vector3dfCH(mch))
    __swig_destroy__ = _irrlicht.delete_vector3dfCH

# Register vector3dfCH in _irrlicht:
_irrlicht.vector3dfCH_swigregister(vector3dfCH)

class matrix4CH(object):
    r"""Proxy of C++ irr::core::matrix4CH class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(matrix4CH self, ChCoordsysD csys) -> matrix4CH
        __init__(matrix4CH self, chrono::ChFrame< > const & frame) -> matrix4CH
        """
        _irrlicht.matrix4CH_swiginit(self, _irrlicht.new_matrix4CH(*args))
    __swig_destroy__ = _irrlicht.delete_matrix4CH

# Register matrix4CH in _irrlicht:
_irrlicht.matrix4CH_swigregister(matrix4CH)

ContactsDrawMode_CONTACT_NORMALS = _irrlicht.ContactsDrawMode_CONTACT_NORMALS

ContactsDrawMode_CONTACT_DISTANCES = _irrlicht.ContactsDrawMode_CONTACT_DISTANCES

ContactsDrawMode_CONTACT_FORCES_N = _irrlicht.ContactsDrawMode_CONTACT_FORCES_N

ContactsDrawMode_CONTACT_FORCES = _irrlicht.ContactsDrawMode_CONTACT_FORCES

ContactsDrawMode_CONTACT_NONE = _irrlicht.ContactsDrawMode_CONTACT_NONE

ContactsLabelMode_CONTACT_DISTANCES_VAL = _irrlicht.ContactsLabelMode_CONTACT_DISTANCES_VAL

ContactsLabelMode_CONTACT_FORCES_VAL = _irrlicht.ContactsLabelMode_CONTACT_FORCES_VAL

ContactsLabelMode_CONTACT_FORCES_N_VAL = _irrlicht.ContactsLabelMode_CONTACT_FORCES_N_VAL

ContactsLabelMode_CONTACT_FORCES_T_VAL = _irrlicht.ContactsLabelMode_CONTACT_FORCES_T_VAL

ContactsLabelMode_CONTACT_TORQUES_VAL = _irrlicht.ContactsLabelMode_CONTACT_TORQUES_VAL

ContactsLabelMode_CONTACT_TORQUES_S_VAL = _irrlicht.ContactsLabelMode_CONTACT_TORQUES_S_VAL

ContactsLabelMode_CONTACT_TORQUES_R_VAL = _irrlicht.ContactsLabelMode_CONTACT_TORQUES_R_VAL

ContactsLabelMode_CONTACT_NONE_VAL = _irrlicht.ContactsLabelMode_CONTACT_NONE_VAL

LinkDrawMode_LINK_REACT_FORCE = _irrlicht.LinkDrawMode_LINK_REACT_FORCE

LinkDrawMode_LINK_REACT_TORQUE = _irrlicht.LinkDrawMode_LINK_REACT_TORQUE

LinkDrawMode_LINK_NONE = _irrlicht.LinkDrawMode_LINK_NONE

LinkLabelMode_LINK_REACT_FORCE_VAL = _irrlicht.LinkLabelMode_LINK_REACT_FORCE_VAL

LinkLabelMode_LINK_REACT_FORCE_X = _irrlicht.LinkLabelMode_LINK_REACT_FORCE_X

LinkLabelMode_LINK_REACT_FORCE_Y = _irrlicht.LinkLabelMode_LINK_REACT_FORCE_Y

LinkLabelMode_LINK_REACT_FORCE_Z = _irrlicht.LinkLabelMode_LINK_REACT_FORCE_Z

LinkLabelMode_LINK_REACT_TORQUE_VAL = _irrlicht.LinkLabelMode_LINK_REACT_TORQUE_VAL

LinkLabelMode_LINK_REACT_TORQUE_X = _irrlicht.LinkLabelMode_LINK_REACT_TORQUE_X

LinkLabelMode_LINK_REACT_TORQUE_Y = _irrlicht.LinkLabelMode_LINK_REACT_TORQUE_Y

LinkLabelMode_LINK_REACT_TORQUE_Z = _irrlicht.LinkLabelMode_LINK_REACT_TORQUE_Z

LinkLabelMode_LINK_NONE_VAL = _irrlicht.LinkLabelMode_LINK_NONE_VAL


def ToIrrlichtSColorf(col):
    r"""ToIrrlichtSColorf(ChColor col) -> SColorf"""
    return _irrlicht.ToIrrlichtSColorf(col)

def ToIrrlichtSColor(col, alpha=1.0):
    r"""ToIrrlichtSColor(ChColor col, float alpha=1.0) -> SColor"""
    return _irrlicht.ToIrrlichtSColor(col, alpha)

def ToIrrlichtMaterial(mat, driver):
    r"""ToIrrlichtMaterial(std::shared_ptr< ChVisualMaterial > mat, IVideoDriver driver) -> SMaterial"""
    return _irrlicht.ToIrrlichtMaterial(mat, driver)

def alignIrrlichtNode(mnode, mcoords):
    r"""alignIrrlichtNode(ISceneNode mnode, ChCoordsysD mcoords)"""
    return _irrlicht.alignIrrlichtNode(mnode, mcoords)

def drawAllContactPoints(*args):
    r"""drawAllContactPoints(ChVisualSystemIrrlicht vis, double mlen=1.0, chrono::irrlicht::ContactsDrawMode drawtype=CONTACT_NORMALS) -> int"""
    return _irrlicht.drawAllContactPoints(*args)

def drawAllContactLabels(*args):
    r"""drawAllContactLabels(ChVisualSystemIrrlicht vis, chrono::irrlicht::ContactsLabelMode labeltype=CONTACT_FORCES_N_VAL, ChColor col=chrono::ChColor(1, 1, 1)) -> int"""
    return _irrlicht.drawAllContactLabels(*args)

def drawAllLinks(*args):
    r"""drawAllLinks(ChVisualSystemIrrlicht vis, double mlen=1.0, chrono::irrlicht::LinkDrawMode drawtype=LINK_REACT_FORCE) -> int"""
    return _irrlicht.drawAllLinks(*args)

def drawAllLinkLabels(*args):
    r"""drawAllLinkLabels(ChVisualSystemIrrlicht vis, chrono::irrlicht::LinkLabelMode labeltype=LINK_REACT_FORCE_X, ChColor col=chrono::ChColor(1, 1, 1)) -> int"""
    return _irrlicht.drawAllLinkLabels(*args)

def drawAllBoundingBoxes(vis):
    r"""drawAllBoundingBoxes(ChVisualSystemIrrlicht vis) -> int"""
    return _irrlicht.drawAllBoundingBoxes(vis)

def drawAllCOGs(vis, scale=0.01):
    r"""drawAllCOGs(ChVisualSystemIrrlicht vis, double scale=0.01) -> int"""
    return _irrlicht.drawAllCOGs(vis, scale)

def drawAllLinkframes(vis, scale=0.01):
    r"""drawAllLinkframes(ChVisualSystemIrrlicht vis, double scale=0.01) -> int"""
    return _irrlicht.drawAllLinkframes(vis, scale)

def drawHUDviolation(vis, mx=10, my=290, sx=300, sy=100, spfact=100.0):
    r"""drawHUDviolation(ChVisualSystemIrrlicht vis, int mx=10, int my=290, int sx=300, int sy=100, double spfact=100.0)"""
    return _irrlicht.drawHUDviolation(vis, mx, my, sx, sy, spfact)

def drawChFunction(*args):
    r"""drawChFunction(ChVisualSystemIrrlicht vis, std::shared_ptr< ChFunction > fx, double xmin=0, double xmax=1, double ymin=-1, double ymax=1, int mx=10, int my=290, int sx=300, int sy=100, ChColor col=chrono::ChColor(1, 0, 0), char const * title=None)"""
    return _irrlicht.drawChFunction(*args)

def drawSegment(*args):
    r"""drawSegment(ChVisualSystemIrrlicht vis, chrono::ChVector< > start, chrono::ChVector< > end, ChColor col=chrono::ChColor(1, 1, 1), bool use_Zbuffer=False)"""
    return _irrlicht.drawSegment(*args)

def drawPolyline(*args):
    r"""drawPolyline(ChVisualSystemIrrlicht vis, vector_ChVectorD points, ChColor col=chrono::ChColor(1, 1, 1), bool use_Zbuffer=False)"""
    return _irrlicht.drawPolyline(*args)

def drawCircle(*args):
    r"""drawCircle(ChVisualSystemIrrlicht vis, double radius, ChCoordsysD pos=CSYSNORM, ChColor col=chrono::ChColor(1, 1, 1), int resolution=36, bool use_Zbuffer=False)"""
    return _irrlicht.drawCircle(*args)

def drawSpring(*args):
    r"""drawSpring(ChVisualSystemIrrlicht vis, double radius, chrono::ChVector< > start, chrono::ChVector< > end, ChColor col=chrono::ChColor(1, 1, 1), int resolution=65, double turns=5, bool use_Zbuffer=False)"""
    return _irrlicht.drawSpring(*args)

def drawRotSpring(*args):
    r"""drawRotSpring(ChVisualSystemIrrlicht vis, ChCoordsysD pos, double radius, double start_angle, double end_angle, ChColor col=chrono::ChColor(1, 1, 1), int resolution=65, bool use_Zbuffer=False)"""
    return _irrlicht.drawRotSpring(*args)

def drawGrid(*args):
    r"""drawGrid(ChVisualSystemIrrlicht vis, double ustep=0.1, double vstep=0.1, int nu=20, int nv=20, ChCoordsysD pos=CSYSNORM, ChColor col=chrono::ChColor(0.7f, 0.7f, 0.7f), bool use_Zbuffer=False)"""
    return _irrlicht.drawGrid(*args)

def drawColorbar(vis, vmin, vmax, label, mx=740, my=20, sx=30, sy=300):
    r"""drawColorbar(ChVisualSystemIrrlicht vis, double vmin, double vmax, std::string const & label, int mx=740, int my=20, int sx=30, int sy=300)"""
    return _irrlicht.drawColorbar(vis, vmin, vmax, label, mx, my, sx, sy)

def drawPlot3D(*args):
    r"""drawPlot3D(ChVisualSystemIrrlicht vis, chrono::ChMatrixConstRef X, chrono::ChMatrixConstRef Y, chrono::ChMatrixConstRef Z, ChCoordsysD pos=CSYSNORM, ChColor col=chrono::ChColor(1, 1, 1), bool use_Zbuffer=False)"""
    return _irrlicht.drawPlot3D(*args)

def drawProfiler(vis):
    r"""drawProfiler(ChVisualSystemIrrlicht vis)"""
    return _irrlicht.drawProfiler(vis)

def drawCoordsys(*args):
    r"""drawCoordsys(ChVisualSystemIrrlicht vis, ChCoordsysD coord=CSYSNORM, double scale=1)"""
    return _irrlicht.drawCoordsys(*args)
ESNT_CHIRRNODE_SHAPE = _irrlicht.ESNT_CHIRRNODE_SHAPE

class ChIrrNodeShape(ISceneNode):
    r"""Proxy of C++ chrono::irrlicht::ChIrrNodeShape class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, shape, parent):
        r"""__init__(ChIrrNodeShape self, std::shared_ptr< ChVisualShape > shape, ISceneNode parent) -> ChIrrNodeShape"""
        _irrlicht.ChIrrNodeShape_swiginit(self, _irrlicht.new_ChIrrNodeShape(shape, parent))
    __swig_destroy__ = _irrlicht.delete_ChIrrNodeShape

    def GetVisualShape(self):
        r"""GetVisualShape(ChIrrNodeShape self) -> std::shared_ptr< ChVisualShape > &"""
        return _irrlicht.ChIrrNodeShape_GetVisualShape(self)

    def Update(self):
        r"""Update(ChIrrNodeShape self)"""
        return _irrlicht.ChIrrNodeShape_Update(self)

# Register ChIrrNodeShape in _irrlicht:
_irrlicht.ChIrrNodeShape_swigregister(ChIrrNodeShape)

ESNT_CHIRRNODE_MODEL = _irrlicht.ESNT_CHIRRNODE_MODEL

class ChIrrNodeModel(ISceneNode):
    r"""Proxy of C++ chrono::irrlicht::ChIrrNodeModel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, physicsitem, parent, mgr, id):
        r"""__init__(ChIrrNodeModel self, std::weak_ptr< chrono::ChPhysicsItem > physicsitem, ISceneNode parent, ISceneManager mgr, irr::s32 id) -> ChIrrNodeModel"""
        _irrlicht.ChIrrNodeModel_swiginit(self, _irrlicht.new_ChIrrNodeModel(physicsitem, parent, mgr, id))
    __swig_destroy__ = _irrlicht.delete_ChIrrNodeModel

    def GetPhysicsItem(self):
        r"""GetPhysicsItem(ChIrrNodeModel self) -> std::weak_ptr< chrono::ChPhysicsItem >"""
        return _irrlicht.ChIrrNodeModel_GetPhysicsItem(self)

    def UpdateChildren(self):
        r"""UpdateChildren(ChIrrNodeModel self)"""
        return _irrlicht.ChIrrNodeModel_UpdateChildren(self)

    def SetupClones(self):
        r"""SetupClones(ChIrrNodeModel self) -> bool"""
        return _irrlicht.ChIrrNodeModel_SetupClones(self)

# Register ChIrrNodeModel in _irrlicht:
_irrlicht.ChIrrNodeModel_swigregister(ChIrrNodeModel)

class ChVisualSystemIrrlicht(pychrono.core.ChVisualSystem):
    r"""Proxy of C++ chrono::irrlicht::ChVisualSystemIrrlicht class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChVisualSystemIrrlicht self) -> ChVisualSystemIrrlicht
        __init__(ChVisualSystemIrrlicht self, ChSystem sys, chrono::ChVector< > const & camera_pos=chrono::ChVector< >(2, 2, 2), chrono::ChVector< > const & camera_targ=chrono::ChVector< >(0, 0, 0)) -> ChVisualSystemIrrlicht
        """
        _irrlicht.ChVisualSystemIrrlicht_swiginit(self, _irrlicht.new_ChVisualSystemIrrlicht(*args))
    __swig_destroy__ = _irrlicht.delete_ChVisualSystemIrrlicht

    def AttachSystem(self, sys):
        r"""AttachSystem(ChVisualSystemIrrlicht self, ChSystem sys)"""
        return _irrlicht.ChVisualSystemIrrlicht_AttachSystem(self, sys)

    def SetAntialias(self, val):
        r"""SetAntialias(ChVisualSystemIrrlicht self, bool val)"""
        return _irrlicht.ChVisualSystemIrrlicht_SetAntialias(self, val)

    def SetFullscreen(self, val):
        r"""SetFullscreen(ChVisualSystemIrrlicht self, bool val)"""
        return _irrlicht.ChVisualSystemIrrlicht_SetFullscreen(self, val)

    def SetShadows(self, val):
        r"""SetShadows(ChVisualSystemIrrlicht self, bool val)"""
        return _irrlicht.ChVisualSystemIrrlicht_SetShadows(self, val)

    def SetDriverType(self, driver_type):
        r"""SetDriverType(ChVisualSystemIrrlicht self, irr::video::E_DRIVER_TYPE driver_type)"""
        return _irrlicht.ChVisualSystemIrrlicht_SetDriverType(self, driver_type)

    def SetWindowSize(self, width, height):
        r"""SetWindowSize(ChVisualSystemIrrlicht self, unsigned int width, unsigned int height)"""
        return _irrlicht.ChVisualSystemIrrlicht_SetWindowSize(self, width, height)

    def SetWindowTitle(self, win_title):
        r"""SetWindowTitle(ChVisualSystemIrrlicht self, std::string const & win_title)"""
        return _irrlicht.ChVisualSystemIrrlicht_SetWindowTitle(self, win_title)

    def SetCameraVertical(self, vert):
        r"""SetCameraVertical(ChVisualSystemIrrlicht self, chrono::CameraVerticalDir vert)"""
        return _irrlicht.ChVisualSystemIrrlicht_SetCameraVertical(self, vert)

    def GetCameraVertical(self):
        r"""GetCameraVertical(ChVisualSystemIrrlicht self) -> chrono::CameraVerticalDir"""
        return _irrlicht.ChVisualSystemIrrlicht_GetCameraVertical(self)

    def SetLogLevel(self, log_level):
        r"""SetLogLevel(ChVisualSystemIrrlicht self, irr::ELOG_LEVEL log_level)"""
        return _irrlicht.ChVisualSystemIrrlicht_SetLogLevel(self, log_level)

    def SetSymbolScale(self, scale):
        r"""SetSymbolScale(ChVisualSystemIrrlicht self, double scale)"""
        return _irrlicht.ChVisualSystemIrrlicht_SetSymbolScale(self, scale)

    def Initialize(self):
        r"""Initialize(ChVisualSystemIrrlicht self)"""
        return _irrlicht.ChVisualSystemIrrlicht_Initialize(self)

    def AddLogo(self, *args):
        r"""AddLogo(ChVisualSystemIrrlicht self, std::string const & logo_filename=GetChronoDataFile("logo_chronoengine_alpha.png"))"""
        return _irrlicht.ChVisualSystemIrrlicht_AddLogo(self, *args)

    def AddCamera(self, *args):
        r"""AddCamera(ChVisualSystemIrrlicht self, chrono::ChVector< > const & pos, chrono::ChVector< > targ=VNULL) -> int"""
        return _irrlicht.ChVisualSystemIrrlicht_AddCamera(self, *args)

    def SetCameraPosition(self, *args):
        r"""
        SetCameraPosition(ChVisualSystemIrrlicht self, int id, chrono::ChVector< > const & pos)
        SetCameraPosition(ChVisualSystemIrrlicht self, chrono::ChVector< > const & pos)
        """
        return _irrlicht.ChVisualSystemIrrlicht_SetCameraPosition(self, *args)

    def SetCameraTarget(self, *args):
        r"""
        SetCameraTarget(ChVisualSystemIrrlicht self, int id, chrono::ChVector< > const & target)
        SetCameraTarget(ChVisualSystemIrrlicht self, chrono::ChVector< > const & target)
        """
        return _irrlicht.ChVisualSystemIrrlicht_SetCameraTarget(self, *args)

    def AddSkyBox(self, *args):
        r"""AddSkyBox(ChVisualSystemIrrlicht self, std::string const & texture_dir=GetChronoDataFile("skybox/"))"""
        return _irrlicht.ChVisualSystemIrrlicht_AddSkyBox(self, *args)

    def AddLightDirectional(self, *args):
        r"""AddLightDirectional(ChVisualSystemIrrlicht self, double elevation=60, double azimuth=60, ChColor ambient=chrono::ChColor(0.5f, 0.5f, 0.5f), ChColor specular=chrono::ChColor(0.2f, 0.2f, 0.2f), ChColor diffuse=chrono::ChColor(1.0f, 1.0f, 1.0f)) -> irr::scene::ILightSceneNode"""
        return _irrlicht.ChVisualSystemIrrlicht_AddLightDirectional(self, *args)

    def AddLight(self, *args):
        r"""AddLight(ChVisualSystemIrrlicht self, chrono::ChVector< > const & pos, double radius, ChColor color=chrono::ChColor(0.7f, 0.7f, 0.7f)) -> irr::scene::ILightSceneNode"""
        return _irrlicht.ChVisualSystemIrrlicht_AddLight(self, *args)

    def AddLightWithShadow(self, *args):
        r"""AddLightWithShadow(ChVisualSystemIrrlicht self, chrono::ChVector< > const & pos, chrono::ChVector< > const & aim, double radius, double near_value, double far_value, double angle, unsigned int resolution=512, ChColor color=chrono::ChColor(1, 1, 1), bool directional=False, bool clipborder=True) -> irr::scene::ILightSceneNode"""
        return _irrlicht.ChVisualSystemIrrlicht_AddLightWithShadow(self, *args)

    def AddTypicalLights(self):
        r"""AddTypicalLights(ChVisualSystemIrrlicht self)"""
        return _irrlicht.ChVisualSystemIrrlicht_AddTypicalLights(self)

    def AddUserEventReceiver(self, receiver):
        r"""AddUserEventReceiver(ChVisualSystemIrrlicht self, irr::IEventReceiver * receiver)"""
        return _irrlicht.ChVisualSystemIrrlicht_AddUserEventReceiver(self, receiver)

    def EnableShadows(self, item=0):
        r"""EnableShadows(ChVisualSystemIrrlicht self, std::shared_ptr< chrono::ChPhysicsItem > item=0)"""
        return _irrlicht.ChVisualSystemIrrlicht_EnableShadows(self, item)

    def EnableContactDrawing(self, mode):
        r"""EnableContactDrawing(ChVisualSystemIrrlicht self, chrono::irrlicht::ContactsDrawMode mode)"""
        return _irrlicht.ChVisualSystemIrrlicht_EnableContactDrawing(self, mode)

    def EnableLinkDrawing(self, mode):
        r"""EnableLinkDrawing(ChVisualSystemIrrlicht self, chrono::irrlicht::LinkDrawMode mode)"""
        return _irrlicht.ChVisualSystemIrrlicht_EnableLinkDrawing(self, mode)

    def EnableBodyFrameDrawing(self, val):
        r"""EnableBodyFrameDrawing(ChVisualSystemIrrlicht self, bool val)"""
        return _irrlicht.ChVisualSystemIrrlicht_EnableBodyFrameDrawing(self, val)

    def EnableLinkFrameDrawing(self, val):
        r"""EnableLinkFrameDrawing(ChVisualSystemIrrlicht self, bool val)"""
        return _irrlicht.ChVisualSystemIrrlicht_EnableLinkFrameDrawing(self, val)

    def EnableCollisionShapeDrawing(self, val):
        r"""EnableCollisionShapeDrawing(ChVisualSystemIrrlicht self, bool val)"""
        return _irrlicht.ChVisualSystemIrrlicht_EnableCollisionShapeDrawing(self, val)

    def EnableModalAnalysis(self, val):
        r"""EnableModalAnalysis(ChVisualSystemIrrlicht self, bool val)"""
        return _irrlicht.ChVisualSystemIrrlicht_EnableModalAnalysis(self, val)

    def SetModalModeNumber(self, val):
        r"""SetModalModeNumber(ChVisualSystemIrrlicht self, int val)"""
        return _irrlicht.ChVisualSystemIrrlicht_SetModalModeNumber(self, val)

    def SetModalAmplitude(self, val):
        r"""SetModalAmplitude(ChVisualSystemIrrlicht self, double val)"""
        return _irrlicht.ChVisualSystemIrrlicht_SetModalAmplitude(self, val)

    def SetModalSpeed(self, val):
        r"""SetModalSpeed(ChVisualSystemIrrlicht self, double val)"""
        return _irrlicht.ChVisualSystemIrrlicht_SetModalSpeed(self, val)

    def SetModalModesMax(self, maxModes):
        r"""SetModalModesMax(ChVisualSystemIrrlicht self, int maxModes)"""
        return _irrlicht.ChVisualSystemIrrlicht_SetModalModesMax(self, maxModes)

    def ShowProfiler(self, val):
        r"""ShowProfiler(ChVisualSystemIrrlicht self, bool val)"""
        return _irrlicht.ChVisualSystemIrrlicht_ShowProfiler(self, val)

    def ShowExplorer(self, val):
        r"""ShowExplorer(ChVisualSystemIrrlicht self, bool val)"""
        return _irrlicht.ChVisualSystemIrrlicht_ShowExplorer(self, val)

    def ShowInfoPanel(self, val):
        r"""ShowInfoPanel(ChVisualSystemIrrlicht self, bool val)"""
        return _irrlicht.ChVisualSystemIrrlicht_ShowInfoPanel(self, val)

    def SetInfoTab(self, ntab):
        r"""SetInfoTab(ChVisualSystemIrrlicht self, int ntab)"""
        return _irrlicht.ChVisualSystemIrrlicht_SetInfoTab(self, ntab)

    def GetDevice(self):
        r"""GetDevice(ChVisualSystemIrrlicht self) -> IrrlichtDevice"""
        return _irrlicht.ChVisualSystemIrrlicht_GetDevice(self)

    def GetVideoDriver(self):
        r"""GetVideoDriver(ChVisualSystemIrrlicht self) -> IVideoDriver"""
        return _irrlicht.ChVisualSystemIrrlicht_GetVideoDriver(self)

    def GetSceneManager(self):
        r"""GetSceneManager(ChVisualSystemIrrlicht self) -> ISceneManager"""
        return _irrlicht.ChVisualSystemIrrlicht_GetSceneManager(self)

    def GetActiveCamera(self):
        r"""GetActiveCamera(ChVisualSystemIrrlicht self) -> ICameraSceneNode"""
        return _irrlicht.ChVisualSystemIrrlicht_GetActiveCamera(self)

    def GetGUIEnvironment(self):
        r"""GetGUIEnvironment(ChVisualSystemIrrlicht self) -> IGUIEnvironment"""
        return _irrlicht.ChVisualSystemIrrlicht_GetGUIEnvironment(self)

    def BindAll(self):
        r"""BindAll(ChVisualSystemIrrlicht self)"""
        return _irrlicht.ChVisualSystemIrrlicht_BindAll(self)

    def BindItem(self, item):
        r"""BindItem(ChVisualSystemIrrlicht self, std::shared_ptr< chrono::ChPhysicsItem > item)"""
        return _irrlicht.ChVisualSystemIrrlicht_BindItem(self, item)

    def AddVisualModel(self, *args):
        r"""
        AddVisualModel(ChVisualSystemIrrlicht self, std::shared_ptr< ChVisualModel > model, ChFrame< > const & frame) -> int
        AddVisualModel(ChVisualSystemIrrlicht self, std::shared_ptr< ChVisualShape > shape, ChFrame< > const & frame) -> int
        """
        return _irrlicht.ChVisualSystemIrrlicht_AddVisualModel(self, *args)

    def UpdateVisualModel(self, id, frame):
        r"""UpdateVisualModel(ChVisualSystemIrrlicht self, int id, ChFrame< > const & frame)"""
        return _irrlicht.ChVisualSystemIrrlicht_UpdateVisualModel(self, id, frame)

    def Run(self):
        r"""Run(ChVisualSystemIrrlicht self) -> bool"""
        return _irrlicht.ChVisualSystemIrrlicht_Run(self)

    def Quit(self):
        r"""Quit(ChVisualSystemIrrlicht self)"""
        return _irrlicht.ChVisualSystemIrrlicht_Quit(self)

    def BeginScene(self, *args):
        r"""
        BeginScene(ChVisualSystemIrrlicht self)
        BeginScene(ChVisualSystemIrrlicht self, bool backBuffer, bool zBuffer, ChColor color)
        """
        return _irrlicht.ChVisualSystemIrrlicht_BeginScene(self, *args)

    def Render(self):
        r"""Render(ChVisualSystemIrrlicht self)"""
        return _irrlicht.ChVisualSystemIrrlicht_Render(self)

    def RenderGrid(self, frame, num_divs, delta):
        r"""RenderGrid(ChVisualSystemIrrlicht self, ChFrame< > const & frame, int num_divs, double delta)"""
        return _irrlicht.ChVisualSystemIrrlicht_RenderGrid(self, frame, num_divs, delta)

    def RenderFrame(self, frame, axis_length=1):
        r"""RenderFrame(ChVisualSystemIrrlicht self, ChFrame< > const & frame, double axis_length=1)"""
        return _irrlicht.ChVisualSystemIrrlicht_RenderFrame(self, frame, axis_length)

    def RenderCOGFrames(self, axis_length=1):
        r"""RenderCOGFrames(ChVisualSystemIrrlicht self, double axis_length=1)"""
        return _irrlicht.ChVisualSystemIrrlicht_RenderCOGFrames(self, axis_length)

    def EndScene(self):
        r"""EndScene(ChVisualSystemIrrlicht self)"""
        return _irrlicht.ChVisualSystemIrrlicht_EndScene(self)

    def GetMonospaceFont(self):
        r"""GetMonospaceFont(ChVisualSystemIrrlicht self) -> irr::gui::IGUIFont *"""
        return _irrlicht.ChVisualSystemIrrlicht_GetMonospaceFont(self)

    def WriteImageToFile(self, filename):
        r"""WriteImageToFile(ChVisualSystemIrrlicht self, std::string const & filename)"""
        return _irrlicht.ChVisualSystemIrrlicht_WriteImageToFile(self, filename)

    def GetUtilityFlag(self):
        r"""GetUtilityFlag(ChVisualSystemIrrlicht self) -> bool"""
        return _irrlicht.ChVisualSystemIrrlicht_GetUtilityFlag(self)

    def SetUtilityFlag(self, flag):
        r"""SetUtilityFlag(ChVisualSystemIrrlicht self, bool flag)"""
        return _irrlicht.ChVisualSystemIrrlicht_SetUtilityFlag(self, flag)

# Register ChVisualSystemIrrlicht in _irrlicht:
_irrlicht.ChVisualSystemIrrlicht_swigregister(ChVisualSystemIrrlicht)


def CastToChVisualSystemIrrlicht(in_obj):
    r"""CastToChVisualSystemIrrlicht(std::shared_ptr< chrono::ChVisualSystem > in_obj) -> std::shared_ptr< chrono::irrlicht::ChVisualSystemIrrlicht >"""
    return _irrlicht.CastToChVisualSystemIrrlicht(in_obj)


